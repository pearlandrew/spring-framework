{
  final Set<Method> handlerMethods=new LinkedHashSet<Method>();
  Set<Class<?>> handlerTypes=new LinkedHashSet<Class<?>>();
  Class<?> specificHandlerType=null;
  if (!Proxy.isProxyClass(handlerType)) {
    handlerTypes.add(handlerType);
    specificHandlerType=handlerType;
  }
  handlerTypes.addAll(Arrays.asList(handlerType.getInterfaces()));
  for (  Class<?> currentHandlerType : handlerTypes) {
    final Class<?> targetClass=(specificHandlerType != null ? specificHandlerType : currentHandlerType);
    ReflectionUtils.doWithMethods(currentHandlerType,new ReflectionUtils.MethodCallback(){
      public void doWith(      Method method){
        Method specificMethod=ClassUtils.getMostSpecificMethod(method,targetClass);
        Method bridgedMethod=BridgeMethodResolver.findBridgedMethod(specificMethod);
        if (handlerMethodFilter.matches(specificMethod) && (bridgedMethod == specificMethod || !handlerMethodFilter.matches(bridgedMethod))) {
          handlerMethods.add(specificMethod);
        }
      }
    }
,ReflectionUtils.USER_DECLARED_METHODS);
  }
  return handlerMethods;
}
