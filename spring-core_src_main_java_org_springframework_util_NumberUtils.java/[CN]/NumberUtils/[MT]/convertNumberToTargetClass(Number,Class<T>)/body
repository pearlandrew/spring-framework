{
  Assert.notNull(number,"Number must not be null");
  Assert.notNull(targetClass,"Target class must not be null");
  if (targetClass.isInstance(number)) {
    return (T)number;
  }
 else   if (Byte.class == targetClass) {
    long value=number.longValue();
    if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) {
      raiseOverflowException(number,targetClass);
    }
    return (T)Byte.valueOf(number.byteValue());
  }
 else   if (Short.class == targetClass) {
    long value=number.longValue();
    if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {
      raiseOverflowException(number,targetClass);
    }
    return (T)Short.valueOf(number.shortValue());
  }
 else   if (Integer.class == targetClass) {
    long value=number.longValue();
    if (value < Integer.MIN_VALUE || value > Integer.MAX_VALUE) {
      raiseOverflowException(number,targetClass);
    }
    return (T)Integer.valueOf(number.intValue());
  }
 else   if (Long.class == targetClass) {
    BigInteger bigInt=null;
    if (number instanceof BigInteger) {
      bigInt=(BigInteger)number;
    }
 else     if (number instanceof BigDecimal) {
      bigInt=((BigDecimal)number).toBigInteger();
    }
    if (bigInt != null && (bigInt.compareTo(LONG_MIN) < 0 || bigInt.compareTo(LONG_MAX) > 0)) {
      raiseOverflowException(number,targetClass);
    }
    return (T)Long.valueOf(number.longValue());
  }
 else   if (BigInteger.class == targetClass) {
    if (number instanceof BigDecimal) {
      return (T)((BigDecimal)number).toBigInteger();
    }
 else {
      return (T)BigInteger.valueOf(number.longValue());
    }
  }
 else   if (Float.class == targetClass) {
    return (T)Float.valueOf(number.floatValue());
  }
 else   if (Double.class == targetClass) {
    return (T)Double.valueOf(number.doubleValue());
  }
 else   if (BigDecimal.class == targetClass) {
    return (T)new BigDecimal(number.toString());
  }
 else {
    throw new IllegalArgumentException("Could not convert number [" + number + "] of type ["+ number.getClass().getName()+ "] to unsupported target class ["+ targetClass.getName()+ "]");
  }
}
