{
  UserTransaction ut=mock(UserTransaction.class);
  TransactionManager tm=mock(TransactionManager.class);
  if (defaultUt) {
    given(ut.getStatus()).willReturn(Status.STATUS_NO_TRANSACTION,Status.STATUS_ACTIVE,Status.STATUS_ACTIVE);
  }
 else {
    given(tm.getStatus()).willReturn(Status.STATUS_NO_TRANSACTION,Status.STATUS_ACTIVE,Status.STATUS_ACTIVE);
  }
  JtaTransactionManager ptm=new JtaTransactionManager();
  ExpectedLookupTemplate jndiTemplate=new ExpectedLookupTemplate();
  if (defaultUt) {
    jndiTemplate.addObject("java:comp/UserTransaction",ut);
  }
  jndiTemplate.addObject(tmName,tm);
  ptm.setJndiTemplate(jndiTemplate);
  ptm.afterPropertiesSet();
  if (tmFound) {
    assertEquals(tm,ptm.getTransactionManager());
  }
 else {
    assertNull(ptm.getTransactionManager());
  }
  if (defaultUt) {
    assertEquals(ut,ptm.getUserTransaction());
  }
 else {
    assertTrue(ptm.getUserTransaction() instanceof UserTransactionAdapter);
    UserTransactionAdapter uta=(UserTransactionAdapter)ptm.getUserTransaction();
    assertEquals(tm,uta.getTransactionManager());
  }
  TransactionTemplate tt=new TransactionTemplate(ptm);
  assertTrue(!TransactionSynchronizationManager.isSynchronizationActive());
  assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
  tt.execute(new TransactionCallbackWithoutResult(){
    @Override protected void doInTransactionWithoutResult(    TransactionStatus status){
      assertTrue(TransactionSynchronizationManager.isSynchronizationActive());
      assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
    }
  }
);
  assertTrue(!TransactionSynchronizationManager.isSynchronizationActive());
  assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
  if (defaultUt) {
    verify(ut).begin();
    verify(ut).commit();
  }
 else {
    verify(tm).begin();
    verify(tm).commit();
  }
}
