{
  try {
    if (status.isNewTransaction()) {
      if (status.isDebug()) {
        logger.debug("Initiating transaction rollback after commit exception",ex);
      }
      doRollback(status);
    }
 else     if (status.hasTransaction() && isGlobalRollbackOnParticipationFailure()) {
      if (status.isDebug()) {
        logger.debug("Marking existing transaction as rollback-only after commit exception",ex);
      }
      doSetRollbackOnly(status);
    }
  }
 catch (  RuntimeException rbex) {
    logger.error("Commit exception overridden by rollback exception",ex);
    triggerAfterCompletion(status,TransactionSynchronization.STATUS_UNKNOWN);
    throw rbex;
  }
catch (  Error rberr) {
    logger.error("Commit exception overridden by rollback exception",ex);
    triggerAfterCompletion(status,TransactionSynchronization.STATUS_UNKNOWN);
    throw rberr;
  }
  triggerAfterCompletion(status,TransactionSynchronization.STATUS_ROLLED_BACK);
}
