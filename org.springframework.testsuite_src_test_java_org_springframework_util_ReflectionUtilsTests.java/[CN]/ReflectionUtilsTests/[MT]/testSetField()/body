{
  final TestBeanSubclassWithNewField testBean=new TestBeanSubclassWithNewField();
  final Field field=ReflectionUtils.findField(TestBeanSubclassWithNewField.class,"name",String.class);
  new AssertThrows(IllegalStateException.class,"Calling setField() with on a private field without making it accessible should throw an IllegalStateException."){
    public void test() throws Exception {
      ReflectionUtils.setField(field,testBean,"FooBar");
    }
  }
.runTest();
  ReflectionUtils.makeAccessible(field);
  ReflectionUtils.setField(field,testBean,"FooBar");
  assertNotNull(testBean.getName());
  assertEquals("FooBar",testBean.getName());
  ReflectionUtils.setField(field,testBean,null);
  assertNull(testBean.getName());
}
