{
  try {
    if (logger.isTraceEnabled()) {
      logger.trace("Getting BeanInfo for class [" + beanClass.getName() + "]");
    }
    BeanInfo beanInfo=null;
    for (    BeanInfoFactory beanInfoFactory : beanInfoFactories) {
      beanInfo=beanInfoFactory.getBeanInfo(beanClass);
      if (beanInfo != null) {
        break;
      }
    }
    if (beanInfo == null) {
      beanInfo=(shouldIntrospectorIgnoreBeaninfoClasses ? Introspector.getBeanInfo(beanClass,Introspector.IGNORE_ALL_BEANINFO) : Introspector.getBeanInfo(beanClass));
    }
    this.beanInfo=beanInfo;
    if (logger.isTraceEnabled()) {
      logger.trace("Caching PropertyDescriptors for class [" + beanClass.getName() + "]");
    }
    this.propertyDescriptorCache=new LinkedHashMap<>();
    PropertyDescriptor[] pds=this.beanInfo.getPropertyDescriptors();
    for (    PropertyDescriptor pd : pds) {
      if (Class.class == beanClass && ("classLoader".equals(pd.getName()) || "protectionDomain".equals(pd.getName()))) {
        continue;
      }
      if (logger.isTraceEnabled()) {
        logger.trace("Found bean property '" + pd.getName() + "'"+ (pd.getPropertyType() != null ? " of type [" + pd.getPropertyType().getName() + "]" : "")+ (pd.getPropertyEditorClass() != null ? "; editor [" + pd.getPropertyEditorClass().getName() + "]" : ""));
      }
      pd=buildGenericTypeAwarePropertyDescriptor(beanClass,pd);
      this.propertyDescriptorCache.put(pd.getName(),pd);
    }
    Class<?> clazz=beanClass;
    while (clazz != null) {
      Class<?>[] ifcs=clazz.getInterfaces();
      for (      Class<?> ifc : ifcs) {
        BeanInfo ifcInfo=Introspector.getBeanInfo(ifc,Introspector.IGNORE_ALL_BEANINFO);
        PropertyDescriptor[] ifcPds=ifcInfo.getPropertyDescriptors();
        for (        PropertyDescriptor pd : ifcPds) {
          if (!this.propertyDescriptorCache.containsKey(pd.getName())) {
            pd=buildGenericTypeAwarePropertyDescriptor(beanClass,pd);
            this.propertyDescriptorCache.put(pd.getName(),pd);
          }
        }
      }
      clazz=clazz.getSuperclass();
    }
    this.typeDescriptorCache=new ConcurrentReferenceHashMap<>();
  }
 catch (  IntrospectionException ex) {
    throw new FatalBeanException("Failed to obtain BeanInfo for class [" + beanClass.getName() + "]",ex);
  }
}
