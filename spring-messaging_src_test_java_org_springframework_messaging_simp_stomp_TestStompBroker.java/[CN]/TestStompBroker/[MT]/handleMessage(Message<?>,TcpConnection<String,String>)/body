{
  StompHeaderAccessor headers=StompHeaderAccessor.wrap(message);
  if (headers.getCommand() == StompCommand.CONNECT) {
    StompHeaderAccessor responseHeaders=StompHeaderAccessor.create(StompCommand.CONNECTED);
    MessageBuilder<byte[]> response=MessageBuilder.withPayloadAndHeaders(new byte[0],responseHeaders);
    connection.send(new String(messageConverter.fromMessage(response.build())));
  }
 else   if (headers.getCommand() == StompCommand.SUBSCRIBE) {
    String destination=headers.getDestination();
synchronized (this.subscriberMonitor) {
      Set<Subscription> subscribers=this.subscribers.get(destination);
      if (subscribers == null) {
        subscribers=new HashSet<Subscription>();
        this.subscribers.put(destination,subscribers);
      }
      String subscriptionId=headers.getFirstNativeHeader(StompHeaderAccessor.STOMP_ID_HEADER);
      subscribers.add(new Subscription(subscriptionId,connection));
    }
  }
 else   if (headers.getCommand() == StompCommand.SEND) {
    String destination=headers.getDestination();
synchronized (this.subscriberMonitor) {
      Set<Subscription> subscriptions=this.subscribers.get(destination);
      if (subscriptions != null) {
        for (        Subscription subscription : subscriptions) {
          StompHeaderAccessor outboundHeaders=StompHeaderAccessor.create(StompCommand.MESSAGE);
          outboundHeaders.setSubscriptionId(subscription.subscriptionId);
          outboundHeaders.setMessageId(Long.toString(messageIdCounter.incrementAndGet()));
          Message<?> outbound=MessageBuilder.withPayloadAndHeaders(message.getPayload(),outboundHeaders).build();
          subscription.tcpConnection.send(new String(this.messageConverter.fromMessage(outbound)));
        }
      }
    }
  }
  addMessage(message);
}
