{
  if (this.basePackages.isEmpty()) {
    problems.error("At least one base package must be specified");
  }
  if (this.beanNameGenerator instanceof String) {
    this.beanNameGenerator=instantiateUserDefinedType("bean name generator",BeanNameGenerator.class,this.beanNameGenerator,this.classLoader,problems);
  }
  if (this.scopeMetadataResolver instanceof String) {
    this.scopeMetadataResolver=instantiateUserDefinedType("scope metadata resolver",ScopeMetadataResolver.class,this.scopeMetadataResolver,this.classLoader,problems);
  }
  if (this.scopedProxyMode instanceof String) {
    if ("targetClass".equalsIgnoreCase((String)this.scopedProxyMode)) {
      this.scopedProxyMode=ScopedProxyMode.TARGET_CLASS;
    }
 else     if ("interfaces".equalsIgnoreCase((String)this.scopedProxyMode)) {
      this.scopedProxyMode=ScopedProxyMode.INTERFACES;
    }
 else     if ("no".equalsIgnoreCase((String)this.scopedProxyMode)) {
      this.scopedProxyMode=ScopedProxyMode.NO;
    }
 else {
      problems.error("invalid scoped proxy mode [%s] supported modes are " + "'no', 'interfaces' and 'targetClass'");
      this.scopedProxyMode=null;
    }
  }
  if (this.scopeMetadataResolver != null && this.scopedProxyMode != null) {
    problems.error("Cannot define both scope metadata resolver and scoped proxy mode");
  }
  for (int i=0; i < this.includeFilters.size(); i++) {
    if (this.includeFilters.get(i) instanceof FilterTypeDescriptor) {
      this.includeFilters.set(i,((FilterTypeDescriptor)this.includeFilters.get(i)).createTypeFilter(problems));
    }
  }
  for (int i=0; i < this.excludeFilters.size(); i++) {
    if (this.excludeFilters.get(i) instanceof FilterTypeDescriptor) {
      this.excludeFilters.set(i,((FilterTypeDescriptor)this.excludeFilters.get(i)).createTypeFilter(problems));
    }
  }
}
