{
  return Publishers.flatMap(inputStream,new Function<ByteBuffer,Publisher<? extends ByteBuffer>>(){
    int openBraces;
    int index;
    int state;
    boolean insideString;
    ByteBuf input;
    Integer writerIndex;
    @Override public Publisher<? extends ByteBuffer> apply(    ByteBuffer b){
      List<ByteBuffer> chunks=new ArrayList<>();
      if (this.input == null) {
        this.input=Unpooled.copiedBuffer(b);
        this.writerIndex=this.input.writerIndex();
      }
 else {
        this.input=Unpooled.copiedBuffer(this.input,Unpooled.copiedBuffer(b));
        this.writerIndex=this.input.writerIndex();
      }
      if (this.state == ST_CORRUPTED) {
        this.input.skipBytes(this.input.readableBytes());
        return Publishers.error(new IllegalStateException("Corrupted stream"));
      }
      if (this.writerIndex > maxObjectLength) {
        this.input.skipBytes(this.input.readableBytes());
        reset();
        return Publishers.error(new IllegalStateException("object length exceeds " + maxObjectLength + ": "+ this.writerIndex+ " bytes discarded"));
      }
      for (; this.index < this.writerIndex; this.index++) {
        byte c=this.input.getByte(this.index);
        if (this.state == ST_DECODING_NORMAL) {
          decodeByte(c,this.input,this.index);
          if (this.openBraces == 0) {
            ByteBuf json=extractObject(this.input,this.input.readerIndex(),this.index + 1 - this.input.readerIndex());
            if (json != null) {
              chunks.add(json.nioBuffer());
            }
            this.input.readerIndex(this.index + 1);
            reset();
          }
        }
 else         if (this.state == ST_DECODING_ARRAY_STREAM) {
          decodeByte(c,this.input,this.index);
          if (!this.insideString && (this.openBraces == 1 && c == ',' || this.openBraces == 0 && c == ']')) {
            for (int i=this.input.readerIndex(); Character.isWhitespace(this.input.getByte(i)); i++) {
              this.input.skipBytes(1);
            }
            int idxNoSpaces=this.index - 1;
            while (idxNoSpaces >= this.input.readerIndex() && Character.isWhitespace(this.input.getByte(idxNoSpaces))) {
              idxNoSpaces--;
            }
            ByteBuf json=extractObject(this.input,this.input.readerIndex(),idxNoSpaces + 1 - this.input.readerIndex());
            if (json != null) {
              chunks.add(json.nioBuffer());
            }
            this.input.readerIndex(this.index + 1);
            if (c == ']') {
              reset();
            }
          }
        }
 else         if (c == '{' || c == '[') {
          initDecoding(c,streamArrayElements);
          if (this.state == ST_DECODING_ARRAY_STREAM) {
            this.input.skipBytes(1);
          }
        }
 else         if (Character.isWhitespace(c)) {
          this.input.skipBytes(1);
        }
 else {
          this.state=ST_CORRUPTED;
          return Publishers.error(new IllegalStateException("invalid JSON received at byte position " + this.index + ": "+ ByteBufUtil.hexDump(this.input)));
        }
      }
      if (this.input.readableBytes() == 0) {
        this.index=0;
      }
      return Publishers.from(chunks);
    }
    /** 
 * Override this method if you want to filter the json objects/arrays that
 * get passed through the pipeline.
 */
    @SuppressWarnings("UnusedParameters") protected ByteBuf extractObject(    ByteBuf buffer,    int index,    int length){
      return buffer.slice(index,length).retain();
    }
    private void decodeByte(    byte c,    ByteBuf input,    int index){
      if ((c == '{' || c == '[') && !this.insideString) {
        this.openBraces++;
      }
 else       if ((c == '}' || c == ']') && !this.insideString) {
        this.openBraces--;
      }
 else       if (c == '"') {
        if (!this.insideString) {
          this.insideString=true;
        }
 else         if (input.getByte(index - 1) != '\\') {
          this.insideString=false;
        }
      }
    }
    private void initDecoding(    byte openingBrace,    boolean streamArrayElements){
      this.openBraces=1;
      if (openingBrace == '[' && streamArrayElements) {
        this.state=ST_DECODING_ARRAY_STREAM;
      }
 else {
        this.state=ST_DECODING_NORMAL;
      }
    }
    private void reset(){
      this.insideString=false;
      this.state=ST_INIT;
      this.openBraces=0;
    }
  }
);
}
