{
  Assert.notNull(requiredType,"Required type must not be null");
  String[] candidateNames=getBeanNamesForType(requiredType);
  if (candidateNames.length > 1) {
    ArrayList<String> autowireCandidates=new ArrayList<>();
    for (    String beanName : candidateNames) {
      if (!containsBeanDefinition(beanName) || getBeanDefinition(beanName).isAutowireCandidate()) {
        autowireCandidates.add(beanName);
      }
    }
    if (!autowireCandidates.isEmpty()) {
      candidateNames=autowireCandidates.toArray(new String[autowireCandidates.size()]);
    }
  }
  if (candidateNames.length == 1) {
    String beanName=candidateNames[0];
    return new NamedBeanHolder<>(beanName,getBean(beanName,requiredType,args));
  }
 else   if (candidateNames.length > 1) {
    Map<String,Object> candidates=new LinkedHashMap<>(candidateNames.length);
    for (    String candidateName : candidateNames) {
      if (containsSingleton(candidateName)) {
        candidates.put(candidateName,getBean(candidateName,requiredType,args));
      }
 else {
        candidates.put(candidateName,getType(candidateName));
      }
    }
    String candidateName=determinePrimaryCandidate(candidates,requiredType);
    if (candidateName == null) {
      candidateName=determineHighestPriorityCandidate(candidates,requiredType);
    }
    if (candidateName != null) {
      Object beanInstance=candidates.get(candidateName);
      if (beanInstance instanceof Class) {
        beanInstance=getBean(candidateName,requiredType,args);
      }
      return new NamedBeanHolder<>(candidateName,(T)beanInstance);
    }
    throw new NoUniqueBeanDefinitionException(requiredType,candidates.keySet());
  }
  return null;
}
