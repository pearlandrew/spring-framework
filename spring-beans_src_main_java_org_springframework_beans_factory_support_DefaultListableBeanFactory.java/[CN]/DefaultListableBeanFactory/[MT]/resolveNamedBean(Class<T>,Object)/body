{
  Assert.notNull(requiredType,"Required type must not be null");
  String[] beanNames=getBeanNamesForType(requiredType);
  if (beanNames.length > 1) {
    ArrayList<String> autowireCandidates=new ArrayList<>();
    for (    String beanName : beanNames) {
      if (!containsBeanDefinition(beanName) || getBeanDefinition(beanName).isAutowireCandidate()) {
        autowireCandidates.add(beanName);
      }
    }
    if (!autowireCandidates.isEmpty()) {
      beanNames=autowireCandidates.toArray(new String[autowireCandidates.size()]);
    }
  }
  if (beanNames.length == 1) {
    String beanName=beanNames[0];
    return new NamedBeanHolder<>(beanName,getBean(beanName,requiredType,args));
  }
 else   if (beanNames.length > 1) {
    Map<String,Object> candidates=new LinkedHashMap<>();
    for (    String beanName : beanNames) {
      candidates.put(beanName,getBean(beanName,requiredType,args));
    }
    String primaryCandidate=determinePrimaryCandidate(candidates,requiredType);
    if (primaryCandidate != null) {
      return new NamedBeanHolder<>(primaryCandidate,getBean(primaryCandidate,requiredType,args));
    }
    String priorityCandidate=determineHighestPriorityCandidate(candidates,requiredType);
    if (priorityCandidate != null) {
      return new NamedBeanHolder<>(priorityCandidate,getBean(priorityCandidate,requiredType,args));
    }
    throw new NoUniqueBeanDefinitionException(requiredType,candidates.keySet());
  }
  return null;
}
