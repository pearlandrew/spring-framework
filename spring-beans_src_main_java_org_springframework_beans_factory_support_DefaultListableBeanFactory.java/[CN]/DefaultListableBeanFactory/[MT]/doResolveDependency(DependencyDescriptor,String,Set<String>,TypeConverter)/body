{
  InjectionPoint previousInjectionPoint=ConstructorResolver.setCurrentInjectionPoint(descriptor);
  try {
    Object shortcut=descriptor.resolveShortcut(this);
    if (shortcut != null) {
      return shortcut;
    }
    Class<?> type=descriptor.getDependencyType();
    Object value=getAutowireCandidateResolver().getSuggestedValue(descriptor);
    if (value != null) {
      if (value instanceof String) {
        String strVal=resolveEmbeddedValue((String)value);
        BeanDefinition bd=(beanName != null && containsBean(beanName) ? getMergedBeanDefinition(beanName) : null);
        value=evaluateBeanDefinitionString(strVal,bd);
      }
      TypeConverter converter=(typeConverter != null ? typeConverter : getTypeConverter());
      return (descriptor.getField() != null ? converter.convertIfNecessary(value,type,descriptor.getField()) : converter.convertIfNecessary(value,type,descriptor.getMethodParameter()));
    }
    Object multipleBeans=resolveMultipleBeans(descriptor,beanName,autowiredBeanNames,typeConverter);
    if (multipleBeans != null) {
      return multipleBeans;
    }
    Map<String,Object> matchingBeans=findAutowireCandidates(beanName,type,descriptor);
    if (matchingBeans.isEmpty()) {
      if (descriptor.isRequired()) {
        raiseNoMatchingBeanFound(type,descriptor.getResolvableType().toString(),descriptor);
      }
      return null;
    }
    if (matchingBeans.size() > 1) {
      String primaryBeanName=determineAutowireCandidate(matchingBeans,descriptor);
      if (primaryBeanName == null) {
        if (descriptor.isRequired() || !indicatesMultipleBeans(type)) {
          return descriptor.resolveNotUnique(type,matchingBeans);
        }
 else {
          return null;
        }
      }
      if (autowiredBeanNames != null) {
        autowiredBeanNames.add(primaryBeanName);
      }
      return matchingBeans.get(primaryBeanName);
    }
    Map.Entry<String,Object> entry=matchingBeans.entrySet().iterator().next();
    if (autowiredBeanNames != null) {
      autowiredBeanNames.add(entry.getKey());
    }
    return entry.getValue();
  }
  finally {
    ConstructorResolver.setCurrentInjectionPoint(previousInjectionPoint);
  }
}
