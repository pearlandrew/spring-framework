{
  TestBean target=new TestBean("myname",99);
  final HttpInvokerServiceExporter exporter=new HttpInvokerServiceExporter();
  exporter.setServiceInterface(ITestBean.class);
  exporter.setService(target);
  exporter.setRemoteInvocationExecutor(new DefaultRemoteInvocationExecutor(){
    @Override public Object invoke(    RemoteInvocation invocation,    Object targetObject) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
      assertNotNull(invocation.getAttributes());
      assertEquals(1,invocation.getAttributes().size());
      assertEquals("myValue",invocation.getAttributes().get("myKey"));
      assertEquals("myValue",invocation.getAttribute("myKey"));
      return super.invoke(invocation,targetObject);
    }
  }
);
  exporter.afterPropertiesSet();
  HttpInvokerProxyFactoryBean pfb=new HttpInvokerProxyFactoryBean();
  pfb.setServiceInterface(ITestBean.class);
  pfb.setServiceUrl("http://myurl");
  pfb.setRemoteInvocationFactory(new RemoteInvocationFactory(){
    @Override public RemoteInvocation createRemoteInvocation(    MethodInvocation methodInvocation){
      RemoteInvocation invocation=new RemoteInvocation(methodInvocation);
      invocation.addAttribute("myKey","myValue");
      try {
        invocation.addAttribute("myKey","myValue");
        fail("Should have thrown IllegalStateException");
      }
 catch (      IllegalStateException ex) {
      }
      assertNotNull(invocation.getAttributes());
      assertEquals(1,invocation.getAttributes().size());
      assertEquals("myValue",invocation.getAttributes().get("myKey"));
      assertEquals("myValue",invocation.getAttribute("myKey"));
      return invocation;
    }
  }
);
  pfb.setHttpInvokerRequestExecutor(new AbstractHttpInvokerRequestExecutor(){
    @Override protected RemoteInvocationResult doExecuteRequest(    HttpInvokerClientConfiguration config,    ByteArrayOutputStream baos) throws Exception {
      assertEquals("http://myurl",config.getServiceUrl());
      MockHttpServletRequest request=new MockHttpServletRequest();
      MockHttpServletResponse response=new MockHttpServletResponse();
      request.setContent(baos.toByteArray());
      exporter.handleRequest(request,response);
      return readRemoteInvocationResult(new ByteArrayInputStream(response.getContentAsByteArray()),config.getCodebaseUrl());
    }
  }
);
  pfb.afterPropertiesSet();
  ITestBean proxy=(ITestBean)pfb.getObject();
  assertEquals("myname",proxy.getName());
  assertEquals(99,proxy.getAge());
}
