{
  @SuppressWarnings({"rawtypes","unchecked"}) Configuration<?> configuration=(this.providerClass != null ? Validation.byProvider(this.providerClass).configure() : Validation.byDefaultProvider().configure());
  MessageInterpolator targetInterpolator=this.messageInterpolator;
  if (targetInterpolator == null) {
    targetInterpolator=configuration.getDefaultMessageInterpolator();
  }
  configuration.messageInterpolator(new LocaleContextMessageInterpolator(targetInterpolator));
  if (this.traversableResolver != null) {
    configuration.traversableResolver(this.traversableResolver);
  }
  ConstraintValidatorFactory targetConstraintValidatorFactory=this.constraintValidatorFactory;
  if (targetConstraintValidatorFactory == null && this.applicationContext != null) {
    targetConstraintValidatorFactory=new SpringConstraintValidatorFactory(this.applicationContext.getAutowireCapableBeanFactory());
  }
  if (targetConstraintValidatorFactory != null) {
    configuration.constraintValidatorFactory(targetConstraintValidatorFactory);
  }
  if (this.parameterNameDiscoverer != null) {
    configureParameterNameProviderIfPossible(configuration);
  }
  if (this.mappingLocations != null) {
    for (    Resource location : this.mappingLocations) {
      try {
        configuration.addMapping(location.getInputStream());
      }
 catch (      IOException ex) {
        throw new IllegalStateException("Cannot read mapping resource: " + location);
      }
    }
  }
  for (  Map.Entry<String,String> entry : this.validationPropertyMap.entrySet()) {
    configuration.addProperty(entry.getKey(),entry.getValue());
  }
  postProcessConfiguration(configuration);
  this.validatorFactory=configuration.buildValidatorFactory();
  setTargetValidator(this.validatorFactory.getValidator());
}
