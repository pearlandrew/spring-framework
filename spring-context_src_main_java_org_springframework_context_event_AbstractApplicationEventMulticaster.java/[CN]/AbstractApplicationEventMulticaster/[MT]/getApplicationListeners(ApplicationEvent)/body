{
  Class<? extends ApplicationEvent> eventType=event.getClass();
  Object source=event.getSource();
  Class<?> sourceType=(source != null ? source.getClass() : null);
  ListenerCacheKey cacheKey=new ListenerCacheKey(eventType,sourceType);
  ListenerRetriever retriever=this.retrieverCache.get(cacheKey);
  if (retriever != null) {
    return retriever.getApplicationListeners();
  }
 else {
    retriever=new ListenerRetriever(true);
    LinkedList<ApplicationListener<?>> allListeners=new LinkedList<ApplicationListener<?>>();
    Set<ApplicationListener<?>> listeners;
    Set<String> listenerBeans;
synchronized (this.defaultRetriever) {
      listeners=new LinkedHashSet<ApplicationListener<?>>(this.defaultRetriever.applicationListeners);
      listenerBeans=new LinkedHashSet<String>(this.defaultRetriever.applicationListenerBeans);
    }
    for (    ApplicationListener<?> listener : listeners) {
      if (supportsEvent(listener,eventType,sourceType)) {
        retriever.applicationListeners.add(listener);
        allListeners.add(listener);
      }
    }
    if (!listenerBeans.isEmpty()) {
      BeanFactory beanFactory=getBeanFactory();
      for (      String listenerBeanName : listenerBeans) {
        try {
          ApplicationListener<?> listener=beanFactory.getBean(listenerBeanName,ApplicationListener.class);
          if (!allListeners.contains(listener) && supportsEvent(listener,eventType,sourceType)) {
            retriever.applicationListenerBeans.add(listenerBeanName);
            allListeners.add(listener);
          }
        }
 catch (        NoSuchBeanDefinitionException ex) {
        }
      }
    }
    OrderComparator.sort(allListeners);
    this.retrieverCache.put(cacheKey,retriever);
    return allListeners;
  }
}
