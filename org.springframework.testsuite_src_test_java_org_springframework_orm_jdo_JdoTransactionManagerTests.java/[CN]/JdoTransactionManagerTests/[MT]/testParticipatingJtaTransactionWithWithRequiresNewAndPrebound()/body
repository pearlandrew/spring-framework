{
  final MockControl utControl=MockControl.createControl(UserTransaction.class);
  final UserTransaction ut=(UserTransaction)utControl.getMock();
  final MockControl tmControl=MockControl.createControl(TransactionManager.class);
  final TransactionManager tm=(TransactionManager)tmControl.getMock();
  ut.getStatus();
  utControl.setReturnValue(Status.STATUS_NO_TRANSACTION,1);
  ut.begin();
  utControl.setVoidCallable(1);
  utControl.replay();
  pmf.getConnectionFactory();
  pmfControl.setReturnValue(null,1);
  pmf.getPersistenceManager();
  pmfControl.setReturnValue(pm,1);
  pm.flush();
  pmControl.setVoidCallable(1);
  pm.close();
  pmControl.setVoidCallable(1);
  pmfControl.replay();
  pmControl.replay();
  JtaTransactionManager ptm=new JtaTransactionManager(ut,tm);
  final TransactionTemplate tt=new TransactionTemplate(ptm);
  tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);
  final List l=new ArrayList();
  l.add("test");
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  TransactionSynchronizationManager.bindResource(pmf,new PersistenceManagerHolder(pm));
  assertTrue("Has thread pm",TransactionSynchronizationManager.hasResource(pmf));
  Object result=tt.execute(new TransactionCallback(){
    public Object doInTransaction(    TransactionStatus status){
      try {
        utControl.verify();
        utControl.reset();
        ut.getStatus();
        utControl.setReturnValue(Status.STATUS_ACTIVE,1);
        MockJtaTransaction transaction=new MockJtaTransaction();
        tm.suspend();
        tmControl.setReturnValue(transaction,1);
        ut.begin();
        utControl.setVoidCallable(1);
        ut.getStatus();
        utControl.setReturnValue(Status.STATUS_ACTIVE,4);
        ut.commit();
        utControl.setVoidCallable(2);
        tm.resume(transaction);
        tmControl.setVoidCallable(1);
        utControl.replay();
        tmControl.replay();
      }
 catch (      Exception ex) {
      }
      JdoTemplate jt=new JdoTemplate(pmf);
      jt.execute(new JdoCallback(){
        public Object doInJdo(        PersistenceManager pm2){
          return null;
        }
      }
);
      return tt.execute(new TransactionCallback(){
        public Object doInTransaction(        TransactionStatus status){
          JdoTemplate jt=new JdoTemplate(pmf);
          return jt.execute(new JdoCallback(){
            public Object doInJdo(            PersistenceManager pm2){
              pm2.flush();
              return l;
            }
          }
);
        }
      }
);
    }
  }
);
  assertTrue("Correct result list",result == l);
  assertTrue("Has thread pm",TransactionSynchronizationManager.hasResource(pmf));
  TransactionSynchronizationManager.unbindResource(pmf);
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  utControl.verify();
}
