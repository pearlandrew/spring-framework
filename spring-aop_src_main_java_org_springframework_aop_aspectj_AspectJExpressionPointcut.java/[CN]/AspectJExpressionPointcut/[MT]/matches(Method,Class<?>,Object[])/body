{
  checkReadyToMatch();
  ShadowMatch shadowMatch=getShadowMatch(AopUtils.getMostSpecificMethod(method,targetClass),method);
  ShadowMatch originalShadowMatch=getShadowMatch(method,method);
  ProxyMethodInvocation pmi=null;
  Object targetObject=null;
  Object thisObject=null;
  try {
    MethodInvocation mi=ExposeInvocationInterceptor.currentInvocation();
    targetObject=mi.getThis();
    if (!(mi instanceof ProxyMethodInvocation)) {
      throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi);
    }
    pmi=(ProxyMethodInvocation)mi;
    thisObject=pmi.getProxy();
  }
 catch (  IllegalStateException ex) {
    if (logger.isDebugEnabled()) {
      logger.debug("Could not access current invocation - matching with limited context: " + ex);
    }
  }
  try {
    JoinPointMatch joinPointMatch=shadowMatch.matchesJoinPoint(thisObject,targetObject,args);
    if (pmi != null) {
      RuntimeTestWalker originalMethodResidueTest=getRuntimeTestWalker(originalShadowMatch);
      if (!originalMethodResidueTest.testThisInstanceOfResidue(thisObject.getClass())) {
        return false;
      }
      if (joinPointMatch.matches()) {
        bindParameters(pmi,joinPointMatch);
      }
    }
    return joinPointMatch.matches();
  }
 catch (  Throwable ex) {
    if (logger.isDebugEnabled()) {
      logger.debug("Failed to evaluate join point for arguments " + Arrays.asList(args) + " - falling back to non-match",ex);
    }
    return false;
  }
}
