{
  ShadowMatch shadowMatch=this.shadowMatchCache.get(targetMethod);
  if (shadowMatch == null) {
synchronized (this.shadowMatchCache) {
      PointcutExpression fallbackExpression=null;
      Method methodToMatch=targetMethod;
      shadowMatch=this.shadowMatchCache.get(targetMethod);
      if (shadowMatch == null) {
        try {
          shadowMatch=this.pointcutExpression.matchesMethodExecution(methodToMatch);
        }
 catch (        ReflectionWorldException ex) {
          try {
            fallbackExpression=getFallbackPointcutExpression(methodToMatch.getDeclaringClass());
            if (fallbackExpression != null) {
              shadowMatch=fallbackExpression.matchesMethodExecution(methodToMatch);
            }
          }
 catch (          ReflectionWorldException ex2) {
            fallbackExpression=null;
          }
        }
        if (shadowMatch == null && targetMethod != originalMethod) {
          methodToMatch=originalMethod;
          try {
            shadowMatch=this.pointcutExpression.matchesMethodExecution(methodToMatch);
          }
 catch (          ReflectionWorldException ex3) {
            try {
              fallbackExpression=getFallbackPointcutExpression(methodToMatch.getDeclaringClass());
              if (fallbackExpression != null) {
                shadowMatch=fallbackExpression.matchesMethodExecution(methodToMatch);
              }
            }
 catch (            ReflectionWorldException ex4) {
              fallbackExpression=null;
            }
          }
        }
        if (shadowMatch == null) {
          shadowMatch=new ShadowMatchImpl(org.aspectj.util.FuzzyBoolean.NO,null,null,null);
        }
 else         if (shadowMatch.maybeMatches() && fallbackExpression != null) {
          shadowMatch=new DefensiveShadowMatch(shadowMatch,fallbackExpression.matchesMethodExecution(methodToMatch));
        }
        this.shadowMatchCache.put(targetMethod,shadowMatch);
      }
    }
  }
  return shadowMatch;
}
