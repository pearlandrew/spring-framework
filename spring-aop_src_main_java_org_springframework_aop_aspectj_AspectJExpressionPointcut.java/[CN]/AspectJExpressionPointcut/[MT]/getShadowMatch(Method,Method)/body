{
  ShadowMatch shadowMatch=this.shadowMatchCache.get(targetMethod);
  if (shadowMatch == null) {
synchronized (this.shadowMatchCache) {
      Method methodToMatch=targetMethod;
      PointcutExpression fallbackPointcutExpression=null;
      shadowMatch=this.shadowMatchCache.get(methodToMatch);
      if (shadowMatch == null) {
        try {
          shadowMatch=this.pointcutExpression.matchesMethodExecution(targetMethod);
        }
 catch (        ReflectionWorld.ReflectionWorldException ex) {
          try {
            fallbackPointcutExpression=getFallbackPointcutExpression(methodToMatch.getDeclaringClass());
            shadowMatch=fallbackPointcutExpression.matchesMethodExecution(methodToMatch);
          }
 catch (          ReflectionWorld.ReflectionWorldException ex2) {
            if (targetMethod == originalMethod) {
              shadowMatch=new ShadowMatchImpl(org.aspectj.util.FuzzyBoolean.NO,null,null,null);
            }
 else {
              try {
                shadowMatch=this.pointcutExpression.matchesMethodExecution(originalMethod);
              }
 catch (              ReflectionWorld.ReflectionWorldException ex3) {
                methodToMatch=originalMethod;
                fallbackPointcutExpression=getFallbackPointcutExpression(methodToMatch.getDeclaringClass());
                try {
                  shadowMatch=fallbackPointcutExpression.matchesMethodExecution(methodToMatch);
                }
 catch (                ReflectionWorld.ReflectionWorldException ex4) {
                  shadowMatch=new ShadowMatchImpl(org.aspectj.util.FuzzyBoolean.NO,null,null,null);
                }
              }
            }
          }
        }
        if (shadowMatch.maybeMatches() && fallbackPointcutExpression != null) {
          shadowMatch=new DefensiveShadowMatch(shadowMatch,fallbackPointcutExpression.matchesMethodExecution(methodToMatch));
        }
        this.shadowMatchCache.put(targetMethod,shadowMatch);
      }
    }
  }
  return shadowMatch;
}
