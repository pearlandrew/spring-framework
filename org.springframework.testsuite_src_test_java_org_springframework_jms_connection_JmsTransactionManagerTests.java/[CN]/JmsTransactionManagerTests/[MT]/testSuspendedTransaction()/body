{
  MockControl cfControl=MockControl.createControl(ConnectionFactory.class);
  final ConnectionFactory cf=(ConnectionFactory)cfControl.getMock();
  MockControl conControl=MockControl.createControl(Connection.class);
  Connection con=(Connection)conControl.getMock();
  MockControl sessionControl=MockControl.createControl(Session.class);
  final Session session=(Session)sessionControl.getMock();
  MockControl session2Control=MockControl.createControl(Session.class);
  final Session session2=(Session)session2Control.getMock();
  cf.createConnection();
  cfControl.setReturnValue(con,2);
  con.createSession(true,Session.AUTO_ACKNOWLEDGE);
  conControl.setReturnValue(session,1);
  con.createSession(false,Session.AUTO_ACKNOWLEDGE);
  conControl.setReturnValue(session2,1);
  session.commit();
  sessionControl.setVoidCallable(1);
  session.close();
  sessionControl.setVoidCallable(1);
  session2.close();
  session2Control.setVoidCallable(1);
  con.close();
  conControl.setVoidCallable(2);
  sessionControl.replay();
  conControl.replay();
  cfControl.replay();
  JmsTransactionManager tm=new JmsTransactionManager(cf);
  TransactionStatus ts=tm.getTransaction(new DefaultTransactionDefinition());
  final JmsTemplate jt=new JmsTemplate(cf);
  jt.execute(new SessionCallback(){
    public Object doInJms(    Session sess){
      assertTrue(sess == session);
      return null;
    }
  }
);
  TransactionTemplate tt=new TransactionTemplate(tm);
  tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_NOT_SUPPORTED);
  tt.execute(new TransactionCallbackWithoutResult(){
    protected void doInTransactionWithoutResult(    TransactionStatus status){
      jt.execute(new SessionCallback(){
        public Object doInJms(        Session sess){
          assertTrue(sess != session);
          return null;
        }
      }
);
    }
  }
);
  jt.execute(new SessionCallback(){
    public Object doInJms(    Session sess){
      assertTrue(sess == session);
      return null;
    }
  }
);
  tm.commit(ts);
  sessionControl.verify();
  conControl.verify();
  cfControl.verify();
}
