{
  tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);
  given(manager.getTransaction()).willReturn(tx);
  final List<String> l=new ArrayList<String>();
  l.add("test");
  assertTrue(!TransactionSynchronizationManager.hasResource(factory));
  assertTrue(!TransactionSynchronizationManager.isSynchronizationActive());
  TransactionSynchronizationManager.bindResource(factory,new EntityManagerHolder(manager));
  try {
    Object result=tt.execute(new TransactionCallback(){
      @Override public Object doInTransaction(      TransactionStatus status){
        JpaTemplate template2=new JpaTemplate(factory);
        template2.execute(new JpaCallback(){
          @Override public Object doInJpa(          EntityManager em) throws PersistenceException {
            return null;
          }
        }
);
        assertTrue(TransactionSynchronizationManager.hasResource(factory));
        return tt.execute(new TransactionCallback(){
          @Override public Object doInTransaction(          TransactionStatus status){
            return template.execute(new JpaCallback(){
              @Override public Object doInJpa(              EntityManager em2){
                em2.flush();
                return l;
              }
            }
);
          }
        }
);
      }
    }
);
    assertSame(l,result);
  }
  finally {
    TransactionSynchronizationManager.unbindResource(factory);
  }
  assertTrue(!TransactionSynchronizationManager.hasResource(factory));
  assertTrue(!TransactionSynchronizationManager.isSynchronizationActive());
  verify(tx,times(2)).begin();
  verify(tx,times(2)).commit();
  verify(manager).flush();
  verify(manager).close();
}
