{
  tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);
  EntityManager manager2=mock(EntityManager.class);
  EntityTransaction tx2=mock(EntityTransaction.class);
  given(manager.getTransaction()).willReturn(tx);
  given(factory.createEntityManager()).willReturn(manager,manager2);
  given(manager2.getTransaction()).willReturn(tx2);
  given(manager2.isOpen()).willReturn(true);
  assertTrue(!TransactionSynchronizationManager.hasResource(factory));
  assertTrue(!TransactionSynchronizationManager.isSynchronizationActive());
  tt.execute(new TransactionCallback(){
    @Override public Object doInTransaction(    TransactionStatus status){
      template.execute(new JpaCallback(){
        @Override public Object doInJpa(        EntityManager em2){
          em2.flush();
          return null;
        }
      }
);
      TransactionSynchronizationManager.registerSynchronization(new TransactionSynchronizationAdapter(){
        @Override public void afterCompletion(        int status){
          tt.execute(new TransactionCallback(){
            @Override public Object doInTransaction(            TransactionStatus status){
              return template.execute(new JpaCallback(){
                @Override public Object doInJpa(                EntityManager em2){
                  em2.flush();
                  return null;
                }
              }
);
            }
          }
);
        }
      }
);
      return null;
    }
  }
);
  assertTrue(!TransactionSynchronizationManager.hasResource(factory));
  assertTrue(!TransactionSynchronizationManager.isSynchronizationActive());
  verify(tx).commit();
  verify(tx2).begin();
  verify(tx2).commit();
  verify(manager).flush();
  verify(manager).close();
  verify(manager2).flush();
  verify(manager2).close();
}
