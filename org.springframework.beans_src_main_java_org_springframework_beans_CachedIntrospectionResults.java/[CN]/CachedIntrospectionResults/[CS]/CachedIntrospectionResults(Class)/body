{
  try {
    if (logger.isTraceEnabled()) {
      logger.trace("Getting BeanInfo for class [" + beanClass.getName() + "]");
    }
    this.beanInfo=Introspector.getBeanInfo(beanClass);
    Class classToFlush=beanClass;
    do {
      Introspector.flushFromCaches(classToFlush);
      classToFlush=classToFlush.getSuperclass();
    }
 while (classToFlush != null);
    if (logger.isTraceEnabled()) {
      logger.trace("Caching PropertyDescriptors for class [" + beanClass.getName() + "]");
    }
    this.propertyDescriptorCache=new HashMap();
    PropertyDescriptor[] pds=this.beanInfo.getPropertyDescriptors();
    for (int i=0; i < pds.length; i++) {
      PropertyDescriptor pd=pds[i];
      if (logger.isTraceEnabled()) {
        logger.trace("Found bean property '" + pd.getName() + "'"+ (pd.getPropertyType() != null ? " of type [" + pd.getPropertyType().getName() + "]" : "")+ (pd.getPropertyEditorClass() != null ? "; editor [" + pd.getPropertyEditorClass().getName() + "]" : ""));
      }
      if (JdkVersion.isAtLeastJava15()) {
        pd=new GenericTypeAwarePropertyDescriptor(beanClass,pd.getName(),pd.getReadMethod(),pd.getWriteMethod(),pd.getPropertyEditorClass());
      }
      this.propertyDescriptorCache.put(pd.getName(),pd);
    }
  }
 catch (  IntrospectionException ex) {
    throw new FatalBeanException("Cannot get BeanInfo for object of class [" + beanClass.getName() + "]",ex);
  }
}
