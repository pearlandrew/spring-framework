{
  String key=strategyInterface.getName();
  String value=defaultStrategies.getProperty(key);
  if (value != null) {
    String[] classNames=StringUtils.commaDelimitedListToStringArray(value);
    List<T> strategies=new ArrayList<T>(classNames.length);
    for (    String className : classNames) {
      try {
        Class<?> clazz=ClassUtils.forName(className,DispatcherPortlet.class.getClassLoader());
        Object strategy=createDefaultStrategy(context,clazz);
        strategies.add((T)strategy);
      }
 catch (      ClassNotFoundException ex) {
        throw new BeanInitializationException("Could not find DispatcherPortlet's default strategy class [" + className + "] for interface ["+ key+ "]",ex);
      }
catch (      LinkageError err) {
        throw new BeanInitializationException("Error loading DispatcherPortlet's default strategy class [" + className + "] for interface ["+ key+ "]: problem with class file or dependent class",err);
      }
    }
    return strategies;
  }
 else {
    return new LinkedList<T>();
  }
}
