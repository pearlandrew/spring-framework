{
  Class<?> beanClass=resolveBeanClass(mbd,beanName);
  if (beanClass != null && !Modifier.isPublic(beanClass.getModifiers()) && !mbd.isNonPublicAccessAllowed()) {
    throw new BeanCreationException(mbd.getResourceDescription(),beanName,"Bean class isn't public, and non-public access not allowed: " + beanClass.getName());
  }
  if (mbd.getFactoryMethodName() != null) {
    return instantiateUsingFactoryMethod(beanName,mbd,args);
  }
  boolean resolved=false;
  boolean autowireNecessary=false;
  if (args == null) {
synchronized (mbd.constructorArgumentLock) {
      if (mbd.resolvedConstructorOrFactoryMethod != null) {
        resolved=true;
        autowireNecessary=mbd.constructorArgumentsResolved;
      }
    }
  }
  if (resolved) {
    if (autowireNecessary) {
      return autowireConstructor(beanName,mbd,null,null);
    }
 else {
      return instantiateBean(beanName,mbd);
    }
  }
  Constructor[] ctors=determineConstructorsFromBeanPostProcessors(beanClass,beanName);
  if (ctors != null || mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR || mbd.hasConstructorArgumentValues() || !ObjectUtils.isEmpty(args)) {
    return autowireConstructor(beanName,mbd,ctors,args);
  }
  return instantiateBean(beanName,mbd);
}
