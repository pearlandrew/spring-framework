{
class Holder {
    Class<?> value=null;
  }
  final Holder objectType=new Holder();
  String factoryBeanName=mbd.getFactoryBeanName();
  final String factoryMethodName=mbd.getFactoryMethodName();
  if (factoryBeanName != null) {
    if (factoryMethodName != null) {
      BeanDefinition fbDef=getBeanDefinition(factoryBeanName);
      if (fbDef instanceof AbstractBeanDefinition && ((AbstractBeanDefinition)fbDef).hasBeanClass()) {
        Class<?> fbClass=ClassUtils.getUserClass(((AbstractBeanDefinition)fbDef).getBeanClass());
        ReflectionUtils.doWithMethods(fbClass,new ReflectionUtils.MethodCallback(){
          @Override public void doWith(          Method method) throws IllegalArgumentException, IllegalAccessException {
            if (method.getName().equals(factoryMethodName) && FactoryBean.class.isAssignableFrom(method.getReturnType())) {
              objectType.value=GenericTypeResolver.resolveReturnTypeArgument(method,FactoryBean.class);
            }
          }
        }
);
        if (objectType.value != null) {
          return objectType.value;
        }
      }
    }
    if (!isBeanEligibleForMetadataCaching(factoryBeanName)) {
      return null;
    }
  }
  FactoryBean<?> fb=(mbd.isSingleton() ? getSingletonFactoryBeanForTypeCheck(beanName,mbd) : getNonSingletonFactoryBeanForTypeCheck(beanName,mbd));
  if (fb != null) {
    objectType.value=getTypeForFactoryBean(fb);
    if (objectType.value != null) {
      return objectType.value;
    }
  }
  return super.getTypeForFactoryBean(beanName,mbd);
}
