{
  BeanWrapper instanceWrapper=null;
  if (mbd.isSingleton()) {
    instanceWrapper=this.factoryBeanInstanceCache.remove(beanName);
  }
  if (instanceWrapper == null) {
    instanceWrapper=createBeanInstance(beanName,mbd,args);
  }
  final Object bean=(instanceWrapper != null ? instanceWrapper.getWrappedInstance() : null);
  Class beanType=(instanceWrapper != null ? instanceWrapper.getWrappedClass() : null);
synchronized (mbd.postProcessingLock) {
    if (!mbd.postProcessed) {
      applyMergedBeanDefinitionPostProcessors(mbd,beanType,beanName);
      mbd.postProcessed=true;
    }
  }
  boolean earlySingletonExposure=(mbd.isSingleton() && this.allowCircularReferences && isSingletonCurrentlyInCreation(beanName));
  if (earlySingletonExposure) {
    if (logger.isDebugEnabled()) {
      logger.debug("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
    }
    addSingletonFactory(beanName,new ObjectFactory(){
      @Override public Object getObject() throws BeansException {
        return getEarlyBeanReference(beanName,mbd,bean);
      }
    }
);
  }
  Object exposedObject=bean;
  try {
    populateBean(beanName,mbd,instanceWrapper);
    if (exposedObject != null) {
      exposedObject=initializeBean(beanName,exposedObject,mbd);
    }
  }
 catch (  Throwable ex) {
    if (ex instanceof BeanCreationException && beanName.equals(((BeanCreationException)ex).getBeanName())) {
      throw (BeanCreationException)ex;
    }
 else {
      throw new BeanCreationException(mbd.getResourceDescription(),beanName,"Initialization of bean failed",ex);
    }
  }
  if (earlySingletonExposure) {
    Object earlySingletonReference=getSingleton(beanName,false);
    if (earlySingletonReference != null) {
      if (exposedObject == bean) {
        exposedObject=earlySingletonReference;
      }
 else       if (!this.allowRawInjectionDespiteWrapping && hasDependentBean(beanName)) {
        String[] dependentBeans=getDependentBeans(beanName);
        Set<String> actualDependentBeans=new LinkedHashSet<String>(dependentBeans.length);
        for (        String dependentBean : dependentBeans) {
          if (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) {
            actualDependentBeans.add(dependentBean);
          }
        }
        if (!actualDependentBeans.isEmpty()) {
          throw new BeanCurrentlyInCreationException(beanName,"Bean with name '" + beanName + "' has been injected into other beans ["+ StringUtils.collectionToCommaDelimitedString(actualDependentBeans)+ "] in its raw version as part of a circular reference, but has eventually been "+ "wrapped. This means that said other beans do not use the final version of the "+ "bean. This is often the result of over-eager type matching - consider using "+ "'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example.");
        }
      }
    }
  }
  try {
    registerDisposableBeanIfNecessary(beanName,bean,mbd);
  }
 catch (  BeanDefinitionValidationException ex) {
    throw new BeanCreationException(mbd.getResourceDescription(),beanName,"Invalid destruction signature",ex);
  }
  return exposedObject;
}
