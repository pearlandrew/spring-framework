{
  Class<?> factoryClass;
  boolean isStatic=true;
  String factoryBeanName=mbd.getFactoryBeanName();
  if (factoryBeanName != null) {
    if (factoryBeanName.equals(beanName)) {
      throw new BeanDefinitionStoreException(mbd.getResourceDescription(),beanName,"factory-bean reference points back to the same bean definition");
    }
    factoryClass=getType(factoryBeanName);
    isStatic=false;
  }
 else {
    factoryClass=resolveBeanClass(mbd,beanName,typesToMatch);
  }
  if (factoryClass == null) {
    return null;
  }
  List<ValueHolder> argumentValues=mbd.getConstructorArgumentValues().getGenericArgumentValues();
  Object[] args=new Object[argumentValues.size()];
  for (int i=0; i < args.length; i++) {
    args[i]=argumentValues.get(i).getValue();
  }
  int minNrOfArgs=mbd.getConstructorArgumentValues().getArgumentCount();
  Method[] candidates=ReflectionUtils.getUniqueDeclaredMethods(factoryClass);
  Set<Class<?>> returnTypes=new HashSet<Class<?>>(1);
  for (  Method factoryMethod : candidates) {
    if (Modifier.isStatic(factoryMethod.getModifiers()) == isStatic && factoryMethod.getName().equals(mbd.getFactoryMethodName()) && factoryMethod.getParameterTypes().length >= minNrOfArgs) {
      Class<?> returnType=AutowireUtils.resolveReturnTypeForFactoryMethod(factoryMethod,args,getBeanClassLoader());
      if (returnType != null) {
        returnTypes.add(returnType);
      }
    }
  }
  if (returnTypes.size() == 1) {
    return returnTypes.iterator().next();
  }
 else {
    return null;
  }
}
