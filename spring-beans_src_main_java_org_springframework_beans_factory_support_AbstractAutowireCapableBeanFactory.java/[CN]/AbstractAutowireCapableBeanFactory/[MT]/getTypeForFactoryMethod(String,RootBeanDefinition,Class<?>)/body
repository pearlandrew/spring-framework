{
  Class<?> preResolved=mbd.resolvedFactoryMethodReturnType;
  if (preResolved != null) {
    return preResolved;
  }
  Class<?> factoryClass;
  boolean isStatic=true;
  String factoryBeanName=mbd.getFactoryBeanName();
  if (factoryBeanName != null) {
    if (factoryBeanName.equals(beanName)) {
      throw new BeanDefinitionStoreException(mbd.getResourceDescription(),beanName,"factory-bean reference points back to the same bean definition");
    }
    factoryClass=getType(factoryBeanName);
    isStatic=false;
  }
 else {
    factoryClass=resolveBeanClass(mbd,beanName,typesToMatch);
  }
  if (factoryClass == null) {
    return null;
  }
  Class<?> commonType=null;
  boolean cache=false;
  int minNrOfArgs=mbd.getConstructorArgumentValues().getArgumentCount();
  Method[] candidates=ReflectionUtils.getUniqueDeclaredMethods(factoryClass);
  for (  Method factoryMethod : candidates) {
    if (Modifier.isStatic(factoryMethod.getModifiers()) == isStatic && factoryMethod.getName().equals(mbd.getFactoryMethodName()) && factoryMethod.getParameterCount() >= minNrOfArgs) {
      if (factoryMethod.getTypeParameters().length > 0) {
        try {
          Class<?>[] paramTypes=factoryMethod.getParameterTypes();
          String[] paramNames=null;
          ParameterNameDiscoverer pnd=getParameterNameDiscoverer();
          if (pnd != null) {
            paramNames=pnd.getParameterNames(factoryMethod);
          }
          ConstructorArgumentValues cav=mbd.getConstructorArgumentValues();
          Set<ConstructorArgumentValues.ValueHolder> usedValueHolders=new HashSet<>(paramTypes.length);
          Object[] args=new Object[paramTypes.length];
          for (int i=0; i < args.length; i++) {
            ConstructorArgumentValues.ValueHolder valueHolder=cav.getArgumentValue(i,paramTypes[i],(paramNames != null ? paramNames[i] : null),usedValueHolders);
            if (valueHolder == null) {
              valueHolder=cav.getGenericArgumentValue(null,null,usedValueHolders);
            }
            if (valueHolder != null) {
              args[i]=valueHolder.getValue();
              usedValueHolders.add(valueHolder);
            }
          }
          Class<?> returnType=AutowireUtils.resolveReturnTypeForFactoryMethod(factoryMethod,args,getBeanClassLoader());
          if (returnType != null) {
            cache=true;
            commonType=ClassUtils.determineCommonAncestor(returnType,commonType);
          }
        }
 catch (        Throwable ex) {
          if (logger.isDebugEnabled()) {
            logger.debug("Failed to resolve generic return type for factory method: " + ex);
          }
        }
      }
 else {
        commonType=ClassUtils.determineCommonAncestor(factoryMethod.getReturnType(),commonType);
      }
    }
  }
  if (commonType != null) {
    if (cache) {
      mbd.resolvedFactoryMethodReturnType=commonType;
    }
    return commonType;
  }
 else {
    return null;
  }
}
