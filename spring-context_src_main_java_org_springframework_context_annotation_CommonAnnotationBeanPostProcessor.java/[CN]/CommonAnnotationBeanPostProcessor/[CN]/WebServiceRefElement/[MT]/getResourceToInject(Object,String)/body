{
  Service service;
  try {
    service=(Service)getResource(this,requestingBeanName);
  }
 catch (  NoSuchBeanDefinitionException notFound) {
    if (Service.class.equals(this.lookupType)) {
      throw new IllegalStateException("No resource with name '" + this.name + "' found in context, "+ "and no specific JAX-WS Service subclass specified. The typical solution is to either specify "+ "a LocalJaxWsServiceFactoryBean with the given name or to specify the (generated) Service "+ "subclass as @WebServiceRef(...) value.");
    }
    if (StringUtils.hasLength(this.wsdlLocation)) {
      try {
        Constructor<?> ctor=this.lookupType.getConstructor(new Class<?>[]{URL.class,QName.class});
        WebServiceClient clientAnn=this.lookupType.getAnnotation(WebServiceClient.class);
        if (clientAnn == null) {
          throw new IllegalStateException("JAX-WS Service class [" + this.lookupType.getName() + "] does not carry a WebServiceClient annotation");
        }
        service=(Service)BeanUtils.instantiateClass(ctor,new URL(this.wsdlLocation),new QName(clientAnn.targetNamespace(),clientAnn.name()));
      }
 catch (      NoSuchMethodException ex) {
        throw new IllegalStateException("JAX-WS Service class [" + this.lookupType.getName() + "] does not have a (URL, QName) constructor. Cannot apply specified WSDL location ["+ this.wsdlLocation+ "].");
      }
catch (      MalformedURLException ex) {
        throw new IllegalArgumentException("Specified WSDL location [" + this.wsdlLocation + "] isn't a valid URL");
      }
    }
 else {
      service=(Service)BeanUtils.instantiateClass(this.lookupType);
    }
  }
  return service.getPort(this.elementType);
}
