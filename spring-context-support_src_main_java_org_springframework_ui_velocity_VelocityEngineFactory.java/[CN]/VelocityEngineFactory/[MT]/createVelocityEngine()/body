{
  VelocityEngine velocityEngine=newVelocityEngine();
  Map<String,Object> props=new HashMap<String,Object>();
  if (this.configLocation != null) {
    if (logger.isInfoEnabled()) {
      logger.info("Loading Velocity config from [" + this.configLocation + "]");
    }
    CollectionUtils.mergePropertiesIntoMap(PropertiesLoaderUtils.loadProperties(this.configLocation),props);
  }
  if (!this.velocityProperties.isEmpty()) {
    props.putAll(this.velocityProperties);
  }
  if (this.resourceLoaderPath != null) {
    initVelocityResourceLoader(velocityEngine,this.resourceLoaderPath);
  }
  if (this.overrideLogging) {
    velocityEngine.setProperty(RuntimeConstants.RUNTIME_LOG_LOGSYSTEM,new CommonsLoggingLogSystem());
  }
  for (  Map.Entry<String,Object> entry : props.entrySet()) {
    velocityEngine.setProperty(entry.getKey(),entry.getValue());
  }
  postProcessVelocityEngine(velocityEngine);
  try {
    velocityEngine.init();
  }
 catch (  IOException ex) {
    throw ex;
  }
catch (  VelocityException ex) {
    throw ex;
  }
catch (  RuntimeException ex) {
    throw ex;
  }
catch (  Exception ex) {
    logger.error("Why does VelocityEngine throw a generic checked exception, after all?",ex);
    throw new VelocityException(ex.toString());
  }
  return velocityEngine;
}
