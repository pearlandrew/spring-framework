{
  AnnotatedClass target=new AnnotatedClass();
  Method method=ReflectionUtils.findMethod(AnnotatedClass.class,"multipleCaching",Object.class,Object.class);
  Object[] args=new Object[]{new Object(),new Object()};
  Collection<Cache> map=Collections.singleton(new ConcurrentMapCache("test"));
  EvaluationContext evalCtx=eval.createEvaluationContext(map,method,args,target,target.getClass());
  Collection<CacheOperation> ops=getOps("multipleCaching");
  Iterator<CacheOperation> it=ops.iterator();
  Object keyA=eval.key(it.next().getKey(),method,evalCtx);
  Object keyB=eval.key(it.next().getKey(),method,evalCtx);
  assertEquals(args[0],keyA);
  assertEquals(args[1],keyB);
}
