{
  final NumberFormat nf=NumberFormat.getNumberInstance(Locale.GERMAN);
  TestController mc=new TestController(){
    @Override protected void initBinder(    HttpServletRequest request,    ServletRequestDataBinder binder){
      binder.registerCustomEditor(Float.class,new CustomNumberEditor(Float.class,nf,false));
    }
  }
;
  MockHttpServletRequest request=new MockHttpServletRequest("GET","/welcome.html");
  request.addParameter("myFloat","5,1");
  MockHttpServletResponse response=new MockHttpServletResponse();
  ModelAndView mv=mc.handleRequest(request,response);
  TestBean tb=(TestBean)mv.getModel().get("command");
  Errors errors=(Errors)mv.getModel().get("errors");
  assertTrue("No field error",!errors.hasFieldErrors("myFloat"));
  assertTrue("Correct float property",(new Float(5.1)).equals(tb.getMyFloat()));
  assertTrue("Correct float value","5,1".equals(errors.getFieldValue("myFloat")));
  request=new MockHttpServletRequest("GET","/welcome.html");
  request.addParameter("myFloat","");
  response=new MockHttpServletResponse();
  mv=mc.handleRequest(request,response);
  tb=(TestBean)mv.getModel().get("command");
  errors=(Errors)mv.getModel().get("errors");
  assertTrue("Has field error",errors.hasFieldErrors("myFloat"));
  assertTrue("Correct float property",tb.getMyFloat() != null);
  assertTrue("Correct float value",errors.getFieldValue("myFloat") != null);
}
