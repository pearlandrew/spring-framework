{
  if (source == null) {
    return this.conversionService.convertNullSource(sourceType,targetType);
  }
  Collection<?> sourceCollection=(Collection<?>)source;
  TypeDescriptor sourceElementType=sourceType.getElementTypeDescriptor();
  if (sourceElementType == TypeDescriptor.NULL) {
    sourceElementType=getElementType(sourceCollection);
  }
  TypeDescriptor targetKeyType=targetType.getMapKeyTypeDescriptor();
  TypeDescriptor targetValueType=targetType.getMapValueTypeDescriptor();
  boolean keysCompatible=false;
  if (sourceElementType != TypeDescriptor.NULL && sourceElementType.isAssignableTo(targetKeyType)) {
    keysCompatible=true;
  }
  boolean valuesCompatible=false;
  if (sourceElementType != TypeDescriptor.NULL && sourceElementType.isAssignableTo(targetValueType)) {
    valuesCompatible=true;
  }
  if (keysCompatible && valuesCompatible) {
    Map target=CollectionFactory.createMap(targetType.getType(),sourceCollection.size());
    if (String.class.equals(sourceElementType.getType())) {
      for (      Object element : sourceCollection) {
        String[] property=parseProperty((String)element);
        target.put(property[0],property[1]);
      }
    }
 else {
      for (      Object element : sourceCollection) {
        target.put(element,element);
      }
    }
    return target;
  }
 else {
    Map target=CollectionFactory.createMap(targetType.getType(),sourceCollection.size());
    MapEntryConverter converter=new MapEntryConverter(sourceElementType,sourceElementType,targetKeyType,targetValueType,keysCompatible,valuesCompatible,conversionService);
    if (String.class.equals(sourceElementType.getType())) {
      for (      Object element : sourceCollection) {
        String[] property=parseProperty((String)element);
        Object targetKey=converter.convertKey(property[0]);
        Object targetValue=converter.convertValue(property[1]);
        target.put(targetKey,targetValue);
      }
    }
 else {
      for (      Object element : sourceCollection) {
        Object targetKey=converter.convertKey(element);
        Object targetValue=converter.convertValue(element);
        target.put(targetKey,targetValue);
      }
    }
    return target;
  }
}
