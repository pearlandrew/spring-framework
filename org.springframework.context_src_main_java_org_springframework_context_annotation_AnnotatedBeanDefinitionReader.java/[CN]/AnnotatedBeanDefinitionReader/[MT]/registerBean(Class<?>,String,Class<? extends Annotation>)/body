{
  AnnotatedGenericBeanDefinition abd=new AnnotatedGenericBeanDefinition(annotatedClass);
  ScopeMetadata scopeMetadata=this.scopeMetadataResolver.resolveScopeMetadata(abd);
  abd.setScope(scopeMetadata.getScopeName());
  String beanName=(name != null ? name : this.beanNameGenerator.generateBeanName(abd,this.registry));
  if (abd.getMetadata().isAnnotated(Primary.class.getName())) {
    abd.setPrimary(true);
  }
  if (abd.getMetadata().isAnnotated(Lazy.class.getName())) {
    Boolean value=(Boolean)abd.getMetadata().getAnnotationAttributes(Lazy.class.getName()).get("value");
    abd.setLazyInit(value);
  }
  if (abd.getMetadata().isAnnotated(DependsOn.class.getName())) {
    String[] value=(String[])abd.getMetadata().getAnnotationAttributes(DependsOn.class.getName()).get("value");
    abd.setDependsOn(value);
  }
  if (qualifiers != null) {
    for (    Class<? extends Annotation> qualifier : qualifiers) {
      if (Primary.class.equals(qualifier)) {
        abd.setPrimary(true);
      }
 else       if (Lazy.class.equals(qualifier)) {
        abd.setLazyInit(true);
      }
 else {
        abd.addQualifier(new AutowireCandidateQualifier(qualifier));
      }
    }
  }
  BeanDefinitionHolder definitionHolder=new BeanDefinitionHolder(abd,beanName);
  definitionHolder=applyScopedProxyMode(definitionHolder,scopeMetadata);
  BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder,this.registry);
  if (this.includeAnnotationConfig) {
    AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry);
  }
}
