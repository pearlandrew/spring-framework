{
  final Statement statement2=mock(Statement.class);
  given(statement2.executeQuery(anyString())).willReturn(this.resultSet);
  final PreparedStatement preparedStatement2=mock(PreparedStatement.class);
  given(preparedStatement2.executeQuery()).willReturn(this.resultSet);
  final ResultSet returnResultSet=mock(ResultSet.class);
  given(returnResultSet.next()).willReturn(false);
  final CallableStatement callableStatement=mock(CallableStatement.class);
  final CallableStatement callableStatement2=mock(CallableStatement.class);
  given(callableStatement2.execute()).willReturn(true);
  given(callableStatement2.getUpdateCount()).willReturn(-1);
  given(callableStatement2.getResultSet()).willReturn(returnResultSet);
  given(callableStatement2.getUpdateCount()).willReturn(-1);
  given(this.connection.createStatement()).willReturn(this.statement);
  this.template.setNativeJdbcExtractor(new NativeJdbcExtractor(){
    @Override public boolean isNativeConnectionNecessaryForNativeStatements(){
      return false;
    }
    @Override public boolean isNativeConnectionNecessaryForNativePreparedStatements(){
      return false;
    }
    @Override public boolean isNativeConnectionNecessaryForNativeCallableStatements(){
      return false;
    }
    @Override public Connection getNativeConnection(    Connection con){
      return con;
    }
    @Override public Connection getNativeConnectionFromStatement(    Statement stmt) throws SQLException {
      return stmt.getConnection();
    }
    @Override public Statement getNativeStatement(    Statement stmt){
      assertTrue(stmt == JdbcTemplateTests.this.statement);
      return statement2;
    }
    @Override public PreparedStatement getNativePreparedStatement(    PreparedStatement ps){
      assertTrue(ps == JdbcTemplateTests.this.preparedStatement);
      return preparedStatement2;
    }
    @Override public CallableStatement getNativeCallableStatement(    CallableStatement cs){
      assertTrue(cs == callableStatement);
      return callableStatement2;
    }
    @Override public ResultSet getNativeResultSet(    ResultSet rs){
      return rs;
    }
  }
);
  this.template.query("my query",new ResultSetExtractor<Object>(){
    @Override public Object extractData(    ResultSet rs2){
      assertEquals(JdbcTemplateTests.this.resultSet,rs2);
      return null;
    }
  }
);
  this.template.query(new PreparedStatementCreator(){
    @Override public PreparedStatement createPreparedStatement(    Connection conn){
      return JdbcTemplateTests.this.preparedStatement;
    }
  }
,new ResultSetExtractor<Object>(){
    @Override public Object extractData(    ResultSet rs2){
      assertEquals(JdbcTemplateTests.this.resultSet,rs2);
      return null;
    }
  }
);
  this.template.call(new CallableStatementCreator(){
    @Override public CallableStatement createCallableStatement(    Connection con){
      return callableStatement;
    }
  }
,new ArrayList<>());
  verify(this.resultSet,times(2)).close();
  verify(this.statement).close();
  verify(this.preparedStatement).close();
  verify(returnResultSet).close();
  verify(callableStatement).close();
  verify(this.connection,atLeastOnce()).close();
}
