{
  invokeSetterMethod(person,"id",new Long(99),long.class);
  invokeSetterMethod(person,"name","Tom");
  invokeSetterMethod(person,"age",new Integer(42));
  invokeSetterMethod(person,"eyeColor","blue",String.class);
  invokeSetterMethod(person,"likesPets",Boolean.TRUE);
  invokeSetterMethod(person,"favoriteNumber",PI,Number.class);
  assertEquals("ID (protected method in a superclass)",99,person.getId());
  assertEquals("name (private method)","Tom",person.getName());
  assertEquals("age (protected method)",42,person.getAge());
  assertEquals("eye color (package private method)","blue",person.getEyeColor());
  assertEquals("'likes pets' flag (protected method for a boolean)",true,person.likesPets());
  assertEquals("'favorite number' (protected method for a Number)",PI,person.getFavoriteNumber());
  assertEquals(new Long(99),invokeGetterMethod(person,"id"));
  assertEquals("Tom",invokeGetterMethod(person,"name"));
  assertEquals(new Integer(42),invokeGetterMethod(person,"age"));
  assertEquals("blue",invokeGetterMethod(person,"eyeColor"));
  assertEquals(Boolean.TRUE,invokeGetterMethod(person,"likesPets"));
  assertEquals(PI,invokeGetterMethod(person,"favoriteNumber"));
  invokeSetterMethod(person,"setId",new Long(1),long.class);
  invokeSetterMethod(person,"setName","Jerry",String.class);
  invokeSetterMethod(person,"setAge",new Integer(33),int.class);
  invokeSetterMethod(person,"setEyeColor","green",String.class);
  invokeSetterMethod(person,"setLikesPets",Boolean.FALSE,boolean.class);
  invokeSetterMethod(person,"setFavoriteNumber",new Integer(42),Number.class);
  assertEquals("ID (protected method in a superclass)",1,person.getId());
  assertEquals("name (private method)","Jerry",person.getName());
  assertEquals("age (protected method)",33,person.getAge());
  assertEquals("eye color (package private method)","green",person.getEyeColor());
  assertEquals("'likes pets' flag (protected method for a boolean)",false,person.likesPets());
  assertEquals("'favorite number' (protected method for a Number)",new Integer(42),person.getFavoriteNumber());
  assertEquals(new Long(1),invokeGetterMethod(person,"getId"));
  assertEquals("Jerry",invokeGetterMethod(person,"getName"));
  assertEquals(new Integer(33),invokeGetterMethod(person,"getAge"));
  assertEquals("green",invokeGetterMethod(person,"getEyeColor"));
  assertEquals(Boolean.FALSE,invokeGetterMethod(person,"likesPets"));
  assertEquals(new Integer(42),invokeGetterMethod(person,"getFavoriteNumber"));
  invokeSetterMethod(person,"name",null,String.class);
  invokeSetterMethod(person,"eyeColor",null,String.class);
  invokeSetterMethod(person,"favoriteNumber",null,Number.class);
  assertNull("name (private method)",person.getName());
  assertNull("eye color (package private method)",person.getEyeColor());
  assertNull("'favorite number' (protected method for a Number)",person.getFavoriteNumber());
  new AssertThrows(IllegalArgumentException.class,"Calling invokeSetterMethod() with NULL for a primitive type should throw an IllegalArgumentException."){
    public void test() throws Exception {
      invokeSetterMethod(person,"id",null,long.class);
    }
  }
.runTest();
  new AssertThrows(IllegalArgumentException.class,"Calling invokeSetterMethod() with NULL for a primitive type should throw an IllegalArgumentException."){
    public void test() throws Exception {
      invokeSetterMethod(person,"age",null,int.class);
    }
  }
.runTest();
  new AssertThrows(IllegalArgumentException.class,"Calling invokeSetterMethod() with NULL for a primitive type should throw an IllegalArgumentException."){
    public void test() throws Exception {
      invokeSetterMethod(person,"likesPets",null,boolean.class);
    }
  }
.runTest();
}
