{
  Assert.notNull(testClass,"Class must not be null");
  Class<ActiveProfiles> annotationType=ActiveProfiles.class;
  Class<?> declaringClass=findAnnotationDeclaringClass(annotationType,testClass);
  if (declaringClass == null && logger.isDebugEnabled()) {
    logger.debug(String.format("Could not find an 'annotation declaring class' for annotation type [%s] and class [%s]",annotationType.getName(),testClass.getName()));
  }
  final Set<String> activeProfiles=new HashSet<String>();
  while (declaringClass != null) {
    ActiveProfiles annotation=declaringClass.getAnnotation(annotationType);
    if (logger.isTraceEnabled()) {
      logger.trace(String.format("Retrieved @ActiveProfiles [%s] for declaring class [%s].",annotation,declaringClass.getName()));
    }
    validateActiveProfilesConfiguration(declaringClass,annotation);
    String[] profiles=annotation.profiles();
    String[] valueProfiles=annotation.value();
    Class<? extends ActiveProfilesResolver> resolverClass=annotation.resolver();
    boolean resolverDeclared=!ActiveProfilesResolver.class.equals(resolverClass);
    boolean valueDeclared=!ObjectUtils.isEmpty(valueProfiles);
    if (resolverDeclared) {
      ActiveProfilesResolver resolver=null;
      try {
        resolver=instantiateClass(resolverClass,ActiveProfilesResolver.class);
      }
 catch (      Exception e) {
        String msg=String.format("Could not instantiate ActiveProfilesResolver of " + "type [%s] for test class [%s].",resolverClass.getName(),declaringClass.getName());
        logger.error(msg);
        throw new IllegalStateException(msg,e);
      }
      if (resolver != null) {
        profiles=resolver.resolve(declaringClass);
        if (profiles == null) {
          String msg=String.format("ActiveProfilesResolver [%s] returned a null array of bean definition profiles.",resolverClass.getName());
          logger.error(msg);
          throw new IllegalStateException(msg);
        }
      }
    }
 else     if (valueDeclared) {
      profiles=valueProfiles;
    }
    for (    String profile : profiles) {
      if (StringUtils.hasText(profile)) {
        activeProfiles.add(profile.trim());
      }
    }
    declaringClass=annotation.inheritProfiles() ? findAnnotationDeclaringClass(annotationType,declaringClass.getSuperclass()) : null;
  }
  return StringUtils.toStringArray(activeProfiles);
}
