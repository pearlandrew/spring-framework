{
  Assert.notNull(testClass,"Class must not be null");
  Class<ActiveProfiles> annotationType=ActiveProfiles.class;
  AnnotationDescriptor<ActiveProfiles> descriptor=findAnnotationDescriptor(testClass,annotationType);
  if (descriptor == null && logger.isDebugEnabled()) {
    logger.debug(String.format("Could not find an 'annotation declaring class' for annotation type [%s] and class [%s]",annotationType.getName(),testClass.getName()));
  }
  final Set<String> activeProfiles=new HashSet<String>();
  while (descriptor != null) {
    Class<?> declaringClass=descriptor.getDeclaringClass();
    AnnotationAttributes annAttrs=descriptor.getAnnotationAttributes();
    if (logger.isTraceEnabled()) {
      logger.trace(String.format("Retrieved @ActiveProfiles attributes [%s] for declaring class [%s].",annAttrs,declaringClass.getName()));
    }
    validateActiveProfilesConfiguration(declaringClass,annAttrs);
    String[] profiles=annAttrs.getStringArray("profiles");
    String[] valueProfiles=annAttrs.getStringArray("value");
    Class<? extends ActiveProfilesResolver> resolverClass=annAttrs.getClass("resolver");
    boolean resolverDeclared=!ActiveProfilesResolver.class.equals(resolverClass);
    boolean valueDeclared=!ObjectUtils.isEmpty(valueProfiles);
    if (resolverDeclared) {
      ActiveProfilesResolver resolver=null;
      try {
        resolver=instantiateClass(resolverClass,ActiveProfilesResolver.class);
      }
 catch (      Exception e) {
        String msg=String.format("Could not instantiate ActiveProfilesResolver of " + "type [%s] for test class [%s].",resolverClass.getName(),declaringClass.getName());
        logger.error(msg);
        throw new IllegalStateException(msg,e);
      }
      profiles=resolver.resolve(declaringClass);
      if (profiles == null) {
        String msg=String.format("ActiveProfilesResolver [%s] returned a null array of bean definition profiles.",resolverClass.getName());
        logger.error(msg);
        throw new IllegalStateException(msg);
      }
    }
 else     if (valueDeclared) {
      profiles=valueProfiles;
    }
    for (    String profile : profiles) {
      if (StringUtils.hasText(profile)) {
        activeProfiles.add(profile.trim());
      }
    }
    descriptor=annAttrs.getBoolean("inheritProfiles") ? findAnnotationDescriptor(descriptor.getRootDeclaringClass().getSuperclass(),annotationType) : null;
  }
  return StringUtils.toStringArray(activeProfiles);
}
