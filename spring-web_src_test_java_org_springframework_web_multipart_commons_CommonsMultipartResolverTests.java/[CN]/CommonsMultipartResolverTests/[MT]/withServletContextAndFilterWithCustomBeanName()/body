{
  StaticWebApplicationContext wac=new StaticWebApplicationContext();
  wac.setServletContext(new MockServletContext());
  wac.refresh();
  wac.registerSingleton("myMultipartResolver",MockCommonsMultipartResolver.class,new MutablePropertyValues());
  wac.getServletContext().setAttribute(WebUtils.TEMP_DIR_CONTEXT_ATTRIBUTE,new File("mytemp"));
  wac.getServletContext().setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE,wac);
  CommonsMultipartResolver resolver=new CommonsMultipartResolver(wac.getServletContext());
  assertTrue(resolver.getFileItemFactory().getRepository().getAbsolutePath().endsWith("mytemp"));
  MockFilterConfig filterConfig=new MockFilterConfig(wac.getServletContext(),"filter");
  filterConfig.addInitParameter("multipartResolverBeanName","myMultipartResolver");
  final List<MultipartFile> files=new ArrayList<MultipartFile>();
  FilterChain filterChain=new FilterChain(){
    @Override public void doFilter(    ServletRequest originalRequest,    ServletResponse response){
      if (originalRequest instanceof MultipartHttpServletRequest) {
        MultipartHttpServletRequest request=(MultipartHttpServletRequest)originalRequest;
        files.addAll(request.getFileMap().values());
      }
    }
  }
;
  MultipartFilter filter=new MultipartFilter(){
    private boolean invoked=false;
    @Override protected void doFilterInternal(    HttpServletRequest request,    HttpServletResponse response,    FilterChain filterChain) throws ServletException, IOException {
      super.doFilterInternal(request,response,filterChain);
      super.doFilterInternal(request,response,filterChain);
      if (invoked) {
        throw new ServletException("Should not have been invoked twice");
      }
      invoked=true;
    }
  }
;
  filter.init(filterConfig);
  MockHttpServletRequest originalRequest=new MockHttpServletRequest();
  originalRequest.setMethod("POST");
  originalRequest.setContentType("multipart/form-data");
  originalRequest.addHeader("Content-type","multipart/form-data");
  HttpServletResponse response=new MockHttpServletResponse();
  filter.doFilter(originalRequest,response,filterChain);
  CommonsMultipartFile file1=(CommonsMultipartFile)files.get(0);
  CommonsMultipartFile file2=(CommonsMultipartFile)files.get(1);
  assertTrue(((MockFileItem)file1.getFileItem()).deleted);
  assertTrue(((MockFileItem)file2.getFileItem()).deleted);
}
