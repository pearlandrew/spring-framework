{
  Optional<Object> optional=result.getReturnValue();
  if (!optional.isPresent()) {
    return Mono.empty();
  }
  Object returnValue=optional.get();
  if (returnValue instanceof Mono) {
    return (Mono<Void>)returnValue;
  }
  ResolvableType returnType=result.getReturnValueType();
  if (getConversionService().canConvert(returnType.getRawClass(),Mono.class)) {
    return this.conversionService.convert(returnValue,Mono.class);
  }
 else {
    return this.conversionService.convert(returnValue,Flux.class).single();
  }
}
