{
  this.requestContext=requestContext;
  this.path=path;
  this.htmlEscape=htmlEscape;
  String beanName=null;
  int dotPos=path.indexOf('.');
  if (dotPos == -1) {
    beanName=path;
    this.expression=null;
  }
 else {
    beanName=path.substring(0,dotPos);
    this.expression=path.substring(dotPos + 1);
  }
  this.errors=requestContext.getErrors(beanName,false);
  if (this.errors != null) {
    if (this.expression != null) {
      if ("*".equals(this.expression)) {
        this.objectErrors=this.errors.getAllErrors();
      }
 else       if (this.expression.endsWith("*")) {
        this.objectErrors=this.errors.getFieldErrors(this.expression);
      }
 else {
        this.objectErrors=this.errors.getFieldErrors(this.expression);
        this.value=this.errors.getFieldValue(this.expression);
        this.valueType=this.errors.getFieldType(this.expression);
        if (this.errors instanceof BindingResult) {
          this.bindingResult=(BindingResult)this.errors;
          this.actualValue=this.bindingResult.getRawFieldValue(this.expression);
          this.editor=this.bindingResult.findEditor(this.expression,null);
        }
      }
    }
 else {
      this.objectErrors=this.errors.getGlobalErrors();
    }
    initErrorCodes();
  }
 else {
    Object target=requestContext.getModelObject(beanName);
    if (target == null) {
      throw new IllegalStateException("Neither BindingResult nor plain target object for bean name '" + beanName + "' available as request attribute");
    }
    if (this.expression != null && !"*".equals(this.expression) && !this.expression.endsWith("*")) {
      BeanWrapper bw=PropertyAccessorFactory.forBeanPropertyAccess(target);
      this.valueType=bw.getPropertyType(this.expression);
      this.value=bw.getPropertyValue(this.expression);
    }
    this.errorCodes=new String[0];
    this.errorMessages=new String[0];
  }
  if (htmlEscape && this.value instanceof String) {
    this.value=HtmlUtils.htmlEscape((String)this.value);
  }
}
