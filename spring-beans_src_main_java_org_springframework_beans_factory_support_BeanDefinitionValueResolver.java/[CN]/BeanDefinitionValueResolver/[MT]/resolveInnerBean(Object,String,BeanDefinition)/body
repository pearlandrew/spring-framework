{
  RootBeanDefinition mbd=null;
  try {
    mbd=this.beanFactory.getMergedBeanDefinition(innerBeanName,innerBd,this.beanDefinition);
    String actualInnerBeanName=innerBeanName;
    if (mbd.isSingleton()) {
      actualInnerBeanName=adaptInnerBeanName(innerBeanName);
    }
    String[] dependsOn=mbd.getDependsOn();
    if (dependsOn != null) {
      for (      String dependsOnBean : dependsOn) {
        this.beanFactory.getBean(dependsOnBean);
        this.beanFactory.registerDependentBean(dependsOnBean,actualInnerBeanName);
      }
    }
    Object innerBean=this.beanFactory.createBean(actualInnerBeanName,mbd,null);
    this.beanFactory.registerContainedBean(actualInnerBeanName,this.beanName);
    if (innerBean instanceof FactoryBean) {
      boolean synthetic=mbd.isSynthetic();
      return this.beanFactory.getObjectFromFactoryBean((FactoryBean)innerBean,actualInnerBeanName,!synthetic);
    }
 else {
      return innerBean;
    }
  }
 catch (  BeansException ex) {
    throw new BeanCreationException(this.beanDefinition.getResourceDescription(),this.beanName,"Cannot create inner bean '" + innerBeanName + "' "+ (mbd != null && mbd.getBeanClassName() != null ? "of type [" + mbd.getBeanClassName() + "] " : "")+ "while setting "+ argName,ex);
  }
}
