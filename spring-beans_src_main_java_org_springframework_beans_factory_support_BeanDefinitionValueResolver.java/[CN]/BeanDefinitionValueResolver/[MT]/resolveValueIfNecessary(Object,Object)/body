{
  if (value instanceof RuntimeBeanReference) {
    RuntimeBeanReference ref=(RuntimeBeanReference)value;
    return resolveReference(argName,ref);
  }
 else   if (value instanceof RuntimeBeanNameReference) {
    String refName=((RuntimeBeanNameReference)value).getBeanName();
    refName=String.valueOf(evaluate(refName));
    if (!this.beanFactory.containsBean(refName)) {
      throw new BeanDefinitionStoreException("Invalid bean name '" + refName + "' in bean reference for "+ argName);
    }
    return refName;
  }
 else   if (value instanceof BeanDefinitionHolder) {
    BeanDefinitionHolder bdHolder=(BeanDefinitionHolder)value;
    return resolveInnerBean(argName,bdHolder.getBeanName(),bdHolder.getBeanDefinition());
  }
 else   if (value instanceof BeanDefinition) {
    BeanDefinition bd=(BeanDefinition)value;
    return resolveInnerBean(argName,"(inner bean)",bd);
  }
 else   if (value instanceof ManagedArray) {
    ManagedArray array=(ManagedArray)value;
    Class<?> elementType=array.resolvedElementType;
    if (elementType == null) {
      String elementTypeName=array.getElementTypeName();
      if (StringUtils.hasText(elementTypeName)) {
        try {
          elementType=ClassUtils.forName(elementTypeName,this.beanFactory.getBeanClassLoader());
          array.resolvedElementType=elementType;
        }
 catch (        Throwable ex) {
          throw new BeanCreationException(this.beanDefinition.getResourceDescription(),this.beanName,"Error resolving array type for " + argName,ex);
        }
      }
 else {
        elementType=Object.class;
      }
    }
    return resolveManagedArray(argName,(List<?>)value,elementType);
  }
 else   if (value instanceof ManagedList) {
    return resolveManagedList(argName,(List<?>)value);
  }
 else   if (value instanceof ManagedSet) {
    return resolveManagedSet(argName,(Set<?>)value);
  }
 else   if (value instanceof ManagedMap) {
    return resolveManagedMap(argName,(Map<?,?>)value);
  }
 else   if (value instanceof ManagedProperties) {
    Properties original=(Properties)value;
    Properties copy=new Properties();
    for (    Map.Entry propEntry : original.entrySet()) {
      Object propKey=propEntry.getKey();
      Object propValue=propEntry.getValue();
      if (propKey instanceof TypedStringValue) {
        propKey=evaluate((TypedStringValue)propKey);
      }
      if (propValue instanceof TypedStringValue) {
        propValue=evaluate((TypedStringValue)propValue);
      }
      copy.put(propKey,propValue);
    }
    return copy;
  }
 else   if (value instanceof TypedStringValue) {
    TypedStringValue typedStringValue=(TypedStringValue)value;
    Object valueObject=evaluate(typedStringValue);
    try {
      Class<?> resolvedTargetType=resolveTargetType(typedStringValue);
      if (resolvedTargetType != null) {
        return this.typeConverter.convertIfNecessary(valueObject,resolvedTargetType);
      }
 else {
        return valueObject;
      }
    }
 catch (    Throwable ex) {
      throw new BeanCreationException(this.beanDefinition.getResourceDescription(),this.beanName,"Error converting typed String value for " + argName,ex);
    }
  }
 else {
    return evaluate(value);
  }
}
