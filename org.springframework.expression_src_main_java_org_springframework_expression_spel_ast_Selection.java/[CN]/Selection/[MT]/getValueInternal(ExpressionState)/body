{
  TypedValue op=state.getActiveContextObject();
  Object operand=op.getValue();
  SpelNodeImpl selectionCriteria=getChild(0);
  if (operand instanceof Map) {
    Map<?,?> mapdata=(Map<?,?>)operand;
    List<Object> result=new ArrayList<Object>();
    for (    Object k : mapdata.keySet()) {
      try {
        TypedValue kvpair=new TypedValue(new KeyValuePair(k,mapdata.get(k)),TypeDescriptor.valueOf(KeyValuePair.class));
        state.pushActiveContextObject(kvpair);
        Object o=selectionCriteria.getValueInternal(state);
        if (o instanceof Boolean) {
          if (((Boolean)o).booleanValue() == true) {
            if (variant == FIRST)             return kvpair;
            result.add(kvpair);
          }
        }
 else {
          throw new SpelException(selectionCriteria.getCharPositionInLine(),SpelMessages.RESULT_OF_SELECTION_CRITERIA_IS_NOT_BOOLEAN);
        }
      }
  finally {
        state.popActiveContextObject();
      }
      if ((variant == FIRST || variant == LAST) && result.size() == 0) {
        return null;
      }
      if (variant == LAST) {
        return new TypedValue(result.get(result.size() - 1),TypeDescriptor.valueOf(op.getTypeDescriptor().getElementType()));
      }
    }
    return new TypedValue(result,op.getTypeDescriptor());
  }
 else   if (operand instanceof Collection) {
    List<Object> data=new ArrayList<Object>();
    data.addAll((Collection<?>)operand);
    List<Object> result=new ArrayList<Object>();
    int idx=0;
    for (    Object element : data) {
      try {
        state.pushActiveContextObject(new TypedValue(element,TypeDescriptor.valueOf(op.getTypeDescriptor().getElementType())));
        state.enterScope("index",idx);
        Object o=selectionCriteria.getValueInternal(state).getValue();
        if (o instanceof Boolean) {
          if (((Boolean)o).booleanValue() == true) {
            if (variant == FIRST)             return new TypedValue(element,TypeDescriptor.valueOf(op.getTypeDescriptor().getElementType()));
            result.add(element);
          }
        }
 else {
          throw new SpelException(selectionCriteria.getCharPositionInLine(),SpelMessages.RESULT_OF_SELECTION_CRITERIA_IS_NOT_BOOLEAN);
        }
        idx++;
      }
  finally {
        state.exitScope();
        state.popActiveContextObject();
      }
    }
    if ((variant == FIRST || variant == LAST) && result.size() == 0) {
      return null;
    }
    if (variant == LAST) {
      return new TypedValue(result.get(result.size() - 1),TypeDescriptor.valueOf(op.getTypeDescriptor().getElementType()));
    }
    return new TypedValue(result,op.getTypeDescriptor());
  }
 else {
    throw new SpelException(getCharPositionInLine(),SpelMessages.INVALID_TYPE_FOR_SELECTION,(operand == null ? "null" : operand.getClass().getName()));
  }
}
