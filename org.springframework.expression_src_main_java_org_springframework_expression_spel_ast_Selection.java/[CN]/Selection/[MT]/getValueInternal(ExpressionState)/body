{
  TypedValue op=state.getActiveContextObject();
  Object operand=op.getValue();
  SpelNodeImpl selectionCriteria=children[0];
  if (operand instanceof Map) {
    Map<?,?> mapdata=(Map<?,?>)operand;
    Map<Object,Object> result=new HashMap<Object,Object>();
    Object lastKey=null;
    for (    Map.Entry entry : mapdata.entrySet()) {
      try {
        lastKey=entry.getKey();
        TypedValue kvpair=new TypedValue(entry,TypeDescriptor.valueOf(Map.Entry.class));
        state.pushActiveContextObject(kvpair);
        Object o=selectionCriteria.getValueInternal(state).getValue();
        if (o instanceof Boolean) {
          if (((Boolean)o).booleanValue() == true) {
            if (variant == FIRST) {
              result.put(entry.getKey(),entry.getValue());
              return new TypedValue(result);
            }
            result.put(entry.getKey(),entry.getValue());
          }
        }
 else {
          throw new SpelEvaluationException(selectionCriteria.getStartPosition(),SpelMessages.RESULT_OF_SELECTION_CRITERIA_IS_NOT_BOOLEAN);
        }
      }
  finally {
        state.popActiveContextObject();
      }
    }
    if ((variant == FIRST || variant == LAST) && result.size() == 0) {
      return new TypedValue(null,TypeDescriptor.NULL);
    }
    if (variant == LAST) {
      Map resultMap=new HashMap();
      Object lastValue=result.get(lastKey);
      resultMap.put(lastKey,lastValue);
      return new TypedValue(resultMap,TypeDescriptor.valueOf(Map.class));
    }
    return new TypedValue(result,op.getTypeDescriptor());
  }
 else   if (operand instanceof Collection) {
    List<Object> data=new ArrayList<Object>();
    data.addAll((Collection<?>)operand);
    List<Object> result=new ArrayList<Object>();
    int idx=0;
    for (    Object element : data) {
      try {
        state.pushActiveContextObject(new TypedValue(element,TypeDescriptor.valueOf(op.getTypeDescriptor().getElementType())));
        state.enterScope("index",idx);
        Object o=selectionCriteria.getValueInternal(state).getValue();
        if (o instanceof Boolean) {
          if (((Boolean)o).booleanValue() == true) {
            if (variant == FIRST) {
              return new TypedValue(element,TypeDescriptor.valueOf(op.getTypeDescriptor().getElementType()));
            }
            result.add(element);
          }
        }
 else {
          throw new SpelEvaluationException(selectionCriteria.getStartPosition(),SpelMessages.RESULT_OF_SELECTION_CRITERIA_IS_NOT_BOOLEAN);
        }
        idx++;
      }
  finally {
        state.exitScope();
        state.popActiveContextObject();
      }
    }
    if ((variant == FIRST || variant == LAST) && result.size() == 0) {
      return TypedValue.NULL_TYPED_VALUE;
    }
    if (variant == LAST) {
      return new TypedValue(result.get(result.size() - 1),TypeDescriptor.valueOf(op.getTypeDescriptor().getElementType()));
    }
    return new TypedValue(result,op.getTypeDescriptor());
  }
 else {
    if (operand == null) {
      if (nullSafe) {
        return TypedValue.NULL_TYPED_VALUE;
      }
 else {
        throw new SpelEvaluationException(getStartPosition(),SpelMessages.INVALID_TYPE_FOR_SELECTION,"null");
      }
    }
 else {
      throw new SpelEvaluationException(getStartPosition(),SpelMessages.INVALID_TYPE_FOR_SELECTION,operand.getClass().getName());
    }
  }
}
