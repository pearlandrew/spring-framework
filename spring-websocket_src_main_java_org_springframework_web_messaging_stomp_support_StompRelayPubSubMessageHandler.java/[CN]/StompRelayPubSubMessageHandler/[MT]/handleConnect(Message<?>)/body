{
  final String sessionId=(String)message.getHeaders().get(PubSubHeaders.SESSION_ID);
  Promise<TcpConnection<String,String>> promise=this.tcpClient.open();
  promise.onSuccess(new Consumer<TcpConnection<String,String>>(){
    @Override public void accept(    TcpConnection<String,String> connection){
      connections.put(sessionId,connection);
      forwardMessage(message,StompCommand.CONNECT);
    }
  }
);
  promise.consume(new Consumer<TcpConnection<String,String>>(){
    @Override public void accept(    TcpConnection<String,String> connection){
      connection.in().consume(new Consumer<String>(){
        @Override public void accept(        String stompFrame){
          if (stompFrame.isEmpty()) {
            return;
          }
          Message<byte[]> message=stompMessageConverter.toMessage(stompFrame,sessionId);
          getClientChannel().send(message);
        }
      }
);
    }
  }
);
}
