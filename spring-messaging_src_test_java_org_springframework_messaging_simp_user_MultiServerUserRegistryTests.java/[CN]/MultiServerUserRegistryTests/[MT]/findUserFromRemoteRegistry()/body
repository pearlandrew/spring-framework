{
  TestSimpSubscription subscription1=new TestSimpSubscription("sub1","/match");
  TestSimpSession session1=new TestSimpSession("sess1");
  session1.addSubscriptions(subscription1);
  TestSimpUser user1=new TestSimpUser("joe");
  user1.addSessions(session1);
  TestSimpSubscription subscription2=new TestSimpSubscription("sub1","/match");
  TestSimpSession session2=new TestSimpSession("sess2");
  session2.addSubscriptions(subscription2);
  TestSimpUser user2=new TestSimpUser("jane");
  user2.addSessions(session2);
  TestSimpSubscription subscription3=new TestSimpSubscription("sub1","/not-a-match");
  TestSimpSession session3=new TestSimpSession("sess3");
  session3.addSubscriptions(subscription3);
  TestSimpUser user3=new TestSimpUser("jack");
  user3.addSessions(session3);
  SimpUserRegistry remoteUserRegistry=mock(SimpUserRegistry.class);
  when(remoteUserRegistry.getUsers()).thenReturn(new HashSet<SimpUser>(Arrays.asList(user1,user2,user3)));
  MultiServerUserRegistry remoteRegistry=new MultiServerUserRegistry(remoteUserRegistry);
  Message<?> message=this.converter.toMessage(remoteRegistry.getLocalRegistryDto(),null);
  this.multiServerRegistry.addRemoteRegistryDto(message,this.converter,20000);
  assertEquals(3,this.multiServerRegistry.getUsers().size());
  Set<SimpSubscription> matches=this.multiServerRegistry.findSubscriptions(new SimpSubscriptionMatcher(){
    @Override public boolean match(    SimpSubscription subscription){
      return subscription.getDestination().equals("/match");
    }
  }
);
  assertEquals(2,matches.size());
  Iterator<SimpSubscription> iterator=matches.iterator();
  Set<String> sessionIds=new HashSet<>(2);
  sessionIds.add(iterator.next().getSession().getId());
  sessionIds.add(iterator.next().getSession().getId());
  assertEquals(new HashSet<>(Arrays.asList("sess1","sess2")),sessionIds);
}
