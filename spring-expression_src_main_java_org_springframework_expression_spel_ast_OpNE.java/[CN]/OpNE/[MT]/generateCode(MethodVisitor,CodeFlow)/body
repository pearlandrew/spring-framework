{
  String leftDesc=getLeftOperand().getExitDescriptor();
  String rightDesc=getRightOperand().getExitDescriptor();
  Label elseTarget=new Label();
  Label endOfIf=new Label();
  boolean leftPrim=CodeFlow.isPrimitive(leftDesc);
  boolean rightPrim=CodeFlow.isPrimitive(rightDesc);
  if ((CodeFlow.isPrimitiveOrUnboxableSupportedNumberOrBoolean(leftDesc) || CodeFlow.isPrimitiveOrUnboxableSupportedNumberOrBoolean(rightDesc)) && CodeFlow.areBoxingCompatible(leftDesc,rightDesc)) {
    char targetType=CodeFlow.toPrimitiveTargetDesc(leftDesc);
    getLeftOperand().generateCode(mv,codeflow);
    if (!leftPrim) {
      CodeFlow.insertUnboxInsns(mv,targetType,false);
    }
    getRightOperand().generateCode(mv,codeflow);
    if (!rightPrim) {
      CodeFlow.insertUnboxInsns(mv,targetType,false);
    }
    if (targetType == 'D') {
      mv.visitInsn(DCMPL);
      mv.visitJumpInsn(IFEQ,elseTarget);
    }
 else     if (targetType == 'F') {
      mv.visitInsn(FCMPL);
      mv.visitJumpInsn(IFEQ,elseTarget);
    }
 else     if (targetType == 'J') {
      mv.visitInsn(LCMP);
      mv.visitJumpInsn(IFEQ,elseTarget);
    }
 else     if (targetType == 'I' || targetType == 'Z') {
      mv.visitJumpInsn(IF_ICMPEQ,elseTarget);
    }
 else {
      throw new IllegalStateException("Unexpected descriptor " + leftDesc);
    }
  }
 else {
    getLeftOperand().generateCode(mv,codeflow);
    getRightOperand().generateCode(mv,codeflow);
    mv.visitJumpInsn(IF_ACMPEQ,elseTarget);
  }
  mv.visitInsn(ICONST_1);
  mv.visitJumpInsn(GOTO,endOfIf);
  mv.visitLabel(elseTarget);
  mv.visitInsn(ICONST_0);
  mv.visitLabel(endOfIf);
  codeflow.pushDescriptor("Z");
}
