{
  BeanWrapperImpl bw=new BeanWrapperImpl();
  this.beanFactory.initBeanWrapper(bw);
  Object factoryBean;
  Class<?> factoryClass;
  boolean isStatic;
  String factoryBeanName=mbd.getFactoryBeanName();
  if (factoryBeanName != null) {
    if (factoryBeanName.equals(beanName)) {
      throw new BeanDefinitionStoreException(mbd.getResourceDescription(),beanName,"factory-bean reference points back to the same bean definition");
    }
    factoryBean=this.beanFactory.getBean(factoryBeanName);
    if (factoryBean == null) {
      throw new BeanCreationException(mbd.getResourceDescription(),beanName,"factory-bean '" + factoryBeanName + "' (or a BeanPostProcessor involved) returned null");
    }
    if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {
      throw new IllegalStateException("About-to-be-created singleton instance implicitly appeared " + "through the creation of the factory bean that its bean definition points to");
    }
    factoryClass=factoryBean.getClass();
    isStatic=false;
  }
 else {
    if (!mbd.hasBeanClass()) {
      throw new BeanDefinitionStoreException(mbd.getResourceDescription(),beanName,"bean definition declares neither a bean class nor a factory-bean reference");
    }
    factoryBean=null;
    factoryClass=mbd.getBeanClass();
    isStatic=true;
  }
  Method factoryMethodToUse=null;
  ArgumentsHolder argsHolderToUse=null;
  Object[] argsToUse=null;
  if (explicitArgs != null) {
    argsToUse=explicitArgs;
  }
 else {
    Object[] argsToResolve=null;
synchronized (mbd.constructorArgumentLock) {
      factoryMethodToUse=(Method)mbd.resolvedConstructorOrFactoryMethod;
      if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {
        argsToUse=mbd.resolvedConstructorArguments;
        if (argsToUse == null) {
          argsToResolve=mbd.preparedConstructorArguments;
        }
      }
    }
    if (argsToResolve != null) {
      argsToUse=resolvePreparedArguments(beanName,mbd,bw,factoryMethodToUse,argsToResolve);
    }
  }
  if (factoryMethodToUse == null || argsToUse == null) {
    factoryClass=ClassUtils.getUserClass(factoryClass);
    Method[] rawCandidates=getCandidateMethods(factoryClass,mbd);
    List<Method> candidateSet=new ArrayList<>();
    for (    Method candidate : rawCandidates) {
      if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {
        candidateSet.add(candidate);
      }
    }
    Method[] candidates=candidateSet.toArray(new Method[candidateSet.size()]);
    AutowireUtils.sortFactoryMethods(candidates);
    ConstructorArgumentValues resolvedValues=null;
    boolean autowiring=(mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);
    int minTypeDiffWeight=Integer.MAX_VALUE;
    Set<Method> ambiguousFactoryMethods=null;
    int minNrOfArgs;
    if (explicitArgs != null) {
      minNrOfArgs=explicitArgs.length;
    }
 else {
      ConstructorArgumentValues cargs=mbd.getConstructorArgumentValues();
      resolvedValues=new ConstructorArgumentValues();
      minNrOfArgs=resolveConstructorArguments(beanName,mbd,bw,cargs,resolvedValues);
    }
    LinkedList<UnsatisfiedDependencyException> causes=null;
    for (    Method candidate : candidates) {
      Class<?>[] paramTypes=candidate.getParameterTypes();
      if (paramTypes.length >= minNrOfArgs) {
        ArgumentsHolder argsHolder;
        if (resolvedValues != null) {
          try {
            String[] paramNames=null;
            ParameterNameDiscoverer pnd=this.beanFactory.getParameterNameDiscoverer();
            if (pnd != null) {
              paramNames=pnd.getParameterNames(candidate);
            }
            argsHolder=createArgumentArray(beanName,mbd,resolvedValues,bw,paramTypes,paramNames,candidate,autowiring);
          }
 catch (          UnsatisfiedDependencyException ex) {
            if (this.beanFactory.logger.isTraceEnabled()) {
              this.beanFactory.logger.trace("Ignoring factory method [" + candidate + "] of bean '"+ beanName+ "': "+ ex);
            }
            if (causes == null) {
              causes=new LinkedList<>();
            }
            causes.add(ex);
            continue;
          }
        }
 else {
          if (paramTypes.length != explicitArgs.length) {
            continue;
          }
          argsHolder=new ArgumentsHolder(explicitArgs);
        }
        int typeDiffWeight=(mbd.isLenientConstructorResolution() ? argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes));
        if (typeDiffWeight < minTypeDiffWeight) {
          factoryMethodToUse=candidate;
          argsHolderToUse=argsHolder;
          argsToUse=argsHolder.arguments;
          minTypeDiffWeight=typeDiffWeight;
          ambiguousFactoryMethods=null;
        }
 else         if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight && !mbd.isLenientConstructorResolution() && paramTypes.length == factoryMethodToUse.getParameterTypes().length && !Arrays.equals(paramTypes,factoryMethodToUse.getParameterTypes())) {
          if (ambiguousFactoryMethods == null) {
            ambiguousFactoryMethods=new LinkedHashSet<>();
            ambiguousFactoryMethods.add(factoryMethodToUse);
          }
          ambiguousFactoryMethods.add(candidate);
        }
      }
    }
    if (factoryMethodToUse == null) {
      if (causes != null) {
        UnsatisfiedDependencyException ex=causes.removeLast();
        for (        Exception cause : causes) {
          this.beanFactory.onSuppressedException(cause);
        }
        throw ex;
      }
      List<String> argTypes=new ArrayList<>(minNrOfArgs);
      if (explicitArgs != null) {
        for (        Object arg : explicitArgs) {
          argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null");
        }
      }
 else {
        Set<ValueHolder> valueHolders=new LinkedHashSet<>(resolvedValues.getArgumentCount());
        valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values());
        valueHolders.addAll(resolvedValues.getGenericArgumentValues());
        for (        ValueHolder value : valueHolders) {
          String argType=(value.getType() != null ? ClassUtils.getShortName(value.getType()) : (value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"));
          argTypes.add(argType);
        }
      }
      String argDesc=StringUtils.collectionToCommaDelimitedString(argTypes);
      throw new BeanCreationException(mbd.getResourceDescription(),beanName,"No matching factory method found: " + (mbd.getFactoryBeanName() != null ? "factory bean '" + mbd.getFactoryBeanName() + "'; " : "") + "factory method '"+ mbd.getFactoryMethodName()+ "("+ argDesc+ ")'. "+ "Check that a method with the specified name "+ (minNrOfArgs > 0 ? "and arguments " : "")+ "exists and that it is "+ (isStatic ? "static" : "non-static")+ ".");
    }
 else     if (void.class == factoryMethodToUse.getReturnType()) {
      throw new BeanCreationException(mbd.getResourceDescription(),beanName,"Invalid factory method '" + mbd.getFactoryMethodName() + "': needs to have a non-void return type!");
    }
 else     if (ambiguousFactoryMethods != null) {
      throw new BeanCreationException(mbd.getResourceDescription(),beanName,"Ambiguous factory method matches found in bean '" + beanName + "' "+ "(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): "+ ambiguousFactoryMethods);
    }
    if (explicitArgs == null && argsHolderToUse != null) {
      argsHolderToUse.storeCache(mbd,factoryMethodToUse);
    }
  }
  try {
    Object beanInstance;
    if (System.getSecurityManager() != null) {
      final Object fb=factoryBean;
      final Method factoryMethod=factoryMethodToUse;
      final Object[] args=argsToUse;
      beanInstance=AccessController.doPrivileged(new PrivilegedAction<Object>(){
        @Override public Object run(){
          return beanFactory.getInstantiationStrategy().instantiate(mbd,beanName,beanFactory,fb,factoryMethod,args);
        }
      }
,beanFactory.getAccessControlContext());
    }
 else {
      beanInstance=this.beanFactory.getInstantiationStrategy().instantiate(mbd,beanName,this.beanFactory,factoryBean,factoryMethodToUse,argsToUse);
    }
    if (beanInstance == null) {
      return null;
    }
    bw.setBeanInstance(beanInstance);
    return bw;
  }
 catch (  Throwable ex) {
    throw new BeanCreationException(mbd.getResourceDescription(),beanName,"Bean instantiation via factory method failed",ex);
  }
}
