{
  BeanWrapperImpl bw=new BeanWrapperImpl();
  this.beanFactory.initBeanWrapper(bw);
  Constructor<?> constructorToUse=null;
  ArgumentsHolder argsHolderToUse=null;
  Object[] argsToUse=null;
  if (explicitArgs != null) {
    argsToUse=explicitArgs;
  }
 else {
    Object[] argsToResolve=null;
synchronized (mbd.constructorArgumentLock) {
      constructorToUse=(Constructor<?>)mbd.resolvedConstructorOrFactoryMethod;
      if (constructorToUse != null && mbd.constructorArgumentsResolved) {
        argsToUse=mbd.resolvedConstructorArguments;
        if (argsToUse == null) {
          argsToResolve=mbd.preparedConstructorArguments;
        }
      }
    }
    if (argsToResolve != null) {
      argsToUse=resolvePreparedArguments(beanName,mbd,bw,constructorToUse,argsToResolve);
    }
  }
  if (constructorToUse == null) {
    boolean autowiring=(chosenCtors != null || mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);
    ConstructorArgumentValues resolvedValues=null;
    int minNrOfArgs;
    if (explicitArgs != null) {
      minNrOfArgs=explicitArgs.length;
    }
 else {
      ConstructorArgumentValues cargs=mbd.getConstructorArgumentValues();
      resolvedValues=new ConstructorArgumentValues();
      minNrOfArgs=resolveConstructorArguments(beanName,mbd,bw,cargs,resolvedValues);
    }
    Constructor<?>[] candidates=chosenCtors;
    if (candidates == null) {
      Class<?> beanClass=mbd.getBeanClass();
      try {
        candidates=(mbd.isNonPublicAccessAllowed() ? beanClass.getDeclaredConstructors() : beanClass.getConstructors());
      }
 catch (      Throwable ex) {
        throw new BeanCreationException(mbd.getResourceDescription(),beanName,"Resolution of declared constructors on bean Class [" + beanClass.getName() + "] from ClassLoader ["+ beanClass.getClassLoader()+ "] failed",ex);
      }
    }
    AutowireUtils.sortConstructors(candidates);
    int minTypeDiffWeight=Integer.MAX_VALUE;
    Set<Constructor<?>> ambiguousConstructors=null;
    LinkedList<UnsatisfiedDependencyException> causes=null;
    for (    Constructor<?> candidate : candidates) {
      Class<?>[] paramTypes=candidate.getParameterTypes();
      if (constructorToUse != null && argsToUse.length > paramTypes.length) {
        break;
      }
      if (paramTypes.length < minNrOfArgs) {
        continue;
      }
      ArgumentsHolder argsHolder;
      if (resolvedValues != null) {
        try {
          String[] paramNames=ConstructorPropertiesChecker.evaluate(candidate,paramTypes.length);
          if (paramNames == null) {
            ParameterNameDiscoverer pnd=this.beanFactory.getParameterNameDiscoverer();
            if (pnd != null) {
              paramNames=pnd.getParameterNames(candidate);
            }
          }
          argsHolder=createArgumentArray(beanName,mbd,resolvedValues,bw,paramTypes,paramNames,getUserDeclaredConstructor(candidate),autowiring);
        }
 catch (        UnsatisfiedDependencyException ex) {
          if (this.beanFactory.logger.isTraceEnabled()) {
            this.beanFactory.logger.trace("Ignoring constructor [" + candidate + "] of bean '"+ beanName+ "': "+ ex);
          }
          if (causes == null) {
            causes=new LinkedList<UnsatisfiedDependencyException>();
          }
          causes.add(ex);
          continue;
        }
      }
 else {
        if (paramTypes.length != explicitArgs.length) {
          continue;
        }
        argsHolder=new ArgumentsHolder(explicitArgs);
      }
      int typeDiffWeight=(mbd.isLenientConstructorResolution() ? argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes));
      if (typeDiffWeight < minTypeDiffWeight) {
        constructorToUse=candidate;
        argsHolderToUse=argsHolder;
        argsToUse=argsHolder.arguments;
        minTypeDiffWeight=typeDiffWeight;
        ambiguousConstructors=null;
      }
 else       if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {
        if (ambiguousConstructors == null) {
          ambiguousConstructors=new LinkedHashSet<Constructor<?>>();
          ambiguousConstructors.add(constructorToUse);
        }
        ambiguousConstructors.add(candidate);
      }
    }
    if (constructorToUse == null) {
      if (causes != null) {
        UnsatisfiedDependencyException ex=causes.removeLast();
        for (        Exception cause : causes) {
          this.beanFactory.onSuppressedException(cause);
        }
        throw ex;
      }
      throw new BeanCreationException(mbd.getResourceDescription(),beanName,"Could not resolve matching constructor " + "(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)");
    }
 else     if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {
      throw new BeanCreationException(mbd.getResourceDescription(),beanName,"Ambiguous constructor matches found in bean '" + beanName + "' "+ "(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): "+ ambiguousConstructors);
    }
    if (explicitArgs == null) {
      argsHolderToUse.storeCache(mbd,constructorToUse);
    }
  }
  try {
    Object beanInstance;
    if (System.getSecurityManager() != null) {
      final Constructor<?> ctorToUse=constructorToUse;
      final Object[] argumentsToUse=argsToUse;
      beanInstance=AccessController.doPrivileged(new PrivilegedAction<Object>(){
        @Override public Object run(){
          return beanFactory.getInstantiationStrategy().instantiate(mbd,beanName,beanFactory,ctorToUse,argumentsToUse);
        }
      }
,beanFactory.getAccessControlContext());
    }
 else {
      beanInstance=this.beanFactory.getInstantiationStrategy().instantiate(mbd,beanName,this.beanFactory,constructorToUse,argsToUse);
    }
    bw.setBeanInstance(beanInstance);
    return bw;
  }
 catch (  Throwable ex) {
    throw new BeanCreationException(mbd.getResourceDescription(),beanName,"Bean instantiation via constructor failed",ex);
  }
}
