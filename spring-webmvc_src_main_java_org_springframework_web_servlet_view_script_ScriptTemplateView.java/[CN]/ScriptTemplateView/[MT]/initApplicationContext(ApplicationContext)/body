{
  super.initApplicationContext(context);
  ScriptTemplateConfig viewConfig=autodetectViewConfig();
  if (this.engine == null && viewConfig.getEngine() != null) {
    setEngine(viewConfig.getEngine());
  }
  if (this.engineName == null && viewConfig.getEngineName() != null) {
    this.engineName=viewConfig.getEngineName();
  }
  if (this.scripts == null && viewConfig.getScripts() != null) {
    this.scripts=viewConfig.getScripts();
  }
  if (this.renderObject == null && viewConfig.getRenderObject() != null) {
    this.renderObject=viewConfig.getRenderObject();
  }
  if (this.renderFunction == null && viewConfig.getRenderFunction() != null) {
    this.renderFunction=viewConfig.getRenderFunction();
  }
  if (this.charset == null) {
    this.charset=viewConfig.getCharset() == null ? DEFAULT_CHARSET : viewConfig.getCharset();
  }
  if (this.resourceLoaderPath == null) {
    this.resourceLoaderPath=viewConfig.getResourceLoaderPath() == null ? DEFAULT_RESOURCE_LOADER_PATH : viewConfig.getResourceLoaderPath();
  }
  if (this.resourceLoader == null) {
    this.resourceLoader=new DefaultResourceLoader(createClassLoader());
  }
  if (this.sharedEngine == null && viewConfig.isShareEngine() != null) {
    this.sharedEngine=viewConfig.isShareEngine();
  }
  Assert.state(!(this.engine != null && this.engineName != null),"You should define engine or engineName properties, not both.");
  Assert.state(!(this.engine == null && this.engineName == null),"No script engine found, please specify valid engine or engineName properties.");
  if (Boolean.FALSE.equals(this.sharedEngine)) {
    Assert.state(this.engineName != null,"When sharedEngine property is set to false, you should specify the " + "script engine using the engineName property, not the engine one.");
  }
  Assert.state(this.renderFunction != null,"renderFunction property must be defined.");
  if (this.engine != null) {
    loadScripts(this.engine);
  }
 else {
    setEngine(createEngineFromName());
  }
}
