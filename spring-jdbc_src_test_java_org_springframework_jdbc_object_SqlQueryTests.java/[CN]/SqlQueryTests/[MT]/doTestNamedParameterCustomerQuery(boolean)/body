{
  given(resultSet.next()).willReturn(true,false);
  given(resultSet.getInt("id")).willReturn(1);
  given(resultSet.getString("forename")).willReturn("rod");
  given(connection.prepareStatement(SELECT_ID_FORENAME_NAMED_PARAMETERS_PARSED,ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY)).willReturn(preparedStatement);
class CustomerQuery extends MappingSqlQuery<Customer> {
    public CustomerQuery(    DataSource ds){
      super(ds,SELECT_ID_FORENAME_NAMED_PARAMETERS);
      setResultSetType(ResultSet.TYPE_SCROLL_SENSITIVE);
      if (namedDeclarations) {
        declareParameter(new SqlParameter("country",Types.VARCHAR));
        declareParameter(new SqlParameter("id",Types.NUMERIC));
      }
 else {
        declareParameter(new SqlParameter(Types.NUMERIC));
        declareParameter(new SqlParameter(Types.VARCHAR));
      }
      compile();
    }
    @Override protected Customer mapRow(    ResultSet rs,    int rownum) throws SQLException {
      Customer cust=new Customer();
      cust.setId(rs.getInt(COLUMN_NAMES[0]));
      cust.setForename(rs.getString(COLUMN_NAMES[1]));
      return cust;
    }
    public Customer findCustomer(    int id,    String country){
      Map<String,Object> params=new HashMap<>();
      params.put("id",id);
      params.put("country",country);
      return executeByNamedParam(params).get(0);
    }
  }
  CustomerQuery query=new CustomerQuery(dataSource);
  Customer cust=query.findCustomer(1,"UK");
  assertTrue("Customer id was assigned correctly",cust.getId() == 1);
  assertTrue("Customer forename was assigned correctly",cust.getForename().equals("rod"));
  verify(preparedStatement).setObject(1,1,Types.NUMERIC);
  verify(preparedStatement).setString(2,"UK");
  verify(resultSet).close();
  verify(preparedStatement).close();
  verify(connection).close();
}
