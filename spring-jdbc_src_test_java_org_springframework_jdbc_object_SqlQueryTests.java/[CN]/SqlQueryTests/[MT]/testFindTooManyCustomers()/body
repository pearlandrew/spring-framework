{
  mockResultSet.next();
  ctrlResultSet.setReturnValue(true);
  mockResultSet.getInt("id");
  ctrlResultSet.setReturnValue(1);
  mockResultSet.getString("forename");
  ctrlResultSet.setReturnValue("rod");
  mockResultSet.next();
  ctrlResultSet.setReturnValue(true);
  mockResultSet.getInt("id");
  ctrlResultSet.setReturnValue(2);
  mockResultSet.getString("forename");
  ctrlResultSet.setReturnValue("rod");
  mockResultSet.next();
  ctrlResultSet.setReturnValue(false);
  mockResultSet.close();
  ctrlResultSet.setVoidCallable();
  mockPreparedStatement.setString(1,"rod");
  ctrlPreparedStatement.setVoidCallable();
  mockPreparedStatement.executeQuery();
  ctrlPreparedStatement.setReturnValue(mockResultSet);
  if (debugEnabled) {
    mockPreparedStatement.getWarnings();
    ctrlPreparedStatement.setReturnValue(null);
  }
  mockPreparedStatement.close();
  ctrlPreparedStatement.setVoidCallable();
  mockConnection.prepareStatement(SELECT_ID_FORENAME_WHERE);
  ctrlConnection.setReturnValue(mockPreparedStatement);
  replay();
class CustomerQuery extends MappingSqlQuery {
    public CustomerQuery(    DataSource ds){
      super(ds,SELECT_ID_FORENAME_WHERE);
      declareParameter(new SqlParameter(Types.VARCHAR));
      compile();
    }
    @Override protected Object mapRow(    ResultSet rs,    int rownum) throws SQLException {
      Customer cust=new Customer();
      cust.setId(rs.getInt(COLUMN_NAMES[0]));
      cust.setForename(rs.getString(COLUMN_NAMES[1]));
      return cust;
    }
    public Customer findCustomer(    String id){
      return (Customer)findObject(id);
    }
  }
  CustomerQuery query=new CustomerQuery(mockDataSource);
  try {
    Customer cust=query.findCustomer("rod");
    fail("Should fail if more than one row found");
  }
 catch (  IncorrectResultSizeDataAccessException ex) {
  }
}
