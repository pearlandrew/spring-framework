{
  reset(connection);
  PreparedStatement preparedStatement2=mock(PreparedStatement.class);
  ResultSet resultSet2=mock(ResultSet.class);
  given(preparedStatement2.executeQuery()).willReturn(resultSet2);
  given(resultSet.next()).willReturn(true,false);
  given(resultSet.getInt("id")).willReturn(1);
  given(resultSet.getString("forename")).willReturn("rod");
  given(resultSet2.next()).willReturn(false);
  given(connection.prepareStatement(SELECT_ID_WHERE)).willReturn(preparedStatement,preparedStatement2);
class CustomerQuery extends MappingSqlQuery<Customer> {
    public CustomerQuery(    DataSource ds){
      super(ds,SELECT_ID_WHERE);
      declareParameter(new SqlParameter(COLUMN_NAMES[0],COLUMN_TYPES[0]));
      declareParameter(new SqlParameter(COLUMN_NAMES[1],COLUMN_TYPES[1]));
      compile();
    }
    @Override protected Customer mapRow(    ResultSet rs,    int rownum) throws SQLException {
      Customer cust=new Customer();
      cust.setId(rs.getInt(COLUMN_NAMES[0]));
      cust.setForename(rs.getString(COLUMN_NAMES[1]));
      return cust;
    }
    public Customer findCustomer(    int id,    String name){
      return findObject(new Object[]{id,name});
    }
  }
  CustomerQuery query=new CustomerQuery(dataSource);
  Customer cust1=query.findCustomer(1,"rod");
  assertTrue("Found customer",cust1 != null);
  assertTrue("Customer id was assigned correctly",cust1.getId() == 1);
  Customer cust2=query.findCustomer(1,"Roger");
  assertTrue("No customer found",cust2 == null);
  verify(preparedStatement).setObject(1,1,Types.INTEGER);
  verify(preparedStatement).setString(2,"rod");
  verify(preparedStatement2).setObject(1,1,Types.INTEGER);
  verify(preparedStatement2).setString(2,"Roger");
  verify(resultSet).close();
  verify(resultSet2).close();
  verify(preparedStatement).close();
  verify(preparedStatement2).close();
  verify(connection,times(2)).close();
}
