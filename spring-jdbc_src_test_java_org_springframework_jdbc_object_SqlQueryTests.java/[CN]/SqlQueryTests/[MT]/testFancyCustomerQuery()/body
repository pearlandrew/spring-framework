{
  mockResultSet.next();
  ctrlResultSet.setReturnValue(true);
  mockResultSet.getInt("id");
  ctrlResultSet.setReturnValue(1);
  mockResultSet.getString("forename");
  ctrlResultSet.setReturnValue("rod");
  mockResultSet.next();
  ctrlResultSet.setReturnValue(false);
  mockResultSet.close();
  ctrlResultSet.setVoidCallable();
  mockPreparedStatement.setObject(1,new Integer(1),Types.NUMERIC);
  ctrlPreparedStatement.setVoidCallable();
  mockPreparedStatement.executeQuery();
  ctrlPreparedStatement.setReturnValue(mockResultSet);
  if (debugEnabled) {
    mockPreparedStatement.getWarnings();
    ctrlPreparedStatement.setReturnValue(null);
  }
  mockPreparedStatement.close();
  ctrlPreparedStatement.setVoidCallable();
  mockConnection.prepareStatement(SELECT_ID_FORENAME_WHERE,ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
  ctrlConnection.setReturnValue(mockPreparedStatement);
  replay();
class CustomerQuery extends MappingSqlQuery {
    public CustomerQuery(    DataSource ds){
      super(ds,SELECT_ID_FORENAME_WHERE);
      setResultSetType(ResultSet.TYPE_SCROLL_SENSITIVE);
      declareParameter(new SqlParameter(Types.NUMERIC));
      compile();
    }
    @Override protected Object mapRow(    ResultSet rs,    int rownum) throws SQLException {
      Customer cust=new Customer();
      cust.setId(rs.getInt(COLUMN_NAMES[0]));
      cust.setForename(rs.getString(COLUMN_NAMES[1]));
      return cust;
    }
    public Customer findCustomer(    int id){
      return (Customer)findObject(id);
    }
  }
  CustomerQuery query=new CustomerQuery(mockDataSource);
  Customer cust=query.findCustomer(1);
  assertTrue("Customer id was assigned correctly",cust.getId() == 1);
  assertTrue("Customer forename was assigned correctly",cust.getForename().equals("rod"));
}
