{
  ApplicationContext ctx=new ClassPathXmlApplicationContext("jrubyContextForWrappers.xml",getClass());
  WrapperAdder adder=(WrapperAdder)ctx.getBean("adder");
  assertEquals(new Integer(2),adder.addInts(new Integer(1),new Integer(1)));
  assertEquals(Integer.class,adder.addInts(new Integer(1),new Integer(1)).getClass());
  assertEquals(new Short((short)4),adder.addShorts(new Short((short)1),new Short((short)3)));
  assertEquals(Short.class,adder.addShorts(new Short((short)1),new Short((short)3)).getClass());
  assertEquals(new Long(5L),adder.addLongs(new Long(2L),new Long(3L)));
  assertEquals(Long.class,adder.addLongs(new Long(2L),new Long(3L)).getClass());
  assertEquals(5,adder.addFloats(new Float(2.0F),new Float(3.1F)).intValue());
  assertEquals(Float.class,adder.addFloats(new Float(2.0F),new Float(3.1F)).getClass());
  assertEquals(5,new Double(adder.addDoubles(new Double(2.0),new Double(3.1)).intValue()).intValue());
  assertEquals(Double.class,adder.addDoubles(new Double(2.0),new Double(3.1)).getClass());
  assertFalse(adder.resultIsPositive(new Integer(-200),new Integer(1)).booleanValue());
  assertEquals(Boolean.class,adder.resultIsPositive(new Integer(-200),new Integer(1)).getClass());
  assertEquals("ri",adder.concatenate(new Character('r'),new Character('i')));
  assertEquals(String.class,adder.concatenate(new Character('r'),new Character('i')).getClass());
  assertEquals(new Character('c'),adder.echo(new Character('c')));
  assertEquals(Character.class,adder.echo(new Character('c')).getClass());
  Integer[] numbers=new Integer[]{new Integer(1),new Integer(2),new Integer(3),new Integer(4),new Integer(5)};
  assertEquals("12345",adder.concatArrayOfIntegerWrappers(numbers));
  assertEquals(String.class,adder.concatArrayOfIntegerWrappers(numbers).getClass());
  Short[] shorts=adder.populate(new Short((short)1),new Short((short)2));
  assertEquals(2,shorts.length);
  assertNotNull(shorts[0]);
  assertEquals(new Short((short)1),shorts[0]);
  assertNotNull(shorts[1]);
  assertEquals(new Short((short)2),shorts[1]);
  String[][] lol=adder.createListOfLists("1","2","3");
  assertNotNull(lol);
  assertEquals(3,lol.length);
  assertEquals("1",lol[0][0]);
  assertEquals("2",lol[1][0]);
  assertEquals("3",lol[2][0]);
  Map<?,?> singleValueMap=adder.toMap("key","value");
  assertNotNull(singleValueMap);
  assertEquals(1,singleValueMap.size());
  assertEquals("key",singleValueMap.keySet().iterator().next());
  assertEquals("value",singleValueMap.values().iterator().next());
  String[] expectedStrings=new String[]{"1","2","3"};
  Map<?,?> map=adder.toMap("key",expectedStrings);
  assertNotNull(map);
  assertEquals(1,map.size());
  assertEquals("key",map.keySet().iterator().next());
  String[] strings=(String[])map.values().iterator().next();
  for (int i=0; i < expectedStrings.length; ++i) {
    assertEquals(expectedStrings[i],strings[i]);
  }
}
