{
  Assert.state(this.environment != null,"Environment must not be null");
  Assert.state(this.resourceLoader != null,"ResourceLoader must not be null");
  ClassPathBeanDefinitionScanner scanner=new ClassPathBeanDefinitionScanner(this.registry,componentScan.getBoolean("useDefaultFilters"));
  scanner.setEnvironment(this.environment);
  scanner.setResourceLoader(this.resourceLoader);
  Class<? extends BeanNameGenerator> generatorClass=componentScan.getClass("nameGenerator");
  boolean useInheritedGenerator=BeanNameGenerator.class == generatorClass;
  scanner.setBeanNameGenerator(useInheritedGenerator ? this.beanNameGenerator : BeanUtils.instantiateClass(generatorClass));
  ScopedProxyMode scopedProxyMode=componentScan.getEnum("scopedProxy");
  if (scopedProxyMode != ScopedProxyMode.DEFAULT) {
    scanner.setScopedProxyMode(scopedProxyMode);
  }
 else {
    Class<? extends ScopeMetadataResolver> resolverClass=componentScan.getClass("scopeResolver");
    scanner.setScopeMetadataResolver(BeanUtils.instantiateClass(resolverClass));
  }
  scanner.setResourcePattern(componentScan.getString("resourcePattern"));
  for (  AnnotationAttributes filter : componentScan.getAnnotationArray("includeFilters")) {
    for (    TypeFilter typeFilter : typeFiltersFor(filter)) {
      scanner.addIncludeFilter(typeFilter);
    }
  }
  for (  AnnotationAttributes filter : componentScan.getAnnotationArray("excludeFilters")) {
    for (    TypeFilter typeFilter : typeFiltersFor(filter)) {
      scanner.addExcludeFilter(typeFilter);
    }
  }
  boolean lazyInit=componentScan.getBoolean("lazyInit");
  if (lazyInit) {
    scanner.getBeanDefinitionDefaults().setLazyInit(true);
  }
  Set<String> basePackages=new LinkedHashSet<String>();
  String[] basePackagesArray=componentScan.getAliasedStringArray("basePackages",ComponentScan.class,declaringClass);
  for (  String pkg : basePackagesArray) {
    String[] tokenized=StringUtils.tokenizeToStringArray(this.environment.resolvePlaceholders(pkg),ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);
    basePackages.addAll(Arrays.asList(tokenized));
  }
  for (  Class<?> clazz : componentScan.getClassArray("basePackageClasses")) {
    basePackages.add(ClassUtils.getPackageName(clazz));
  }
  if (basePackages.isEmpty()) {
    basePackages.add(ClassUtils.getPackageName(declaringClass));
  }
  scanner.addExcludeFilter(new AbstractTypeHierarchyTraversingFilter(false,false){
    @Override protected boolean matchClassName(    String className){
      return declaringClass.equals(className);
    }
  }
);
  return scanner.doScan(StringUtils.toStringArray(basePackages));
}
