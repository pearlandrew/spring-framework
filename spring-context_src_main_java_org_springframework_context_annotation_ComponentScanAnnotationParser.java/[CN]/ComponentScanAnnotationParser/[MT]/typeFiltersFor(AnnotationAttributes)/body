{
  List<TypeFilter> typeFilters=new ArrayList<TypeFilter>();
  FilterType filterType=filterAttributes.getEnum("type");
  for (  Class<?> filterClass : filterAttributes.getAliasedClassArray("classes",ComponentScan.Filter.class,null)) {
switch (filterType) {
case ANNOTATION:
      Assert.isAssignable(Annotation.class,filterClass,"An error occured while processing a @ComponentScan ANNOTATION type filter: ");
    @SuppressWarnings("unchecked") Class<Annotation> annotationType=(Class<Annotation>)filterClass;
  typeFilters.add(new AnnotationTypeFilter(annotationType));
break;
case ASSIGNABLE_TYPE:
typeFilters.add(new AssignableTypeFilter(filterClass));
break;
case CUSTOM:
Assert.isAssignable(TypeFilter.class,filterClass,"An error occured while processing a @ComponentScan CUSTOM type filter: ");
TypeFilter filter=BeanUtils.instantiateClass(filterClass,TypeFilter.class);
invokeAwareMethods(filter);
typeFilters.add(filter);
break;
default :
throw new IllegalArgumentException("Filter type not supported with Class value: " + filterType);
}
}
for (String expression : filterAttributes.getStringArray("pattern")) {
switch (filterType) {
case ASPECTJ:
typeFilters.add(new AspectJTypeFilter(expression,this.resourceLoader.getClassLoader()));
break;
case REGEX:
typeFilters.add(new RegexPatternTypeFilter(Pattern.compile(expression)));
break;
default :
throw new IllegalArgumentException("Filter type not supported with String pattern: " + filterType);
}
}
return typeFilters;
}
