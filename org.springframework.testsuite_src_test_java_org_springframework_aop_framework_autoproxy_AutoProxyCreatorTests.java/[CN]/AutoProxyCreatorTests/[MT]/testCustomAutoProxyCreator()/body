{
  StaticApplicationContext sac=new StaticApplicationContext();
  sac.registerSingleton("testAutoProxyCreator",TestAutoProxyCreator.class);
  sac.registerSingleton("singletonNoInterceptor",TestBean.class);
  sac.registerSingleton("singletonToBeProxied",TestBean.class);
  sac.registerPrototype("prototypeToBeProxied",TestBean.class);
  sac.refresh();
  MessageSource messageSource=(MessageSource)sac.getBean("messageSource");
  ITestBean singletonNoInterceptor=(ITestBean)sac.getBean("singletonNoInterceptor");
  ITestBean singletonToBeProxied=(ITestBean)sac.getBean("singletonToBeProxied");
  ITestBean prototypeToBeProxied=(ITestBean)sac.getBean("prototypeToBeProxied");
  assertFalse(AopUtils.isCglibProxy(messageSource));
  assertTrue(AopUtils.isCglibProxy(singletonNoInterceptor));
  assertTrue(AopUtils.isCglibProxy(singletonToBeProxied));
  assertTrue(AopUtils.isCglibProxy(prototypeToBeProxied));
  TestAutoProxyCreator tapc=(TestAutoProxyCreator)sac.getBean("testAutoProxyCreator");
  assertEquals(0,tapc.testInterceptor.nrOfInvocations);
  singletonNoInterceptor.getName();
  assertEquals(0,tapc.testInterceptor.nrOfInvocations);
  singletonToBeProxied.getAge();
  assertEquals(1,tapc.testInterceptor.nrOfInvocations);
  prototypeToBeProxied.getSpouse();
  assertEquals(2,tapc.testInterceptor.nrOfInvocations);
}
