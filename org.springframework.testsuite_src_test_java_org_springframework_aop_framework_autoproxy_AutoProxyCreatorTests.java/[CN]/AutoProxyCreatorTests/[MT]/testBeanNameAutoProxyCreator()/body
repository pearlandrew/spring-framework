{
  StaticApplicationContext sac=new StaticApplicationContext();
  sac.registerSingleton("testInterceptor",TestInterceptor.class);
  RootBeanDefinition proxyCreator=new RootBeanDefinition(BeanNameAutoProxyCreator.class);
  proxyCreator.getPropertyValues().addPropertyValue("interceptorNames","testInterceptor");
  proxyCreator.getPropertyValues().addPropertyValue("beanNames","singletonToBeProxied,innerBean,singletonFactoryToBeProxied");
  sac.getDefaultListableBeanFactory().registerBeanDefinition("beanNameAutoProxyCreator",proxyCreator);
  RootBeanDefinition bd=new RootBeanDefinition(TestBean.class,RootBeanDefinition.AUTOWIRE_BY_TYPE);
  RootBeanDefinition innerBean=new RootBeanDefinition(TestBean.class);
  bd.getPropertyValues().addPropertyValue("spouse",new BeanDefinitionHolder(innerBean,"innerBean"));
  sac.getDefaultListableBeanFactory().registerBeanDefinition("singletonToBeProxied",bd);
  sac.registerSingleton("singletonFactoryToBeProxied",DummyFactory.class);
  sac.registerSingleton("autowiredIndexedTestBean",IndexedTestBean.class);
  sac.refresh();
  MessageSource messageSource=(MessageSource)sac.getBean("messageSource");
  ITestBean singletonToBeProxied=(ITestBean)sac.getBean("singletonToBeProxied");
  assertFalse(Proxy.isProxyClass(messageSource.getClass()));
  assertTrue(Proxy.isProxyClass(singletonToBeProxied.getClass()));
  assertTrue(Proxy.isProxyClass(singletonToBeProxied.getSpouse().getClass()));
  assertEquals(sac.getBean("autowiredIndexedTestBean"),singletonToBeProxied.getNestedIndexedBean());
  TestInterceptor ti=(TestInterceptor)sac.getBean("testInterceptor");
  assertEquals(2,ti.nrOfInvocations);
  singletonToBeProxied.getName();
  singletonToBeProxied.getSpouse().getName();
  assertEquals(5,ti.nrOfInvocations);
  ITestBean tb=(ITestBean)sac.getBean("singletonFactoryToBeProxied");
  assertTrue(AopUtils.isJdkDynamicProxy(tb));
  assertEquals(5,ti.nrOfInvocations);
  tb.getAge();
  assertEquals(6,ti.nrOfInvocations);
  ITestBean tb2=(ITestBean)sac.getBean("singletonFactoryToBeProxied");
  assertSame(tb,tb2);
  assertEquals(6,ti.nrOfInvocations);
  tb2.getAge();
  assertEquals(7,ti.nrOfInvocations);
}
