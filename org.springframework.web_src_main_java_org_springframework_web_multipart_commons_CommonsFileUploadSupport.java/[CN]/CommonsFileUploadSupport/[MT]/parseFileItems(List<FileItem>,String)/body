{
  MultiValueMap<String,MultipartFile> multipartFiles=new LinkedMultiValueMap<String,MultipartFile>();
  Map<String,String[]> multipartParameters=new HashMap<String,String[]>();
  for (  FileItem fileItem : fileItems) {
    if (fileItem.isFormField()) {
      String value;
      if (encoding != null) {
        try {
          value=fileItem.getString(encoding);
        }
 catch (        UnsupportedEncodingException ex) {
          if (logger.isWarnEnabled()) {
            logger.warn("Could not decode multipart item '" + fileItem.getFieldName() + "' with encoding '"+ encoding+ "': using platform default");
          }
          value=fileItem.getString();
        }
      }
 else {
        value=fileItem.getString();
      }
      String[] curParam=multipartParameters.get(fileItem.getFieldName());
      if (curParam == null) {
        multipartParameters.put(fileItem.getFieldName(),new String[]{value});
      }
 else {
        String[] newParam=StringUtils.addStringToArray(curParam,value);
        multipartParameters.put(fileItem.getFieldName(),newParam);
      }
    }
 else {
      CommonsMultipartFile file=new CommonsMultipartFile(fileItem);
      multipartFiles.add(file.getName(),file);
      if (logger.isDebugEnabled()) {
        logger.debug("Found multipart file [" + file.getName() + "] of size "+ file.getSize()+ " bytes with original filename ["+ file.getOriginalFilename()+ "], stored "+ file.getStorageDescription());
      }
    }
  }
  return new MultipartParsingResult(multipartFiles,multipartParameters);
}
