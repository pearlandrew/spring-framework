{
  this.beanFactory=beanFactory;
  if (this.targetBeanWrapper != null && this.targetBeanName != null) {
    throw new IllegalArgumentException("Specify either 'targetObject' or 'targetBeanName', not both");
  }
  if (this.targetBeanWrapper == null && this.targetBeanName == null) {
    if (this.propertyPath != null) {
      throw new IllegalArgumentException("Specify 'targetObject' or 'targetBeanName' in combination with 'propertyPath'");
    }
    int dotIndex=this.beanName.indexOf('.');
    if (dotIndex == -1) {
      throw new IllegalArgumentException("Neither 'targetObject' nor 'targetBeanName' specified, and PropertyPathFactoryBean " + "bean name '" + this.beanName + "' does not follow 'beanName.property' syntax");
    }
    this.targetBeanName=this.beanName.substring(0,dotIndex);
    this.propertyPath=this.beanName.substring(dotIndex + 1);
  }
 else   if (this.propertyPath == null) {
    throw new IllegalArgumentException("'propertyPath' is required");
  }
  if (this.targetBeanWrapper == null && this.beanFactory.isSingleton(this.targetBeanName)) {
    Object bean=this.beanFactory.getBean(this.targetBeanName);
    this.targetBeanWrapper=PropertyAccessorFactory.forBeanPropertyAccess(bean);
    this.resultType=this.targetBeanWrapper.getPropertyType(this.propertyPath);
  }
}
