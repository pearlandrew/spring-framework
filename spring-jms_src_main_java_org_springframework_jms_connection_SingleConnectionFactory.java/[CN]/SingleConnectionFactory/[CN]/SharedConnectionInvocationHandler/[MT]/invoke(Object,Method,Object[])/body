{
  if (method.getName().equals("equals")) {
    Object other=args[0];
    if (proxy == other) {
      return true;
    }
    if (other == null || !Proxy.isProxyClass(other.getClass())) {
      return false;
    }
    InvocationHandler otherHandler=Proxy.getInvocationHandler(other);
    return (otherHandler instanceof SharedConnectionInvocationHandler && factory() == ((SharedConnectionInvocationHandler)otherHandler).factory());
  }
 else   if (method.getName().equals("hashCode")) {
    return System.identityHashCode(factory());
  }
 else   if (method.getName().equals("toString")) {
    return "Shared JMS Connection: " + getConnection();
  }
 else   if (method.getName().equals("setClientID")) {
    String currentClientId=getConnection().getClientID();
    if (currentClientId != null && currentClientId.equals(args[0])) {
      return null;
    }
 else {
      throw new javax.jms.IllegalStateException("setClientID call not supported on proxy for shared Connection. " + "Set the 'clientId' property on the SingleConnectionFactory instead.");
    }
  }
 else   if (method.getName().equals("setExceptionListener")) {
synchronized (connectionMonitor) {
      if (aggregatedExceptionListener != null) {
        ExceptionListener listener=(ExceptionListener)args[0];
        if (listener != this.localExceptionListener) {
          if (this.localExceptionListener != null) {
            aggregatedExceptionListener.delegates.remove(this.localExceptionListener);
          }
          if (listener != null) {
            aggregatedExceptionListener.delegates.add(listener);
          }
          this.localExceptionListener=listener;
        }
        return null;
      }
 else {
        throw new javax.jms.IllegalStateException("setExceptionListener call not supported on proxy for shared Connection. " + "Set the 'exceptionListener' property on the SingleConnectionFactory instead. " + "Alternatively, activate SingleConnectionFactory's 'reconnectOnException' feature, "+ "which will allow for registering further ExceptionListeners to the recovery chain.");
      }
    }
  }
 else   if (method.getName().equals("getExceptionListener")) {
synchronized (connectionMonitor) {
      if (this.localExceptionListener != null) {
        return this.localExceptionListener;
      }
 else {
        return getExceptionListener();
      }
    }
  }
 else   if (method.getName().equals("start")) {
    localStart();
    return null;
  }
 else   if (method.getName().equals("stop")) {
    localStop();
    return null;
  }
 else   if (method.getName().equals("close")) {
    localStop();
synchronized (connectionMonitor) {
      if (this.localExceptionListener != null) {
        if (aggregatedExceptionListener != null) {
          aggregatedExceptionListener.delegates.remove(this.localExceptionListener);
        }
        this.localExceptionListener=null;
      }
    }
    return null;
  }
 else   if (method.getName().equals("createSession") || method.getName().equals("createQueueSession") || method.getName().equals("createTopicSession")) {
    Integer mode=Session.AUTO_ACKNOWLEDGE;
    if (args != null) {
      if (args.length == 1) {
        mode=(Integer)args[0];
      }
 else       if (args.length == 2) {
        boolean transacted=(Boolean)args[0];
        Integer ackMode=(Integer)args[1];
        mode=(transacted ? Session.SESSION_TRANSACTED : ackMode);
      }
    }
    Session session=getSession(getConnection(),mode);
    if (session != null) {
      if (!method.getReturnType().isInstance(session)) {
        String msg="JMS Session does not implement specific domain: " + session;
        try {
          session.close();
        }
 catch (        Throwable ex) {
          logger.trace("Failed to close newly obtained JMS Session",ex);
        }
        throw new javax.jms.IllegalStateException(msg);
      }
      return session;
    }
  }
  try {
    return method.invoke(getConnection(),args);
  }
 catch (  InvocationTargetException ex) {
    throw ex.getTargetException();
  }
}
