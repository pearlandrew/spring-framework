{
  List<Class<?>> hierarchy=new ArrayList<Class<?>>(20);
  Set<Class<?>> visited=new HashSet<Class<?>>(20);
  addToClassHierarchy(0,ClassUtils.resolvePrimitiveIfNecessary(type),false,hierarchy,visited);
  boolean array=type.isArray();
  int i=0;
  while (i < hierarchy.size()) {
    Class<?> candidate=hierarchy.get(i);
    candidate=(array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate));
    Class<?> superclass=candidate.getSuperclass();
    if (candidate.getSuperclass() != null && superclass != Object.class && superclass != Enum.class) {
      addToClassHierarchy(i + 1,candidate.getSuperclass(),array,hierarchy,visited);
    }
    addInterfacesToClassHierarchy(candidate,array,hierarchy,visited);
    i++;
  }
  if (type.isEnum()) {
    addToClassHierarchy(hierarchy.size(),Enum.class,array,hierarchy,visited);
    addToClassHierarchy(hierarchy.size(),Enum.class,false,hierarchy,visited);
    addInterfacesToClassHierarchy(Enum.class,array,hierarchy,visited);
  }
  addToClassHierarchy(hierarchy.size(),Object.class,array,hierarchy,visited);
  addToClassHierarchy(hierarchy.size(),Object.class,false,hierarchy,visited);
  return hierarchy;
}
