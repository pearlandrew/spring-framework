{
  final AtomicReference<Throwable> failure=new AtomicReference<Throwable>();
  final CountDownLatch latch=new CountDownLatch(1);
  this.template.setReceiveTimeout(1);
  this.template.setThrowExceptionOnLateReply(true);
  SubscribableChannel channel=new ExecutorSubscribableChannel(this.executor);
  channel.subscribe(new MessageHandler(){
    @Override public void handleMessage(    Message<?> message) throws MessagingException {
      try {
        Thread.sleep(500);
        MessageChannel replyChannel=(MessageChannel)message.getHeaders().getReplyChannel();
        replyChannel.send(new GenericMessage<String>("response"));
        failure.set(new IllegalStateException("Expected exception"));
      }
 catch (      InterruptedException e) {
        failure.set(e);
      }
catch (      MessageDeliveryException ex) {
        String expected="Reply message received but the receiving thread has exited due to a timeout";
        String actual=ex.getMessage();
        if (!expected.equals(actual)) {
          failure.set(new IllegalStateException("Unexpected error: '" + actual + "'"));
        }
      }
 finally {
        latch.countDown();
      }
    }
  }
);
  assertNull(this.template.convertSendAndReceive(channel,"request",String.class));
  assertTrue(latch.await(1000,TimeUnit.MILLISECONDS));
  if (failure.get() != null) {
    throw new AssertionError(failure.get());
  }
}
