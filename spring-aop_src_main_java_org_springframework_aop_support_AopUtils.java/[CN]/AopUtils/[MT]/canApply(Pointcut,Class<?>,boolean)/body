{
  if (!pc.getClassFilter().matches(targetClass)) {
    return false;
  }
  MethodMatcher methodMatcher=pc.getMethodMatcher();
  IntroductionAwareMethodMatcher introductionAwareMethodMatcher=null;
  if (methodMatcher instanceof IntroductionAwareMethodMatcher) {
    introductionAwareMethodMatcher=(IntroductionAwareMethodMatcher)methodMatcher;
  }
  Set<Class> classes=new HashSet<Class>(ClassUtils.getAllInterfacesForClassAsSet(targetClass));
  classes.add(targetClass);
  for (  Class<?> clazz : classes) {
    Method[] methods=clazz.getMethods();
    for (    Method method : methods) {
      if ((introductionAwareMethodMatcher != null && introductionAwareMethodMatcher.matches(method,targetClass,hasIntroductions)) || methodMatcher.matches(method,targetClass)) {
        return true;
      }
    }
  }
  return false;
}
