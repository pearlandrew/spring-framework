{
  CompositeUriComponentsContributor contributor=getConfiguredUriComponentsContributor();
  if (contributor == null) {
    logger.debug("Using default CompositeUriComponentsContributor");
    contributor=defaultUriComponentsContributor;
  }
  int paramCount=method.getParameterCount();
  int argCount=args.length;
  if (paramCount != argCount) {
    throw new IllegalArgumentException("Number of method parameters " + paramCount + " does not match number of argument values "+ argCount);
  }
  final Map<String,Object> uriVars=new HashMap<>();
  for (int i=0; i < paramCount; i++) {
    MethodParameter param=new SynthesizingMethodParameter(method,i);
    param.initParameterNameDiscovery(parameterNameDiscoverer);
    contributor.contributeMethodArgument(param,args[i],builder,uriVars);
  }
  return builder.build().expand(new UriComponents.UriTemplateVariables(){
    @Override public Object getValue(    String name){
      return uriVars.containsKey(name) ? uriVars.get(name) : UriComponents.UriTemplateVariables.SKIP_VALUE;
    }
  }
);
}
