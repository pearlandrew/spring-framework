{
  Object source=parserContext.extractSource(element);
  CompositeComponentDefinition compDefinition=new CompositeComponentDefinition(element.getTagName(),source);
  parserContext.pushContainingComponent(compDefinition);
  RootBeanDefinition annMappingDef=new RootBeanDefinition(DefaultAnnotationHandlerMapping.class);
  annMappingDef.setSource(source);
  annMappingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
  annMappingDef.getPropertyValues().add("order",0);
  String annMappingName=parserContext.getReaderContext().registerWithGeneratedName(annMappingDef);
  RootBeanDefinition bindingDef=new RootBeanDefinition(ConfigurableWebBindingInitializer.class);
  bindingDef.setSource(source);
  bindingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
  bindingDef.getPropertyValues().add("conversionService",getConversionService(element,source,parserContext));
  bindingDef.getPropertyValues().add("validator",getValidator(element,source,parserContext));
  RootBeanDefinition annAdapterDef=new RootBeanDefinition(AnnotationMethodHandlerAdapter.class);
  annAdapterDef.setSource(source);
  annAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
  annAdapterDef.getPropertyValues().add("webBindingInitializer",bindingDef);
  annAdapterDef.getPropertyValues().add("messageConverters",getMessageConverters(source));
  String adapterName=parserContext.getReaderContext().registerWithGeneratedName(annAdapterDef);
  parserContext.registerComponent(new BeanComponentDefinition(annMappingDef,annMappingName));
  parserContext.registerComponent(new BeanComponentDefinition(annAdapterDef,adapterName));
  parserContext.popAndRegisterContainingComponent();
  return null;
}
