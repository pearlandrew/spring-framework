{
  Object source=parserContext.extractSource(element);
  CompositeComponentDefinition compDefinition=new CompositeComponentDefinition(element.getTagName(),source);
  parserContext.pushContainingComponent(compDefinition);
  RootBeanDefinition methodMappingDef=new RootBeanDefinition(RequestMappingHandlerMapping.class);
  methodMappingDef.setSource(source);
  methodMappingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
  methodMappingDef.getPropertyValues().add("order",0);
  String methodMappingName=parserContext.getReaderContext().registerWithGeneratedName(methodMappingDef);
  RuntimeBeanReference conversionService=getConversionService(element,source,parserContext);
  RuntimeBeanReference validator=getValidator(element,source,parserContext);
  RuntimeBeanReference messageCodesResolver=getMessageCodesResolver(element,source,parserContext);
  RootBeanDefinition bindingDef=new RootBeanDefinition(ConfigurableWebBindingInitializer.class);
  bindingDef.setSource(source);
  bindingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
  bindingDef.getPropertyValues().add("conversionService",conversionService);
  bindingDef.getPropertyValues().add("validator",validator);
  bindingDef.getPropertyValues().add("messageCodesResolver",messageCodesResolver);
  ManagedList<?> messageConverters=getMessageConverters(element,source,parserContext);
  ManagedList<?> argumentResolvers=getArgumentResolvers(element,source,parserContext);
  ManagedList<?> returnValueHandlers=getReturnValueHandlers(element,source,parserContext);
  RootBeanDefinition methodAdapterDef=new RootBeanDefinition(RequestMappingHandlerAdapter.class);
  methodAdapterDef.setSource(source);
  methodAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
  methodAdapterDef.getPropertyValues().add("webBindingInitializer",bindingDef);
  methodAdapterDef.getPropertyValues().add("messageConverters",messageConverters);
  methodAdapterDef.getPropertyValues().add("ignoreDefaultModelOnRedirect",true);
  if (argumentResolvers != null) {
    methodAdapterDef.getPropertyValues().add("customArgumentResolvers",argumentResolvers);
  }
  if (returnValueHandlers != null) {
    methodAdapterDef.getPropertyValues().add("customReturnValueHandlers",returnValueHandlers);
  }
  String methodAdapterName=parserContext.getReaderContext().registerWithGeneratedName(methodAdapterDef);
  RootBeanDefinition csInterceptorDef=new RootBeanDefinition(ConversionServiceExposingInterceptor.class);
  csInterceptorDef.setSource(source);
  csInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(0,conversionService);
  RootBeanDefinition mappedCsInterceptorDef=new RootBeanDefinition(MappedInterceptor.class);
  mappedCsInterceptorDef.setSource(source);
  mappedCsInterceptorDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
  mappedCsInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(0,(Object)null);
  mappedCsInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(1,csInterceptorDef);
  String mappedInterceptorName=parserContext.getReaderContext().registerWithGeneratedName(mappedCsInterceptorDef);
  RootBeanDefinition methodExceptionResolver=new RootBeanDefinition(ExceptionHandlerExceptionResolver.class);
  methodExceptionResolver.setSource(source);
  methodExceptionResolver.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
  methodExceptionResolver.getPropertyValues().add("messageConverters",messageConverters);
  methodExceptionResolver.getPropertyValues().add("order",0);
  String methodExceptionResolverName=parserContext.getReaderContext().registerWithGeneratedName(methodExceptionResolver);
  RootBeanDefinition responseStatusExceptionResolver=new RootBeanDefinition(ResponseStatusExceptionResolver.class);
  responseStatusExceptionResolver.setSource(source);
  responseStatusExceptionResolver.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
  responseStatusExceptionResolver.getPropertyValues().add("order",1);
  String responseStatusExceptionResolverName=parserContext.getReaderContext().registerWithGeneratedName(responseStatusExceptionResolver);
  RootBeanDefinition defaultExceptionResolver=new RootBeanDefinition(DefaultHandlerExceptionResolver.class);
  defaultExceptionResolver.setSource(source);
  defaultExceptionResolver.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
  defaultExceptionResolver.getPropertyValues().add("order",2);
  String defaultExceptionResolverName=parserContext.getReaderContext().registerWithGeneratedName(defaultExceptionResolver);
  parserContext.registerComponent(new BeanComponentDefinition(methodMappingDef,methodMappingName));
  parserContext.registerComponent(new BeanComponentDefinition(methodAdapterDef,methodAdapterName));
  parserContext.registerComponent(new BeanComponentDefinition(methodExceptionResolver,methodExceptionResolverName));
  parserContext.registerComponent(new BeanComponentDefinition(responseStatusExceptionResolver,responseStatusExceptionResolverName));
  parserContext.registerComponent(new BeanComponentDefinition(defaultExceptionResolver,defaultExceptionResolverName));
  parserContext.registerComponent(new BeanComponentDefinition(mappedCsInterceptorDef,mappedInterceptorName));
  MvcNamespaceUtils.registerDefaultComponents(parserContext,source);
  parserContext.popAndRegisterContainingComponent();
  return null;
}
