{
  Object source=parserContext.extractSource(element);
  CompositeComponentDefinition compDefinition=new CompositeComponentDefinition(element.getTagName(),source);
  parserContext.pushContainingComponent(compDefinition);
  RootBeanDefinition annMappingDef=new RootBeanDefinition(DefaultAnnotationHandlerMapping.class);
  annMappingDef.setSource(source);
  annMappingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
  annMappingDef.getPropertyValues().add("order",0);
  String annMappingName=parserContext.getReaderContext().registerWithGeneratedName(annMappingDef);
  RuntimeBeanReference conversionService=getConversionService(element,source,parserContext);
  RuntimeBeanReference validator=getValidator(element,source,parserContext);
  RootBeanDefinition bindingDef=new RootBeanDefinition(ConfigurableWebBindingInitializer.class);
  bindingDef.setSource(source);
  bindingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
  bindingDef.getPropertyValues().add("conversionService",conversionService);
  bindingDef.getPropertyValues().add("validator",validator);
  RootBeanDefinition annAdapterDef=new RootBeanDefinition(AnnotationMethodHandlerAdapter.class);
  annAdapterDef.setSource(source);
  annAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
  annAdapterDef.getPropertyValues().add("webBindingInitializer",bindingDef);
  annAdapterDef.getPropertyValues().add("messageConverters",getMessageConverters(source));
  String annAdapterName=parserContext.getReaderContext().registerWithGeneratedName(annAdapterDef);
  RootBeanDefinition csInterceptorDef=new RootBeanDefinition(ConversionServiceExposingInterceptor.class);
  csInterceptorDef.setSource(source);
  csInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(0,conversionService);
  RootBeanDefinition mappedCsInterceptorDef=new RootBeanDefinition(MappedInterceptor.class);
  mappedCsInterceptorDef.setSource(source);
  mappedCsInterceptorDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
  mappedCsInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(0,(Object)null);
  mappedCsInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(1,csInterceptorDef);
  String mappedInterceptorName=parserContext.getReaderContext().registerWithGeneratedName(mappedCsInterceptorDef);
  parserContext.registerComponent(new BeanComponentDefinition(annMappingDef,annMappingName));
  parserContext.registerComponent(new BeanComponentDefinition(annAdapterDef,annAdapterName));
  parserContext.registerComponent(new BeanComponentDefinition(mappedCsInterceptorDef,mappedInterceptorName));
  parserContext.popAndRegisterContainingComponent();
  return null;
}
