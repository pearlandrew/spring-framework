{
  MediaType contentType;
  try {
    contentType=inputMessage.getHeaders().getContentType();
  }
 catch (  InvalidMediaTypeException ex) {
    throw new HttpMediaTypeNotSupportedException(ex.getMessage());
  }
  if (contentType == null) {
    contentType=MediaType.APPLICATION_OCTET_STREAM;
  }
  Class<?> contextClass=methodParam.getContainingClass();
  for (  HttpMessageConverter<?> converter : this.messageConverters) {
    if (converter instanceof GenericHttpMessageConverter) {
      GenericHttpMessageConverter<?> genericConverter=(GenericHttpMessageConverter<?>)converter;
      if (genericConverter.canRead(targetType,contextClass,contentType)) {
        if (logger.isDebugEnabled()) {
          logger.debug("Reading [" + targetType + "] as \""+ contentType+ "\" using ["+ converter+ "]");
        }
        return genericConverter.read(targetType,contextClass,inputMessage);
      }
    }
    Class<T> targetClass=(Class<T>)ResolvableType.forMethodParameter(methodParam,targetType).resolve(Object.class);
    if (converter.canRead(targetClass,contentType)) {
      if (logger.isDebugEnabled()) {
        logger.debug("Reading [" + targetClass.getName() + "] as \""+ contentType+ "\" using ["+ converter+ "]");
      }
      return ((HttpMessageConverter<T>)converter).read(targetClass,inputMessage);
    }
  }
  throw new HttpMediaTypeNotSupportedException(contentType,this.allSupportedMediaTypes);
}
