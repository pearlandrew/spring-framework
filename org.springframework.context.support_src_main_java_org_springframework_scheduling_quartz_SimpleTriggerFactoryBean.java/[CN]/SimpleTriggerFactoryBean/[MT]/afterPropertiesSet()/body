{
  if (this.name == null) {
    this.name=this.beanName;
  }
  if (this.group == null) {
    this.group=Scheduler.DEFAULT_GROUP;
  }
  if (this.jobDetail != null) {
    this.jobDataMap.put(JobDetailAwareTrigger.JOB_DETAIL_KEY,this.jobDetail);
  }
  if (this.startDelay > 0) {
    this.startTime=new Date(System.currentTimeMillis() + this.startDelay);
  }
 else   if (this.startTime == null) {
    this.startTime=new Date();
  }
  Class simpleTriggerClass;
  Method jobKeyMethod;
  try {
    simpleTriggerClass=getClass().getClassLoader().loadClass("org.quartz.impl.triggers.SimpleTriggerImpl");
    jobKeyMethod=JobDetail.class.getMethod("getKey");
  }
 catch (  ClassNotFoundException ex) {
    simpleTriggerClass=SimpleTrigger.class;
    jobKeyMethod=null;
  }
catch (  NoSuchMethodException ex) {
    throw new IllegalStateException("Incompatible Quartz version");
  }
  BeanWrapper bw=new BeanWrapperImpl(simpleTriggerClass);
  MutablePropertyValues pvs=new MutablePropertyValues();
  pvs.add("name",this.name);
  pvs.add("group",this.group);
  if (jobKeyMethod != null) {
    pvs.add("jobKey",ReflectionUtils.invokeMethod(jobKeyMethod,this.jobDetail));
  }
 else {
    pvs.add("jobName",this.jobDetail.getName());
    pvs.add("jobGroup",this.jobDetail.getGroup());
  }
  pvs.add("jobDataMap",this.jobDataMap);
  pvs.add("startTime",this.startTime);
  pvs.add("repeatInterval",this.repeatInterval);
  pvs.add("repeatCount",-1);
  pvs.add("priority",this.priority);
  pvs.add("misfireInstruction",this.misfireInstruction);
  bw.setPropertyValues(pvs);
  this.simpleTrigger=(SimpleTrigger)bw.getWrappedInstance();
}
