{
  Assert.notNull(testClass,"Class must not be null");
  Class<ContextConfiguration> contextConfigType=ContextConfiguration.class;
  Class<ContextHierarchy> contextHierarchyType=ContextHierarchy.class;
  List<List<ContextConfigurationAttributes>> hierarchyAttributes=new ArrayList<>();
  UntypedAnnotationDescriptor desc=findAnnotationDescriptorForTypes(testClass,contextConfigType,contextHierarchyType);
  if (desc == null) {
    throw new IllegalArgumentException(String.format("Could not find an 'annotation declaring class' for annotation type [%s] or [%s] and test class [%s]",contextConfigType.getName(),contextHierarchyType.getName(),testClass.getName()));
  }
  while (desc != null) {
    Class<?> rootDeclaringClass=desc.getRootDeclaringClass();
    Class<?> declaringClass=desc.getDeclaringClass();
    boolean contextConfigDeclaredLocally=isAnnotationDeclaredLocally(contextConfigType,declaringClass);
    boolean contextHierarchyDeclaredLocally=isAnnotationDeclaredLocally(contextHierarchyType,declaringClass);
    if (contextConfigDeclaredLocally && contextHierarchyDeclaredLocally) {
      String msg=String.format("Class [%s] has been configured with both @ContextConfiguration " + "and @ContextHierarchy. Only one of these annotations may be declared on a test class " + "or composed annotation.",declaringClass.getName());
      logger.error(msg);
      throw new IllegalStateException(msg);
    }
    List<ContextConfigurationAttributes> configAttributesList=new ArrayList<>();
    if (contextConfigDeclaredLocally) {
      ContextConfiguration contextConfiguration=AnnotationUtils.synthesizeAnnotation(desc.getAnnotationAttributes(),ContextConfiguration.class,desc.getRootDeclaringClass());
      convertContextConfigToConfigAttributesAndAddToList(contextConfiguration,rootDeclaringClass,configAttributesList);
    }
 else     if (contextHierarchyDeclaredLocally) {
      ContextHierarchy contextHierarchy=getAnnotation(declaringClass,contextHierarchyType);
      for (      ContextConfiguration contextConfiguration : contextHierarchy.value()) {
        convertContextConfigToConfigAttributesAndAddToList(contextConfiguration,rootDeclaringClass,configAttributesList);
      }
    }
 else {
      String msg=String.format("Test class [%s] has been configured with neither @ContextConfiguration " + "nor @ContextHierarchy as a class-level annotation.",rootDeclaringClass.getName());
      logger.error(msg);
      throw new IllegalStateException(msg);
    }
    hierarchyAttributes.add(0,configAttributesList);
    desc=findAnnotationDescriptorForTypes(rootDeclaringClass.getSuperclass(),contextConfigType,contextHierarchyType);
  }
  return hierarchyAttributes;
}
