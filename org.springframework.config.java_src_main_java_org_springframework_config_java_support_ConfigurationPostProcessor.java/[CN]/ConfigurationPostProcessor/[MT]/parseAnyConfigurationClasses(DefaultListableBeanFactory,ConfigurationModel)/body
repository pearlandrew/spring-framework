{
  LinkedHashMap<String,ClassPathResource> configClassResources=new LinkedHashMap<String,ClassPathResource>();
  for (  String beanName : beanFactory.getBeanDefinitionNames()) {
    BeanDefinition beanDef=beanFactory.getBeanDefinition(beanName);
    if (beanDef.isAbstract())     continue;
    if (isConfigClass(beanDef)) {
      String path=ClassUtils.convertClassNameToResourcePath(beanDef.getBeanClassName());
      configClassResources.put(beanName,new ClassPathResource(path));
    }
  }
  ConfigurationModelBeanDefinitionReader modelBeanDefinitionReader=new ConfigurationModelBeanDefinitionReader(beanFactory);
  ConfigurationParser parser=new ConfigurationParser(model);
  for (  String id : configClassResources.keySet())   parser.parse(configClassResources.get(id),id);
  ArrayList<UsageError> errors=new ArrayList<UsageError>();
  model.validate(errors);
  if (errors.size() > 0)   throw new MalformedJavaConfigurationException(errors.toArray(new UsageError[]{}));
  modelBeanDefinitionReader.loadBeanDefinitions(model);
}
