{
  HttpServletRequest servletRequest=webRequest.getNativeRequest(HttpServletRequest.class);
  MultipartHttpServletRequest multipartRequest=WebUtils.getNativeRequest(servletRequest,MultipartHttpServletRequest.class);
  Object arg;
  if (MultipartFile.class.equals(parameter.getParameterType())) {
    assertIsMultipartRequest(servletRequest);
    Assert.notNull(multipartRequest,"Expected MultipartHttpServletRequest: is a MultipartResolver configured?");
    arg=multipartRequest.getFile(name);
  }
 else   if (isMultipartFileCollection(parameter)) {
    assertIsMultipartRequest(servletRequest);
    Assert.notNull(multipartRequest,"Expected MultipartHttpServletRequest: is a MultipartResolver configured?");
    arg=multipartRequest.getFiles(name);
  }
 else   if (isMultipartFileArray(parameter)) {
    assertIsMultipartRequest(servletRequest);
    Assert.notNull(multipartRequest,"Expected MultipartHttpServletRequest: is a MultipartResolver configured?");
    List<MultipartFile> multipartFiles=multipartRequest.getFiles(name);
    arg=multipartFiles.toArray(new MultipartFile[multipartFiles.size()]);
  }
 else   if ("javax.servlet.http.Part".equals(parameter.getParameterType().getName())) {
    assertIsMultipartRequest(servletRequest);
    arg=servletRequest.getPart(name);
  }
 else   if (isPartCollection(parameter)) {
    assertIsMultipartRequest(servletRequest);
    arg=new ArrayList<Object>(servletRequest.getParts());
  }
 else   if (isPartArray(parameter)) {
    assertIsMultipartRequest(servletRequest);
    arg=RequestPartResolver.resolvePart(servletRequest);
  }
 else {
    arg=null;
    if (multipartRequest != null) {
      List<MultipartFile> files=multipartRequest.getFiles(name);
      if (!files.isEmpty()) {
        arg=(files.size() == 1 ? files.get(0) : files);
      }
    }
    if (arg == null) {
      String[] paramValues=webRequest.getParameterValues(name);
      if (paramValues != null) {
        arg=paramValues.length == 1 ? paramValues[0] : paramValues;
      }
    }
  }
  return arg;
}
