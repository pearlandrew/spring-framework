{
  AsyncExecutionChain chain=AsyncExecutionChain.getForCurrentRequest(webRequest.getRequest());
  chain.addDelegatingCallable(geAsyncCallable(webRequest,mavContainer,providedArgs));
  Object returnValue=invokeForRequest(webRequest,mavContainer,providedArgs);
  setResponseStatus(webRequest);
  if (returnValue == null) {
    if (isRequestNotModified(webRequest) || hasResponseStatus() || mavContainer.isRequestHandled()) {
      mavContainer.setRequestHandled(true);
      return;
    }
  }
  mavContainer.setRequestHandled(false);
  try {
    this.returnValueHandlers.handleReturnValue(returnValue,getReturnValueType(returnValue),mavContainer,webRequest);
  }
 catch (  Exception ex) {
    if (logger.isTraceEnabled()) {
      logger.trace(getReturnValueHandlingErrorMessage("Error handling return value",returnValue),ex);
    }
    throw ex;
  }
}
