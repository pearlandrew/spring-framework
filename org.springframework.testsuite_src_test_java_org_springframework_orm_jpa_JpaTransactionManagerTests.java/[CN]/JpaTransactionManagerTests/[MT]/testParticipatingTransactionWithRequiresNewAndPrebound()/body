{
  tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);
  managerControl.expectAndReturn(manager.getTransaction(),tx,5);
  manager.flush();
  factoryControl.replay();
  managerControl.replay();
  txControl.replay();
  final List<String> l=new ArrayList<String>();
  l.add("test");
  assertTrue(!TransactionSynchronizationManager.hasResource(factory));
  assertTrue(!TransactionSynchronizationManager.isSynchronizationActive());
  TransactionSynchronizationManager.bindResource(factory,new EntityManagerHolder(manager));
  try {
    Object result=tt.execute(new TransactionCallback(){
      public Object doInTransaction(      TransactionStatus status){
        txControl.verify();
        txControl.reset();
        tx.begin();
        txControl.expectAndReturn(tx.getRollbackOnly(),false);
        tx.commit();
        txControl.expectAndReturn(tx.getRollbackOnly(),false);
        tx.commit();
        txControl.replay();
        JpaTemplate template2=new JpaTemplate(factory);
        template2.execute(new JpaCallback(){
          public Object doInJpa(          EntityManager em) throws PersistenceException {
            return null;
          }
        }
);
        assertTrue(TransactionSynchronizationManager.hasResource(factory));
        return tt.execute(new TransactionCallback(){
          public Object doInTransaction(          TransactionStatus status){
            return template.execute(new JpaCallback(){
              public Object doInJpa(              EntityManager em2){
                em2.flush();
                return l;
              }
            }
);
          }
        }
);
      }
    }
);
    assertSame(l,result);
  }
  finally {
    TransactionSynchronizationManager.unbindResource(factory);
  }
  assertTrue(!TransactionSynchronizationManager.hasResource(factory));
  assertTrue(!TransactionSynchronizationManager.isSynchronizationActive());
  factoryControl.verify();
  managerControl.verify();
  txControl.verify();
}
