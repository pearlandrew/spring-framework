{
  String formView="fred";
  String successView="tony";
  TestController mc=new TestController();
  mc.setFormView(formView);
  mc.setSuccessView(successView);
  mc.setValidators(new Validator[]{new TestValidator(),new TestValidator2()});
  String name="Rod";
  String age="xxx";
  MockHttpServletRequest request=new MockHttpServletRequest("POST","/foo.html");
  request.addParameter("name",name);
  request.addParameter("age","" + age);
  HttpServletResponse response=new MockHttpServletResponse();
  ModelAndView mv=mc.handleRequest(request,response);
  assertTrue("returned correct view name: expected '" + formView + "', not '"+ mv.getViewName()+ "'",mv.getViewName().equals(formView));
  TestBean person=(TestBean)mv.getModel().get(TestController.BEAN_NAME);
  assertTrue("model is non null",person != null);
  assertTrue("bean name bound ok",person.getName().equals(name));
  assertTrue("bean age is default",person.getAge() == TestController.DEFAULT_AGE);
  Errors errors=(Errors)mv.getModel().get(BindException.MODEL_KEY_PREFIX + mc.getCommandName());
  assertTrue("errors returned in model",errors != null);
  assertTrue("3 errors",errors.getErrorCount() == 3);
  FieldError fe=errors.getFieldError("age");
  assertTrue("Saved invalid value",fe.getRejectedValue().equals(age));
  assertTrue("Correct field",fe.getField().equals("age"));
  fe=errors.getFieldError("name");
  assertTrue("Saved invalid value",fe.getRejectedValue().equals(name));
  assertTrue("Correct field",fe.getField().equals("name"));
  assertTrue("Correct validation code: expected '" + TestValidator.TOOSHORT + "', not '"+ fe.getCode()+ "'",fe.getCode().equals(TestValidator.TOOSHORT));
  ObjectError oe=errors.getGlobalError();
  assertEquals("test",oe.getCode());
  assertEquals("testmessage",oe.getDefaultMessage());
}
