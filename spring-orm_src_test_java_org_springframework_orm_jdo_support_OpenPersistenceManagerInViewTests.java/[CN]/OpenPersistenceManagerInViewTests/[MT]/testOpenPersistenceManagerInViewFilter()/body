{
  final PersistenceManagerFactory pmf=mock(PersistenceManagerFactory.class);
  PersistenceManager pm=mock(PersistenceManager.class);
  given(pmf.getPersistenceManager()).willReturn(pm);
  final PersistenceManagerFactory pmf2=mock(PersistenceManagerFactory.class);
  PersistenceManager pm2=mock(PersistenceManager.class);
  given(pmf2.getPersistenceManager()).willReturn(pm2);
  MockServletContext sc=new MockServletContext();
  StaticWebApplicationContext wac=new StaticWebApplicationContext();
  wac.setServletContext(sc);
  wac.getDefaultListableBeanFactory().registerSingleton("persistenceManagerFactory",pmf);
  wac.getDefaultListableBeanFactory().registerSingleton("myPersistenceManagerFactory",pmf2);
  wac.refresh();
  sc.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE,wac);
  MockHttpServletRequest request=new MockHttpServletRequest(sc);
  MockHttpServletResponse response=new MockHttpServletResponse();
  MockFilterConfig filterConfig=new MockFilterConfig(wac.getServletContext(),"filter");
  MockFilterConfig filterConfig2=new MockFilterConfig(wac.getServletContext(),"filter2");
  filterConfig2.addInitParameter("persistenceManagerFactoryBeanName","myPersistenceManagerFactory");
  final OpenPersistenceManagerInViewFilter filter=new OpenPersistenceManagerInViewFilter();
  filter.init(filterConfig);
  final OpenPersistenceManagerInViewFilter filter2=new OpenPersistenceManagerInViewFilter();
  filter2.init(filterConfig2);
  final FilterChain filterChain=new FilterChain(){
    @Override public void doFilter(    ServletRequest servletRequest,    ServletResponse servletResponse){
      assertTrue(TransactionSynchronizationManager.hasResource(pmf));
      servletRequest.setAttribute("invoked",Boolean.TRUE);
    }
  }
;
  final FilterChain filterChain2=new FilterChain(){
    @Override public void doFilter(    ServletRequest servletRequest,    ServletResponse servletResponse) throws IOException, ServletException {
      assertTrue(TransactionSynchronizationManager.hasResource(pmf2));
      filter.doFilter(servletRequest,servletResponse,filterChain);
    }
  }
;
  FilterChain filterChain3=new PassThroughFilterChain(filter2,filterChain2);
  assertFalse(TransactionSynchronizationManager.hasResource(pmf));
  assertFalse(TransactionSynchronizationManager.hasResource(pmf2));
  filter2.doFilter(request,response,filterChain3);
  assertFalse(TransactionSynchronizationManager.hasResource(pmf));
  assertFalse(TransactionSynchronizationManager.hasResource(pmf2));
  assertNotNull(request.getAttribute("invoked"));
  verify(pm).close();
  verify(pm2).close();
  wac.close();
}
