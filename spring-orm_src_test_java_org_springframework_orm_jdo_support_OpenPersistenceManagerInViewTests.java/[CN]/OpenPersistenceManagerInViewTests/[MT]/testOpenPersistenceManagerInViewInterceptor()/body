{
  PersistenceManagerFactory pmf=mock(PersistenceManagerFactory.class);
  PersistenceManager pm=mock(PersistenceManager.class);
  OpenPersistenceManagerInViewInterceptor interceptor=new OpenPersistenceManagerInViewInterceptor();
  interceptor.setPersistenceManagerFactory(pmf);
  MockServletContext sc=new MockServletContext();
  MockHttpServletRequest request=new MockHttpServletRequest(sc);
  given(pmf.getPersistenceManager()).willReturn(pm);
  interceptor.preHandle(new ServletWebRequest(request));
  assertTrue(TransactionSynchronizationManager.hasResource(pmf));
  interceptor.preHandle(new ServletWebRequest(request));
  interceptor.preHandle(new ServletWebRequest(request));
  interceptor.postHandle(new ServletWebRequest(request),null);
  interceptor.afterCompletion(new ServletWebRequest(request),null);
  interceptor.postHandle(new ServletWebRequest(request),null);
  interceptor.afterCompletion(new ServletWebRequest(request),null);
  interceptor.preHandle(new ServletWebRequest(request));
  interceptor.postHandle(new ServletWebRequest(request),null);
  interceptor.afterCompletion(new ServletWebRequest(request),null);
  interceptor.postHandle(new ServletWebRequest(request),null);
  assertTrue(TransactionSynchronizationManager.hasResource(pmf));
  interceptor.afterCompletion(new ServletWebRequest(request),null);
  assertFalse(TransactionSynchronizationManager.hasResource(pmf));
}
