{
  Assert.notNull(clazz,"Class must not be null");
  Class<TestExecutionListeners> annotationType=TestExecutionListeners.class;
  List<Class<? extends TestExecutionListener>> classesList=new ArrayList<Class<? extends TestExecutionListener>>();
  AnnotationDescriptor<TestExecutionListeners> descriptor=findAnnotationDescriptor(clazz,annotationType);
  boolean defaultListeners=false;
  if (descriptor == null) {
    if (logger.isDebugEnabled()) {
      logger.debug("@TestExecutionListeners is not present for class [" + clazz + "]: using defaults.");
    }
    classesList.addAll(getDefaultTestExecutionListenerClasses());
    defaultListeners=true;
  }
 else {
    while (descriptor != null) {
      Class<?> rootDeclaringClass=descriptor.getDeclaringClass();
      Class<?> declaringClass=(descriptor.getStereotype() != null) ? descriptor.getStereotypeType() : rootDeclaringClass;
      TestExecutionListeners testExecutionListeners=declaringClass.getAnnotation(annotationType);
      if (logger.isTraceEnabled()) {
        logger.trace("Retrieved @TestExecutionListeners [" + testExecutionListeners + "] for declaring class ["+ declaringClass+ "].");
      }
      Class<? extends TestExecutionListener>[] valueListenerClasses=testExecutionListeners.value();
      Class<? extends TestExecutionListener>[] listenerClasses=testExecutionListeners.listeners();
      if (!ObjectUtils.isEmpty(valueListenerClasses) && !ObjectUtils.isEmpty(listenerClasses)) {
        String msg=String.format("Test class [%s] has been configured with @TestExecutionListeners' 'value' [%s] " + "and 'listeners' [%s] attributes. Use one or the other, but not both.",declaringClass,ObjectUtils.nullSafeToString(valueListenerClasses),ObjectUtils.nullSafeToString(listenerClasses));
        logger.error(msg);
        throw new IllegalStateException(msg);
      }
 else       if (!ObjectUtils.isEmpty(valueListenerClasses)) {
        listenerClasses=valueListenerClasses;
      }
      if (listenerClasses != null) {
        classesList.addAll(0,Arrays.<Class<? extends TestExecutionListener>>asList(listenerClasses));
      }
      descriptor=(testExecutionListeners.inheritListeners() ? findAnnotationDescriptor(rootDeclaringClass.getSuperclass(),annotationType) : null);
    }
  }
  List<TestExecutionListener> listeners=new ArrayList<TestExecutionListener>(classesList.size());
  for (  Class<? extends TestExecutionListener> listenerClass : classesList) {
    try {
      listeners.add(BeanUtils.instantiateClass(listenerClass));
    }
 catch (    NoClassDefFoundError err) {
      if (defaultListeners) {
        if (logger.isDebugEnabled()) {
          logger.debug("Could not instantiate default TestExecutionListener class [" + listenerClass.getName() + "]. Specify custom listener classes or make the default listener classes available.");
        }
      }
 else {
        throw err;
      }
    }
  }
  return listeners.toArray(new TestExecutionListener[listeners.size()]);
}
