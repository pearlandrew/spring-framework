{
  Assert.notNull(testInstance,"Test instance must not be null");
  if (logger.isTraceEnabled()) {
    logger.trace("afterTestMethod(): instance [" + testInstance + "], method ["+ testMethod+ "], exception ["+ exception+ "]");
  }
  getTestContext().updateState(testInstance,testMethod,exception);
  Throwable afterTestMethodException=null;
  for (  TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {
    try {
      testExecutionListener.afterTestMethod(getTestContext());
    }
 catch (    Throwable ex) {
      if (logger.isWarnEnabled()) {
        logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener + "] to process 'after' execution for test: method ["+ testMethod+ "], instance ["+ testInstance+ "], exception ["+ exception+ "]",ex);
      }
      if (afterTestMethodException == null) {
        afterTestMethodException=ex;
      }
    }
  }
  if (afterTestMethodException != null) {
    ReflectionUtils.rethrowException(afterTestMethodException);
  }
}
