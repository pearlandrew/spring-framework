{
  String[] advisorNames=null;
synchronized (this) {
    advisorNames=this.cachedAdvisorBeanNames;
    if (advisorNames == null) {
      advisorNames=BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.beanFactory,Advisor.class,true,false);
      this.cachedAdvisorBeanNames=advisorNames;
    }
  }
  if (advisorNames.length == 0) {
    return new LinkedList<Advisor>();
  }
  List<Advisor> advisors=new LinkedList<Advisor>();
  for (  String name : advisorNames) {
    if (isEligibleBean(name)) {
      if (this.beanFactory.isCurrentlyInCreation(name)) {
        if (logger.isDebugEnabled()) {
          logger.debug("Skipping currently created advisor '" + name + "'");
        }
      }
 else {
        try {
          advisors.add(this.beanFactory.getBean(name,Advisor.class));
        }
 catch (        BeanCreationException ex) {
          Throwable rootCause=ex.getMostSpecificCause();
          if (rootCause instanceof BeanCurrentlyInCreationException) {
            BeanCreationException bce=(BeanCreationException)rootCause;
            if (this.beanFactory.isCurrentlyInCreation(bce.getBeanName())) {
              if (logger.isDebugEnabled()) {
                logger.debug("Skipping advisor '" + name + "' with dependency on currently created bean: "+ ex.getMessage());
              }
              continue;
            }
          }
          throw ex;
        }
      }
    }
  }
  return advisors;
}
