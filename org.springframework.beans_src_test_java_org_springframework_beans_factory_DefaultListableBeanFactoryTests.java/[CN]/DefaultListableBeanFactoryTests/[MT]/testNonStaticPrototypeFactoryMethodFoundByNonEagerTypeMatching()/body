{
  DefaultListableBeanFactory lbf=new DefaultListableBeanFactory();
  RootBeanDefinition factoryBd=new RootBeanDefinition(TestBeanFactory.class);
  lbf.registerBeanDefinition("factory",factoryBd);
  RootBeanDefinition rbd=new RootBeanDefinition();
  rbd.setFactoryBeanName("factory");
  rbd.setFactoryMethodName("createTestBeanNonStatic");
  rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE);
  lbf.registerBeanDefinition("x1",rbd);
  TestBeanFactory.initialized=false;
  String[] beanNames=lbf.getBeanNamesForType(TestBean.class,true,false);
  assertEquals(1,beanNames.length);
  assertEquals("x1",beanNames[0]);
  assertFalse(lbf.containsSingleton("x1"));
  assertTrue(lbf.containsBean("x1"));
  assertFalse(lbf.containsBean("&x1"));
  assertTrue(lbf.containsLocalBean("x1"));
  assertFalse(lbf.containsLocalBean("&x1"));
  assertFalse(lbf.isSingleton("x1"));
  assertFalse(lbf.isSingleton("&x1"));
  assertTrue(lbf.isPrototype("x1"));
  assertFalse(lbf.isPrototype("&x1"));
  assertTrue(lbf.isTypeMatch("x1",TestBean.class));
  assertFalse(lbf.isTypeMatch("&x1",TestBean.class));
  assertTrue(lbf.isTypeMatch("x1",Object.class));
  assertFalse(lbf.isTypeMatch("&x1",Object.class));
  assertEquals(TestBean.class,lbf.getType("x1"));
  assertEquals(null,lbf.getType("&x1"));
  assertFalse(TestBeanFactory.initialized);
  lbf.registerAlias("x1","x2");
  assertTrue(lbf.containsBean("x2"));
  assertFalse(lbf.containsBean("&x2"));
  assertTrue(lbf.containsLocalBean("x2"));
  assertFalse(lbf.containsLocalBean("&x2"));
  assertFalse(lbf.isSingleton("x2"));
  assertFalse(lbf.isSingleton("&x2"));
  assertTrue(lbf.isPrototype("x2"));
  assertFalse(lbf.isPrototype("&x2"));
  assertTrue(lbf.isTypeMatch("x2",TestBean.class));
  assertFalse(lbf.isTypeMatch("&x2",TestBean.class));
  assertTrue(lbf.isTypeMatch("x2",Object.class));
  assertFalse(lbf.isTypeMatch("&x2",Object.class));
  assertEquals(TestBean.class,lbf.getType("x2"));
  assertEquals(null,lbf.getType("&x2"));
  assertEquals(1,lbf.getAliases("x1").length);
  assertEquals("x2",lbf.getAliases("x1")[0]);
  assertEquals(1,lbf.getAliases("&x1").length);
  assertEquals("&x2",lbf.getAliases("&x1")[0]);
  assertEquals(1,lbf.getAliases("x2").length);
  assertEquals("x1",lbf.getAliases("x2")[0]);
  assertEquals(1,lbf.getAliases("&x2").length);
  assertEquals("&x1",lbf.getAliases("&x2")[0]);
}
