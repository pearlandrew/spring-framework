{
  Object source=parserContext.extractSource(element);
  CompositeComponentDefinition compDefinition=new CompositeComponentDefinition(element.getTagName(),source);
  parserContext.pushContainingComponent(compDefinition);
  BeanDefinitionRegistry registry=parserContext.getRegistry();
  if (registry.containsBeanDefinition(AnnotationConfigUtils.JMS_LISTENER_ANNOTATION_PROCESSOR_BEAN_NAME)) {
    parserContext.getReaderContext().error("Only one JmsListenerAnnotationBeanPostProcessor may exist within the context.",source);
  }
 else {
    BeanDefinitionBuilder builder=BeanDefinitionBuilder.genericBeanDefinition("org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor");
    builder.getRawBeanDefinition().setSource(source);
    String endpointRegistry=element.getAttribute("registry");
    if (StringUtils.hasText(endpointRegistry)) {
      builder.addPropertyReference("endpointRegistry",endpointRegistry);
    }
 else {
      registerDefaultEndpointRegistry(source,parserContext);
    }
    String defaultContainerFactory=element.getAttribute("default-container-factory");
    if (StringUtils.hasText(defaultContainerFactory)) {
      builder.addPropertyReference("defaultContainerFactory",defaultContainerFactory);
    }
    String handlerMethodFactory=element.getAttribute("handler-method-factory");
    if (StringUtils.hasText(handlerMethodFactory)) {
      builder.addPropertyReference("jmsHandlerMethodFactory",handlerMethodFactory);
    }
    registerInfrastructureBean(parserContext,builder,AnnotationConfigUtils.JMS_LISTENER_ANNOTATION_PROCESSOR_BEAN_NAME);
  }
  parserContext.popAndRegisterContainingComponent();
  return null;
}
