{
  AnnotationAttributes nestedAttributes=new AnnotationAttributes();
  nestedAttributes.put("value",10);
  nestedAttributes.put("name","algernon");
  attributes.put("name","dave");
  attributes.put("names",new String[]{"dave","frank","hal"});
  attributes.put("bool1",true);
  attributes.put("bool2",false);
  attributes.put("color",Color.RED);
  attributes.put("class",Integer.class);
  attributes.put("classes",new Class<?>[]{Number.class,Short.class,Integer.class});
  attributes.put("number",42);
  attributes.put("anno",nestedAttributes);
  attributes.put("annoArray",new AnnotationAttributes[]{nestedAttributes});
  attributes.put("unresolvableClass",new ClassNotFoundException("myclass"));
  assertThat(attributes.getString("name"),equalTo("dave"));
  assertThat(attributes.getStringArray("names"),equalTo(new String[]{"dave","frank","hal"}));
  assertThat(attributes.getBoolean("bool1"),equalTo(true));
  assertThat(attributes.getBoolean("bool2"),equalTo(false));
  assertThat(attributes.<Color>getEnum("color"),equalTo(Color.RED));
  assertTrue(attributes.getClass("class").equals(Integer.class));
  assertThat(attributes.getClassArray("classes"),equalTo(new Class[]{Number.class,Short.class,Integer.class}));
  assertThat(attributes.<Integer>getNumber("number"),equalTo(42));
  assertThat(attributes.getAnnotation("anno").<Integer>getNumber("value"),equalTo(10));
  assertThat(attributes.getAnnotationArray("annoArray")[0].getString("name"),equalTo("algernon"));
  try {
    attributes.getClass("unresolvableClass");
    fail("Should have thrown IllegalArgumentException");
  }
 catch (  IllegalArgumentException ex) {
    assertTrue(ex.getCause() instanceof ClassNotFoundException);
    assertTrue(ex.getMessage().contains("myclass"));
  }
}
