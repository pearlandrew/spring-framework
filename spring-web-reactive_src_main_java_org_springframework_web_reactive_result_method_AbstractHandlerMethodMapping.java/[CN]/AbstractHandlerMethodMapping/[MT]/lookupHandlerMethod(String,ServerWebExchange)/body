{
  List<Match> matches=new ArrayList<Match>();
  List<T> directPathMatches=this.mappingRegistry.getMappingsByUrl(lookupPath);
  if (directPathMatches != null) {
    addMatchingMappings(directPathMatches,matches,exchange);
  }
  if (matches.isEmpty()) {
    addMatchingMappings(this.mappingRegistry.getMappings().keySet(),matches,exchange);
  }
  if (!matches.isEmpty()) {
    Comparator<Match> comparator=new MatchComparator(getMappingComparator(exchange));
    Collections.sort(matches,comparator);
    if (logger.isTraceEnabled()) {
      logger.trace("Found " + matches.size() + " matching mapping(s) for ["+ lookupPath+ "] : "+ matches);
    }
    Match bestMatch=matches.get(0);
    if (matches.size() > 1) {
      Match secondBestMatch=matches.get(1);
      if (comparator.compare(bestMatch,secondBestMatch) == 0) {
        Method m1=bestMatch.handlerMethod.getMethod();
        Method m2=secondBestMatch.handlerMethod.getMethod();
        throw new IllegalStateException("Ambiguous handler methods mapped for HTTP path '" + lookupPath + "': {"+ m1+ ", "+ m2+ "}");
      }
    }
    handleMatch(bestMatch.mapping,lookupPath,exchange);
    return bestMatch.handlerMethod;
  }
 else {
    return handleNoMatch(this.mappingRegistry.getMappings().keySet(),lookupPath,exchange);
  }
}
