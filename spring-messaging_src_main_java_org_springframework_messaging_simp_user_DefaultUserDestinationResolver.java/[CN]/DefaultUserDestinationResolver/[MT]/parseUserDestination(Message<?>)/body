{
  MessageHeaders headers=message.getHeaders();
  SimpMessageType messageType=SimpMessageHeaderAccessor.getMessageType(headers);
  String destination=SimpMessageHeaderAccessor.getDestination(headers);
  Principal principal=SimpMessageHeaderAccessor.getUser(headers);
  String sessionId=SimpMessageHeaderAccessor.getSessionId(headers);
  String destinationWithoutPrefix;
  String subscribeDestination;
  String user;
  Set<String> sessionIds;
  if (SimpMessageType.SUBSCRIBE.equals(messageType) || SimpMessageType.UNSUBSCRIBE.equals(messageType)) {
    if (!checkDestination(destination,this.destinationPrefix)) {
      return null;
    }
    if (sessionId == null) {
      logger.error("Ignoring message, no session id available");
      return null;
    }
    destinationWithoutPrefix=destination.substring(this.destinationPrefix.length() - 1);
    subscribeDestination=destination;
    user=(principal != null ? principal.getName() : null);
    sessionIds=Collections.singleton(sessionId);
  }
 else   if (SimpMessageType.MESSAGE.equals(messageType)) {
    if (!checkDestination(destination,this.destinationPrefix)) {
      return null;
    }
    int startIndex=this.destinationPrefix.length();
    int endIndex=destination.indexOf('/',startIndex);
    Assert.isTrue(endIndex > 0,"Expected destination pattern \"/user/{userId}/**\"");
    destinationWithoutPrefix=destination.substring(endIndex);
    subscribeDestination=this.destinationPrefix.substring(0,startIndex - 1) + destinationWithoutPrefix;
    user=destination.substring(startIndex,endIndex);
    user=StringUtils.replace(user,"%2F","/");
    user=user.equals(sessionId) ? null : user;
    sessionIds=(sessionId != null ? Collections.singleton(sessionId) : this.userSessionRegistry.getSessionIds(user));
  }
 else {
    if (logger.isTraceEnabled()) {
      logger.trace("Ignoring " + messageType + " message");
    }
    return null;
  }
  return new DestinationInfo(destinationWithoutPrefix,subscribeDestination,user,sessionIds);
}
