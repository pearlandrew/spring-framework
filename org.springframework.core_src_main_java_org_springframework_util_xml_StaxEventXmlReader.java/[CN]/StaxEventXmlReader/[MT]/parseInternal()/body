{
  boolean documentStarted=false;
  boolean documentEnded=false;
  int elementDepth=0;
  while (reader.hasNext() && elementDepth >= 0) {
    XMLEvent event=reader.nextEvent();
    if (!event.isStartDocument() && !event.isEndDocument() && !documentStarted) {
      handleStartDocument();
      documentStarted=true;
    }
switch (event.getEventType()) {
case XMLStreamConstants.START_ELEMENT:
      elementDepth++;
    handleStartElement(event.asStartElement());
  break;
case XMLStreamConstants.END_ELEMENT:
elementDepth--;
if (elementDepth >= 0) {
handleEndElement(event.asEndElement());
}
break;
case XMLStreamConstants.PROCESSING_INSTRUCTION:
handleProcessingInstruction((ProcessingInstruction)event);
break;
case XMLStreamConstants.CHARACTERS:
case XMLStreamConstants.SPACE:
case XMLStreamConstants.CDATA:
handleCharacters(event.asCharacters());
break;
case XMLStreamConstants.START_DOCUMENT:
setLocator(event.getLocation());
handleStartDocument();
documentStarted=true;
break;
case XMLStreamConstants.END_DOCUMENT:
handleEndDocument();
documentEnded=true;
break;
case XMLStreamConstants.NOTATION_DECLARATION:
handleNotationDeclaration((NotationDeclaration)event);
break;
case XMLStreamConstants.ENTITY_DECLARATION:
handleEntityDeclaration((EntityDeclaration)event);
break;
case XMLStreamConstants.COMMENT:
handleComment((Comment)event);
break;
case XMLStreamConstants.DTD:
handleDtd((DTD)event);
break;
case XMLStreamConstants.ENTITY_REFERENCE:
handleEntityReference((EntityReference)event);
break;
}
}
if (!documentEnded) {
handleEndDocument();
}
}
