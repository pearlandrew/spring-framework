{
  try {
    if (this.enterpriseConcurrentScheduler) {
      return new EnterpriseConcurrentTriggerScheduler().schedule(decorateTask(task,true),trigger);
    }
 else {
      ErrorHandler errorHandler=(this.errorHandler != null ? this.errorHandler : TaskUtils.getDefaultErrorHandler(true));
      return new ReschedulingRunnable(task,trigger,this.scheduledExecutor,errorHandler).schedule();
    }
  }
 catch (  RejectedExecutionException ex) {
    throw new TaskRejectedException("Executor [" + this.scheduledExecutor + "] did not accept task: "+ task,ex);
  }
}
