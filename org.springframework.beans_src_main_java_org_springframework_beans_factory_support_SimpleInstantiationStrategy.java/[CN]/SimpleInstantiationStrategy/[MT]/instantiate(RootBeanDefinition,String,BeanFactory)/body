{
  if (beanDefinition.getMethodOverrides().isEmpty()) {
    Constructor constructorToUse=(Constructor)beanDefinition.resolvedConstructorOrFactoryMethod;
    if (constructorToUse == null) {
      final Class clazz=beanDefinition.getBeanClass();
      if (clazz.isInterface()) {
        throw new BeanInstantiationException(clazz,"Specified class is an interface");
      }
      try {
        if (System.getSecurityManager() != null) {
          constructorToUse=AccessController.doPrivileged(new PrivilegedExceptionAction<Constructor>(){
            public Constructor run() throws Exception {
              return clazz.getDeclaredConstructor((Class[])null);
            }
          }
);
        }
 else {
          constructorToUse=clazz.getDeclaredConstructor((Class[])null);
        }
        beanDefinition.resolvedConstructorOrFactoryMethod=constructorToUse;
      }
 catch (      Exception ex) {
        throw new BeanInstantiationException(clazz,"No default constructor found",ex);
      }
    }
    return BeanUtils.instantiateClass(constructorToUse);
  }
 else {
    return instantiateWithMethodInjection(beanDefinition,beanName,owner);
  }
}
