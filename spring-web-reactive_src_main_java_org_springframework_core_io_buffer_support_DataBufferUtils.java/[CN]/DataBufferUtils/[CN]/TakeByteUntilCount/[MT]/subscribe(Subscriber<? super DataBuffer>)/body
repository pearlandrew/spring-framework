{
  source.subscribe(new Subscriber<DataBuffer>(){
    private Subscription subscription;
    private final AtomicLong byteCount=new AtomicLong();
    @Override public void onSubscribe(    Subscription s){
      this.subscription=s;
      subscriber.onSubscribe(s);
    }
    @Override public void onNext(    DataBuffer dataBuffer){
      int delta=dataBuffer.readableByteCount();
      long currentCount=this.byteCount.addAndGet(delta);
      if (currentCount > maxByteCount) {
        int size=(int)(maxByteCount - currentCount + delta);
        ByteBuffer byteBuffer=(ByteBuffer)dataBuffer.asByteBuffer().limit(size);
        DataBuffer partialBuffer=dataBuffer.allocator().allocateBuffer(size);
        partialBuffer.write(byteBuffer);
        subscriber.onNext(partialBuffer);
        subscriber.onComplete();
        this.subscription.cancel();
      }
 else {
        subscriber.onNext(dataBuffer);
      }
    }
    @Override public void onError(    Throwable t){
      subscriber.onError(t);
    }
    @Override public void onComplete(){
      subscriber.onComplete();
    }
  }
);
}
