{
  ResponseStatus responseStatusAnn=AnnotationUtils.findAnnotation(handlerMethod,ResponseStatus.class);
  if (responseStatusAnn != null) {
    HttpStatus responseStatus=responseStatusAnn.code();
    String reason=responseStatusAnn.reason();
    if (!StringUtils.hasText(reason)) {
      webRequest.getResponse().setStatus(responseStatus.value());
    }
 else {
      webRequest.getResponse().sendError(responseStatus.value(),reason);
    }
    webRequest.getRequest().setAttribute(View.RESPONSE_STATUS_ATTRIBUTE,responseStatus);
    this.responseArgumentUsed=true;
  }
  if (customModelAndViewResolvers != null) {
    for (    ModelAndViewResolver mavResolver : customModelAndViewResolvers) {
      ModelAndView mav=mavResolver.resolveModelAndView(handlerMethod,handlerType,returnValue,implicitModel,webRequest);
      if (mav != ModelAndViewResolver.UNRESOLVED) {
        return mav;
      }
    }
  }
  if (returnValue instanceof HttpEntity) {
    handleHttpEntityResponse((HttpEntity<?>)returnValue,webRequest);
    return null;
  }
 else   if (AnnotationUtils.findAnnotation(handlerMethod,ResponseBody.class) != null) {
    handleResponseBody(returnValue,webRequest);
    return null;
  }
 else   if (returnValue instanceof ModelAndView) {
    ModelAndView mav=(ModelAndView)returnValue;
    mav.getModelMap().mergeAttributes(implicitModel);
    return mav;
  }
 else   if (returnValue instanceof Model) {
    return new ModelAndView().addAllObjects(implicitModel).addAllObjects(((Model)returnValue).asMap());
  }
 else   if (returnValue instanceof View) {
    return new ModelAndView((View)returnValue).addAllObjects(implicitModel);
  }
 else   if (AnnotationUtils.findAnnotation(handlerMethod,ModelAttribute.class) != null) {
    addReturnValueAsModelAttribute(handlerMethod,handlerType,returnValue,implicitModel);
    return new ModelAndView().addAllObjects(implicitModel);
  }
 else   if (returnValue instanceof Map) {
    return new ModelAndView().addAllObjects(implicitModel).addAllObjects((Map<String,?>)returnValue);
  }
 else   if (returnValue instanceof String) {
    return new ModelAndView((String)returnValue).addAllObjects(implicitModel);
  }
 else   if (returnValue == null) {
    if (this.responseArgumentUsed || webRequest.isNotModified()) {
      return null;
    }
 else {
      return new ModelAndView().addAllObjects(implicitModel);
    }
  }
 else   if (!BeanUtils.isSimpleProperty(returnValue.getClass())) {
    addReturnValueAsModelAttribute(handlerMethod,handlerType,returnValue,implicitModel);
    return new ModelAndView().addAllObjects(implicitModel);
  }
 else {
    throw new IllegalArgumentException("Invalid handler method return value: " + returnValue);
  }
}
