{
  Object job=BeanUtils.instantiateClass(bundle.getJobDetail().getJobClass());
  BeanWrapper bw=PropertyAccessorFactory.forBeanPropertyAccess(job);
  if (isEligibleForPropertyPopulation(bw.getWrappedInstance())) {
    MutablePropertyValues pvs=new MutablePropertyValues();
    if (this.schedulerContext != null) {
      pvs.addPropertyValues(this.schedulerContext);
    }
    pvs.addPropertyValues(bundle.getJobDetail().getJobDataMap());
    pvs.addPropertyValues(bundle.getTrigger().getJobDataMap());
    if (this.ignoredUnknownProperties != null) {
      for (int i=0; i < this.ignoredUnknownProperties.length; i++) {
        String propName=this.ignoredUnknownProperties[i];
        if (pvs.contains(propName) && !bw.isWritableProperty(propName)) {
          pvs.removePropertyValue(propName);
        }
      }
      bw.setPropertyValues(pvs);
    }
 else {
      bw.setPropertyValues(pvs,true);
    }
  }
  return job;
}
