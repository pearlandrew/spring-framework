{
  final ByteArrayOutputStream baos=new ByteArrayOutputStream();
  ObjectOutputStream oos=new ObjectOutputStream(baos);
  oos.writeObject("content");
  oos.close();
  given(lobHandler.getBlobAsBinaryStream(rs,1)).willAnswer(new Answer<InputStream>(){
    @Override public InputStream answer(    InvocationOnMock invocation) throws Throwable {
      return new ByteArrayInputStream(baos.toByteArray());
    }
  }
);
  BlobSerializableTypeHandler type=new BlobSerializableTypeHandler(lobHandler);
  assertEquals("content",type.valueOf("content"));
  assertEquals("content",type.getResult(rs,"column"));
  assertEquals("content",type.getResult(rs,1));
  TransactionSynchronizationManager.initSynchronization();
  try {
    type.setParameter(ps,1,"content",null);
    List synchs=TransactionSynchronizationManager.getSynchronizations();
    assertEquals(1,synchs.size());
    ((TransactionSynchronization)synchs.get(0)).beforeCompletion();
    ((TransactionSynchronization)synchs.get(0)).afterCompletion(TransactionSynchronization.STATUS_COMMITTED);
  }
  finally {
    TransactionSynchronizationManager.clearSynchronization();
  }
  verify(lobCreator).setBlobAsBytes(ps,1,baos.toByteArray());
}
