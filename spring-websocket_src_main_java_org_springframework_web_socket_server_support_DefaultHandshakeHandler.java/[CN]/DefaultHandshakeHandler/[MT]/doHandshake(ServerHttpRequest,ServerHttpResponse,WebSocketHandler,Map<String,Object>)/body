{
  WebSocketHttpHeaders headers=new WebSocketHttpHeaders(request.getHeaders());
  if (logger.isTraceEnabled()) {
    logger.trace("Processing request " + request.getURI() + " with headers="+ headers);
  }
  try {
    if (!HttpMethod.GET.equals(request.getMethod())) {
      response.setStatusCode(HttpStatus.METHOD_NOT_ALLOWED);
      response.getHeaders().setAllow(Collections.singleton(HttpMethod.GET));
      if (logger.isErrorEnabled()) {
        logger.error("Handshake failed due to unexpected HTTP method: " + request.getMethod());
      }
      return false;
    }
    if (!"WebSocket".equalsIgnoreCase(headers.getUpgrade())) {
      handleInvalidUpgradeHeader(request,response);
      return false;
    }
    if (!headers.getConnection().contains("Upgrade") && !headers.getConnection().contains("upgrade")) {
      handleInvalidConnectHeader(request,response);
      return false;
    }
    if (!isWebSocketVersionSupported(headers)) {
      handleWebSocketVersionNotSupported(request,response);
      return false;
    }
    if (!isValidOrigin(request)) {
      response.setStatusCode(HttpStatus.FORBIDDEN);
      return false;
    }
    String wsKey=headers.getSecWebSocketKey();
    if (wsKey == null) {
      if (logger.isErrorEnabled()) {
        logger.error("Missing \"Sec-WebSocket-Key\" header");
      }
      response.setStatusCode(HttpStatus.BAD_REQUEST);
      return false;
    }
  }
 catch (  IOException ex) {
    throw new HandshakeFailureException("Response update failed during upgrade to WebSocket, uri=" + request.getURI(),ex);
  }
  String subProtocol=selectProtocol(headers.getSecWebSocketProtocol(),wsHandler);
  List<WebSocketExtension> requested=headers.getSecWebSocketExtensions();
  List<WebSocketExtension> supported=this.requestUpgradeStrategy.getSupportedExtensions(request);
  List<WebSocketExtension> extensions=filterRequestedExtensions(request,requested,supported);
  Principal user=determineUser(request,wsHandler,attributes);
  if (logger.isTraceEnabled()) {
    logger.trace("Upgrading to WebSocket");
  }
  this.requestUpgradeStrategy.upgrade(request,response,subProtocol,extensions,user,wsHandler,attributes);
  return true;
}
