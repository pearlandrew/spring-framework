{
  Set<MediaType> producibleMediaTypes=getProducibleMediaTypes(returnType.getMethod(),returnValue.getClass());
  Set<MediaType> acceptableMediaTypes=getAcceptableMediaTypes(inputMessage);
  List<MediaType> mediaTypes=new ArrayList<MediaType>();
  for (  MediaType acceptableMediaType : acceptableMediaTypes) {
    for (    MediaType producibleMediaType : producibleMediaTypes) {
      if (acceptableMediaType.isCompatibleWith(producibleMediaType)) {
        mediaTypes.add(getMostSpecificMediaType(acceptableMediaType,producibleMediaType));
      }
    }
  }
  if (mediaTypes.isEmpty()) {
    throw new HttpMediaTypeNotAcceptableException(allSupportedMediaTypes);
  }
  MediaType.sortBySpecificity(mediaTypes);
  MediaType selectedMediaType=null;
  for (  MediaType mediaType : mediaTypes) {
    if (mediaType.isConcrete()) {
      selectedMediaType=mediaType;
      break;
    }
 else     if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {
      selectedMediaType=MediaType.APPLICATION_OCTET_STREAM;
      break;
    }
  }
  if (selectedMediaType != null) {
    for (    HttpMessageConverter<?> messageConverter : messageConverters) {
      if (messageConverter.canWrite(returnValue.getClass(),selectedMediaType)) {
        ((HttpMessageConverter<T>)messageConverter).write(returnValue,selectedMediaType,outputMessage);
        if (logger.isDebugEnabled()) {
          logger.debug("Written [" + returnValue + "] as \""+ selectedMediaType+ "\" using ["+ messageConverter+ "]");
        }
        return;
      }
    }
  }
 else {
    throw new HttpMediaTypeNotAcceptableException(allSupportedMediaTypes);
  }
}
