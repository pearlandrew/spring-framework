{
  if (bd.getMethodOverrides().isEmpty()) {
    Constructor<?> constructorToUse;
synchronized (bd.constructorArgumentLock) {
      constructorToUse=(Constructor<?>)bd.resolvedConstructorOrFactoryMethod;
      if (constructorToUse == null) {
        final Class<?> clazz=bd.getBeanClass();
        if (clazz.isInterface()) {
          throw new BeanInstantiationException(clazz,"Specified class is an interface");
        }
        try {
          if (System.getSecurityManager() != null) {
            constructorToUse=AccessController.doPrivileged(new PrivilegedExceptionAction<Constructor<?>>(){
              @Override public Constructor<?> run() throws Exception {
                return clazz.getDeclaredConstructor((Class[])null);
              }
            }
);
          }
 else {
            constructorToUse=clazz.getDeclaredConstructor((Class[])null);
          }
          bd.resolvedConstructorOrFactoryMethod=constructorToUse;
        }
 catch (        Throwable ex) {
          throw new BeanInstantiationException(clazz,"No default constructor found",ex);
        }
      }
    }
    return BeanUtils.instantiateClass(constructorToUse);
  }
 else {
    return instantiateWithMethodInjection(bd,beanName,owner);
  }
}
