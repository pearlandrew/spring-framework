{
  try {
    if (System.getSecurityManager() != null) {
      AccessController.doPrivileged(new PrivilegedAction<Object>(){
        @Override public Object run(){
          ReflectionUtils.makeAccessible(factoryMethod);
          return null;
        }
      }
);
    }
 else {
      ReflectionUtils.makeAccessible(factoryMethod);
    }
    Method priorInvokedFactoryMethod=currentlyInvokedFactoryMethod.get();
    try {
      currentlyInvokedFactoryMethod.set(factoryMethod);
      return factoryMethod.invoke(factoryBean,args);
    }
  finally {
      if (priorInvokedFactoryMethod != null) {
        currentlyInvokedFactoryMethod.set(priorInvokedFactoryMethod);
      }
 else {
        currentlyInvokedFactoryMethod.remove();
      }
    }
  }
 catch (  IllegalArgumentException ex) {
    throw new BeanInstantiationException(factoryMethod.getReturnType(),"Illegal arguments to factory method '" + factoryMethod.getName() + "'; "+ "args: "+ StringUtils.arrayToCommaDelimitedString(args),ex);
  }
catch (  IllegalAccessException ex) {
    throw new BeanInstantiationException(factoryMethod.getReturnType(),"Cannot access factory method '" + factoryMethod.getName() + "'; is it public?",ex);
  }
catch (  InvocationTargetException ex) {
    String msg="Factory method '" + factoryMethod.getName() + "' threw exception";
    if (bd.getFactoryBeanName() != null && owner instanceof ConfigurableBeanFactory && ((ConfigurableBeanFactory)owner).isCurrentlyInCreation(bd.getFactoryBeanName())) {
      msg="Circular reference involving containing bean '" + bd.getFactoryBeanName() + "' - consider "+ "declaring the factory method as static for independence from its containing instance. "+ msg;
    }
    throw new BeanInstantiationException(factoryMethod.getReturnType(),msg,ex.getTargetException());
  }
}
