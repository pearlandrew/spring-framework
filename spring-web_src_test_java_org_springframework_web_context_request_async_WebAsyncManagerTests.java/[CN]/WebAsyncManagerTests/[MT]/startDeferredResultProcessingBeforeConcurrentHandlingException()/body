{
  DeferredResult<Integer> deferredResult=new DeferredResult<Integer>();
  Exception exception=new Exception();
  DeferredResultProcessingInterceptor interceptor=createStrictMock(DeferredResultProcessingInterceptor.class);
  interceptor.beforeConcurrentHandling(this.asyncWebRequest,deferredResult);
  expectLastCall().andThrow(exception);
  replay(interceptor);
  this.asyncWebRequest.addTimeoutHandler((Runnable)notNull());
  this.asyncWebRequest.addCompletionHandler((Runnable)notNull());
  replay(this.asyncWebRequest);
  this.asyncManager.registerDeferredResultInterceptor("interceptor",interceptor);
  try {
    this.asyncManager.startDeferredResultProcessing(deferredResult);
    fail("Expected Exception");
  }
 catch (  Exception success) {
    assertEquals(exception,success);
  }
  assertFalse(this.asyncManager.hasConcurrentResult());
  verify(this.asyncWebRequest,interceptor);
}
