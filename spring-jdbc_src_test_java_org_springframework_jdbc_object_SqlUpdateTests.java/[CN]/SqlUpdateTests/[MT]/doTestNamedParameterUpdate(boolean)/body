{
  mockPreparedStatement.setObject(1,new Integer(1),Types.NUMERIC);
  mockPreparedStatement.setObject(2,new Integer(1),Types.DECIMAL);
  ctrlPreparedStatement.setVoidCallable();
  mockPreparedStatement.executeUpdate();
  ctrlPreparedStatement.setReturnValue(1);
  if (debugEnabled) {
    mockPreparedStatement.getWarnings();
    ctrlPreparedStatement.setReturnValue(null);
  }
  mockPreparedStatement.close();
  ctrlPreparedStatement.setVoidCallable();
  mockConnection.prepareStatement(UPDATE_INT_INT);
  ctrlConnection.setReturnValue(mockPreparedStatement);
  replay();
class NamedParameterUpdater extends SqlUpdate {
    public NamedParameterUpdater(){
      setSql(UPDATE_NAMED_PARAMETERS);
      setDataSource(mockDataSource);
      if (namedDeclarations) {
        declareParameter(new SqlParameter("priceId",Types.DECIMAL));
        declareParameter(new SqlParameter("perfId",Types.NUMERIC));
      }
 else {
        declareParameter(new SqlParameter(Types.NUMERIC));
        declareParameter(new SqlParameter(Types.DECIMAL));
      }
      compile();
    }
    public int run(    int performanceId,    int type){
      Map params=new HashMap();
      params.put("perfId",new Integer(performanceId));
      params.put("priceId",new Integer(type));
      return updateByNamedParam(params);
    }
  }
  NamedParameterUpdater pc=new NamedParameterUpdater();
  int rowsAffected=pc.run(1,1);
  assertEquals(1,rowsAffected);
}
