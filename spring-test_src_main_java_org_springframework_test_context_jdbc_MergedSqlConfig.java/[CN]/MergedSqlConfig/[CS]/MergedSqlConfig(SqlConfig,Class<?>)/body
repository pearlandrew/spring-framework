{
  Assert.notNull(localSqlConfig,"Local @SqlConfig must not be null");
  Assert.notNull(testClass,"testClass must not be null");
  AnnotationAttributes attributes=AnnotatedElementUtils.getAnnotationAttributes(testClass,SqlConfig.class.getName());
  if (attributes != null) {
    for (    String key : attributes.keySet()) {
      Object value=AnnotationUtils.getValue(localSqlConfig,key);
      if (value != null) {
        if (!value.equals("") && (value != TransactionMode.DEFAULT) && (value != ErrorMode.DEFAULT)) {
          attributes.put(key,value);
        }
      }
    }
  }
 else {
    attributes=AnnotationUtils.getAnnotationAttributes(localSqlConfig,false,false);
  }
  this.dataSource=attributes.getString("dataSource");
  this.transactionManager=attributes.getString("transactionManager");
  this.transactionMode=getEnum(attributes,"transactionMode",TransactionMode.DEFAULT,TransactionMode.INFERRED);
  this.encoding=attributes.getString("encoding");
  this.separator=getString(attributes,"separator",ScriptUtils.DEFAULT_STATEMENT_SEPARATOR);
  this.commentPrefix=getString(attributes,"commentPrefix",ScriptUtils.DEFAULT_COMMENT_PREFIX);
  this.blockCommentStartDelimiter=getString(attributes,"blockCommentStartDelimiter",ScriptUtils.DEFAULT_BLOCK_COMMENT_START_DELIMITER);
  this.blockCommentEndDelimiter=getString(attributes,"blockCommentEndDelimiter",ScriptUtils.DEFAULT_BLOCK_COMMENT_END_DELIMITER);
  this.errorMode=getEnum(attributes,"errorMode",ErrorMode.DEFAULT,ErrorMode.FAIL_ON_ERROR);
}
