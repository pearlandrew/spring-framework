{
  RequestBodyPublisher requestBodyPublisher=new RequestBodyPublisher(exchange);
  ReactiveServerHttpRequest request=new UndertowServerHttpRequest(exchange,requestBodyPublisher);
  ResponseBodySubscriber responseBodySubscriber=new ResponseBodySubscriber(exchange);
  ReactiveServerHttpResponse response=new UndertowServerHttpResponse(exchange,responseBodySubscriber);
  exchange.dispatch();
  this.httpHandler.handle(request,response).subscribe(new Subscriber<Void>(){
    @Override public void onSubscribe(    Subscription subscription){
      subscription.request(Long.MAX_VALUE);
    }
    @Override public void onNext(    Void aVoid){
    }
    @Override public void onError(    Throwable t){
      if (!exchange.isResponseStarted() && exchange.getStatusCode() < INTERNAL_SERVER_ERROR.value()) {
        exchange.setStatusCode(INTERNAL_SERVER_ERROR.value());
      }
      exchange.endExchange();
    }
    @Override public void onComplete(){
      exchange.endExchange();
    }
  }
);
}
