{
  String initMethodName=mbd.getInitMethodName();
  final Method initMethod=(mbd.isNonPublicAccessAllowed() ? BeanUtils.findMethod(bean.getClass(),initMethodName) : ClassUtils.getMethodIfAvailable(bean.getClass(),initMethodName));
  if (initMethod == null) {
    if (mbd.isEnforceInitMethod()) {
      throw new BeanDefinitionValidationException("Couldn't find an init method named '" + initMethodName + "' on bean with name '"+ beanName+ "'");
    }
 else {
      if (logger.isDebugEnabled()) {
        logger.debug("No default init method named '" + initMethodName + "' found on bean with name '"+ beanName+ "'");
      }
      return;
    }
  }
  if (logger.isDebugEnabled()) {
    logger.debug("Invoking init method  '" + initMethodName + "' on bean with name '"+ beanName+ "'");
  }
  ReflectionUtils.makeAccessible(initMethod);
  if (System.getSecurityManager() != null) {
    try {
      AccessController.doPrivileged(new PrivilegedExceptionAction<Object>(){
        public Object run() throws Exception {
          initMethod.invoke(bean,(Object[])null);
          return null;
        }
      }
,getAccessControlContext());
    }
 catch (    PrivilegedActionException pae) {
      InvocationTargetException ex=(InvocationTargetException)pae.getException();
      throw ex.getTargetException();
    }
  }
 else {
    initMethod.invoke(bean,(Object[])null);
  }
}
