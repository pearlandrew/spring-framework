{
  Object convertedValue=newValue;
  PropertyEditor editor=this.propertyEditorRegistry.findCustomEditor(requiredType,propertyName);
  ConversionService conversionService=this.propertyEditorRegistry.getConversionService();
  if (editor == null && conversionService != null && convertedValue != null) {
    TypeDescriptor sourceTypeDesc=TypeDescriptor.valueOf(convertedValue.getClass());
    if (conversionService.canConvert(sourceTypeDesc,typeDescriptor)) {
      return (T)conversionService.convert(convertedValue,sourceTypeDesc,typeDescriptor);
    }
  }
  if (editor != null || (requiredType != null && !ClassUtils.isAssignableValue(requiredType,convertedValue))) {
    if (editor == null) {
      editor=findDefaultEditor(requiredType,typeDescriptor);
    }
    convertedValue=doConvertValue(oldValue,convertedValue,requiredType,editor);
  }
  if (requiredType != null) {
    if (convertedValue != null) {
      if (requiredType.isArray()) {
        return (T)convertToTypedArray(convertedValue,propertyName,requiredType.getComponentType());
      }
 else       if (convertedValue instanceof Collection) {
        convertedValue=convertToTypedCollection((Collection)convertedValue,propertyName,requiredType,typeDescriptor);
      }
 else       if (convertedValue instanceof Map) {
        convertedValue=convertToTypedMap((Map)convertedValue,propertyName,requiredType,typeDescriptor);
      }
      if (convertedValue.getClass().isArray() && Array.getLength(convertedValue) == 1) {
        convertedValue=Array.get(convertedValue,0);
      }
      if (String.class.equals(requiredType) && ClassUtils.isPrimitiveOrWrapper(convertedValue.getClass())) {
        return (T)convertedValue.toString();
      }
 else       if (convertedValue instanceof String && !requiredType.isInstance(convertedValue)) {
        if (!requiredType.isInterface() && !requiredType.isEnum()) {
          try {
            Constructor strCtor=requiredType.getConstructor(String.class);
            return (T)BeanUtils.instantiateClass(strCtor,convertedValue);
          }
 catch (          NoSuchMethodException ex) {
            if (logger.isTraceEnabled()) {
              logger.trace("No String constructor found on type [" + requiredType.getName() + "]",ex);
            }
          }
catch (          Exception ex) {
            if (logger.isDebugEnabled()) {
              logger.debug("Construction via String failed for type [" + requiredType.getName() + "]",ex);
            }
          }
        }
        String trimmedValue=((String)convertedValue).trim();
        if (requiredType.isEnum() && "".equals(trimmedValue)) {
          return null;
        }
        convertedValue=attemptToConvertStringToEnum(requiredType,trimmedValue,convertedValue);
      }
    }
    if (!ClassUtils.isAssignableValue(requiredType,convertedValue)) {
      StringBuilder msg=new StringBuilder();
      msg.append("Cannot convert value of type [").append(ClassUtils.getDescriptiveType(newValue));
      msg.append("] to required type [").append(ClassUtils.getQualifiedName(requiredType)).append("]");
      if (propertyName != null) {
        msg.append(" for property '").append(propertyName).append("'");
      }
      if (editor != null) {
        msg.append(": PropertyEditor [").append(editor.getClass().getName()).append("] returned inappropriate value");
        throw new IllegalArgumentException(msg.toString());
      }
 else {
        msg.append(": no matching editors or conversion strategy found");
        throw new IllegalStateException(msg.toString());
      }
    }
  }
  return (T)convertedValue;
}
