{
  boolean originalAllowed=requiredType.isInstance(original);
  if (!originalAllowed && !Map.class.isAssignableFrom(requiredType)) {
    return original;
  }
  typeDescriptor=typeDescriptor.narrow(original);
  TypeDescriptor keyType=typeDescriptor.getMapKeyTypeDescriptor();
  TypeDescriptor valueType=typeDescriptor.getMapValueTypeDescriptor();
  if (keyType == null && valueType == null && originalAllowed && !this.propertyEditorRegistry.hasCustomEditorForElement(null,propertyName)) {
    return original;
  }
  Iterator it;
  try {
    it=original.entrySet().iterator();
    if (it == null) {
      if (logger.isDebugEnabled()) {
        logger.debug("Map of type [" + original.getClass().getName() + "] returned null Iterator - injecting original Map as-is");
      }
      return original;
    }
  }
 catch (  Throwable ex) {
    if (logger.isDebugEnabled()) {
      logger.debug("Cannot access Map of type [" + original.getClass().getName() + "] - injecting original Map as-is",ex);
    }
    return original;
  }
  Map convertedCopy;
  try {
    if (CollectionFactory.isApproximableMapType(requiredType)) {
      convertedCopy=CollectionFactory.createApproximateMap(original,original.size());
    }
 else {
      convertedCopy=(Map)requiredType.newInstance();
    }
  }
 catch (  Throwable ex) {
    if (logger.isDebugEnabled()) {
      logger.debug("Cannot create copy of Map type [" + original.getClass().getName() + "] - injecting original Map as-is",ex);
    }
    return original;
  }
  while (it.hasNext()) {
    Map.Entry entry=(Map.Entry)it.next();
    Object key=entry.getKey();
    Object value=entry.getValue();
    String keyedPropertyName=buildKeyedPropertyName(propertyName,key);
    Object convertedKey=convertIfNecessary(keyedPropertyName,null,key,keyType != null ? keyType.getType() : null,typeDescriptor.getMapKeyTypeDescriptor());
    Object convertedValue=convertIfNecessary(keyedPropertyName,null,value,valueType != null ? valueType.getType() : null,typeDescriptor.getMapValueTypeDescriptor());
    try {
      convertedCopy.put(convertedKey,convertedValue);
    }
 catch (    Throwable ex) {
      if (logger.isDebugEnabled()) {
        logger.debug("Map type [" + original.getClass().getName() + "] seems to be read-only - injecting original Map as-is",ex);
      }
      return original;
    }
    originalAllowed=originalAllowed && (key == convertedKey) && (value == convertedValue);
  }
  return (originalAllowed ? original : convertedCopy);
}
