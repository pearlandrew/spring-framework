{
  AnnotationCacheKey cacheKey=new AnnotationCacheKey(method,annotationType);
  A result=(A)findAnnotationCache.get(cacheKey);
  if (result == null) {
    Method resolvedMethod=BridgeMethodResolver.findBridgedMethod(method);
    result=findAnnotation((AnnotatedElement)resolvedMethod,annotationType);
    if (result == null) {
      result=searchOnInterfaces(method,annotationType,method.getDeclaringClass().getInterfaces());
    }
    Class<?> clazz=method.getDeclaringClass();
    while (result == null) {
      clazz=clazz.getSuperclass();
      if (clazz == null || Object.class == clazz) {
        break;
      }
      try {
        Method equivalentMethod=clazz.getDeclaredMethod(method.getName(),method.getParameterTypes());
        Method resolvedEquivalentMethod=BridgeMethodResolver.findBridgedMethod(equivalentMethod);
        result=findAnnotation((AnnotatedElement)resolvedEquivalentMethod,annotationType);
      }
 catch (      NoSuchMethodException ex) {
      }
      if (result == null) {
        result=searchOnInterfaces(method,annotationType,clazz.getInterfaces());
      }
    }
    if (result != null) {
      result=synthesizeAnnotation(result,method);
      findAnnotationCache.put(cacheKey,result);
    }
  }
  return result;
}
