{
  if (attributes == null) {
    return;
  }
  Class<? extends Annotation> annotationType=attributes.annotationType();
  Set<String> valuesAlreadyReplaced=new HashSet<String>();
  Map<String,List<String>> aliasMap=getAttributeAliasMap(annotationType);
  for (  String attributeName : aliasMap.keySet()) {
    if (valuesAlreadyReplaced.contains(attributeName)) {
      continue;
    }
    Object value=attributes.get(attributeName);
    boolean valuePresent=(value != null && !(value instanceof DefaultValueHolder));
    for (    String aliasedAttributeName : aliasMap.get(attributeName)) {
      if (valuesAlreadyReplaced.contains(aliasedAttributeName)) {
        continue;
      }
      Object aliasedValue=attributes.get(aliasedAttributeName);
      boolean aliasPresent=(aliasedValue != null && !(aliasedValue instanceof DefaultValueHolder));
      if (valuePresent || aliasPresent) {
        if (valuePresent && aliasPresent) {
          if (!ObjectUtils.nullSafeEquals(value,aliasedValue)) {
            String elementAsString=(annotatedElement != null ? annotatedElement.toString() : "unknown element");
            throw new AnnotationConfigurationException(String.format("In AnnotationAttributes for annotation [%s] declared on %s, " + "attribute '%s' and its alias '%s' are declared with values of [%s] and [%s], " + "but only one is permitted.",annotationType.getName(),elementAsString,attributeName,aliasedAttributeName,ObjectUtils.nullSafeToString(value),ObjectUtils.nullSafeToString(aliasedValue)));
          }
        }
 else         if (aliasPresent) {
          attributes.put(attributeName,adaptValue(annotatedElement,aliasedValue,classValuesAsString,nestedAnnotationsAsMap));
          valuesAlreadyReplaced.add(attributeName);
        }
 else {
          attributes.put(aliasedAttributeName,adaptValue(annotatedElement,value,classValuesAsString,nestedAnnotationsAsMap));
          valuesAlreadyReplaced.add(aliasedAttributeName);
        }
      }
    }
  }
  for (  String attributeName : attributes.keySet()) {
    if (valuesAlreadyReplaced.contains(attributeName)) {
      continue;
    }
    Object value=attributes.get(attributeName);
    if (value instanceof DefaultValueHolder) {
      value=((DefaultValueHolder)value).defaultValue;
      attributes.put(attributeName,adaptValue(annotatedElement,value,classValuesAsString,nestedAnnotationsAsMap));
    }
  }
}
