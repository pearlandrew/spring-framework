{
  Publisher<?> publisher;
  ResolvableType elementType;
  ResolvableType returnType=result.getReturnValueType();
  if (this.conversionService.canConvert(returnType.getRawClass(),Publisher.class)) {
    Optional<Object> optionalValue=result.getReturnValue();
    if (optionalValue.isPresent()) {
      publisher=this.conversionService.convert(optionalValue.get(),Publisher.class);
    }
 else {
      publisher=Mono.empty();
    }
    elementType=returnType.getGeneric(0);
    if (Void.class.equals(elementType.getRawClass())) {
      return Mono.from((Publisher<Void>)publisher);
    }
  }
 else {
    publisher=Mono.justOrEmpty(result.getReturnValue());
    elementType=returnType;
  }
  List<MediaType> compatibleMediaTypes=getCompatibleMediaTypes(exchange,elementType);
  if (compatibleMediaTypes.isEmpty()) {
    if (result.getReturnValue().isPresent()) {
      List<MediaType> mediaTypes=getProducibleMediaTypes(exchange,elementType);
      return Mono.error(new NotAcceptableStatusException(mediaTypes));
    }
    return Mono.empty();
  }
  MediaType bestMediaType=selectBestMediaType(compatibleMediaTypes);
  if (bestMediaType != null) {
    for (    HttpMessageConverter<?> converter : this.messageConverters) {
      if (converter.canWrite(elementType,bestMediaType)) {
        ServerHttpResponse response=exchange.getResponse();
        return converter.write((Publisher)publisher,elementType,bestMediaType,response);
      }
    }
  }
  return Mono.error(new NotAcceptableStatusException(this.supportedMediaTypes));
}
