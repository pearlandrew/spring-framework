{
  Optional<Object> value=result.getReturnValue();
  if (!value.isPresent()) {
    return Mono.empty();
  }
  Publisher<?> publisher;
  ResolvableType elementType;
  ResolvableType returnType=result.getReturnValueType();
  if (this.conversionService.canConvert(returnType.getRawClass(),Publisher.class)) {
    publisher=this.conversionService.convert(value.get(),Publisher.class);
    elementType=returnType.getGeneric(0);
    if (Void.class.equals(elementType.getRawClass())) {
      return Mono.from((Publisher<Void>)publisher);
    }
  }
 else {
    publisher=Mono.just(value.get());
    elementType=returnType;
  }
  ServerHttpRequest request=exchange.getRequest();
  List<MediaType> compatibleMediaTypes=getCompatibleMediaTypes(request,elementType);
  if (compatibleMediaTypes.isEmpty()) {
    List<MediaType> supported=getProducibleMediaTypes(elementType);
    return Mono.error(new NotAcceptableStatusException(supported));
  }
  MediaType bestMediaType=selectBestMediaType(compatibleMediaTypes);
  if (bestMediaType != null) {
    HttpMessageConverter<?> converter=resolveEncoder(elementType,bestMediaType);
    if (converter != null) {
      ServerHttpResponse response=exchange.getResponse();
      return converter.write((Publisher)publisher,elementType,bestMediaType,response);
    }
  }
  return Mono.error(new NotAcceptableStatusException(this.supportedMediaTypes));
}
