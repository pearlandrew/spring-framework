{
  if (contextAndObjectDetermined)   return;
  contextAndObjectDetermined=true;
  int colon=-1;
  for (int i=0; i < getChildCount(); i++) {
    if (getChild(i).getToken().getType() == SpringExpressionsLexer.COLON) {
      colon=i;
    }
  }
  if (colon != -1) {
    contextNode=getChild(colon - 1);
    objectNode=getChild(colon + 1);
  }
 else {
    objectNode=getChild(0);
  }
  if (objectNode.getToken().getType() != SpringExpressionsLexer.QUALIFIED_IDENTIFIER) {
    objectNode=null;
  }
}
