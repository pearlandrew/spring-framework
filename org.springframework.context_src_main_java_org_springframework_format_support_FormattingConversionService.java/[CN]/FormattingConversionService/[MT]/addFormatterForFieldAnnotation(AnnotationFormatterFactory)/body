{
  final Class<? extends Annotation> annotationType=(Class<? extends Annotation>)GenericTypeResolver.resolveTypeArgument(annotationFormatterFactory.getClass(),AnnotationFormatterFactory.class);
  if (annotationType == null) {
    throw new IllegalArgumentException("Unable to extract parameterized Annotation type argument from AnnotationFormatterFactory [" + annotationFormatterFactory.getClass().getName() + "]; does the factory parameterize the <A extends Annotation> generic type?");
  }
  if (this.embeddedValueResolver != null && annotationFormatterFactory instanceof EmbeddedValueResolverAware) {
    ((EmbeddedValueResolverAware)annotationFormatterFactory).setEmbeddedValueResolver(this.embeddedValueResolver);
  }
  Set<Class<?>> fieldTypes=annotationFormatterFactory.getFieldTypes();
  for (  final Class<?> fieldType : fieldTypes) {
    addConverter(new AnnotationPrinterConverter(annotationType,annotationFormatterFactory,fieldType));
    addConverter(new AnnotationParserConverter(annotationType,annotationFormatterFactory,fieldType));
  }
}
