{
  MockServletContext servletContext=new MockServletContext();
  servletContext.addInitParameter("pCommon","pCommonContextValue");
  servletContext.addInitParameter("pContext1","pContext1Value");
  GenericWebApplicationContext ctx=new GenericWebApplicationContext();
  ctx.setServletContext(servletContext);
  ctx.refresh();
  ConfigurableEnvironment environment=ctx.getEnvironment();
  assertThat(environment,instanceOf(DefaultWebEnvironment.class));
  MutablePropertySources propertySources=environment.getPropertySources();
  assertThat(propertySources.contains(DefaultWebEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME),is(true));
  assertThat(environment.getProperty("pCommon"),is("pCommonContextValue"));
  assertThat(environment.getProperty("pContext1"),is("pContext1Value"));
  assertThat(propertySources.asList().indexOf(PropertySource.named(DefaultWebEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME)),lessThan(propertySources.asList().indexOf(PropertySource.named(DefaultEnvironment.SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME))));
  MockPropertySource mockSystemProperties=new MockPropertySource(DefaultEnvironment.SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME);
  mockSystemProperties.setProperty("pCommon","pCommonSysPropsValue");
  mockSystemProperties.setProperty("pSysProps1","pSysProps1Value");
  propertySources.replace(DefaultEnvironment.SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME,mockSystemProperties);
  assertThat(environment.getProperty("pCommon"),is("pCommonContextValue"));
  assertThat(environment.getProperty("pSysProps1"),is("pSysProps1Value"));
}
