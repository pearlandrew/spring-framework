{
  byte[] payload;
  if (message.getPayload() instanceof byte[]) {
    payload=(byte[])message.getPayload();
  }
 else {
    throw new IllegalArgumentException("stompContent is not byte[]: " + message.getPayload().getClass());
  }
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  StompHeaderAccessor stompHeaders=StompHeaderAccessor.wrap(message);
  try {
    out.write(stompHeaders.getCommand().toString().getBytes("UTF-8"));
    out.write(LF);
    for (    Entry<String,List<String>> entry : stompHeaders.toNativeHeaderMap().entrySet()) {
      String key=entry.getKey();
      key=replaceAllOutbound(key);
      for (      String value : entry.getValue()) {
        out.write(key.getBytes("UTF-8"));
        out.write(COLON);
        value=replaceAllOutbound(value);
        out.write(value.getBytes("UTF-8"));
        out.write(LF);
      }
    }
    out.write(LF);
    out.write(payload);
    out.write(0);
    return out.toByteArray();
  }
 catch (  IOException e) {
    throw new StompConversionException("Failed to serialize " + message,e);
  }
}
