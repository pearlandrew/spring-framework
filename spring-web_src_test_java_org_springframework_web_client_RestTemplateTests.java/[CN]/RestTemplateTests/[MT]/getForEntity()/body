{
  expect(converter.canRead(String.class,null)).andReturn(true);
  MediaType textPlain=new MediaType("text","plain");
  expect(converter.getSupportedMediaTypes()).andReturn(Collections.singletonList(textPlain));
  expect(requestFactory.createRequest(new URI("http://example.com"),HttpMethod.GET)).andReturn(request);
  HttpHeaders requestHeaders=new HttpHeaders();
  expect(request.getHeaders()).andReturn(requestHeaders);
  expect(request.execute()).andReturn(response);
  expect(errorHandler.hasError(response)).andReturn(false);
  HttpHeaders responseHeaders=new HttpHeaders();
  responseHeaders.setContentType(textPlain);
  responseHeaders.setContentLength(10);
  expect(response.getStatusCode()).andReturn(HttpStatus.OK);
  expect(response.getHeaders()).andReturn(responseHeaders).times(3);
  expect(converter.canRead(String.class,textPlain)).andReturn(true);
  String expected="Hello World";
  expect(converter.read(String.class,response)).andReturn(expected);
  expect(response.getStatusCode()).andReturn(HttpStatus.OK);
  response.close();
  replayMocks();
  ResponseEntity<String> result=template.getForEntity("http://example.com",String.class);
  assertEquals("Invalid GET result",expected,result.getBody());
  assertEquals("Invalid Accept header",textPlain.toString(),requestHeaders.getFirst("Accept"));
  assertEquals("Invalid Content-Type header",textPlain,result.getHeaders().getContentType());
  assertEquals("Invalid status code",HttpStatus.OK,result.getStatusCode());
  verifyMocks();
}
