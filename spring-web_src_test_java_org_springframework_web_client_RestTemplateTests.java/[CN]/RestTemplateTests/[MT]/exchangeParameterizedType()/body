{
  GenericHttpMessageConverter converter=createMock(GenericHttpMessageConverter.class);
  template.setMessageConverters(Collections.<HttpMessageConverter<?>>singletonList(converter));
  ParameterizedTypeReference<List<Integer>> intList=new ParameterizedTypeReference<List<Integer>>(){
  }
;
  expect(converter.canRead(intList.getType(),null,null)).andReturn(true);
  expect(converter.getSupportedMediaTypes()).andReturn(Collections.singletonList(MediaType.TEXT_PLAIN));
  expect(requestFactory.createRequest(new URI("http://example.com"),HttpMethod.POST)).andReturn(this.request);
  HttpHeaders requestHeaders=new HttpHeaders();
  expect(this.request.getHeaders()).andReturn(requestHeaders).times(2);
  expect(converter.canWrite(String.class,null)).andReturn(true);
  String requestBody="Hello World";
  converter.write(requestBody,null,this.request);
  expect(this.request.execute()).andReturn(response);
  expect(errorHandler.hasError(response)).andReturn(false);
  HttpHeaders responseHeaders=new HttpHeaders();
  responseHeaders.setContentType(MediaType.TEXT_PLAIN);
  responseHeaders.setContentLength(10);
  expect(response.getStatusCode()).andReturn(HttpStatus.OK);
  expect(response.getHeaders()).andReturn(responseHeaders).times(3);
  List<Integer> expected=Collections.singletonList(42);
  expect(converter.canRead(intList.getType(),null,MediaType.TEXT_PLAIN)).andReturn(true);
  expect(converter.read(intList.getType(),null,response)).andReturn(expected);
  expect(response.getStatusCode()).andReturn(HttpStatus.OK);
  response.close();
  replay(requestFactory,request,response,errorHandler,converter);
  HttpHeaders entityHeaders=new HttpHeaders();
  entityHeaders.set("MyHeader","MyValue");
  HttpEntity<String> requestEntity=new HttpEntity<String>(requestBody,entityHeaders);
  ResponseEntity<List<Integer>> result=template.exchange("http://example.com",HttpMethod.POST,requestEntity,intList);
  assertEquals("Invalid POST result",expected,result.getBody());
  assertEquals("Invalid Content-Type",MediaType.TEXT_PLAIN,result.getHeaders().getContentType());
  assertEquals("Invalid Accept header",MediaType.TEXT_PLAIN_VALUE,requestHeaders.getFirst("Accept"));
  assertEquals("Invalid custom header","MyValue",requestHeaders.getFirst("MyHeader"));
  assertEquals("Invalid status code",HttpStatus.OK,result.getStatusCode());
  verify(requestFactory,request,response,errorHandler,converter);
}
