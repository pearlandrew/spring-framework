{
  MockControl mockLog=MockControl.createControl(Log.class);
  final Log log=(Log)mockLog.getMock();
  MockControl mockMethodInvocation=MockControl.createControl(MethodInvocation.class);
  final MethodInvocation methodInvocation=(MethodInvocation)mockMethodInvocation.getMock();
  Method toString=String.class.getMethod("toString",new Class[]{});
  methodInvocation.getMethod();
  mockMethodInvocation.setReturnValue(toString);
  methodInvocation.getThis();
  mockMethodInvocation.setReturnValue(this);
  log.trace("Some tracing output");
  mockLog.setMatcher(MockControl.ALWAYS_MATCHER);
  methodInvocation.proceed();
  IllegalArgumentException exception=new IllegalArgumentException();
  mockMethodInvocation.setThrowable(exception);
  log.trace("Some more tracing output",exception);
  mockLog.setMatcher(MockControl.ALWAYS_MATCHER);
  mockLog.setVoidCallable();
  mockMethodInvocation.replay();
  mockLog.replay();
  final SimpleTraceInterceptor interceptor=new SimpleTraceInterceptor(true);
  try {
    interceptor.invokeUnderTrace(methodInvocation,log);
    fail("Must have propagated the IllegalArgumentException.");
  }
 catch (  IllegalArgumentException expected) {
  }
  mockLog.verify();
  mockMethodInvocation.verify();
}
