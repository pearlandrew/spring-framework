{
  Object source=parserContext.extractSource(element);
  CompositeComponentDefinition compDefinition=new CompositeComponentDefinition(element.getTagName(),source);
  parserContext.pushContainingComponent(compDefinition);
  BeanDefinitionRegistry registry=parserContext.getRegistry();
  String mode=element.getAttribute("mode");
  if ("aspectj".equals(mode)) {
    registerAsyncExecutionAspect(element,parserContext);
  }
 else {
    if (registry.containsBeanDefinition(ASYNC_ANNOTATION_PROCESSOR_BEAN_NAME)) {
      parserContext.getReaderContext().error("Only one AsyncAnnotationBeanPostProcessor may exist within the context.",source);
    }
 else {
      BeanDefinitionBuilder builder=BeanDefinitionBuilder.genericBeanDefinition("org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor");
      builder.getRawBeanDefinition().setSource(source);
      String executor=element.getAttribute("executor");
      if (StringUtils.hasText(executor)) {
        builder.addPropertyReference("executor",executor);
      }
      if (Boolean.valueOf(element.getAttribute(AopNamespaceUtils.PROXY_TARGET_CLASS_ATTRIBUTE))) {
        builder.addPropertyValue("proxyTargetClass",true);
      }
      registerPostProcessor(parserContext,builder,ASYNC_ANNOTATION_PROCESSOR_BEAN_NAME);
    }
  }
  if (registry.containsBeanDefinition(SCHEDULED_ANNOTATION_PROCESSOR_BEAN_NAME)) {
    parserContext.getReaderContext().error("Only one ScheduledAnnotationBeanPostProcessor may exist within the context.",source);
  }
 else {
    BeanDefinitionBuilder builder=BeanDefinitionBuilder.genericBeanDefinition("org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor");
    builder.getRawBeanDefinition().setSource(source);
    String scheduler=element.getAttribute("scheduler");
    if (StringUtils.hasText(scheduler)) {
      builder.addPropertyReference("scheduler",scheduler);
    }
    registerPostProcessor(parserContext,builder,SCHEDULED_ANNOTATION_PROCESSOR_BEAN_NAME);
  }
  parserContext.popAndRegisterContainingComponent();
  return null;
}
