{
  ServletInvocableHandlerMethod exceptionHandlerMethod=getExceptionHandlerMethod(handlerMethod,exception);
  if (exceptionHandlerMethod == null) {
    return null;
  }
  exceptionHandlerMethod.setHandlerMethodArgumentResolvers(this.argumentResolvers);
  exceptionHandlerMethod.setHandlerMethodReturnValueHandlers(this.returnValueHandlers);
  ServletWebRequest webRequest=new ServletWebRequest(request,response);
  ModelAndViewContainer mavContainer=new ModelAndViewContainer();
  try {
    if (logger.isDebugEnabled()) {
      logger.debug("Invoking @ExceptionHandler method: " + exceptionHandlerMethod);
    }
    Throwable cause=exception.getCause();
    if (cause != null) {
      exceptionHandlerMethod.invokeAndHandle(webRequest,mavContainer,exception,cause,handlerMethod);
    }
 else {
      exceptionHandlerMethod.invokeAndHandle(webRequest,mavContainer,exception,handlerMethod);
    }
  }
 catch (  Exception invocationEx) {
    if (logger.isDebugEnabled()) {
      logger.debug("Failed to invoke @ExceptionHandler method: " + exceptionHandlerMethod,invocationEx);
    }
    return null;
  }
  if (mavContainer.isRequestHandled()) {
    return new ModelAndView();
  }
 else {
    ModelAndView mav=new ModelAndView().addAllObjects(mavContainer.getModel());
    mav.setViewName(mavContainer.getViewName());
    if (!mavContainer.isViewReference()) {
      mav.setView((View)mavContainer.getView());
    }
    return mav;
  }
}
