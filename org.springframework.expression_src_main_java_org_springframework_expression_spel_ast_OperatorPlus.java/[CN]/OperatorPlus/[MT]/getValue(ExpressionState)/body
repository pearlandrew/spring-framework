{
  SpelNode leftOp=getLeftOperand();
  SpelNode rightOp=getRightOperand();
  if (rightOp == null) {
    Object operandOne=leftOp.getValue(state);
    if (operandOne instanceof Number) {
      return new Integer(((Number)operandOne).intValue());
    }
    return state.operate(Operation.ADD,operandOne,null);
  }
 else {
    Object operandOne=leftOp.getValue(state);
    Object operandTwo=rightOp.getValue(state);
    if (operandOne instanceof Number && operandTwo instanceof Number) {
      Number op1=(Number)operandOne;
      Number op2=(Number)operandTwo;
      if (op1 instanceof Double || op2 instanceof Double) {
        Double result=op1.doubleValue() + op2.doubleValue();
        return result;
      }
 else       if (op1 instanceof Float || op2 instanceof Float) {
        Float result=op1.floatValue() + op2.floatValue();
        return result;
      }
 else       if (op1 instanceof Long || op2 instanceof Long) {
        Long result=op1.longValue() + op2.longValue();
        return result;
      }
 else {
        Integer result=op1.intValue() + op2.intValue();
        return result;
      }
    }
 else     if (operandOne instanceof String && operandTwo instanceof String) {
      return new StringBuilder((String)operandOne).append((String)operandTwo).toString();
    }
 else     if (operandOne instanceof String && operandTwo instanceof Integer) {
      String l=(String)operandOne;
      Integer i=(Integer)operandTwo;
      if (l.length() == 1) {
        Character c=new Character((char)(new Character(l.charAt(0)) + i));
        return c.toString();
      }
      return new StringBuilder((String)operandOne).append(((Integer)operandTwo).toString()).toString();
    }
    return state.operate(Operation.ADD,operandOne,operandTwo);
  }
}
