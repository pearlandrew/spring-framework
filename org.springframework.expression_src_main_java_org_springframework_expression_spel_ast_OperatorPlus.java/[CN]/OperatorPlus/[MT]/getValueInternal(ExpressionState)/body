{
  SpelNodeImpl leftOp=getLeftOperand();
  SpelNodeImpl rightOp=getRightOperand();
  if (rightOp == null) {
    Object operandOne=leftOp.getValueInternal(state).getValue();
    if (operandOne instanceof Number) {
      return new TypedValue(((Number)operandOne).intValue(),INTEGER_TYPE_DESCRIPTOR);
    }
    return state.operate(Operation.ADD,operandOne,null);
  }
 else {
    Object operandOne=leftOp.getValueInternal(state).getValue();
    Object operandTwo=rightOp.getValueInternal(state).getValue();
    if (operandOne instanceof Number && operandTwo instanceof Number) {
      Number op1=(Number)operandOne;
      Number op2=(Number)operandTwo;
      if (op1 instanceof Double || op2 instanceof Double) {
        return new TypedValue(op1.doubleValue() + op2.doubleValue(),DOUBLE_TYPE_DESCRIPTOR);
      }
 else       if (op1 instanceof Float || op2 instanceof Float) {
        return new TypedValue(op1.floatValue() + op2.floatValue(),FLOAT_TYPE_DESCRIPTOR);
      }
 else       if (op1 instanceof Long || op2 instanceof Long) {
        return new TypedValue(op1.longValue() + op2.longValue(),LONG_TYPE_DESCRIPTOR);
      }
 else {
        return new TypedValue(op1.intValue() + op2.intValue(),INTEGER_TYPE_DESCRIPTOR);
      }
    }
 else     if (operandOne instanceof String && operandTwo instanceof String) {
      return new TypedValue(new StringBuilder((String)operandOne).append((String)operandTwo).toString(),STRING_TYPE_DESCRIPTOR);
    }
 else     if (operandOne instanceof String && operandTwo instanceof Integer) {
      String l=(String)operandOne;
      Integer i=(Integer)operandTwo;
      if (l.length() == 1) {
        return new TypedValue(Character.toString((char)(l.charAt(0) + i)),STRING_TYPE_DESCRIPTOR);
      }
      return new TypedValue(new StringBuilder(l).append(i).toString(),STRING_TYPE_DESCRIPTOR);
    }
    return state.operate(Operation.ADD,operandOne,operandTwo);
  }
}
