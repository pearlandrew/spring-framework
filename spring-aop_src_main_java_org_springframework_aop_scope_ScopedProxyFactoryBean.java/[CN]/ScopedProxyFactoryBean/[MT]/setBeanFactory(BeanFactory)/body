{
  if (!(beanFactory instanceof ConfigurableBeanFactory)) {
    throw new IllegalStateException("Not running in a ConfigurableBeanFactory: " + beanFactory);
  }
  ConfigurableBeanFactory cbf=(ConfigurableBeanFactory)beanFactory;
  this.scopedTargetSource.setBeanFactory(beanFactory);
  ProxyFactory pf=new ProxyFactory();
  pf.copyFrom(this);
  pf.setTargetSource(this.scopedTargetSource);
  Class beanType=beanFactory.getType(this.targetBeanName);
  if (beanType == null) {
    throw new IllegalStateException("Cannot create scoped proxy for bean '" + this.targetBeanName + "': Target type could not be determined at the time of proxy creation.");
  }
  if (!isProxyTargetClass() || beanType.isInterface() || Modifier.isPrivate(beanType.getModifiers())) {
    pf.setInterfaces(ClassUtils.getAllInterfacesForClass(beanType,cbf.getBeanClassLoader()));
  }
  ScopedObject scopedObject=new DefaultScopedObject(cbf,this.scopedTargetSource.getTargetBeanName());
  pf.addAdvice(new DelegatingIntroductionInterceptor(scopedObject));
  pf.addInterface(AopInfrastructureBean.class);
  this.proxy=pf.getProxy(cbf.getBeanClassLoader());
}
