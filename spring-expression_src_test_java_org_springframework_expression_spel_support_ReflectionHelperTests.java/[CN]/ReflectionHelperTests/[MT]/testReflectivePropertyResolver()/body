{
  ReflectivePropertyAccessor rpr=new ReflectivePropertyAccessor();
  Tester t=new Tester();
  t.setProperty("hello");
  EvaluationContext ctx=new StandardEvaluationContext(t);
  assertTrue(rpr.canRead(ctx,t,"property"));
  assertEquals("hello",rpr.read(ctx,t,"property").getValue());
  assertEquals("hello",rpr.read(ctx,t,"property").getValue());
  assertTrue(rpr.canRead(ctx,t,"field"));
  assertEquals(3,rpr.read(ctx,t,"field").getValue());
  assertEquals(3,rpr.read(ctx,t,"field").getValue());
  assertTrue(rpr.canWrite(ctx,t,"property"));
  rpr.write(ctx,t,"property","goodbye");
  rpr.write(ctx,t,"property","goodbye");
  assertTrue(rpr.canWrite(ctx,t,"field"));
  rpr.write(ctx,t,"field",12);
  rpr.write(ctx,t,"field",12);
  rpr.write(ctx,t,"field2",3);
  rpr.write(ctx,t,"property2","doodoo");
  assertEquals(3,rpr.read(ctx,t,"field2").getValue());
  assertEquals(0,rpr.read(ctx,t,"field3").getValue());
  assertEquals("doodoo",rpr.read(ctx,t,"property3").getValue());
  assertEquals(false,rpr.read(ctx,t,"property4").getValue());
  assertTrue(rpr.canRead(ctx,t,"property4"));
  assertEquals("iD",rpr.read(ctx,t,"iD").getValue());
  assertTrue(rpr.canRead(ctx,t,"iD"));
  assertEquals("id",rpr.read(ctx,t,"id").getValue());
  assertTrue(rpr.canRead(ctx,t,"id"));
  assertEquals("ID",rpr.read(ctx,t,"ID").getValue());
  assertTrue(rpr.canRead(ctx,t,"ID"));
  assertEquals("id",rpr.read(ctx,t,"Id").getValue());
  assertTrue(rpr.canRead(ctx,t,"Id"));
  assertEquals("xyZ",rpr.read(ctx,t,"xyZ").getValue());
  assertTrue(rpr.canRead(ctx,t,"xyZ"));
  assertEquals("xY",rpr.read(ctx,t,"xY").getValue());
  assertTrue(rpr.canRead(ctx,t,"xY"));
  rpr.write(ctx,t,"pEBS","Test String");
  assertEquals("Test String",rpr.read(ctx,t,"pEBS").getValue());
}
