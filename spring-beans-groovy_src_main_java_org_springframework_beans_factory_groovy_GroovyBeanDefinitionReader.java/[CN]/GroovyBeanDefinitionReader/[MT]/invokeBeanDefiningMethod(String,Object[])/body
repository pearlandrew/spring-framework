{
  boolean hasClosureArgument=args[args.length - 1] instanceof Closure;
  if (args[0] instanceof Class) {
    Class<?> beanClass=(args[0] instanceof Class ? (Class)args[0] : args[0].getClass());
    if (args.length >= 1) {
      if (hasClosureArgument) {
        if (args.length - 1 != 1) {
          this.currentBeanDefinition=new GroovyBeanDefinitionWrapper(beanName,beanClass,resolveConstructorArguments(args,1,args.length - 1));
        }
 else {
          this.currentBeanDefinition=new GroovyBeanDefinitionWrapper(beanName,beanClass);
        }
      }
 else {
        this.currentBeanDefinition=new GroovyBeanDefinitionWrapper(beanName,beanClass,resolveConstructorArguments(args,1,args.length));
      }
    }
  }
 else   if (args[0] instanceof RuntimeBeanReference) {
    this.currentBeanDefinition=new GroovyBeanDefinitionWrapper(beanName);
    this.currentBeanDefinition.getBeanDefinition().setFactoryBeanName(((RuntimeBeanReference)args[0]).getBeanName());
  }
 else   if (args[0] instanceof Map) {
    if (args.length > 1 && args[1] instanceof Class) {
      List constructorArgs=resolveConstructorArguments(args,2,hasClosureArgument ? args.length - 1 : args.length);
      this.currentBeanDefinition=new GroovyBeanDefinitionWrapper(beanName,(Class)args[1],constructorArgs);
      Map namedArgs=(Map)args[0];
      for (      Object o : namedArgs.keySet()) {
        String propName=(String)o;
        setProperty(propName,namedArgs.get(propName));
      }
    }
 else {
      this.currentBeanDefinition=new GroovyBeanDefinitionWrapper(beanName);
      Map.Entry factoryBeanEntry=(Map.Entry)((Map)args[0]).entrySet().iterator().next();
      int constructorArgsTest=hasClosureArgument ? 2 : 1;
      if (args.length > constructorArgsTest) {
        int endOfConstructArgs=(hasClosureArgument ? args.length - 1 : args.length);
        this.currentBeanDefinition=new GroovyBeanDefinitionWrapper(beanName,null,resolveConstructorArguments(args,1,endOfConstructArgs));
      }
 else {
        this.currentBeanDefinition=new GroovyBeanDefinitionWrapper(beanName);
      }
      this.currentBeanDefinition.getBeanDefinition().setFactoryBeanName(factoryBeanEntry.getKey().toString());
      this.currentBeanDefinition.getBeanDefinition().setFactoryMethodName(factoryBeanEntry.getValue().toString());
    }
  }
 else   if (args[0] instanceof Closure) {
    this.currentBeanDefinition=new GroovyBeanDefinitionWrapper(beanName);
    this.currentBeanDefinition.getBeanDefinition().setAbstract(true);
  }
 else {
    List constructorArgs=resolveConstructorArguments(args,0,hasClosureArgument ? args.length - 1 : args.length);
    currentBeanDefinition=new GroovyBeanDefinitionWrapper(beanName,null,constructorArgs);
  }
  if (hasClosureArgument) {
    Closure callable=(Closure)args[args.length - 1];
    callable.setDelegate(this);
    callable.setResolveStrategy(Closure.DELEGATE_FIRST);
    callable.call(new Object[]{currentBeanDefinition});
  }
  GroovyBeanDefinitionWrapper beanDefinition=currentBeanDefinition;
  this.currentBeanDefinition=null;
  beanDefinition.getBeanDefinition().setAttribute(GroovyBeanDefinitionWrapper.class.getName(),beanDefinition);
  getRegistry().registerBeanDefinition(beanName,beanDefinition.getBeanDefinition());
  return beanDefinition;
}
