{
  if (ClassUtils.isAssignableValue(targetType,value)) {
    return (T)value;
  }
  if (String.class.equals(targetType)) {
    return (T)(value != null ? value.toString() : null);
  }
  Class actualTargetType=ClassUtils.resolvePrimitiveIfNecessary(targetType);
  if (Number.class.isAssignableFrom(actualTargetType)) {
    try {
      if (value instanceof String) {
        return (T)NumberUtils.parseNumber(value.toString(),(Class<Number>)actualTargetType);
      }
 else       if (value instanceof Number) {
        return (T)NumberUtils.convertNumberToTargetClass((Number)value,(Class<Number>)actualTargetType);
      }
    }
 catch (    IllegalArgumentException ex) {
      throw new SpelException(SpelMessages.PROBLEM_DURING_TYPE_CONVERSION,ex.getMessage());
    }
  }
  if (Character.class.equals(actualTargetType)) {
    if (value instanceof String) {
      String str=(String)value;
      if (str.length() == 1) {
        return (T)new Character(str.charAt(0));
      }
    }
 else     if (value instanceof Number) {
      return (T)new Character((char)((Number)value).shortValue());
    }
  }
  if (Boolean.class.equals(actualTargetType) && value instanceof String) {
    String str=(String)value;
    if ("true".equalsIgnoreCase(str)) {
      return (T)Boolean.TRUE;
    }
 else     if ("false".equalsIgnoreCase(str)) {
      return (T)Boolean.FALSE;
    }
  }
  throw new SpelException(SpelMessages.TYPE_CONVERSION_ERROR,value.getClass(),targetType);
}
