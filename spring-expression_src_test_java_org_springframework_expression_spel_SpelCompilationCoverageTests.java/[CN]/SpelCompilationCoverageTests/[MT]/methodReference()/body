{
  TestClass5 tc=new TestClass5();
  expression=parser.parseExpression("one()");
  assertCantCompile(expression);
  expression.getValue(tc);
  assertCanCompile(expression);
  tc.reset();
  expression.getValue(tc);
  assertEquals(1,tc.i);
  tc.reset();
  expression=parser.parseExpression("two()");
  assertCantCompile(expression);
  expression.getValue(tc);
  assertCanCompile(expression);
  tc.reset();
  expression.getValue(tc);
  assertEquals(1,TestClass5._i);
  tc.reset();
  expression=parser.parseExpression("three()");
  assertCantCompile(expression);
  expression.getValue(tc);
  assertCanCompile(expression);
  tc.reset();
  assertEquals("hello",expression.getValue(tc));
  tc.reset();
  expression=parser.parseExpression("four()");
  assertCantCompile(expression);
  expression.getValue(tc);
  assertCanCompile(expression);
  tc.reset();
  assertEquals(3277700L,expression.getValue(tc));
  tc.reset();
  expression=parser.parseExpression("five()");
  assertCantCompile(expression);
  expression.getValue(tc);
  assertCanCompile(expression);
  tc.reset();
  assertEquals("hello",expression.getValue(tc));
  tc.reset();
  expression=parser.parseExpression("six()");
  assertCantCompile(expression);
  expression.getValue(tc);
  assertCanCompile(expression);
  tc.reset();
  assertEquals(3277700L,expression.getValue(tc));
  tc.reset();
  expression=parser.parseExpression("seven(\"foo\")");
  assertCantCompile(expression);
  expression.getValue(tc);
  assertCanCompile(expression);
  tc.reset();
  expression.getValue(tc);
  assertEquals("foo",tc.s);
  tc.reset();
  expression=parser.parseExpression("eight(\"bar\")");
  assertCantCompile(expression);
  expression.getValue(tc);
  assertCanCompile(expression);
  tc.reset();
  expression.getValue(tc);
  assertEquals("bar",TestClass5._s);
  tc.reset();
  expression=parser.parseExpression("nine(231)");
  assertCantCompile(expression);
  expression.getValue(tc);
  assertCanCompile(expression);
  tc.reset();
  expression.getValue(tc);
  assertEquals(231,tc.i);
  tc.reset();
  expression=parser.parseExpression("ten(111)");
  assertCantCompile(expression);
  expression.getValue(tc);
  assertCanCompile(expression);
  tc.reset();
  expression.getValue(tc);
  assertEquals(111,TestClass5._i);
  tc.reset();
  expression=parser.parseExpression("eleven(\"a\",\"b\",\"c\")");
  assertCantCompile(expression);
  expression.getValue(tc);
  assertCantCompile(expression);
  expression=parser.parseExpression("eleven()");
  assertCantCompile(expression);
  expression.getValue(tc);
  assertCantCompile(expression);
  expression=parser.parseExpression("twelve(1,2,3)");
  assertCantCompile(expression);
  expression.getValue(tc);
  assertCantCompile(expression);
  expression=parser.parseExpression("twelve()");
  assertCantCompile(expression);
  expression.getValue(tc);
  assertCantCompile(expression);
  expression=parser.parseExpression("seven(123)");
  assertCantCompile(expression);
  expression.getValue(tc);
  assertEquals("123",tc.s);
  assertCantCompile(expression);
  Expression expression=parser.parseExpression("'abcd'.substring(index1,index2)");
  String resultI=expression.getValue(new TestClass1(),String.class);
  assertCanCompile(expression);
  String resultC=expression.getValue(new TestClass1(),String.class);
  assertEquals("bc",resultI);
  assertEquals("bc",resultC);
  expression=parser.parseExpression("takeNumber(123)");
  assertCantCompile(expression);
  expression.getValue(tc);
  assertEquals("123",tc.s);
  tc.reset();
  assertCanCompile(expression);
  expression.getValue(tc);
  assertEquals("123",tc.s);
  expression=parser.parseExpression("takeNumber(T(Integer).valueOf(42))");
  assertCantCompile(expression);
  expression.getValue(tc);
  assertEquals("42",tc.s);
  tc.reset();
  assertCanCompile(expression);
  expression.getValue(tc);
  assertEquals("42",tc.s);
  expression=parser.parseExpression("takeString(T(Integer).valueOf(42))");
  assertCantCompile(expression);
  expression.getValue(tc);
  assertEquals("42",tc.s);
  tc.reset();
  assertCantCompile(expression);
}
