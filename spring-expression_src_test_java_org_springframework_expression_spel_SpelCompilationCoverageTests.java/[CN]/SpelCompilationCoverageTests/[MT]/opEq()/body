{
  TestClass7 tc7=new TestClass7();
  expression=parse("property == 'UK'");
  assertTrue((Boolean)expression.getValue(tc7));
  TestClass7.property=null;
  assertFalse((Boolean)expression.getValue(tc7));
  assertCanCompile(expression);
  TestClass7.reset();
  assertTrue((Boolean)expression.getValue(tc7));
  TestClass7.property="UK";
  assertTrue((Boolean)expression.getValue(tc7));
  TestClass7.reset();
  TestClass7.property=null;
  assertFalse((Boolean)expression.getValue(tc7));
  expression=parse("property == null");
  assertTrue((Boolean)expression.getValue(tc7));
  assertCanCompile(expression);
  assertTrue((Boolean)expression.getValue(tc7));
  expression=parse("3.0d == 4.0d");
  assertCanCompile(expression);
  assertFalse((Boolean)expression.getValue());
  expression=parse("3446.0d == 3446.0d");
  assertCanCompile(expression);
  assertTrue((Boolean)expression.getValue());
  expression=parse("3 == 1");
  assertCanCompile(expression);
  assertFalse((Boolean)expression.getValue());
  expression=parse("3 == 3");
  assertCanCompile(expression);
  assertTrue((Boolean)expression.getValue());
  expression=parse("3.0f == 1.0f");
  assertCanCompile(expression);
  assertFalse((Boolean)expression.getValue());
  expression=parse("2.0f == 2.0f");
  assertCanCompile(expression);
  assertTrue((Boolean)expression.getValue());
  expression=parse("30L == 30L");
  assertCanCompile(expression);
  assertTrue((Boolean)expression.getValue());
  expression=parse("15L == 20L");
  assertCanCompile(expression);
  assertFalse((Boolean)expression.getValue());
  expression=parse("1 == 3.0d");
  assertCantCompile(expression);
  Double d=3.0d;
  expression=parse("#root==3.0d");
  assertTrue((Boolean)expression.getValue(d));
  assertCanCompile(expression);
  assertTrue((Boolean)expression.getValue(d));
  Integer i=3;
  expression=parse("#root==3");
  assertTrue((Boolean)expression.getValue(i));
  assertCanCompile(expression);
  assertTrue((Boolean)expression.getValue(i));
  Float f=3.0f;
  expression=parse("#root==3.0f");
  assertTrue((Boolean)expression.getValue(f));
  assertCanCompile(expression);
  assertTrue((Boolean)expression.getValue(f));
  long l=300l;
  expression=parse("#root==300l");
  assertTrue((Boolean)expression.getValue(l));
  assertCanCompile(expression);
  assertTrue((Boolean)expression.getValue(l));
  boolean b=true;
  expression=parse("#root==true");
  assertTrue((Boolean)expression.getValue(b));
  assertCanCompile(expression);
  assertTrue((Boolean)expression.getValue(b));
  expression=parse("T(Integer).valueOf(3) == 4");
  assertFalse((Boolean)expression.getValue());
  assertCanCompile(expression);
  assertFalse((Boolean)expression.getValue());
  expression=parse("T(Integer).valueOf(3) == T(Integer).valueOf(3)");
  assertTrue((Boolean)expression.getValue());
  assertCanCompile(expression);
  assertTrue((Boolean)expression.getValue());
  expression=parse("5 == T(Integer).valueOf(3)");
  assertFalse((Boolean)expression.getValue());
  assertCanCompile(expression);
  assertFalse((Boolean)expression.getValue());
  expression=parse("T(Float).valueOf(3.0f) == 4.0f");
  assertFalse((Boolean)expression.getValue());
  assertCanCompile(expression);
  assertFalse((Boolean)expression.getValue());
  expression=parse("T(Float).valueOf(3.0f) == T(Float).valueOf(3.0f)");
  assertTrue((Boolean)expression.getValue());
  assertCanCompile(expression);
  assertTrue((Boolean)expression.getValue());
  expression=parse("5.0f == T(Float).valueOf(3.0f)");
  assertFalse((Boolean)expression.getValue());
  assertCanCompile(expression);
  assertFalse((Boolean)expression.getValue());
  expression=parse("T(Long).valueOf(3L) == 4L");
  assertFalse((Boolean)expression.getValue());
  assertCanCompile(expression);
  assertFalse((Boolean)expression.getValue());
  expression=parse("T(Long).valueOf(3L) == T(Long).valueOf(3L)");
  assertTrue((Boolean)expression.getValue());
  assertCanCompile(expression);
  assertTrue((Boolean)expression.getValue());
  expression=parse("5L == T(Long).valueOf(3L)");
  assertFalse((Boolean)expression.getValue());
  assertCanCompile(expression);
  assertFalse((Boolean)expression.getValue());
  expression=parse("T(Double).valueOf(3.0d) == 4.0d");
  assertFalse((Boolean)expression.getValue());
  assertCanCompile(expression);
  assertFalse((Boolean)expression.getValue());
  expression=parse("T(Double).valueOf(3.0d) == T(Double).valueOf(3.0d)");
  assertTrue((Boolean)expression.getValue());
  assertCanCompile(expression);
  assertTrue((Boolean)expression.getValue());
  expression=parse("5.0d == T(Double).valueOf(3.0d)");
  assertFalse((Boolean)expression.getValue());
  assertCanCompile(expression);
  assertFalse((Boolean)expression.getValue());
  expression=parse("false == true");
  assertFalse((Boolean)expression.getValue());
  assertCanCompile(expression);
  assertFalse((Boolean)expression.getValue());
  expression=parse("T(Boolean).valueOf('true') == T(Boolean).valueOf('true')");
  assertTrue((Boolean)expression.getValue());
  assertCanCompile(expression);
  assertTrue((Boolean)expression.getValue());
  expression=parse("T(Boolean).valueOf('true') == true");
  assertTrue((Boolean)expression.getValue());
  assertCanCompile(expression);
  assertTrue((Boolean)expression.getValue());
  expression=parse("false == T(Boolean).valueOf('false')");
  assertTrue((Boolean)expression.getValue());
  assertCanCompile(expression);
  assertTrue((Boolean)expression.getValue());
}
