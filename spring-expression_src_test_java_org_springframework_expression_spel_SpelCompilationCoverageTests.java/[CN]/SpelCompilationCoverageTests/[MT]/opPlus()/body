{
  expression=parse("2+2");
  expression.getValue();
  assertCanCompile(expression);
  assertEquals(4,expression.getValue());
  expression=parse("2L+2L");
  expression.getValue();
  assertCanCompile(expression);
  assertEquals(4L,expression.getValue());
  expression=parse("2.0f+2.0f");
  expression.getValue();
  assertCanCompile(expression);
  assertEquals(4.0f,expression.getValue());
  expression=parse("3.0d+4.0d");
  expression.getValue();
  assertCanCompile(expression);
  assertEquals(7.0d,expression.getValue());
  expression=parse("+1");
  expression.getValue();
  assertCanCompile(expression);
  assertEquals(1,expression.getValue());
  expression=parse("+1L");
  expression.getValue();
  assertCanCompile(expression);
  assertEquals(1L,expression.getValue());
  expression=parse("+1.5f");
  expression.getValue();
  assertCanCompile(expression);
  assertEquals(1.5f,expression.getValue());
  expression=parse("+2.5d");
  expression.getValue();
  assertCanCompile(expression);
  assertEquals(2.5d,expression.getValue());
  expression=parse("+T(Double).valueOf(2.5d)");
  expression.getValue();
  assertCanCompile(expression);
  assertEquals(2.5d,expression.getValue());
  expression=parse("T(Integer).valueOf(2)+6");
  assertEquals(8,expression.getValue());
  assertCanCompile(expression);
  assertEquals(8,expression.getValue());
  expression=parse("T(Integer).valueOf(1)+T(Integer).valueOf(3)");
  assertEquals(4,expression.getValue());
  assertCanCompile(expression);
  assertEquals(4,expression.getValue());
  expression=parse("1+T(Integer).valueOf(3)");
  assertEquals(4,expression.getValue());
  assertCanCompile(expression);
  assertEquals(4,expression.getValue());
  expression=parse("T(Float).valueOf(2.0f)+6");
  assertEquals(8.0f,expression.getValue());
  assertCantCompile(expression);
  expression=parse("T(Float).valueOf(2.0f)+T(Float).valueOf(3.0f)");
  assertEquals(5.0f,expression.getValue());
  assertCanCompile(expression);
  assertEquals(5.0f,expression.getValue());
  expression=parse("3L+T(Long).valueOf(4L)");
  assertEquals(7L,expression.getValue());
  assertCanCompile(expression);
  assertEquals(7L,expression.getValue());
  expression=parse("T(Long).valueOf(2L)+6");
  assertEquals(8L,expression.getValue());
  assertCantCompile(expression);
  expression=parse("T(Long).valueOf(2L)+T(Long).valueOf(3L)");
  assertEquals(5L,expression.getValue());
  assertCanCompile(expression);
  assertEquals(5L,expression.getValue());
  expression=parse("1L+T(Long).valueOf(2L)");
  assertEquals(3L,expression.getValue());
  assertCanCompile(expression);
  assertEquals(3L,expression.getValue());
}
