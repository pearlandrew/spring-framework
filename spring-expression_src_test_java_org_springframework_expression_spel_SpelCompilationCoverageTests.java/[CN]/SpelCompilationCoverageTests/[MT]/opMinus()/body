{
  expression=parse("2-2");
  expression.getValue();
  assertCanCompile(expression);
  assertEquals(0,expression.getValue());
  expression=parse("4L-2L");
  expression.getValue();
  assertCanCompile(expression);
  assertEquals(2L,expression.getValue());
  expression=parse("4.0f-2.0f");
  expression.getValue();
  assertCanCompile(expression);
  assertEquals(2.0f,expression.getValue());
  expression=parse("3.0d-4.0d");
  expression.getValue();
  assertCanCompile(expression);
  assertEquals(-1.0d,expression.getValue());
  expression=parse("-1");
  expression.getValue();
  assertCanCompile(expression);
  assertEquals(-1,expression.getValue());
  expression=parse("-1L");
  expression.getValue();
  assertCanCompile(expression);
  assertEquals(-1L,expression.getValue());
  expression=parse("-1.5f");
  expression.getValue();
  assertCanCompile(expression);
  assertEquals(-1.5f,expression.getValue());
  expression=parse("-2.5d");
  expression.getValue();
  assertCanCompile(expression);
  assertEquals(-2.5d,expression.getValue());
  expression=parse("T(Integer).valueOf(2)-6");
  assertEquals(-4,expression.getValue());
  assertCanCompile(expression);
  assertEquals(-4,expression.getValue());
  expression=parse("T(Integer).valueOf(1)-T(Integer).valueOf(3)");
  assertEquals(-2,expression.getValue());
  assertCanCompile(expression);
  assertEquals(-2,expression.getValue());
  expression=parse("4-T(Integer).valueOf(3)");
  assertEquals(1,expression.getValue());
  assertCanCompile(expression);
  assertEquals(1,expression.getValue());
  expression=parse("T(Float).valueOf(2.0f)-6");
  assertEquals(-4.0f,expression.getValue());
  assertCanCompile(expression);
  assertEquals(-4.0f,expression.getValue());
  expression=parse("T(Float).valueOf(8.0f)-T(Float).valueOf(3.0f)");
  assertEquals(5.0f,expression.getValue());
  assertCanCompile(expression);
  assertEquals(5.0f,expression.getValue());
  expression=parse("11L-T(Long).valueOf(4L)");
  assertEquals(7L,expression.getValue());
  assertCanCompile(expression);
  assertEquals(7L,expression.getValue());
  expression=parse("T(Long).valueOf(9L)-6");
  assertEquals(3L,expression.getValue());
  assertCanCompile(expression);
  assertEquals(3L,expression.getValue());
  expression=parse("T(Long).valueOf(4L)-T(Long).valueOf(3L)");
  assertEquals(1L,expression.getValue());
  assertCanCompile(expression);
  assertEquals(1L,expression.getValue());
  expression=parse("8L-T(Long).valueOf(2L)");
  assertEquals(6L,expression.getValue());
  assertCanCompile(expression);
  assertEquals(6L,expression.getValue());
}
