{
  expression=parse("T(String)");
  assertEquals(String.class,expression.getValue());
  assertCanCompile(expression);
  assertEquals(String.class,expression.getValue());
  expression=parse("T(java.io.IOException)");
  assertEquals(IOException.class,expression.getValue());
  assertCanCompile(expression);
  assertEquals(IOException.class,expression.getValue());
  expression=parse("T(java.io.IOException[])");
  assertEquals(IOException[].class,expression.getValue());
  assertCanCompile(expression);
  assertEquals(IOException[].class,expression.getValue());
  expression=parse("T(int[][])");
  assertEquals(int[][].class,expression.getValue());
  assertCanCompile(expression);
  assertEquals(int[][].class,expression.getValue());
  expression=parse("T(int)");
  assertEquals(Integer.TYPE,expression.getValue());
  assertCanCompile(expression);
  assertEquals(Integer.TYPE,expression.getValue());
  expression=parse("T(byte)");
  assertEquals(Byte.TYPE,expression.getValue());
  assertCanCompile(expression);
  assertEquals(Byte.TYPE,expression.getValue());
  expression=parse("T(char)");
  assertEquals(Character.TYPE,expression.getValue());
  assertCanCompile(expression);
  assertEquals(Character.TYPE,expression.getValue());
  expression=parse("T(short)");
  assertEquals(Short.TYPE,expression.getValue());
  assertCanCompile(expression);
  assertEquals(Short.TYPE,expression.getValue());
  expression=parse("T(long)");
  assertEquals(Long.TYPE,expression.getValue());
  assertCanCompile(expression);
  assertEquals(Long.TYPE,expression.getValue());
  expression=parse("T(float)");
  assertEquals(Float.TYPE,expression.getValue());
  assertCanCompile(expression);
  assertEquals(Float.TYPE,expression.getValue());
  expression=parse("T(double)");
  assertEquals(Double.TYPE,expression.getValue());
  assertCanCompile(expression);
  assertEquals(Double.TYPE,expression.getValue());
  expression=parse("T(boolean)");
  assertEquals(Boolean.TYPE,expression.getValue());
  assertCanCompile(expression);
  assertEquals(Boolean.TYPE,expression.getValue());
  expression=parse("T(Missing)");
  assertGetValueFail(expression);
  assertCantCompile(expression);
}
