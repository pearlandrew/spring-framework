{
  Object o=null;
  expression=parser.parseExpression("{{1,2,3},{4,5,6},{7,8,9}}");
  o=expression.getValue();
  assertEquals("[[1, 2, 3], [4, 5, 6], [7, 8, 9]]",o.toString());
  assertCanCompile(expression);
  o=expression.getValue();
  assertEquals("[[1, 2, 3], [4, 5, 6], [7, 8, 9]]",o.toString());
  expression=parser.parseExpression("{{1,2,3},{4,5,6},{7,8,9}}.toString()");
  o=expression.getValue();
  assertEquals("[[1, 2, 3], [4, 5, 6], [7, 8, 9]]",o);
  assertCanCompile(expression);
  o=expression.getValue();
  assertEquals("[[1, 2, 3], [4, 5, 6], [7, 8, 9]]",o);
  expression=parser.parseExpression("{{1,2,3},{4,5,6},{7,8,9}}[1][0]");
  o=expression.getValue();
  assertEquals(4,o);
  assertCanCompile(expression);
  o=expression.getValue();
  assertEquals(4,o);
  expression=parser.parseExpression("{{1,2,3},'abc',{7,8,9}}[1]");
  o=expression.getValue();
  assertEquals("abc",o);
  assertCanCompile(expression);
  o=expression.getValue();
  assertEquals("abc",o);
  expression=parser.parseExpression("'abcde'.substring({{1,3},1,3,4}[0][1])");
  o=expression.getValue();
  assertEquals("de",o);
  assertCanCompile(expression);
  o=expression.getValue();
  assertEquals("de",o);
  expression=parser.parseExpression("'abcde'.substring({{1,3},1,3,4}[1])");
  o=expression.getValue();
  assertEquals("bcde",o);
  assertCanCompile(expression);
  o=expression.getValue();
  assertEquals("bcde",o);
  expression=parser.parseExpression("{'abc',{'def','ghi'}}");
  List<?> l=(List)expression.getValue();
  assertEquals("[abc, [def, ghi]]",l.toString());
  assertCanCompile(expression);
  l=(List)expression.getValue();
  assertEquals("[abc, [def, ghi]]",l.toString());
  expression=parser.parseExpression("{'abcde',{'ijklm','nopqr'}}[0].substring({1,3,4}[0])");
  o=expression.getValue();
  assertEquals("bcde",o);
  assertCanCompile(expression);
  o=expression.getValue();
  assertEquals("bcde",o);
  expression=parser.parseExpression("{'abcde',{'ijklm','nopqr'}}[1][0].substring({1,3,4}[0])");
  o=expression.getValue();
  assertEquals("jklm",o);
  assertCanCompile(expression);
  o=expression.getValue();
  assertEquals("jklm",o);
  expression=parser.parseExpression("{'abcde',{'ijklm','nopqr'}}[1][1].substring({1,3,4}[0],{1,3,4}[1])");
  o=expression.getValue();
  assertEquals("op",o);
  assertCanCompile(expression);
  o=expression.getValue();
  assertEquals("op",o);
}
