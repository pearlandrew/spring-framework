{
  String[] sss=new String[]{"a","b","c"};
  Number[] ns=new Number[]{2,8,9};
  int[] is=new int[]{8,9,10};
  double[] ds=new double[]{3.0d,4.0d,5.0d};
  long[] ls=new long[]{2L,3L,4L};
  short[] ss=new short[]{(short)33,(short)44,(short)55};
  float[] fs=new float[]{6.0f,7.0f,8.0f};
  byte[] bs=new byte[]{(byte)2,(byte)3,(byte)4};
  char[] cs=new char[]{'a','b','c'};
  expression=parser.parseExpression("[0]");
  assertEquals("a",expression.getValue(sss));
  assertCanCompile(expression);
  assertEquals("a",expression.getValue(sss));
  assertEquals("Ljava/lang/String",getAst().getExitDescriptor());
  expression=parser.parseExpression("[1]");
  assertEquals(8,expression.getValue(ns));
  assertCanCompile(expression);
  assertEquals(8,expression.getValue(ns));
  assertEquals("Ljava/lang/Number",getAst().getExitDescriptor());
  expression=parser.parseExpression("[2]");
  assertEquals(10,expression.getValue(is));
  assertCanCompile(expression);
  assertEquals(10,expression.getValue(is));
  assertEquals("I",getAst().getExitDescriptor());
  expression=parser.parseExpression("[1]");
  assertEquals(4.0d,expression.getValue(ds));
  assertCanCompile(expression);
  assertEquals(4.0d,expression.getValue(ds));
  assertEquals("D",getAst().getExitDescriptor());
  expression=parser.parseExpression("[0]");
  assertEquals(2L,expression.getValue(ls));
  assertCanCompile(expression);
  assertEquals(2L,expression.getValue(ls));
  assertEquals("J",getAst().getExitDescriptor());
  expression=parser.parseExpression("[2]");
  assertEquals((short)55,expression.getValue(ss));
  assertCanCompile(expression);
  assertEquals((short)55,expression.getValue(ss));
  assertEquals("S",getAst().getExitDescriptor());
  expression=parser.parseExpression("[0]");
  assertEquals(6.0f,expression.getValue(fs));
  assertCanCompile(expression);
  assertEquals(6.0f,expression.getValue(fs));
  assertEquals("F",getAst().getExitDescriptor());
  expression=parser.parseExpression("[2]");
  assertEquals((byte)4,expression.getValue(bs));
  assertCanCompile(expression);
  assertEquals((byte)4,expression.getValue(bs));
  assertEquals("B",getAst().getExitDescriptor());
  expression=parser.parseExpression("[1]");
  assertEquals('b',expression.getValue(cs));
  assertCanCompile(expression);
  assertEquals('b',expression.getValue(cs));
  assertEquals("C",getAst().getExitDescriptor());
  List<String> strings=new ArrayList<String>();
  strings.add("aaa");
  strings.add("bbb");
  strings.add("ccc");
  expression=parser.parseExpression("[1]");
  assertEquals("bbb",expression.getValue(strings));
  assertCanCompile(expression);
  assertEquals("bbb",expression.getValue(strings));
  assertEquals("Ljava/lang/Object",getAst().getExitDescriptor());
  List<Integer> ints=new ArrayList<Integer>();
  ints.add(123);
  ints.add(456);
  ints.add(789);
  expression=parser.parseExpression("[2]");
  assertEquals(789,expression.getValue(ints));
  assertCanCompile(expression);
  assertEquals(789,expression.getValue(ints));
  assertEquals("Ljava/lang/Object",getAst().getExitDescriptor());
  Map<String,Integer> map1=new HashMap<String,Integer>();
  map1.put("aaa",111);
  map1.put("bbb",222);
  map1.put("ccc",333);
  expression=parser.parseExpression("['aaa']");
  assertEquals(111,expression.getValue(map1));
  assertCanCompile(expression);
  assertEquals(111,expression.getValue(map1));
  assertEquals("Ljava/lang/Object",getAst().getExitDescriptor());
  TestClass6 tc=new TestClass6();
  expression=parser.parseExpression("['orange']");
  assertEquals("value1",expression.getValue(tc));
  assertCanCompile(expression);
  assertEquals("value1",expression.getValue(tc));
  assertEquals("Ljava/lang/String",getAst().getExitDescriptor());
  expression=parser.parseExpression("['peach']");
  assertEquals(34L,expression.getValue(tc));
  assertCanCompile(expression);
  assertEquals(34L,expression.getValue(tc));
  assertEquals("J",getAst().getExitDescriptor());
  expression=parser.parseExpression("['banana']");
  assertEquals("value3",expression.getValue(tc));
  assertCanCompile(expression);
  assertEquals("value3",expression.getValue(tc));
  assertEquals("Ljava/lang/String",getAst().getExitDescriptor());
  List<String[]> listOfStringArrays=new ArrayList<String[]>();
  listOfStringArrays.add(new String[]{"a","b","c"});
  listOfStringArrays.add(new String[]{"d","e","f"});
  expression=parser.parseExpression("[1]");
  assertEquals("d e f",stringify(expression.getValue(listOfStringArrays)));
  assertCanCompile(expression);
  assertEquals("d e f",stringify(expression.getValue(listOfStringArrays)));
  assertEquals("Ljava/lang/Object",getAst().getExitDescriptor());
  expression=parser.parseExpression("[1][0]");
  assertEquals("d",stringify(expression.getValue(listOfStringArrays)));
  assertCanCompile(expression);
  assertEquals("d",stringify(expression.getValue(listOfStringArrays)));
  assertEquals("Ljava/lang/String",getAst().getExitDescriptor());
  List<Integer[]> listOfIntegerArrays=new ArrayList<Integer[]>();
  listOfIntegerArrays.add(new Integer[]{1,2,3});
  listOfIntegerArrays.add(new Integer[]{4,5,6});
  expression=parser.parseExpression("[0]");
  assertEquals("1 2 3",stringify(expression.getValue(listOfIntegerArrays)));
  assertCanCompile(expression);
  assertEquals("1 2 3",stringify(expression.getValue(listOfIntegerArrays)));
  assertEquals("Ljava/lang/Object",getAst().getExitDescriptor());
  expression=parser.parseExpression("[0][1]");
  assertEquals(2,expression.getValue(listOfIntegerArrays));
  assertCanCompile(expression);
  assertEquals(2,expression.getValue(listOfIntegerArrays));
  assertEquals("Ljava/lang/Integer",getAst().getExitDescriptor());
  List<String>[] stringArrayOfLists=new ArrayList[2];
  stringArrayOfLists[0]=new ArrayList<String>();
  stringArrayOfLists[0].add("a");
  stringArrayOfLists[0].add("b");
  stringArrayOfLists[0].add("c");
  stringArrayOfLists[1]=new ArrayList<String>();
  stringArrayOfLists[1].add("d");
  stringArrayOfLists[1].add("e");
  stringArrayOfLists[1].add("f");
  expression=parser.parseExpression("[1]");
  assertEquals("d e f",stringify(expression.getValue(stringArrayOfLists)));
  assertCanCompile(expression);
  assertEquals("d e f",stringify(expression.getValue(stringArrayOfLists)));
  assertEquals("Ljava/util/ArrayList",getAst().getExitDescriptor());
  expression=parser.parseExpression("[1][2]");
  assertEquals("f",stringify(expression.getValue(stringArrayOfLists)));
  assertCanCompile(expression);
  assertEquals("f",stringify(expression.getValue(stringArrayOfLists)));
  assertEquals("Ljava/lang/Object",getAst().getExitDescriptor());
  String[][] referenceTypeArrayOfArrays=new String[][]{new String[]{"a","b","c"},new String[]{"d","e","f"}};
  expression=parser.parseExpression("[1]");
  assertEquals("d e f",stringify(expression.getValue(referenceTypeArrayOfArrays)));
  assertCanCompile(expression);
  assertEquals("[Ljava/lang/String",getAst().getExitDescriptor());
  assertEquals("d e f",stringify(expression.getValue(referenceTypeArrayOfArrays)));
  assertEquals("[Ljava/lang/String",getAst().getExitDescriptor());
  expression=parser.parseExpression("[1][2]");
  assertEquals("f",stringify(expression.getValue(referenceTypeArrayOfArrays)));
  assertCanCompile(expression);
  assertEquals("f",stringify(expression.getValue(referenceTypeArrayOfArrays)));
  assertEquals("Ljava/lang/String",getAst().getExitDescriptor());
  int[][] primitiveTypeArrayOfArrays=new int[][]{new int[]{1,2,3},new int[]{4,5,6}};
  expression=parser.parseExpression("[1]");
  assertEquals("4 5 6",stringify(expression.getValue(primitiveTypeArrayOfArrays)));
  assertCanCompile(expression);
  assertEquals("4 5 6",stringify(expression.getValue(primitiveTypeArrayOfArrays)));
  assertEquals("[I",getAst().getExitDescriptor());
  expression=parser.parseExpression("[1][2]");
  assertEquals("6",stringify(expression.getValue(primitiveTypeArrayOfArrays)));
  assertCanCompile(expression);
  assertEquals("6",stringify(expression.getValue(primitiveTypeArrayOfArrays)));
  assertEquals("I",getAst().getExitDescriptor());
  List<List<String>> listOfListOfStrings=new ArrayList<List<String>>();
  List<String> list=new ArrayList<String>();
  list.add("a");
  list.add("b");
  list.add("c");
  listOfListOfStrings.add(list);
  list=new ArrayList<String>();
  list.add("d");
  list.add("e");
  list.add("f");
  listOfListOfStrings.add(list);
  expression=parser.parseExpression("[1]");
  assertEquals("d e f",stringify(expression.getValue(listOfListOfStrings)));
  assertCanCompile(expression);
  assertEquals("Ljava/lang/Object",getAst().getExitDescriptor());
  assertEquals("d e f",stringify(expression.getValue(listOfListOfStrings)));
  assertEquals("Ljava/lang/Object",getAst().getExitDescriptor());
  expression=parser.parseExpression("[1][2]");
  assertEquals("f",stringify(expression.getValue(listOfListOfStrings)));
  assertCanCompile(expression);
  assertEquals("f",stringify(expression.getValue(listOfListOfStrings)));
  assertEquals("Ljava/lang/Object",getAst().getExitDescriptor());
  Map<String,List<String>> mapToLists=new HashMap<String,List<String>>();
  list=new ArrayList<String>();
  list.add("a");
  list.add("b");
  list.add("c");
  mapToLists.put("foo",list);
  expression=parser.parseExpression("['foo']");
  assertEquals("a b c",stringify(expression.getValue(mapToLists)));
  assertCanCompile(expression);
  assertEquals("Ljava/lang/Object",getAst().getExitDescriptor());
  assertEquals("a b c",stringify(expression.getValue(mapToLists)));
  assertEquals("Ljava/lang/Object",getAst().getExitDescriptor());
  expression=parser.parseExpression("['foo'][2]");
  assertEquals("c",stringify(expression.getValue(mapToLists)));
  assertCanCompile(expression);
  assertEquals("c",stringify(expression.getValue(mapToLists)));
  assertEquals("Ljava/lang/Object",getAst().getExitDescriptor());
  Map<String,int[]> mapToIntArray=new HashMap<String,int[]>();
  StandardEvaluationContext ctx=new StandardEvaluationContext();
  ctx.addPropertyAccessor(new CompilableMapAccessor());
  mapToIntArray.put("foo",new int[]{1,2,3});
  expression=parser.parseExpression("['foo']");
  assertEquals("1 2 3",stringify(expression.getValue(mapToIntArray)));
  assertCanCompile(expression);
  assertEquals("Ljava/lang/Object",getAst().getExitDescriptor());
  assertEquals("1 2 3",stringify(expression.getValue(mapToIntArray)));
  assertEquals("Ljava/lang/Object",getAst().getExitDescriptor());
  expression=parser.parseExpression("['foo'][1]");
  assertEquals(2,expression.getValue(mapToIntArray));
  assertCanCompile(expression);
  assertEquals(2,expression.getValue(mapToIntArray));
  expression=parser.parseExpression("foo");
  assertEquals("1 2 3",stringify(expression.getValue(ctx,mapToIntArray)));
  assertCanCompile(expression);
  assertEquals("1 2 3",stringify(expression.getValue(ctx,mapToIntArray)));
  assertEquals("Ljava/lang/Object",getAst().getExitDescriptor());
  expression=parser.parseExpression("foo[1]");
  assertEquals(2,expression.getValue(ctx,mapToIntArray));
  assertCanCompile(expression);
  assertEquals(2,expression.getValue(ctx,mapToIntArray));
  expression=parser.parseExpression("['foo'][2]");
  assertEquals("3",stringify(expression.getValue(ctx,mapToIntArray)));
  assertCanCompile(expression);
  assertEquals("3",stringify(expression.getValue(ctx,mapToIntArray)));
  assertEquals("I",getAst().getExitDescriptor());
  Map<String,String>[] mapArray=new Map[1];
  mapArray[0]=new HashMap<String,String>();
  mapArray[0].put("key","value1");
  expression=parser.parseExpression("[0]");
  assertEquals("{key=value1}",stringify(expression.getValue(mapArray)));
  assertCanCompile(expression);
  assertEquals("Ljava/util/Map",getAst().getExitDescriptor());
  assertEquals("{key=value1}",stringify(expression.getValue(mapArray)));
  assertEquals("Ljava/util/Map",getAst().getExitDescriptor());
  expression=parser.parseExpression("[0]['key']");
  assertEquals("value1",stringify(expression.getValue(mapArray)));
  assertCanCompile(expression);
  assertEquals("value1",stringify(expression.getValue(mapArray)));
  assertEquals("Ljava/lang/Object",getAst().getExitDescriptor());
}
