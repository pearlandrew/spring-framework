{
  Expression expression=parser.parseExpression("false or false");
  boolean resultI=expression.getValue(1,Boolean.TYPE);
  SpelCompiler.compile(expression);
  boolean resultC=expression.getValue(1,Boolean.TYPE);
  assertEquals(false,resultI);
  assertEquals(false,resultC);
  expression=parser.parseExpression("false or true");
  resultI=expression.getValue(1,Boolean.TYPE);
  assertCanCompile(expression);
  resultC=expression.getValue(1,Boolean.TYPE);
  assertEquals(true,resultI);
  assertEquals(true,resultC);
  expression=parser.parseExpression("true or false");
  resultI=expression.getValue(1,Boolean.TYPE);
  assertCanCompile(expression);
  resultC=expression.getValue(1,Boolean.TYPE);
  assertEquals(true,resultI);
  assertEquals(true,resultC);
  expression=parser.parseExpression("true or true");
  resultI=expression.getValue(1,Boolean.TYPE);
  assertCanCompile(expression);
  resultC=expression.getValue(1,Boolean.TYPE);
  assertEquals(true,resultI);
  assertEquals(true,resultC);
  TestClass4 tc=new TestClass4();
  expression=parser.parseExpression("getfalse() or gettrue()");
  resultI=expression.getValue(tc,Boolean.TYPE);
  assertCanCompile(expression);
  resultC=expression.getValue(tc,Boolean.TYPE);
  assertEquals(true,resultI);
  assertEquals(true,resultC);
  expression=parser.parseExpression("gettrue() or getfalse()");
  resultI=expression.getValue(tc,Boolean.TYPE);
  assertCantCompile(expression);
  expression=parser.parseExpression("getA() or getB()");
  tc.a=true;
  tc.b=true;
  resultI=expression.getValue(tc,Boolean.TYPE);
  assertCantCompile(expression);
  tc.a=false;
  tc.b=true;
  resultI=expression.getValue(tc,Boolean.TYPE);
  assertCanCompile(expression);
  assertTrue(resultI);
  boolean b=false;
  expression=parse("#root or #root");
  Object resultI2=expression.getValue(b);
  assertCanCompile(expression);
  assertFalse((Boolean)resultI2);
  assertFalse((Boolean)expression.getValue(b));
}
