{
  StandardEvaluationContext context=new StandardEvaluationContext();
  context.registerFunction("append",SomeCompareMethod2.class.getDeclaredMethod("append",String[].class));
  context.registerFunction("append2",SomeCompareMethod2.class.getDeclaredMethod("append2",Object[].class));
  context.registerFunction("append3",SomeCompareMethod2.class.getDeclaredMethod("append3",String[].class));
  context.registerFunction("append4",SomeCompareMethod2.class.getDeclaredMethod("append4",String.class,String[].class));
  context.registerFunction("appendChar",SomeCompareMethod2.class.getDeclaredMethod("appendChar",char[].class));
  context.registerFunction("sum",SomeCompareMethod2.class.getDeclaredMethod("sum",int[].class));
  context.registerFunction("sumDouble",SomeCompareMethod2.class.getDeclaredMethod("sumDouble",double[].class));
  context.registerFunction("sumFloat",SomeCompareMethod2.class.getDeclaredMethod("sumFloat",float[].class));
  context.setVariable("stringArray",new String[]{"x","y","z"});
  context.setVariable("intArray",new int[]{5,6,9});
  context.setVariable("doubleArray",new double[]{5.0d,6.0d,9.0d});
  context.setVariable("floatArray",new float[]{5.0f,6.0f,9.0f});
  expression=parser.parseExpression("#append('a','b','c')");
  assertEquals("abc",expression.getValue(context).toString());
  assertTrue(((SpelNodeImpl)((SpelExpression)expression).getAST()).isCompilable());
  assertCanCompile(expression);
  assertEquals("abc",expression.getValue(context).toString());
  expression=parser.parseExpression("#append('a')");
  assertEquals("a",expression.getValue(context).toString());
  assertTrue(((SpelNodeImpl)((SpelExpression)expression).getAST()).isCompilable());
  assertCanCompile(expression);
  assertEquals("a",expression.getValue(context).toString());
  expression=parser.parseExpression("#append()");
  assertEquals("",expression.getValue(context).toString());
  assertTrue(((SpelNodeImpl)((SpelExpression)expression).getAST()).isCompilable());
  assertCanCompile(expression);
  assertEquals("",expression.getValue(context).toString());
  expression=parser.parseExpression("#append(#stringArray)");
  assertEquals("xyz",expression.getValue(context).toString());
  assertTrue(((SpelNodeImpl)((SpelExpression)expression).getAST()).isCompilable());
  assertCanCompile(expression);
  assertEquals("xyz",expression.getValue(context).toString());
  expression=parser.parseExpression("append(#stringArray)");
  assertEquals("xyz",expression.getValue(context,new SomeCompareMethod2()).toString());
  assertTrue(((SpelNodeImpl)((SpelExpression)expression).getAST()).isCompilable());
  assertCanCompile(expression);
  assertEquals("xyz",expression.getValue(context,new SomeCompareMethod2()).toString());
  expression=parser.parseExpression("#append2('a','b','c')");
  assertEquals("abc",expression.getValue(context).toString());
  assertTrue(((SpelNodeImpl)((SpelExpression)expression).getAST()).isCompilable());
  assertCanCompile(expression);
  assertEquals("abc",expression.getValue(context).toString());
  expression=parser.parseExpression("append2('a','b')");
  assertEquals("ab",expression.getValue(context,new SomeCompareMethod2()).toString());
  assertTrue(((SpelNodeImpl)((SpelExpression)expression).getAST()).isCompilable());
  assertCanCompile(expression);
  assertEquals("ab",expression.getValue(context,new SomeCompareMethod2()).toString());
  expression=parser.parseExpression("#append2('a','b')");
  assertEquals("ab",expression.getValue(context).toString());
  assertTrue(((SpelNodeImpl)((SpelExpression)expression).getAST()).isCompilable());
  assertCanCompile(expression);
  assertEquals("ab",expression.getValue(context).toString());
  expression=parser.parseExpression("#append2()");
  assertEquals("",expression.getValue(context).toString());
  assertTrue(((SpelNodeImpl)((SpelExpression)expression).getAST()).isCompilable());
  assertCanCompile(expression);
  assertEquals("",expression.getValue(context).toString());
  expression=parser.parseExpression("#append3(#stringArray)");
  assertEquals("xyz",expression.getValue(context,new SomeCompareMethod2()).toString());
  assertTrue(((SpelNodeImpl)((SpelExpression)expression).getAST()).isCompilable());
  assertCanCompile(expression);
  assertEquals("xyz",expression.getValue(context,new SomeCompareMethod2()).toString());
  expression=parser.parseExpression("#sum(1,2,3)");
  assertEquals(6,expression.getValue(context));
  assertTrue(((SpelNodeImpl)((SpelExpression)expression).getAST()).isCompilable());
  assertCanCompile(expression);
  assertEquals(6,expression.getValue(context));
  expression=parser.parseExpression("#sum(2)");
  assertEquals(2,expression.getValue(context));
  assertTrue(((SpelNodeImpl)((SpelExpression)expression).getAST()).isCompilable());
  assertCanCompile(expression);
  assertEquals(2,expression.getValue(context));
  expression=parser.parseExpression("#sum()");
  assertEquals(0,expression.getValue(context));
  assertTrue(((SpelNodeImpl)((SpelExpression)expression).getAST()).isCompilable());
  assertCanCompile(expression);
  assertEquals(0,expression.getValue(context));
  expression=parser.parseExpression("#sum(#intArray)");
  assertEquals(20,expression.getValue(context));
  assertTrue(((SpelNodeImpl)((SpelExpression)expression).getAST()).isCompilable());
  assertCanCompile(expression);
  assertEquals(20,expression.getValue(context));
  expression=parser.parseExpression("#sumDouble(1.0d,2.0d,3.0d)");
  assertEquals(6,expression.getValue(context));
  assertTrue(((SpelNodeImpl)((SpelExpression)expression).getAST()).isCompilable());
  assertCanCompile(expression);
  assertEquals(6,expression.getValue(context));
  expression=parser.parseExpression("#sumDouble(2.0d)");
  assertEquals(2,expression.getValue(context));
  assertTrue(((SpelNodeImpl)((SpelExpression)expression).getAST()).isCompilable());
  assertCanCompile(expression);
  assertEquals(2,expression.getValue(context));
  expression=parser.parseExpression("#sumDouble()");
  assertEquals(0,expression.getValue(context));
  assertTrue(((SpelNodeImpl)((SpelExpression)expression).getAST()).isCompilable());
  assertCanCompile(expression);
  assertEquals(0,expression.getValue(context));
  expression=parser.parseExpression("#sumDouble(#doubleArray)");
  assertEquals(20,expression.getValue(context));
  assertTrue(((SpelNodeImpl)((SpelExpression)expression).getAST()).isCompilable());
  assertCanCompile(expression);
  assertEquals(20,expression.getValue(context));
  expression=parser.parseExpression("#sumFloat(1.0f,2.0f,3.0f)");
  assertEquals(6,expression.getValue(context));
  assertTrue(((SpelNodeImpl)((SpelExpression)expression).getAST()).isCompilable());
  assertCanCompile(expression);
  assertEquals(6,expression.getValue(context));
  expression=parser.parseExpression("#sumFloat(2.0f)");
  assertEquals(2,expression.getValue(context));
  assertTrue(((SpelNodeImpl)((SpelExpression)expression).getAST()).isCompilable());
  assertCanCompile(expression);
  assertEquals(2,expression.getValue(context));
  expression=parser.parseExpression("#sumFloat()");
  assertEquals(0,expression.getValue(context));
  assertTrue(((SpelNodeImpl)((SpelExpression)expression).getAST()).isCompilable());
  assertCanCompile(expression);
  assertEquals(0,expression.getValue(context));
  expression=parser.parseExpression("#sumFloat(#floatArray)");
  assertEquals(20,expression.getValue(context));
  assertTrue(((SpelNodeImpl)((SpelExpression)expression).getAST()).isCompilable());
  assertCanCompile(expression);
  assertEquals(20,expression.getValue(context));
  expression=parser.parseExpression("#appendChar('abc'.charAt(0),'abc'.charAt(1))");
  assertEquals("ab",expression.getValue(context));
  assertTrue(((SpelNodeImpl)((SpelExpression)expression).getAST()).isCompilable());
  assertCanCompile(expression);
  assertEquals("ab",expression.getValue(context));
  expression=parser.parseExpression("#append4('a','b','c')");
  assertEquals("a::bc",expression.getValue(context).toString());
  assertTrue(((SpelNodeImpl)((SpelExpression)expression).getAST()).isCompilable());
  assertCanCompile(expression);
  assertEquals("a::bc",expression.getValue(context).toString());
  expression=parser.parseExpression("#append4('a','b')");
  assertEquals("a::b",expression.getValue(context).toString());
  assertTrue(((SpelNodeImpl)((SpelExpression)expression).getAST()).isCompilable());
  assertCanCompile(expression);
  assertEquals("a::b",expression.getValue(context).toString());
  expression=parser.parseExpression("#append4('a')");
  assertEquals("a::",expression.getValue(context).toString());
  assertTrue(((SpelNodeImpl)((SpelExpression)expression).getAST()).isCompilable());
  assertCanCompile(expression);
  assertEquals("a::",expression.getValue(context).toString());
  expression=parser.parseExpression("#append4('a',#stringArray)");
  assertEquals("a::xyz",expression.getValue(context).toString());
  assertTrue(((SpelNodeImpl)((SpelExpression)expression).getAST()).isCompilable());
  assertCanCompile(expression);
  assertEquals("a::xyz",expression.getValue(context).toString());
}
