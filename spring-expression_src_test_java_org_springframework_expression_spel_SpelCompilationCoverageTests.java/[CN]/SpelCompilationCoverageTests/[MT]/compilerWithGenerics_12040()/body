{
  expression=parser.parseExpression("payload!=2");
  assertTrue(expression.getValue(new GenericMessageTestHelper<>(4),Boolean.class));
  assertCanCompile(expression);
  assertFalse(expression.getValue(new GenericMessageTestHelper<>(2),Boolean.class));
  expression=parser.parseExpression("2!=payload");
  assertTrue(expression.getValue(new GenericMessageTestHelper<>(4),Boolean.class));
  assertCanCompile(expression);
  assertFalse(expression.getValue(new GenericMessageTestHelper<>(2),Boolean.class));
  expression=parser.parseExpression("payload!=6L");
  assertTrue(expression.getValue(new GenericMessageTestHelper<>(4L),Boolean.class));
  assertCanCompile(expression);
  assertFalse(expression.getValue(new GenericMessageTestHelper<>(6L),Boolean.class));
  expression=parser.parseExpression("payload==2");
  assertFalse(expression.getValue(new GenericMessageTestHelper<>(4),Boolean.class));
  assertCanCompile(expression);
  assertTrue(expression.getValue(new GenericMessageTestHelper<>(2),Boolean.class));
  expression=parser.parseExpression("2==payload");
  assertFalse(expression.getValue(new GenericMessageTestHelper<>(4),Boolean.class));
  assertCanCompile(expression);
  assertTrue(expression.getValue(new GenericMessageTestHelper<>(2),Boolean.class));
  expression=parser.parseExpression("payload==6L");
  assertFalse(expression.getValue(new GenericMessageTestHelper<>(4L),Boolean.class));
  assertCanCompile(expression);
  assertTrue(expression.getValue(new GenericMessageTestHelper<>(6L),Boolean.class));
  expression=parser.parseExpression("2==payload");
  assertFalse(expression.getValue(new GenericMessageTestHelper<>(4),Boolean.class));
  assertCanCompile(expression);
  assertTrue(expression.getValue(new GenericMessageTestHelper<>(2),Boolean.class));
  expression=parser.parseExpression("payload/2");
  assertEquals(2,expression.getValue(new GenericMessageTestHelper<>(4)));
  assertCanCompile(expression);
  assertEquals(3,expression.getValue(new GenericMessageTestHelper<>(6)));
  expression=parser.parseExpression("100/payload");
  assertEquals(25,expression.getValue(new GenericMessageTestHelper<>(4)));
  assertCanCompile(expression);
  assertEquals(10,expression.getValue(new GenericMessageTestHelper<>(10)));
  expression=parser.parseExpression("payload+2");
  assertEquals(6,expression.getValue(new GenericMessageTestHelper<>(4)));
  assertCanCompile(expression);
  assertEquals(8,expression.getValue(new GenericMessageTestHelper<>(6)));
  expression=parser.parseExpression("100+payload");
  assertEquals(104,expression.getValue(new GenericMessageTestHelper<>(4)));
  assertCanCompile(expression);
  assertEquals(110,expression.getValue(new GenericMessageTestHelper<>(10)));
  expression=parser.parseExpression("payload-2");
  assertEquals(2,expression.getValue(new GenericMessageTestHelper<>(4)));
  assertCanCompile(expression);
  assertEquals(4,expression.getValue(new GenericMessageTestHelper<>(6)));
  expression=parser.parseExpression("100-payload");
  assertEquals(96,expression.getValue(new GenericMessageTestHelper<>(4)));
  assertCanCompile(expression);
  assertEquals(90,expression.getValue(new GenericMessageTestHelper<>(10)));
  expression=parser.parseExpression("payload*2");
  assertEquals(8,expression.getValue(new GenericMessageTestHelper<>(4)));
  assertCanCompile(expression);
  assertEquals(12,expression.getValue(new GenericMessageTestHelper<>(6)));
  expression=parser.parseExpression("100*payload");
  assertEquals(400,expression.getValue(new GenericMessageTestHelper<>(4)));
  assertCanCompile(expression);
  assertEquals(1000,expression.getValue(new GenericMessageTestHelper<>(10)));
  expression=parser.parseExpression("payload/2L");
  assertEquals(2L,expression.getValue(new GenericMessageTestHelper<>(4L)));
  assertCanCompile(expression);
  assertEquals(3L,expression.getValue(new GenericMessageTestHelper<>(6L)));
  expression=parser.parseExpression("100L/payload");
  assertEquals(25L,expression.getValue(new GenericMessageTestHelper<>(4L)));
  assertCanCompile(expression);
  assertEquals(10L,expression.getValue(new GenericMessageTestHelper<>(10L)));
  expression=parser.parseExpression("payload/2f");
  assertEquals(2f,expression.getValue(new GenericMessageTestHelper<>(4f)));
  assertCanCompile(expression);
  assertEquals(3f,expression.getValue(new GenericMessageTestHelper<>(6f)));
  expression=parser.parseExpression("100f/payload");
  assertEquals(25f,expression.getValue(new GenericMessageTestHelper<>(4f)));
  assertCanCompile(expression);
  assertEquals(10f,expression.getValue(new GenericMessageTestHelper<>(10f)));
  expression=parser.parseExpression("payload/2d");
  assertEquals(2d,expression.getValue(new GenericMessageTestHelper<>(4d)));
  assertCanCompile(expression);
  assertEquals(3d,expression.getValue(new GenericMessageTestHelper<>(6d)));
  expression=parser.parseExpression("100d/payload");
  assertEquals(25d,expression.getValue(new GenericMessageTestHelper<>(4d)));
  assertCanCompile(expression);
  assertEquals(10d,expression.getValue(new GenericMessageTestHelper<>(10d)));
}
