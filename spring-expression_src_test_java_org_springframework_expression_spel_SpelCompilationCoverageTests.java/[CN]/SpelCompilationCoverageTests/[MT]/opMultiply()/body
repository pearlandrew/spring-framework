{
  expression=parse("2*2");
  expression.getValue();
  assertCanCompile(expression);
  assertEquals(4,expression.getValue());
  expression=parse("2L*2L");
  expression.getValue();
  assertCanCompile(expression);
  assertEquals(4L,expression.getValue());
  expression=parse("2.0f*2.0f");
  expression.getValue();
  assertCanCompile(expression);
  assertEquals(4.0f,expression.getValue());
  expression=parse("3.0d*4.0d");
  expression.getValue();
  assertCanCompile(expression);
  assertEquals(12.0d,expression.getValue());
  expression=parse("T(Float).valueOf(2.0f)*6");
  assertEquals(12.0f,expression.getValue());
  assertCantCompile(expression);
  expression=parse("T(Float).valueOf(8.0f)*T(Float).valueOf(3.0f)");
  assertEquals(24.0f,expression.getValue());
  assertCanCompile(expression);
  assertEquals(24.0f,expression.getValue());
  expression=parse("11L*T(Long).valueOf(4L)");
  assertEquals(44L,expression.getValue());
  assertCanCompile(expression);
  assertEquals(44L,expression.getValue());
  expression=parse("T(Long).valueOf(9L)*6");
  assertEquals(54L,expression.getValue());
  assertCantCompile(expression);
  expression=parse("T(Long).valueOf(4L)*T(Long).valueOf(3L)");
  assertEquals(12L,expression.getValue());
  assertCanCompile(expression);
  assertEquals(12L,expression.getValue());
  expression=parse("8L*T(Long).valueOf(2L)");
  assertEquals(16L,expression.getValue());
  assertCanCompile(expression);
  assertEquals(16L,expression.getValue());
  expression=parse("T(Float).valueOf(8.0f)*-T(Float).valueOf(3.0f)");
  assertEquals(-24.0f,expression.getValue());
  assertCanCompile(expression);
  assertEquals(-24.0f,expression.getValue());
}
