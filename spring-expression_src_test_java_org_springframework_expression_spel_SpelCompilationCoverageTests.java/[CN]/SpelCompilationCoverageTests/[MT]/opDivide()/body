{
  expression=parse("2/2");
  expression.getValue();
  assertCanCompile(expression);
  assertEquals(1,expression.getValue());
  expression=parse("2L/2L");
  expression.getValue();
  assertCanCompile(expression);
  assertEquals(1L,expression.getValue());
  expression=parse("2.0f/2.0f");
  expression.getValue();
  assertCanCompile(expression);
  assertEquals(1.0f,expression.getValue());
  expression=parse("3.0d/4.0d");
  expression.getValue();
  assertCanCompile(expression);
  assertEquals(0.75d,expression.getValue());
  expression=parse("T(Float).valueOf(6.0f)/2");
  assertEquals(3.0f,expression.getValue());
  assertCanCompile(expression);
  assertEquals(3.0f,expression.getValue());
  expression=parse("T(Float).valueOf(8.0f)/T(Float).valueOf(2.0f)");
  assertEquals(4.0f,expression.getValue());
  assertCanCompile(expression);
  assertEquals(4.0f,expression.getValue());
  expression=parse("12L/T(Long).valueOf(4L)");
  assertEquals(3L,expression.getValue());
  assertCanCompile(expression);
  assertEquals(3L,expression.getValue());
  expression=parse("T(Long).valueOf(44L)/11");
  assertEquals(4L,expression.getValue());
  assertCanCompile(expression);
  assertEquals(4L,expression.getValue());
  expression=parse("T(Long).valueOf(4L)/T(Long).valueOf(2L)");
  assertEquals(2L,expression.getValue());
  assertCanCompile(expression);
  assertEquals(2L,expression.getValue());
  expression=parse("8L/T(Long).valueOf(2L)");
  assertEquals(4L,expression.getValue());
  assertCanCompile(expression);
  assertEquals(4L,expression.getValue());
  expression=parse("T(Float).valueOf(8.0f)/-T(Float).valueOf(4.0f)");
  assertEquals(-2.0f,expression.getValue());
  assertCanCompile(expression);
  assertEquals(-2.0f,expression.getValue());
}
