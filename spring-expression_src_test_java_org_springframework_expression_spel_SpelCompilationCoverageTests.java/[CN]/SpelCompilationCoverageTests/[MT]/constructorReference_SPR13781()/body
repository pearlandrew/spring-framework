{
  expression=parser.parseExpression("T(java.util.Locale).ENGLISH");
  assertEquals("en",expression.getValue().toString());
  assertCanCompile(expression);
  assertEquals("en",expression.getValue().toString());
  expression=parser.parseExpression("#userId.toString().toLowerCase(T(java.util.Locale).ENGLISH)");
  StandardEvaluationContext context=new StandardEvaluationContext();
  context.setVariable("userId","RoDnEy");
  assertEquals("rodney",expression.getValue(context));
  assertCanCompile(expression);
  assertEquals("rodney",expression.getValue(context));
  expression=parser.parseExpression("T(String).name");
  assertEquals("java.lang.String",expression.getValue());
  assertCanCompile(expression);
  assertEquals("java.lang.String",expression.getValue());
  context=new StandardEvaluationContext(String.class);
  expression=parser.parseExpression("name");
  assertEquals("java.lang.String",expression.getValue(context));
  assertCanCompile(expression);
  assertEquals("java.lang.String",expression.getValue(context));
  expression=parser.parseExpression("T(String).getName()");
  assertEquals("java.lang.String",expression.getValue());
  assertCanCompile(expression);
  assertEquals("java.lang.String",expression.getValue());
  String shclass=StaticsHelper.class.getName();
  expression=parser.parseExpression("T(String).valueOf(T(String).name.valueOf(1))");
  assertEquals("1",expression.getValue());
  assertCanCompile(expression);
  assertEquals("1",expression.getValue());
  expression=parser.parseExpression("T(String).valueOf(T(" + shclass + ").methoda().methoda().methodb())");
  assertEquals("mb",expression.getValue());
  assertCanCompile(expression);
  assertEquals("mb",expression.getValue());
  expression=parser.parseExpression("T(String).valueOf(T(" + shclass + ").fielda.fielda.fieldb)");
  assertEquals("fb",expression.getValue());
  assertCanCompile(expression);
  assertEquals("fb",expression.getValue());
  expression=parser.parseExpression("T(String).valueOf(T(" + shclass + ").propertya.propertya.propertyb)");
  assertEquals("pb",expression.getValue());
  assertCanCompile(expression);
  assertEquals("pb",expression.getValue());
  expression=parser.parseExpression("T(String).valueOf(T(" + shclass + ").fielda.methoda().propertya.fieldb)");
  assertEquals("fb",expression.getValue());
  assertCanCompile(expression);
  assertEquals("fb",expression.getValue());
  expression=parser.parseExpression("T(String).valueOf(fielda.fieldb)");
  assertEquals("fb",expression.getValue(StaticsHelper.sh));
  assertCanCompile(expression);
  assertEquals("fb",expression.getValue(StaticsHelper.sh));
  expression=parser.parseExpression("T(String).valueOf(propertya.propertyb)");
  assertEquals("pb",expression.getValue(StaticsHelper.sh));
  assertCanCompile(expression);
  assertEquals("pb",expression.getValue(StaticsHelper.sh));
  expression=parser.parseExpression("T(String).valueOf(methoda().methodb())");
  assertEquals("mb",expression.getValue(StaticsHelper.sh));
  assertCanCompile(expression);
  assertEquals("mb",expression.getValue(StaticsHelper.sh));
}
