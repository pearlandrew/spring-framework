{
  Class<?> sourceClass=sourceType.getObjectType();
  Class<?> targetClass=targetType.getObjectType();
  Method method=getValueOfMethodOn(targetClass,sourceClass);
  try {
    if (method != null) {
      ReflectionUtils.makeAccessible(method);
      return method.invoke(null,source);
    }
 else {
      Constructor<?> constructor=getConstructor(targetClass,sourceClass);
      if (constructor != null) {
        return constructor.newInstance(source);
      }
    }
  }
 catch (  InvocationTargetException ex) {
    throw new ConversionFailedException(sourceType,targetType,source,ex.getTargetException());
  }
catch (  Throwable ex) {
    throw new ConversionFailedException(sourceType,targetType,source,ex);
  }
  throw new IllegalStateException("No static valueOf(" + sourceClass.getName() + ") method or Constructor("+ sourceClass.getName()+ ") exists on "+ targetClass.getName());
}
