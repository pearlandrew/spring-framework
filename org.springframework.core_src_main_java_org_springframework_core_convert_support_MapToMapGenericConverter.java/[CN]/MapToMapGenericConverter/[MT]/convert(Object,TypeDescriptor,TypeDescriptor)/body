{
  Map sourceMap=(Map)source;
  TypeDescriptor targetKeyType=targetType.getMapKeyTypeDescriptor();
  TypeDescriptor targetValueType=targetType.getMapValueTypeDescriptor();
  if (targetKeyType == null && targetValueType == null) {
    return compatibleMapWithoutEntryConversion(sourceMap,targetType);
  }
  TypeDescriptor[] sourceEntryTypes=getMapEntryTypes(sourceMap);
  TypeDescriptor sourceKeyType=sourceEntryTypes[0];
  TypeDescriptor sourceValueType=sourceEntryTypes[1];
  if (sourceKeyType == null && sourceValueType == null) {
    return compatibleMapWithoutEntryConversion(sourceMap,targetType);
  }
  boolean keysCompatible=false;
  if (sourceKeyType != TypeDescriptor.NULL && targetKeyType != TypeDescriptor.NULL && sourceKeyType.isAssignableTo(targetKeyType)) {
    keysCompatible=true;
  }
  boolean valuesCompatible=false;
  if (sourceValueType != TypeDescriptor.NULL && targetValueType != TypeDescriptor.NULL && sourceValueType.isAssignableTo(targetValueType)) {
    valuesCompatible=true;
  }
  if (keysCompatible && valuesCompatible) {
    return compatibleMapWithoutEntryConversion(sourceMap,targetType);
  }
  Map targetMap=CollectionFactory.createMap(targetType.getType(),sourceMap.size());
  MapEntryConverter converter=new MapEntryConverter(sourceKeyType,sourceValueType,targetKeyType,targetValueType,keysCompatible,valuesCompatible,conversionService);
  for (  Object entry : sourceMap.entrySet()) {
    Map.Entry sourceMapEntry=(Map.Entry)entry;
    targetMap.put(converter.convertKey(sourceMapEntry.getKey()),converter.convertValue(sourceMapEntry.getValue()));
  }
  return targetMap;
}
