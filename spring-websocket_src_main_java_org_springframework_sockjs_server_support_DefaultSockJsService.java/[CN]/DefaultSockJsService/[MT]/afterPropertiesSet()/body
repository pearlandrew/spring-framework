{
  if (this.sockJsHandler != null) {
    Assert.notNull(this.beanFactory,"An AutowirecapableBeanFactory is required to initialize SockJS handler instances per request.");
  }
  if (this.transportHandlers.get(TransportType.WEBSOCKET) == null) {
    logger.warn("No WebSocket transport handler was registered");
  }
  this.sessionTimeoutScheduler.scheduleAtFixedRate(new Runnable(){
    public void run(){
      try {
        int count=sessions.size();
        if (logger.isTraceEnabled() && (count != 0)) {
          logger.trace("Checking " + count + " session(s) for timeouts ["+ getPrefix()+ "]");
        }
        for (        SockJsSessionSupport session : sessions.values()) {
          if (session.getTimeSinceLastActive() > getDisconnectDelay()) {
            if (logger.isTraceEnabled()) {
              logger.trace("Removing " + session + " for ["+ getPrefix()+ "]");
            }
            session.close();
            sessions.remove(session.getId());
          }
        }
        if (logger.isTraceEnabled() && (count != 0)) {
          logger.trace(sessions.size() + " remaining session(s) [" + getPrefix()+ "]");
        }
      }
 catch (      Throwable t) {
        logger.error("Failed to complete session timeout checks for [" + getPrefix() + "]",t);
      }
    }
  }
,getDisconnectDelay());
}
