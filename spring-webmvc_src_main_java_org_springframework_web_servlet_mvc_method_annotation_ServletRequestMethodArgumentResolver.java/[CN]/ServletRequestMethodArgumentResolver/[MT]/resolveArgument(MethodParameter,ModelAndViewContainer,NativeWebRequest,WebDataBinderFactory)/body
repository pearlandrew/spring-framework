{
  Class<?> paramType=parameter.getParameterType();
  if (WebRequest.class.isAssignableFrom(paramType)) {
    return webRequest;
  }
  HttpServletRequest request=webRequest.getNativeRequest(HttpServletRequest.class);
  if (ServletRequest.class.isAssignableFrom(paramType) || MultipartRequest.class.isAssignableFrom(paramType)) {
    Object nativeRequest=webRequest.getNativeRequest(paramType);
    if (nativeRequest == null) {
      throw new IllegalStateException("Current request is not of type [" + paramType.getName() + "]: "+ request);
    }
    return nativeRequest;
  }
 else   if (HttpSession.class.isAssignableFrom(paramType)) {
    return request.getSession();
  }
 else   if (HttpMethod.class == paramType) {
    return ((ServletWebRequest)webRequest).getHttpMethod();
  }
 else   if (Principal.class.isAssignableFrom(paramType)) {
    return request.getUserPrincipal();
  }
 else   if (Locale.class == paramType) {
    return RequestContextUtils.getLocale(request);
  }
 else   if (TimeZone.class == paramType) {
    TimeZone timeZone=RequestContextUtils.getTimeZone(request);
    return (timeZone != null ? timeZone : TimeZone.getDefault());
  }
 else   if ("java.time.ZoneId".equals(paramType.getName())) {
    return ZoneIdResolver.resolveZoneId(request);
  }
 else   if (InputStream.class.isAssignableFrom(paramType)) {
    return request.getInputStream();
  }
 else   if (Reader.class.isAssignableFrom(paramType)) {
    return request.getReader();
  }
 else {
    throw new UnsupportedOperationException("Unknown parameter type: " + paramType + " in method: "+ parameter.getMethod());
  }
}
