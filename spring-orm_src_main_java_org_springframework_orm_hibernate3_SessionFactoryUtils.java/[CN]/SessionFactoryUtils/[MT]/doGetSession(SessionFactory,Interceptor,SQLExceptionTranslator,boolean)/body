{
  Assert.notNull(sessionFactory,"No SessionFactory specified");
  Object resource=TransactionSynchronizationManager.getResource(sessionFactory);
  if (resource instanceof Session) {
    return (Session)resource;
  }
  SessionHolder sessionHolder=(SessionHolder)resource;
  if (sessionHolder != null && !sessionHolder.isEmpty()) {
    Session session=null;
    if (TransactionSynchronizationManager.isSynchronizationActive() && sessionHolder.doesNotHoldNonDefaultSession()) {
      session=sessionHolder.getValidatedSession();
      if (session != null && !sessionHolder.isSynchronizedWithTransaction()) {
        logger.debug("Registering Spring transaction synchronization for existing Hibernate Session");
        TransactionSynchronizationManager.registerSynchronization(new SpringSessionSynchronization(sessionHolder,sessionFactory,jdbcExceptionTranslator,false));
        sessionHolder.setSynchronizedWithTransaction(true);
        FlushMode flushMode=session.getFlushMode();
        if (flushMode.lessThan(FlushMode.COMMIT) && !TransactionSynchronizationManager.isCurrentTransactionReadOnly()) {
          session.setFlushMode(FlushMode.AUTO);
          sessionHolder.setPreviousFlushMode(flushMode);
        }
      }
    }
 else {
      session=getJtaSynchronizedSession(sessionHolder,sessionFactory,jdbcExceptionTranslator);
    }
    if (session != null) {
      return session;
    }
  }
  logger.debug("Opening Hibernate Session");
  Session session=(entityInterceptor != null ? sessionFactory.openSession(entityInterceptor) : sessionFactory.openSession());
  if (TransactionSynchronizationManager.isSynchronizationActive()) {
    logger.debug("Registering Spring transaction synchronization for new Hibernate Session");
    SessionHolder holderToUse=sessionHolder;
    if (holderToUse == null) {
      holderToUse=new SessionHolder(session);
    }
 else {
      holderToUse.addSession(session);
    }
    if (TransactionSynchronizationManager.isCurrentTransactionReadOnly()) {
      session.setFlushMode(FlushMode.MANUAL);
    }
    TransactionSynchronizationManager.registerSynchronization(new SpringSessionSynchronization(holderToUse,sessionFactory,jdbcExceptionTranslator,true));
    holderToUse.setSynchronizedWithTransaction(true);
    if (holderToUse != sessionHolder) {
      TransactionSynchronizationManager.bindResource(sessionFactory,holderToUse);
    }
  }
 else {
    registerJtaSynchronization(session,sessionFactory,jdbcExceptionTranslator,sessionHolder);
  }
  if (!allowCreate && !isSessionTransactional(session,sessionFactory)) {
    closeSession(session);
    throw new IllegalStateException("No Hibernate Session bound to thread, " + "and configuration does not allow creation of non-transactional one here");
  }
  return session;
}
