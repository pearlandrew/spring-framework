{
  Set<String> allowedMethods=new HashSet<String>(6);
  Set<MediaType> consumableMediaTypes=new HashSet<MediaType>();
  Set<MediaType> producibleMediaTypes=new HashSet<MediaType>();
  for (  RequestMappingInfo info : requestMappingInfos) {
    for (    String pattern : info.getPatternsCondition().getPatterns()) {
      if (getPathMatcher().match(pattern,lookupPath)) {
        if (info.getMethodsCondition().getMatchingCondition(request) == null) {
          for (          RequestMethod method : info.getMethodsCondition().getMethods()) {
            allowedMethods.add(method.name());
          }
        }
        if (info.getConsumesCondition().getMatchingCondition(request) == null) {
          consumableMediaTypes.addAll(info.getConsumesCondition().getMediaTypes());
        }
        if (info.getProducesCondition().getMatchingCondition(request) == null) {
          producibleMediaTypes.addAll(info.getProducesCondition().getMediaTypes());
        }
      }
    }
  }
  if (!allowedMethods.isEmpty()) {
    throw new HttpRequestMethodNotSupportedException(request.getMethod(),allowedMethods);
  }
 else   if (!consumableMediaTypes.isEmpty()) {
    MediaType contentType=null;
    if (StringUtils.hasLength(request.getContentType())) {
      contentType=MediaType.parseMediaType(request.getContentType());
    }
    throw new HttpMediaTypeNotSupportedException(contentType,new ArrayList<MediaType>(consumableMediaTypes));
  }
 else   if (!producibleMediaTypes.isEmpty()) {
    throw new HttpMediaTypeNotAcceptableException(new ArrayList<MediaType>(producibleMediaTypes));
  }
 else {
    return null;
  }
}
