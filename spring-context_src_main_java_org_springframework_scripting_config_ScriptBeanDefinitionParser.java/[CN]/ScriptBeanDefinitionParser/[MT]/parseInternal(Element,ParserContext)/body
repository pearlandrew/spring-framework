{
  String engine=element.getAttribute(ENGINE_ATTRIBUTE);
  String value=resolveScriptSource(element,parserContext.getReaderContext());
  if (value == null) {
    return null;
  }
  LangNamespaceUtils.registerScriptFactoryPostProcessorIfNecessary(parserContext.getRegistry());
  GenericBeanDefinition bd=new GenericBeanDefinition();
  bd.setBeanClassName(this.scriptFactoryClassName);
  bd.setSource(parserContext.extractSource(element));
  bd.setAttribute(ScriptFactoryPostProcessor.LANGUAGE_ATTRIBUTE,element.getLocalName());
  String scope=element.getAttribute(SCOPE_ATTRIBUTE);
  if (StringUtils.hasLength(scope)) {
    bd.setScope(scope);
  }
  String autowire=element.getAttribute(AUTOWIRE_ATTRIBUTE);
  int autowireMode=parserContext.getDelegate().getAutowireMode(autowire);
  if (autowireMode == GenericBeanDefinition.AUTOWIRE_AUTODETECT) {
    autowireMode=GenericBeanDefinition.AUTOWIRE_BY_TYPE;
  }
 else   if (autowireMode == GenericBeanDefinition.AUTOWIRE_CONSTRUCTOR) {
    autowireMode=GenericBeanDefinition.AUTOWIRE_NO;
  }
  bd.setAutowireMode(autowireMode);
  String dependencyCheck=element.getAttribute(DEPENDENCY_CHECK_ATTRIBUTE);
  bd.setDependencyCheck(parserContext.getDelegate().getDependencyCheck(dependencyCheck));
  String dependsOn=element.getAttribute(DEPENDS_ON_ATTRIBUTE);
  if (StringUtils.hasLength(dependsOn)) {
    bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn,BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS));
  }
  BeanDefinitionDefaults beanDefinitionDefaults=parserContext.getDelegate().getBeanDefinitionDefaults();
  String initMethod=element.getAttribute(INIT_METHOD_ATTRIBUTE);
  if (StringUtils.hasLength(initMethod)) {
    bd.setInitMethodName(initMethod);
  }
 else   if (beanDefinitionDefaults.getInitMethodName() != null) {
    bd.setInitMethodName(beanDefinitionDefaults.getInitMethodName());
  }
  String destroyMethod=element.getAttribute(DESTROY_METHOD_ATTRIBUTE);
  if (StringUtils.hasLength(destroyMethod)) {
    bd.setDestroyMethodName(destroyMethod);
  }
 else   if (beanDefinitionDefaults.getDestroyMethodName() != null) {
    bd.setDestroyMethodName(beanDefinitionDefaults.getDestroyMethodName());
  }
  String refreshCheckDelay=element.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE);
  if (StringUtils.hasText(refreshCheckDelay)) {
    bd.setAttribute(ScriptFactoryPostProcessor.REFRESH_CHECK_DELAY_ATTRIBUTE,new Long(refreshCheckDelay));
  }
  String proxyTargetClass=element.getAttribute(PROXY_TARGET_CLASS_ATTRIBUTE);
  if (StringUtils.hasText(proxyTargetClass)) {
    Boolean flag=new Boolean(proxyTargetClass);
    bd.setAttribute(ScriptFactoryPostProcessor.PROXY_TARGET_CLASS_ATTRIBUTE,flag);
  }
  ConstructorArgumentValues cav=bd.getConstructorArgumentValues();
  int constructorArgNum=0;
  if (StringUtils.hasLength(engine)) {
    cav.addIndexedArgumentValue(constructorArgNum++,engine);
  }
  cav.addIndexedArgumentValue(constructorArgNum++,value);
  if (element.hasAttribute(SCRIPT_INTERFACES_ATTRIBUTE)) {
    cav.addIndexedArgumentValue(constructorArgNum++,element.getAttribute(SCRIPT_INTERFACES_ATTRIBUTE),"java.lang.Class[]");
  }
  if (element.hasAttribute(CUSTOMIZER_REF_ATTRIBUTE)) {
    String customizerBeanName=element.getAttribute(CUSTOMIZER_REF_ATTRIBUTE);
    if (!StringUtils.hasText(customizerBeanName)) {
      parserContext.getReaderContext().error("Attribute 'customizer-ref' has empty value",element);
    }
 else {
      cav.addIndexedArgumentValue(constructorArgNum++,new RuntimeBeanReference(customizerBeanName));
    }
  }
  parserContext.getDelegate().parsePropertyElements(element,bd);
  return bd;
}
