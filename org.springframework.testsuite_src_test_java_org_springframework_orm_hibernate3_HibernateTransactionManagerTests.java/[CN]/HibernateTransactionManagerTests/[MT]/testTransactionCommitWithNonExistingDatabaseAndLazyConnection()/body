{
  DriverManagerDataSource dsTarget=new DriverManagerDataSource();
  final LazyConnectionDataSourceProxy ds=new LazyConnectionDataSourceProxy();
  ds.setTargetDataSource(dsTarget);
  ds.setDefaultAutoCommit(true);
  ds.setDefaultTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
  LocalSessionFactoryBean lsfb=new LocalSessionFactoryBean();
  lsfb.setDataSource(ds);
  Properties props=new Properties();
  props.setProperty("hibernate.dialect",HSQLDialect.class.getName());
  props.setProperty("hibernate.cache.provider_class",NoCacheProvider.class.getName());
  lsfb.setHibernateProperties(props);
  lsfb.afterPropertiesSet();
  final SessionFactory sf=(SessionFactory)lsfb.getObject();
  HibernateTransactionManager tm=new HibernateTransactionManager();
  tm.setSessionFactory(sf);
  tm.afterPropertiesSet();
  TransactionTemplate tt=new TransactionTemplate(tm);
  tt.setIsolationLevel(TransactionDefinition.ISOLATION_SERIALIZABLE);
  tt.setTimeout(10);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(ds));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  tt.execute(new TransactionCallback(){
    public Object doInTransaction(    TransactionStatus status){
      assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
      assertTrue("Has thread connection",TransactionSynchronizationManager.hasResource(ds));
      HibernateTemplate ht=new HibernateTemplate(sf);
      return ht.find("from java.lang.Object");
    }
  }
);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(ds));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
}
