{
  MockControl interceptorControl=MockControl.createControl(org.hibernate.Interceptor.class);
  Interceptor entityInterceptor=(Interceptor)interceptorControl.getMock();
  interceptorControl.replay();
  MockControl conControl=MockControl.createControl(Connection.class);
  Connection con=(Connection)conControl.getMock();
  MockControl sfControl=MockControl.createControl(SessionFactory.class);
  final SessionFactory sf=(SessionFactory)sfControl.getMock();
  MockControl sessionControl=MockControl.createControl(Session.class);
  Session session=(Session)sessionControl.getMock();
  MockControl txControl=MockControl.createControl(Transaction.class);
  Transaction tx=(Transaction)txControl.getMock();
  sf.openSession(entityInterceptor);
  sfControl.setReturnValue(session,1);
  session.beginTransaction();
  sessionControl.setReturnValue(tx,1);
  session.isOpen();
  sessionControl.setReturnValue(true,1);
  session.close();
  sessionControl.setReturnValue(null,1);
  tx.commit();
  txControl.setVoidCallable(1);
  session.isConnected();
  sessionControl.setReturnValue(true,1);
  session.connection();
  sessionControl.setReturnValue(con,2);
  con.isReadOnly();
  conControl.setReturnValue(false,1);
  sfControl.replay();
  sessionControl.replay();
  txControl.replay();
  conControl.replay();
  HibernateTransactionManager tm=new HibernateTransactionManager(sf);
  tm.setEntityInterceptor(entityInterceptor);
  TransactionTemplate tt=new TransactionTemplate(tm);
  tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);
  final List l=new ArrayList();
  l.add("test");
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  Object result=tt.execute(new TransactionCallback(){
    public Object doInTransaction(    TransactionStatus status){
      assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
      HibernateTemplate ht=new HibernateTemplate(sf);
      return ht.executeFind(new HibernateCallback(){
        public Object doInHibernate(        org.hibernate.Session session) throws HibernateException {
          return l;
        }
      }
);
    }
  }
);
  assertTrue("Correct result list",result == l);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  interceptorControl.verify();
  sfControl.verify();
  sessionControl.verify();
  txControl.verify();
  conControl.verify();
}
