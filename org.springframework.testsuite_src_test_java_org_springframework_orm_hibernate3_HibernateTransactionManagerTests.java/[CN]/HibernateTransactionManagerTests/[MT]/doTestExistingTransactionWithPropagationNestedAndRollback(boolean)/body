{
  MockControl dsControl=MockControl.createControl(DataSource.class);
  final DataSource ds=(DataSource)dsControl.getMock();
  MockControl conControl=MockControl.createControl(Connection.class);
  Connection con=(Connection)conControl.getMock();
  MockControl mdControl=MockControl.createControl(DatabaseMetaData.class);
  DatabaseMetaData md=(DatabaseMetaData)mdControl.getMock();
  MockControl spControl=MockControl.createControl(Savepoint.class);
  Savepoint sp=(Savepoint)spControl.getMock();
  MockControl sfControl=MockControl.createControl(SessionFactory.class);
  final SessionFactory sf=(SessionFactory)sfControl.getMock();
  MockControl sessionControl=MockControl.createControl(Session.class);
  Session session=(Session)sessionControl.getMock();
  MockControl txControl=MockControl.createControl(Transaction.class);
  Transaction tx=(Transaction)txControl.getMock();
  MockControl queryControl=MockControl.createControl(Query.class);
  Query query=(Query)queryControl.getMock();
  final List list=new ArrayList();
  list.add("test");
  con.isReadOnly();
  conControl.setReturnValue(false,1);
  sf.openSession();
  sfControl.setReturnValue(session,1);
  session.beginTransaction();
  sessionControl.setReturnValue(tx,1);
  session.connection();
  sessionControl.setReturnValue(con,3);
  session.isOpen();
  sessionControl.setReturnValue(true,1);
  md.supportsSavepoints();
  mdControl.setReturnValue(true,1);
  con.getMetaData();
  conControl.setReturnValue(md,1);
  con.setSavepoint(ConnectionHolder.SAVEPOINT_NAME_PREFIX + 1);
  conControl.setReturnValue(sp,1);
  con.rollback(sp);
  conControl.setVoidCallable(1);
  session.createQuery("some query string");
  sessionControl.setReturnValue(query,1);
  query.list();
  queryControl.setReturnValue(list,1);
  session.isConnected();
  sessionControl.setReturnValue(true,1);
  session.close();
  sessionControl.setReturnValue(null,1);
  tx.commit();
  txControl.setVoidCallable(1);
  dsControl.replay();
  conControl.replay();
  mdControl.replay();
  spControl.replay();
  sfControl.replay();
  sessionControl.replay();
  txControl.replay();
  queryControl.replay();
  HibernateTransactionManager tm=new HibernateTransactionManager();
  tm.setJdbcExceptionTranslator(new SQLStateSQLExceptionTranslator());
  tm.setNestedTransactionAllowed(true);
  tm.setSessionFactory(sf);
  tm.setDataSource(ds);
  final TransactionTemplate tt=new TransactionTemplate(tm);
  tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_NESTED);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(ds));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  Object result=tt.execute(new TransactionCallback(){
    public Object doInTransaction(    TransactionStatus status){
      assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
      assertTrue("Has thread connection",TransactionSynchronizationManager.hasResource(ds));
      if (manualSavepoint) {
        Object savepoint=status.createSavepoint();
        status.rollbackToSavepoint(savepoint);
      }
 else {
        tt.execute(new TransactionCallbackWithoutResult(){
          protected void doInTransactionWithoutResult(          TransactionStatus status){
            assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
            assertTrue("Has thread connection",TransactionSynchronizationManager.hasResource(ds));
            status.setRollbackOnly();
          }
        }
);
      }
      HibernateTemplate ht=new HibernateTemplate(sf);
      return ht.find("some query string");
    }
  }
);
  assertTrue("Correct result list",result == list);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(ds));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  dsControl.verify();
  conControl.verify();
  mdControl.verify();
  spControl.verify();
  sfControl.verify();
  sessionControl.verify();
  txControl.verify();
  queryControl.verify();
}
