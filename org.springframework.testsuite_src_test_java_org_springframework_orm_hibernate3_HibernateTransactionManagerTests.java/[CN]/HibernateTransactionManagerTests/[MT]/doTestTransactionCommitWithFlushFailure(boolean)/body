{
  MockControl conControl=MockControl.createControl(Connection.class);
  Connection con=(Connection)conControl.getMock();
  MockControl sfControl=MockControl.createControl(SessionFactory.class);
  final SessionFactory sf=(SessionFactory)sfControl.getMock();
  MockControl sessionControl=MockControl.createControl(Session.class);
  Session session=(Session)sessionControl.getMock();
  MockControl txControl=MockControl.createControl(Transaction.class);
  Transaction tx=(Transaction)txControl.getMock();
  sf.openSession();
  sfControl.setReturnValue(session,1);
  session.beginTransaction();
  sessionControl.setReturnValue(tx,1);
  session.isOpen();
  sessionControl.setReturnValue(true,1);
  tx.commit();
  SQLException sqlEx=new SQLException("argh","27");
  Exception rootCause=null;
  if (fallbackTranslation) {
    GenericJDBCException jdbcEx=new GenericJDBCException("mymsg",sqlEx);
    txControl.setThrowable(jdbcEx,1);
    rootCause=sqlEx;
  }
 else {
    ConstraintViolationException jdbcEx=new ConstraintViolationException("mymsg",sqlEx,null);
    txControl.setThrowable(jdbcEx,1);
    rootCause=jdbcEx;
  }
  session.close();
  sessionControl.setReturnValue(null,1);
  tx.rollback();
  txControl.setVoidCallable(1);
  session.isConnected();
  sessionControl.setReturnValue(true,1);
  session.connection();
  sessionControl.setReturnValue(con,2);
  con.isReadOnly();
  conControl.setReturnValue(false,1);
  sfControl.replay();
  sessionControl.replay();
  txControl.replay();
  conControl.replay();
  HibernateTransactionManager tm=new HibernateTransactionManager(sf);
  TransactionTemplate tt=new TransactionTemplate(tm);
  final List l=new ArrayList();
  l.add("test");
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  try {
    tt.execute(new TransactionCallback(){
      public Object doInTransaction(      TransactionStatus status){
        assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
        HibernateTemplate ht=new HibernateTemplate(sf);
        return ht.executeFind(new HibernateCallback(){
          public Object doInHibernate(          org.hibernate.Session session) throws HibernateException {
            return l;
          }
        }
);
      }
    }
);
    fail("Should have thrown DataIntegrityViolationException");
  }
 catch (  DataIntegrityViolationException ex) {
    assertEquals(rootCause,ex.getCause());
    assertTrue(ex.getMessage().indexOf("mymsg") != -1);
  }
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  sfControl.verify();
  sessionControl.verify();
  txControl.verify();
  conControl.verify();
}
