{
  String lookupPath=urlPathHelper.getLookupPathForRequest(request);
  Comparator<String> pathComparator=pathMatcher.getPatternComparator(lookupPath);
  Map<RequestMappingInfo,Method> targetHandlerMethods=new LinkedHashMap<RequestMappingInfo,Method>();
  Set<String> allowedMethods=new LinkedHashSet<String>(7);
  String resolvedMethodName=null;
  for (  Method handlerMethod : getHandlerMethods()) {
    RequestMappingInfo mappingInfo=new RequestMappingInfo();
    RequestMapping mapping=AnnotationUtils.findAnnotation(handlerMethod,RequestMapping.class);
    mappingInfo.paths=mapping.value();
    if (!hasTypeLevelMapping() || !Arrays.equals(mapping.method(),getTypeLevelMapping().method())) {
      mappingInfo.methods=mapping.method();
    }
    if (!hasTypeLevelMapping() || !Arrays.equals(mapping.params(),getTypeLevelMapping().params())) {
      mappingInfo.params=mapping.params();
    }
    if (!hasTypeLevelMapping() || !Arrays.equals(mapping.headers(),getTypeLevelMapping().headers())) {
      mappingInfo.headers=mapping.headers();
    }
    boolean match=false;
    if (mappingInfo.paths.length > 0) {
      List<String> matchedPaths=new ArrayList<String>(mappingInfo.paths.length);
      for (      String methodLevelPattern : mappingInfo.paths) {
        String matchedPattern=getMatchedPattern(methodLevelPattern,lookupPath);
        if (matchedPattern != null) {
          if (mappingInfo.matches(request)) {
            match=true;
            matchedPaths.add(matchedPattern);
          }
 else {
            for (            RequestMethod requestMethod : mappingInfo.methods) {
              allowedMethods.add(requestMethod.toString());
            }
            break;
          }
        }
      }
      Collections.sort(matchedPaths,pathComparator);
      mappingInfo.matchedPaths=matchedPaths;
    }
 else {
      match=mappingInfo.matches(request);
      if (match && mappingInfo.methods.length == 0 && mappingInfo.params.length == 0 && resolvedMethodName != null && !resolvedMethodName.equals(handlerMethod.getName())) {
        match=false;
      }
    }
    if (match) {
      Method oldMappedMethod=targetHandlerMethods.put(mappingInfo,handlerMethod);
      if (oldMappedMethod != null && oldMappedMethod != handlerMethod) {
        if (methodNameResolver != null && mappingInfo.paths.length == 0) {
          if (!oldMappedMethod.getName().equals(handlerMethod.getName())) {
            if (resolvedMethodName == null) {
              resolvedMethodName=methodNameResolver.getHandlerMethodName(request);
            }
            if (!resolvedMethodName.equals(oldMappedMethod.getName())) {
              oldMappedMethod=null;
            }
            if (!resolvedMethodName.equals(handlerMethod.getName())) {
              if (oldMappedMethod != null) {
                targetHandlerMethods.put(mappingInfo,oldMappedMethod);
                oldMappedMethod=null;
              }
 else {
                targetHandlerMethods.remove(mappingInfo);
              }
            }
          }
        }
        if (oldMappedMethod != null) {
          throw new IllegalStateException("Ambiguous handler methods mapped for HTTP path '" + lookupPath + "': {"+ oldMappedMethod+ ", "+ handlerMethod+ "}. If you intend to handle the same path in multiple methods, then factor "+ "them out into a dedicated handler class with that path mapped at the type level!");
        }
      }
    }
  }
  if (!targetHandlerMethods.isEmpty()) {
    List<RequestMappingInfo> matches=new ArrayList<RequestMappingInfo>(targetHandlerMethods.keySet());
    RequestMappingInfoComparator requestMappingInfoComparator=new RequestMappingInfoComparator(pathComparator);
    Collections.sort(matches,requestMappingInfoComparator);
    RequestMappingInfo bestMappingMatch=matches.get(0);
    String bestMatchedPath=bestMappingMatch.bestMatchedPath();
    if (bestMatchedPath != null) {
      extractHandlerMethodUriTemplates(bestMatchedPath,lookupPath,request);
    }
    return targetHandlerMethods.get(bestMappingMatch);
  }
 else {
    if (!allowedMethods.isEmpty()) {
      throw new HttpRequestMethodNotSupportedException(request.getMethod(),StringUtils.toStringArray(allowedMethods));
    }
 else {
      throw new NoSuchRequestHandlingMethodException(lookupPath,request.getMethod(),request.getParameterMap());
    }
  }
}
