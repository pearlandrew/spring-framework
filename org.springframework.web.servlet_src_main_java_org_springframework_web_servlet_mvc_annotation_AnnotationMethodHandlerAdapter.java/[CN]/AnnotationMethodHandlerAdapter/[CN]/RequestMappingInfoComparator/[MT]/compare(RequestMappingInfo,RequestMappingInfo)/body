{
  int pathComparison=pathComparator.compare(info1.bestMatchedPattern(),info2.bestMatchedPattern());
  if (pathComparison != 0) {
    return pathComparison;
  }
  int info1ParamCount=info1.params.length;
  int info2ParamCount=info2.params.length;
  if (info1ParamCount != info2ParamCount) {
    return info2ParamCount - info1ParamCount;
  }
  int info1HeaderCount=info1.headers.length;
  int info2HeaderCount=info2.headers.length;
  if (info1HeaderCount != info2HeaderCount) {
    return info2HeaderCount - info1HeaderCount;
  }
  int acceptComparison=compareAcceptHeaders(info1,info2);
  if (acceptComparison != 0) {
    return acceptComparison;
  }
  int info1MethodCount=info1.methods.length;
  int info2MethodCount=info2.methods.length;
  if (info1MethodCount == 0 && info2MethodCount > 0) {
    return 1;
  }
 else   if (info2MethodCount == 0 && info1MethodCount > 0) {
    return -1;
  }
 else   if (info1MethodCount == 1 & info2MethodCount > 1) {
    return -1;
  }
 else   if (info2MethodCount == 1 & info1MethodCount > 1) {
    return 1;
  }
  return 0;
}
