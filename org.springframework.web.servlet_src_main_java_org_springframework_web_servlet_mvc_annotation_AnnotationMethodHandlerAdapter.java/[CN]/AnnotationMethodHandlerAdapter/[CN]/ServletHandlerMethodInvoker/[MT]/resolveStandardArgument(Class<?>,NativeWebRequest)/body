{
  HttpServletRequest request=webRequest.getNativeRequest(HttpServletRequest.class);
  HttpServletResponse response=webRequest.getNativeResponse(HttpServletResponse.class);
  if (ServletRequest.class.isAssignableFrom(parameterType) || MultipartRequest.class.isAssignableFrom(parameterType)) {
    Object nativeRequest=webRequest.getNativeRequest(parameterType);
    if (nativeRequest == null) {
      throw new IllegalStateException("Current request is not of type [" + parameterType.getName() + "]: "+ request);
    }
    return nativeRequest;
  }
 else   if (ServletResponse.class.isAssignableFrom(parameterType)) {
    this.responseArgumentUsed=true;
    Object nativeResponse=webRequest.getNativeResponse(parameterType);
    if (nativeResponse == null) {
      throw new IllegalStateException("Current response is not of type [" + parameterType.getName() + "]: "+ response);
    }
    return nativeResponse;
  }
 else   if (HttpSession.class.isAssignableFrom(parameterType)) {
    return request.getSession();
  }
 else   if (Principal.class.isAssignableFrom(parameterType)) {
    return request.getUserPrincipal();
  }
 else   if (Locale.class.equals(parameterType)) {
    return RequestContextUtils.getLocale(request);
  }
 else   if (InputStream.class.isAssignableFrom(parameterType)) {
    return request.getInputStream();
  }
 else   if (Reader.class.isAssignableFrom(parameterType)) {
    return request.getReader();
  }
 else   if (OutputStream.class.isAssignableFrom(parameterType)) {
    this.responseArgumentUsed=true;
    return response.getOutputStream();
  }
 else   if (Writer.class.isAssignableFrom(parameterType)) {
    this.responseArgumentUsed=true;
    return response.getWriter();
  }
  return super.resolveStandardArgument(parameterType,webRequest);
}
