{
  if (handlerMethod.isAnnotationPresent(ResponseStatus.class)) {
    ResponseStatus responseStatus=handlerMethod.getAnnotation(ResponseStatus.class);
    HttpServletResponse response=webRequest.getResponse();
    response.setStatus(responseStatus.value().value());
    responseArgumentUsed=true;
  }
  if (returnValue instanceof ModelAndView) {
    ModelAndView mav=(ModelAndView)returnValue;
    mav.getModelMap().mergeAttributes(implicitModel);
    return mav;
  }
 else   if (returnValue instanceof Model) {
    return new ModelAndView().addAllObjects(implicitModel).addAllObjects(((Model)returnValue).asMap());
  }
 else   if (returnValue instanceof View) {
    return new ModelAndView((View)returnValue).addAllObjects(implicitModel);
  }
 else   if (handlerMethod.isAnnotationPresent(ModelAttribute.class)) {
    addReturnValueAsModelAttribute(handlerMethod,handlerType,returnValue,implicitModel);
    return new ModelAndView().addAllObjects(implicitModel);
  }
 else   if (returnValue instanceof Map) {
    return new ModelAndView().addAllObjects(implicitModel).addAllObjects((Map)returnValue);
  }
 else   if (returnValue instanceof String) {
    return new ModelAndView((String)returnValue).addAllObjects(implicitModel);
  }
 else   if (returnValue == null) {
    if (this.responseArgumentUsed || webRequest.isNotModified()) {
      return null;
    }
 else {
      return new ModelAndView().addAllObjects(implicitModel);
    }
  }
 else   if (!BeanUtils.isSimpleProperty(returnValue.getClass())) {
    addReturnValueAsModelAttribute(handlerMethod,handlerType,returnValue,implicitModel);
    return new ModelAndView().addAllObjects(implicitModel);
  }
 else {
    throw new IllegalArgumentException("Invalid handler method return value: " + returnValue);
  }
}
