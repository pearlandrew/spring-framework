{
  initializeConfigurationIfNecessary();
  if (this.dataSource != null) {
    configTimeDataSourceHolder.set(this.dataSource);
  }
  if (this.jtaTransactionManager != null) {
    configTimeTransactionManagerHolder.set(this.jtaTransactionManager);
  }
  if (this.cacheRegionFactory != null) {
    configTimeRegionFactoryHolder.set(this.cacheRegionFactory);
  }
  if (this.lobHandler != null) {
    configTimeLobHandlerHolder.set(this.lobHandler);
  }
  try {
    if (isExposeTransactionAwareSessionFactory()) {
      this.configuration.setProperty(Environment.CURRENT_SESSION_CONTEXT_CLASS,SpringSessionContext.class.getName());
    }
    if (this.jtaTransactionManager != null) {
      this.configuration.setProperty(Environment.TRANSACTION_STRATEGY,JTATransactionFactory.class.getName());
      this.configuration.setProperty(Environment.TRANSACTION_MANAGER_STRATEGY,LocalTransactionManagerLookup.class.getName());
    }
 else {
      this.configuration.setProperty(Environment.TRANSACTION_STRATEGY,SpringTransactionFactory.class.getName());
    }
    if (this.entityInterceptor != null) {
      this.configuration.setInterceptor(this.entityInterceptor);
    }
    if (this.namingStrategy != null) {
      this.configuration.setNamingStrategy(this.namingStrategy);
    }
    if (this.typeDefinitions != null) {
      Method createMappings=Configuration.class.getMethod("createMappings");
      Method addTypeDef=createMappings.getReturnType().getMethod("addTypeDef",String.class,String.class,Properties.class);
      Object mappings=ReflectionUtils.invokeMethod(createMappings,this.configuration);
      for (      TypeDefinitionBean typeDef : this.typeDefinitions) {
        ReflectionUtils.invokeMethod(addTypeDef,mappings,typeDef.getTypeName(),typeDef.getTypeClass(),typeDef.getParameters());
      }
    }
    if (this.filterDefinitions != null) {
      for (      FilterDefinition filterDef : this.filterDefinitions) {
        this.configuration.addFilterDefinition(filterDef);
      }
    }
    if (this.configLocations != null) {
      for (      Resource resource : this.configLocations) {
        this.configuration.configure(resource.getURL());
      }
    }
    if (this.hibernateProperties != null) {
      this.configuration.addProperties(this.hibernateProperties);
    }
    if (dataSource != null) {
      Class<?> providerClass=LocalDataSourceConnectionProvider.class;
      if (isUseTransactionAwareDataSource() || dataSource instanceof TransactionAwareDataSourceProxy) {
        providerClass=TransactionAwareDataSourceConnectionProvider.class;
      }
 else       if (this.configuration.getProperty(Environment.TRANSACTION_MANAGER_STRATEGY) != null) {
        providerClass=LocalJtaDataSourceConnectionProvider.class;
      }
      this.configuration.setProperty(Environment.CONNECTION_PROVIDER,providerClass.getName());
    }
    if (this.cacheRegionFactory != null) {
      this.configuration.setProperty(Environment.CACHE_REGION_FACTORY,"org.springframework.orm.hibernate3.LocalRegionFactoryProxy");
    }
    if (this.mappingResources != null) {
      for (      String mapping : this.mappingResources) {
        Resource resource=new ClassPathResource(mapping.trim(),this.beanClassLoader);
        this.configuration.addInputStream(resource.getInputStream());
      }
    }
    if (this.mappingLocations != null) {
      for (      Resource resource : this.mappingLocations) {
        this.configuration.addInputStream(resource.getInputStream());
      }
    }
    if (this.cacheableMappingLocations != null) {
      for (      Resource resource : this.cacheableMappingLocations) {
        this.configuration.addCacheableFile(resource.getFile());
      }
    }
    if (this.mappingJarLocations != null) {
      for (      Resource resource : this.mappingJarLocations) {
        this.configuration.addJar(resource.getFile());
      }
    }
    if (this.mappingDirectoryLocations != null) {
      for (      Resource resource : this.mappingDirectoryLocations) {
        File file=resource.getFile();
        if (!file.isDirectory()) {
          throw new IllegalArgumentException("Mapping directory location [" + resource + "] does not denote a directory");
        }
        this.configuration.addDirectory(file);
      }
    }
    postProcessMappings();
    this.configuration.buildMappings();
    if (this.entityCacheStrategies != null) {
      for (Enumeration<?> classNames=this.entityCacheStrategies.propertyNames(); classNames.hasMoreElements(); ) {
        String className=(String)classNames.nextElement();
        String[] strategyAndRegion=StringUtils.commaDelimitedListToStringArray(this.entityCacheStrategies.getProperty(className));
        if (strategyAndRegion.length > 1) {
          Method setCacheConcurrencyStrategy=Configuration.class.getMethod("setCacheConcurrencyStrategy",String.class,String.class,String.class);
          ReflectionUtils.invokeMethod(setCacheConcurrencyStrategy,this.configuration,className,strategyAndRegion[0],strategyAndRegion[1]);
        }
 else         if (strategyAndRegion.length > 0) {
          this.configuration.setCacheConcurrencyStrategy(className,strategyAndRegion[0]);
        }
      }
    }
    if (this.collectionCacheStrategies != null) {
      for (Enumeration<?> collRoles=this.collectionCacheStrategies.propertyNames(); collRoles.hasMoreElements(); ) {
        String collRole=(String)collRoles.nextElement();
        String[] strategyAndRegion=StringUtils.commaDelimitedListToStringArray(this.collectionCacheStrategies.getProperty(collRole));
        if (strategyAndRegion.length > 1) {
          this.configuration.setCollectionCacheConcurrencyStrategy(collRole,strategyAndRegion[0],strategyAndRegion[1]);
        }
 else         if (strategyAndRegion.length > 0) {
          this.configuration.setCollectionCacheConcurrencyStrategy(collRole,strategyAndRegion[0]);
        }
      }
    }
    if (this.eventListeners != null) {
      for (      Map.Entry<String,Object> entry : this.eventListeners.entrySet()) {
        String listenerType=entry.getKey();
        Object listenerObject=entry.getValue();
        if (listenerObject instanceof Collection) {
          Collection<?> listeners=(Collection<?>)listenerObject;
          EventListeners listenerRegistry=this.configuration.getEventListeners();
          Object[] listenerArray=(Object[])Array.newInstance(listenerRegistry.getListenerClassFor(listenerType),listeners.size());
          listenerArray=listeners.toArray(listenerArray);
          this.configuration.setListeners(listenerType,listenerArray);
        }
 else {
          this.configuration.setListener(listenerType,listenerObject);
        }
      }
    }
    preBuildSessionFactory();
    postProcessConfiguration();
    logger.info("Building new Hibernate SessionFactory");
    return this.sessionFactory=newSessionFactory();
  }
  finally {
    if (dataSource != null) {
      SessionFactoryBuilderSupport.configTimeDataSourceHolder.remove();
    }
    if (this.jtaTransactionManager != null) {
      SessionFactoryBuilderSupport.configTimeTransactionManagerHolder.remove();
    }
    if (this.cacheRegionFactory != null) {
      SessionFactoryBuilderSupport.configTimeRegionFactoryHolder.remove();
    }
    if (this.lobHandler != null) {
      SessionFactoryBuilderSupport.configTimeLobHandlerHolder.remove();
    }
    postBuildSessionFactory();
  }
}
