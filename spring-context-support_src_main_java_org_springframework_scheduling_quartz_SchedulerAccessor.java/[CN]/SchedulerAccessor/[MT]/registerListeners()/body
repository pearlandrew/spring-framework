{
  Object target;
  boolean quartz2;
  try {
    Method getListenerManager=Scheduler.class.getMethod("getListenerManager");
    target=ReflectionUtils.invokeMethod(getListenerManager,getScheduler());
    quartz2=true;
  }
 catch (  NoSuchMethodException ex) {
    target=getScheduler();
    quartz2=false;
  }
  Class<?> targetClass=target.getClass();
  try {
    if (this.schedulerListeners != null) {
      Method addSchedulerListener=targetClass.getMethod("addSchedulerListener",SchedulerListener.class);
      for (      SchedulerListener listener : this.schedulerListeners) {
        ReflectionUtils.invokeMethod(addSchedulerListener,target,listener);
      }
    }
    if (this.globalJobListeners != null) {
      Method addJobListener;
      if (quartz2) {
        addJobListener=targetClass.getMethod("addJobListener",JobListener.class,List.class);
      }
 else {
        addJobListener=targetClass.getMethod("addGlobalJobListener",JobListener.class);
      }
      for (      JobListener listener : this.globalJobListeners) {
        if (quartz2) {
          List<?> emptyMatchers=new LinkedList<Object>();
          ReflectionUtils.invokeMethod(addJobListener,target,listener,emptyMatchers);
        }
 else {
          ReflectionUtils.invokeMethod(addJobListener,target,listener);
        }
      }
    }
    if (this.jobListeners != null) {
      for (      JobListener listener : this.jobListeners) {
        if (quartz2) {
          throw new IllegalStateException("Non-global JobListeners not supported on Quartz 2 - " + "manually register a Matcher against the Quartz ListenerManager instead");
        }
        getScheduler().addJobListener(listener);
      }
    }
    if (this.globalTriggerListeners != null) {
      Method addTriggerListener;
      if (quartz2) {
        addTriggerListener=targetClass.getMethod("addTriggerListener",TriggerListener.class,List.class);
      }
 else {
        addTriggerListener=targetClass.getMethod("addGlobalTriggerListener",TriggerListener.class);
      }
      for (      TriggerListener listener : this.globalTriggerListeners) {
        if (quartz2) {
          List<?> emptyMatchers=new LinkedList<Object>();
          ReflectionUtils.invokeMethod(addTriggerListener,target,listener,emptyMatchers);
        }
 else {
          ReflectionUtils.invokeMethod(addTriggerListener,target,listener);
        }
      }
    }
    if (this.triggerListeners != null) {
      for (      TriggerListener listener : this.triggerListeners) {
        if (quartz2) {
          throw new IllegalStateException("Non-global TriggerListeners not supported on Quartz 2 - " + "manually register a Matcher against the Quartz ListenerManager instead");
        }
        getScheduler().addTriggerListener(listener);
      }
    }
  }
 catch (  NoSuchMethodException ex) {
    throw new IllegalStateException("Expected Quartz API not present: " + ex);
  }
}
