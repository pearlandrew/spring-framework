{
  Class<?>[] classes=Collections.class.getDeclaredClasses();
  Map<String,String> env=System.getenv();
  for (  Class<?> cl : classes) {
    if ("java.util.Collections$UnmodifiableMap".equals(cl.getName())) {
      try {
        Field field=cl.getDeclaredField("m");
        field.setAccessible(true);
        Object obj=field.get(env);
        if (obj != null) {
          return (Map<String,String>)obj;
        }
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
  Class<?> processEnvironmentClass;
  try {
    processEnvironmentClass=Class.forName("java.lang.ProcessEnvironment");
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  try {
    Field theCaseInsensitiveEnvironmentField=processEnvironmentClass.getDeclaredField("theCaseInsensitiveEnvironment");
    theCaseInsensitiveEnvironmentField.setAccessible(true);
    Object obj=theCaseInsensitiveEnvironmentField.get(null);
    return (Map<String,String>)obj;
  }
 catch (  NoSuchFieldException e) {
  }
catch (  Exception e) {
    throw new RuntimeException(e);
  }
  try {
    Field theEnvironmentField=processEnvironmentClass.getDeclaredField("theEnvironment");
    theEnvironmentField.setAccessible(true);
    Object obj=theEnvironmentField.get(null);
    return (Map<String,String>)obj;
  }
 catch (  NoSuchFieldException e) {
  }
catch (  Exception e) {
    throw new RuntimeException(e);
  }
  throw new IllegalStateException();
}
