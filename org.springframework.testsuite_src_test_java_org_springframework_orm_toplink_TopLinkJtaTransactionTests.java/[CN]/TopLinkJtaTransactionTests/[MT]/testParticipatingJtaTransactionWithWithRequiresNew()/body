{
  MockControl utControl=MockControl.createControl(UserTransaction.class);
  UserTransaction ut=(UserTransaction)utControl.getMock();
  MockControl tmControl=MockControl.createControl(TransactionManager.class);
  TransactionManager tm=(TransactionManager)tmControl.getMock();
  MockControl tx1Control=MockControl.createControl(javax.transaction.Transaction.class);
  javax.transaction.Transaction tx1=(javax.transaction.Transaction)tx1Control.getMock();
  MockControl session1Control=MockControl.createControl(Session.class);
  Session session1=(Session)session1Control.getMock();
  MockControl session2Control=MockControl.createControl(Session.class);
  final Session session2=(Session)session2Control.getMock();
  final MockSessionFactory sf=new MockSessionFactory(session1);
  ut.getStatus();
  utControl.setReturnValue(Status.STATUS_NO_TRANSACTION,1);
  ut.getStatus();
  utControl.setReturnValue(Status.STATUS_ACTIVE,5);
  ut.begin();
  utControl.setVoidCallable(2);
  tm.suspend();
  tmControl.setReturnValue(tx1,1);
  tm.resume(tx1);
  tmControl.setVoidCallable(1);
  ut.commit();
  utControl.setVoidCallable(2);
  session1.release();
  session1Control.setVoidCallable(1);
  session2.release();
  session2Control.setVoidCallable(1);
  utControl.replay();
  tmControl.replay();
  session1Control.replay();
  session2Control.replay();
  JtaTransactionManager ptm=new JtaTransactionManager();
  ptm.setUserTransaction(ut);
  ptm.setTransactionManager(tm);
  final TransactionTemplate tt=new TransactionTemplate(ptm);
  tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  tt.execute(new TransactionCallback(){
    public Object doInTransaction(    TransactionStatus status){
      SessionFactoryUtils.getSession(sf,true);
      final SessionHolder holder=(SessionHolder)TransactionSynchronizationManager.getResource(sf);
      assertTrue("Has thread session",holder != null);
      sf.setSession(session2);
      tt.execute(new TransactionCallback(){
        public Object doInTransaction(        TransactionStatus status){
          TopLinkTemplate ht=new TopLinkTemplate(sf);
          return ht.executeFind(new TopLinkCallback(){
            public Object doInTopLink(            Session session){
              assertTrue("Not enclosing session",session != holder.getSession());
              return null;
            }
          }
);
        }
      }
);
      assertTrue("Same thread session as before",holder.getSession() == SessionFactoryUtils.getSession(sf,false));
      return null;
    }
  }
);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  utControl.verify();
  tmControl.verify();
  session1Control.verify();
  session2Control.verify();
}
