{
  boolean isReal=false;
  int start=this.pos;
  char ch=this.toProcess[this.pos + 1];
  boolean isHex=ch == 'x' || ch == 'X';
  if (firstCharIsZero && isHex) {
    this.pos=this.pos + 1;
    do {
      this.pos++;
    }
 while (isHexadecimalDigit(this.toProcess[this.pos]));
    if (isChar('L','l')) {
      pushHexIntToken(subarray(start + 2,this.pos),true,start,this.pos);
      this.pos++;
    }
 else {
      pushHexIntToken(subarray(start + 2,this.pos),false,start,this.pos);
    }
    return;
  }
  do {
    this.pos++;
  }
 while (isDigit(this.toProcess[this.pos]));
  ch=this.toProcess[this.pos];
  if (ch == '.') {
    isReal=true;
    int dotpos=this.pos;
    do {
      this.pos++;
    }
 while (isDigit(this.toProcess[this.pos]));
    if (this.pos == dotpos + 1) {
      this.pos=dotpos;
      pushIntToken(subarray(start,this.pos),false,start,this.pos);
      return;
    }
  }
  int endOfNumber=this.pos;
  if (isChar('L','l')) {
    if (isReal) {
      throw new InternalParseException(new SpelParseException(this.expressionString,start,SpelMessage.REAL_CANNOT_BE_LONG));
    }
    pushIntToken(subarray(start,endOfNumber),true,start,endOfNumber);
    this.pos++;
  }
 else   if (isExponentChar(this.toProcess[this.pos])) {
    isReal=true;
    this.pos++;
    char possibleSign=this.toProcess[this.pos];
    if (isSign(possibleSign)) {
      this.pos++;
    }
    do {
      this.pos++;
    }
 while (isDigit(this.toProcess[this.pos]));
    boolean isFloat=false;
    if (isFloatSuffix(this.toProcess[this.pos])) {
      isFloat=true;
      endOfNumber=++this.pos;
    }
 else     if (isDoubleSuffix(this.toProcess[this.pos])) {
      endOfNumber=++this.pos;
    }
    pushRealToken(subarray(start,this.pos),isFloat,start,this.pos);
  }
 else {
    ch=this.toProcess[this.pos];
    boolean isFloat=false;
    if (isFloatSuffix(ch)) {
      isReal=true;
      isFloat=true;
      endOfNumber=++this.pos;
    }
 else     if (isDoubleSuffix(ch)) {
      isReal=true;
      endOfNumber=++this.pos;
    }
    if (isReal) {
      pushRealToken(subarray(start,endOfNumber),isFloat,start,endOfNumber);
    }
 else {
      pushIntToken(subarray(start,endOfNumber),false,start,endOfNumber);
    }
  }
}
