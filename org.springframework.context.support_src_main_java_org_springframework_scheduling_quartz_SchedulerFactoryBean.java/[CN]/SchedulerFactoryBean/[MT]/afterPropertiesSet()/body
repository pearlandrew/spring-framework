{
  if (this.applicationContext != null && this.resourceLoader == null) {
    this.resourceLoader=this.applicationContext;
  }
  if (this.dataSource == null && this.nonTransactionalDataSource != null) {
    this.dataSource=this.nonTransactionalDataSource;
  }
  SchedulerFactory schedulerFactory=(SchedulerFactory)BeanUtils.instantiateClass(this.schedulerFactoryClass);
  initSchedulerFactory(schedulerFactory);
  if (this.resourceLoader != null) {
    configTimeResourceLoaderHolder.set(this.resourceLoader);
  }
  if (this.taskExecutor != null) {
    configTimeTaskExecutorHolder.set(this.taskExecutor);
  }
  if (this.dataSource != null) {
    configTimeDataSourceHolder.set(this.dataSource);
  }
  if (this.nonTransactionalDataSource != null) {
    configTimeNonTransactionalDataSourceHolder.set(this.nonTransactionalDataSource);
  }
  try {
    this.scheduler=createScheduler(schedulerFactory,this.schedulerName);
    populateSchedulerContext();
    if (!this.jobFactorySet && !(this.scheduler instanceof RemoteScheduler)) {
      this.jobFactory=new AdaptableJobFactory();
    }
    if (this.jobFactory != null) {
      if (this.jobFactory instanceof SchedulerContextAware) {
        ((SchedulerContextAware)this.jobFactory).setSchedulerContext(this.scheduler.getContext());
      }
      this.scheduler.setJobFactory(this.jobFactory);
    }
  }
  finally {
    if (this.resourceLoader != null) {
      configTimeResourceLoaderHolder.set(null);
    }
    if (this.taskExecutor != null) {
      configTimeTaskExecutorHolder.set(null);
    }
    if (this.dataSource != null) {
      configTimeDataSourceHolder.set(null);
    }
    if (this.nonTransactionalDataSource != null) {
      configTimeNonTransactionalDataSourceHolder.set(null);
    }
  }
  registerListeners();
  registerJobsAndTriggers();
  if (this.autoStartup) {
    startScheduler(this.scheduler,this.startupDelay);
  }
}
