{
  MockControl tmControl=MockControl.createControl(TransactionManager.class);
  TransactionManager tm=(TransactionManager)tmControl.getMock();
  MockJtaTransaction transaction=new MockJtaTransaction();
  tm.getTransaction();
  tmControl.setReturnValue(transaction,6);
  MockControl sfControl=MockControl.createControl(SessionFactoryImplementor.class);
  final SessionFactoryImplementor sf=(SessionFactoryImplementor)sfControl.getMock();
  final MockControl sessionControl=MockControl.createControl(Session.class);
  final Session session=(Session)sessionControl.getMock();
  sf.getTransactionManager();
  sfControl.setReturnValue(tm,6);
  session.isOpen();
  sessionControl.setReturnValue(true,5);
  session.getFlushMode();
  if (flushNever) {
    sessionControl.setReturnValue(FlushMode.MANUAL,1);
    session.setFlushMode(FlushMode.AUTO);
    sessionControl.setVoidCallable(1);
  }
 else {
    sessionControl.setReturnValue(FlushMode.AUTO,1);
  }
  tmControl.replay();
  sfControl.replay();
  sessionControl.replay();
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  TransactionSynchronizationManager.bindResource(sf,new SessionHolder(session));
  try {
    assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
    HibernateTemplate ht=new HibernateTemplate(sf);
    ht.setExposeNativeSession(true);
    for (int i=0; i < 5; i++) {
      ht.executeFind(new HibernateCallback(){
        public Object doInHibernate(        org.hibernate.Session sess){
          assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
          assertEquals(session,sess);
          return null;
        }
      }
);
    }
    sessionControl.verify();
    sessionControl.reset();
    session.getFlushMode();
    sessionControl.setReturnValue(FlushMode.AUTO,1);
    session.flush();
    sessionControl.setVoidCallable(1);
    if (flushNever) {
      session.setFlushMode(FlushMode.MANUAL);
      sessionControl.setVoidCallable(1);
    }
    session.disconnect();
    sessionControl.setReturnValue(null,1);
    sessionControl.replay();
    Synchronization synchronization=transaction.getSynchronization();
    assertTrue("JTA synchronization registered",synchronization != null);
    synchronization.beforeCompletion();
    synchronization.afterCompletion(Status.STATUS_COMMITTED);
    assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
  }
  finally {
    TransactionSynchronizationManager.unbindResource(sf);
  }
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  tmControl.verify();
  sfControl.verify();
  sessionControl.verify();
}
