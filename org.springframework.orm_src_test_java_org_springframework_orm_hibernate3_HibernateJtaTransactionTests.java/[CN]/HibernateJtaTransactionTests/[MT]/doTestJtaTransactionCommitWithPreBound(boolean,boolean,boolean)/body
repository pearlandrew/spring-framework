{
  MockControl utControl=MockControl.createControl(UserTransaction.class);
  UserTransaction ut=(UserTransaction)utControl.getMock();
  ut.getStatus();
  utControl.setReturnValue(Status.STATUS_NO_TRANSACTION,1);
  ut.getStatus();
  utControl.setReturnValue(Status.STATUS_ACTIVE,2);
  ut.begin();
  utControl.setVoidCallable(1);
  ut.commit();
  utControl.setVoidCallable(1);
  MockControl tmControl=MockControl.createControl(TransactionManager.class);
  TransactionManager tm=(TransactionManager)tmControl.getMock();
  if (jtaTm) {
    MockJtaTransaction transaction=new MockJtaTransaction();
    tm.getTransaction();
    tmControl.setReturnValue(transaction,1);
  }
  MockControl sfControl=MockControl.createControl(SessionFactoryImplementor.class);
  final SessionFactoryImplementor sf=(SessionFactoryImplementor)sfControl.getMock();
  final MockControl sessionControl=MockControl.createControl(ExtendedSession.class);
  final ExtendedSession session=(ExtendedSession)sessionControl.getMock();
  sf.getTransactionManager();
  sfControl.setReturnValue((jtaTm ? tm : null),1);
  session.isOpen();
  sessionControl.setReturnValue(true,5);
  session.getFlushMode();
  if (flushNever) {
    sessionControl.setReturnValue(FlushMode.MANUAL,1);
    if (!readOnly) {
      session.setFlushMode(FlushMode.AUTO);
      sessionControl.setVoidCallable(1);
    }
  }
 else {
    sessionControl.setReturnValue(FlushMode.AUTO,1);
  }
  utControl.replay();
  tmControl.replay();
  sfControl.replay();
  sessionControl.replay();
  TransactionSynchronizationManager.bindResource(sf,new SessionHolder(session));
  try {
    JtaTransactionManager ptm=new JtaTransactionManager(ut);
    TransactionTemplate tt=new TransactionTemplate(ptm);
    tt.setReadOnly(readOnly);
    final List l=new ArrayList();
    l.add("test");
    assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
    assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
    Object result=tt.execute(new TransactionCallback(){
      public Object doInTransaction(      TransactionStatus status){
        try {
          assertTrue("JTA synchronizations active",TransactionSynchronizationManager.isSynchronizationActive());
          assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
          HibernateTemplate ht=new HibernateTemplate(sf);
          ht.setExposeNativeSession(true);
          List htl=null;
          for (int i=0; i < 5; i++) {
            htl=ht.executeFind(new HibernateCallback(){
              public Object doInHibernate(              org.hibernate.Session sess){
                assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
                assertEquals(session,sess);
                return l;
              }
            }
);
            assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
          }
          sessionControl.verify();
          sessionControl.reset();
          if (!readOnly) {
            session.getFlushMode();
            sessionControl.setReturnValue(FlushMode.AUTO,1);
            session.flush();
            sessionControl.setVoidCallable(1);
            if (flushNever) {
              session.setFlushMode(FlushMode.MANUAL);
              sessionControl.setVoidCallable(1);
            }
          }
          session.afterTransactionCompletion(true,null);
          sessionControl.setVoidCallable(1);
          session.disconnect();
          sessionControl.setReturnValue(null,1);
          sessionControl.replay();
          return htl;
        }
 catch (        Error err) {
          err.printStackTrace();
          throw err;
        }
      }
    }
);
    assertTrue("Correct result list",result == l);
    assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
    assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  }
  finally {
    TransactionSynchronizationManager.unbindResource(sf);
  }
  utControl.verify();
  tmControl.verify();
  sfControl.verify();
  sessionControl.verify();
}
