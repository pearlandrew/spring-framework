{
  String originalBeanName=definition.getBeanName();
  BeanDefinition targetDefinition=definition.getBeanDefinition();
  RootBeanDefinition scopedProxyDefinition=new RootBeanDefinition(ScopedProxyFactoryBean.class);
  scopedProxyDefinition.setOriginatingBeanDefinition(definition.getBeanDefinition());
  scopedProxyDefinition.setSource(definition.getSource());
  scopedProxyDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
  String targetBeanName=getTargetBeanName(originalBeanName);
  scopedProxyDefinition.getPropertyValues().add("targetBeanName",targetBeanName);
  if (proxyTargetClass) {
    targetDefinition.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE,Boolean.TRUE);
  }
 else {
    scopedProxyDefinition.getPropertyValues().add("proxyTargetClass",Boolean.FALSE);
  }
  if (targetDefinition instanceof AbstractBeanDefinition) {
    scopedProxyDefinition.copyQualifiersFrom((AbstractBeanDefinition)targetDefinition);
  }
  scopedProxyDefinition.setAutowireCandidate(targetDefinition.isAutowireCandidate());
  scopedProxyDefinition.setPrimary(targetDefinition.isPrimary());
  targetDefinition.setAutowireCandidate(false);
  targetDefinition.setPrimary(false);
  registry.registerBeanDefinition(targetBeanName,targetDefinition);
  return new BeanDefinitionHolder(scopedProxyDefinition,originalBeanName,definition.getAliases());
}
