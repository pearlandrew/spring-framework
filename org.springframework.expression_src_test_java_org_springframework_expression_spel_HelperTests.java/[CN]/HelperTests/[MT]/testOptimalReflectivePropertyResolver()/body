{
  ReflectivePropertyResolver rpr=new ReflectivePropertyResolver();
  Tester t=new Tester();
  t.setProperty("hello");
  EvaluationContext ctx=new StandardEvaluationContext(t);
  PropertyAccessor optA=rpr.createOptimalAccessor(ctx,t,"property");
  Assert.assertTrue(optA.canRead(ctx,t,"property"));
  Assert.assertFalse(optA.canRead(ctx,t,"property2"));
  try {
    optA.canWrite(ctx,t,"property");
    Assert.fail();
  }
 catch (  UnsupportedOperationException uoe) {
  }
  try {
    optA.canWrite(ctx,t,"property2");
    Assert.fail();
  }
 catch (  UnsupportedOperationException uoe) {
  }
  Assert.assertEquals("hello",optA.read(ctx,t,"property").getValue());
  Assert.assertEquals("hello",optA.read(ctx,t,"property").getValue());
  try {
    optA.getSpecificTargetClasses();
    Assert.fail();
  }
 catch (  UnsupportedOperationException uoe) {
  }
  try {
    optA.write(ctx,t,"property",null);
    Assert.fail();
  }
 catch (  UnsupportedOperationException uoe) {
  }
  optA=rpr.createOptimalAccessor(ctx,t,"field");
  Assert.assertTrue(optA.canRead(ctx,t,"field"));
  Assert.assertFalse(optA.canRead(ctx,t,"field2"));
  try {
    optA.canWrite(ctx,t,"field");
    Assert.fail();
  }
 catch (  UnsupportedOperationException uoe) {
  }
  try {
    optA.canWrite(ctx,t,"field2");
    Assert.fail();
  }
 catch (  UnsupportedOperationException uoe) {
  }
  Assert.assertEquals(3,optA.read(ctx,t,"field").getValue());
  Assert.assertEquals(3,optA.read(ctx,t,"field").getValue());
  try {
    optA.getSpecificTargetClasses();
    Assert.fail();
  }
 catch (  UnsupportedOperationException uoe) {
  }
  try {
    optA.write(ctx,t,"field",null);
    Assert.fail();
  }
 catch (  UnsupportedOperationException uoe) {
  }
}
