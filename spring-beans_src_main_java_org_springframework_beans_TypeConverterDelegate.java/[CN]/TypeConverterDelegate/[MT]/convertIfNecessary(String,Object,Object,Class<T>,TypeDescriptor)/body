{
  PropertyEditor editor=this.propertyEditorRegistry.findCustomEditor(requiredType,propertyName);
  ConversionFailedException conversionAttemptEx=null;
  ConversionService conversionService=this.propertyEditorRegistry.getConversionService();
  if (editor == null && conversionService != null && newValue != null && typeDescriptor != null) {
    TypeDescriptor sourceTypeDesc=TypeDescriptor.forObject(newValue);
    if (conversionService.canConvert(sourceTypeDesc,typeDescriptor)) {
      try {
        return (T)conversionService.convert(newValue,sourceTypeDesc,typeDescriptor);
      }
 catch (      ConversionFailedException ex) {
        conversionAttemptEx=ex;
      }
    }
  }
  Object convertedValue=newValue;
  if (editor != null || (requiredType != null && !ClassUtils.isAssignableValue(requiredType,convertedValue))) {
    if (typeDescriptor != null && requiredType != null && Collection.class.isAssignableFrom(requiredType) && convertedValue instanceof String) {
      TypeDescriptor elementTypeDesc=typeDescriptor.getElementTypeDescriptor();
      if (elementTypeDesc != null) {
        Class<?> elementType=elementTypeDesc.getType();
        if (Class.class == elementType || Enum.class.isAssignableFrom(elementType)) {
          convertedValue=StringUtils.commaDelimitedListToStringArray((String)convertedValue);
        }
      }
    }
    if (editor == null) {
      editor=findDefaultEditor(requiredType);
    }
    convertedValue=doConvertValue(oldValue,convertedValue,requiredType,editor);
  }
  boolean standardConversion=false;
  if (requiredType != null) {
    if (convertedValue != null) {
      if (Object.class == requiredType) {
        return (T)convertedValue;
      }
 else       if (requiredType.isArray()) {
        if (convertedValue instanceof String && Enum.class.isAssignableFrom(requiredType.getComponentType())) {
          convertedValue=StringUtils.commaDelimitedListToStringArray((String)convertedValue);
        }
        return (T)convertToTypedArray(convertedValue,propertyName,requiredType.getComponentType());
      }
 else       if (convertedValue instanceof Collection) {
        convertedValue=convertToTypedCollection((Collection<?>)convertedValue,propertyName,requiredType,typeDescriptor);
        standardConversion=true;
      }
 else       if (convertedValue instanceof Map) {
        convertedValue=convertToTypedMap((Map<?,?>)convertedValue,propertyName,requiredType,typeDescriptor);
        standardConversion=true;
      }
      if (convertedValue.getClass().isArray() && Array.getLength(convertedValue) == 1) {
        convertedValue=Array.get(convertedValue,0);
        standardConversion=true;
      }
      if (String.class == requiredType && ClassUtils.isPrimitiveOrWrapper(convertedValue.getClass())) {
        return (T)convertedValue.toString();
      }
 else       if (convertedValue instanceof String && !requiredType.isInstance(convertedValue)) {
        if (conversionAttemptEx == null && !requiredType.isInterface() && !requiredType.isEnum()) {
          try {
            Constructor<T> strCtor=requiredType.getConstructor(String.class);
            return BeanUtils.instantiateClass(strCtor,convertedValue);
          }
 catch (          NoSuchMethodException ex) {
            if (logger.isTraceEnabled()) {
              logger.trace("No String constructor found on type [" + requiredType.getName() + "]",ex);
            }
          }
catch (          Exception ex) {
            if (logger.isDebugEnabled()) {
              logger.debug("Construction via String failed for type [" + requiredType.getName() + "]",ex);
            }
          }
        }
        String trimmedValue=((String)convertedValue).trim();
        if (requiredType.isEnum() && "".equals(trimmedValue)) {
          return null;
        }
        convertedValue=attemptToConvertStringToEnum(requiredType,trimmedValue,convertedValue);
        standardConversion=true;
      }
 else       if (convertedValue instanceof Number && Number.class.isAssignableFrom(requiredType)) {
        convertedValue=NumberUtils.convertNumberToTargetClass((Number)convertedValue,(Class<Number>)requiredType);
        standardConversion=true;
      }
    }
 else {
      if (requiredType == Optional.class) {
        convertedValue=Optional.empty();
      }
    }
    if (!ClassUtils.isAssignableValue(requiredType,convertedValue)) {
      if (conversionAttemptEx != null) {
        throw conversionAttemptEx;
      }
 else       if (conversionService != null) {
        TypeDescriptor sourceTypeDesc=TypeDescriptor.forObject(newValue);
        if (conversionService.canConvert(sourceTypeDesc,typeDescriptor)) {
          return (T)conversionService.convert(newValue,sourceTypeDesc,typeDescriptor);
        }
      }
      StringBuilder msg=new StringBuilder();
      msg.append("Cannot convert value of type [").append(ClassUtils.getDescriptiveType(newValue));
      msg.append("] to required type [").append(ClassUtils.getQualifiedName(requiredType)).append("]");
      if (propertyName != null) {
        msg.append(" for property '").append(propertyName).append("'");
      }
      if (editor != null) {
        msg.append(": PropertyEditor [").append(editor.getClass().getName()).append("] returned inappropriate value of type [").append(ClassUtils.getDescriptiveType(convertedValue)).append("]");
        throw new IllegalArgumentException(msg.toString());
      }
 else {
        msg.append(": no matching editors or conversion strategy found");
        throw new IllegalStateException(msg.toString());
      }
    }
  }
  if (conversionAttemptEx != null) {
    if (editor == null && !standardConversion && requiredType != null && Object.class != requiredType) {
      throw conversionAttemptEx;
    }
    logger.debug("Original ConversionService attempt failed - ignored since " + "PropertyEditor based conversion eventually succeeded",conversionAttemptEx);
  }
  return (T)convertedValue;
}
