{
  String methodName=null;
  if (this.methodParamNames != null) {
    for (int i=0; i < this.methodParamNames.length; ++i) {
      String candidate=this.methodParamNames[i];
      if (WebUtils.hasSubmitParameter(request,candidate)) {
        methodName=candidate;
        if (logger.isDebugEnabled()) {
          logger.debug("Determined handler method '" + methodName + "' based on existence of explicit request parameter of same name");
        }
        break;
      }
    }
  }
  if (methodName == null && this.paramName != null) {
    methodName=request.getParameter(this.paramName);
    if (methodName != null) {
      if (logger.isDebugEnabled()) {
        logger.debug("Determined handler method '" + methodName + "' based on value of request parameter '"+ this.paramName+ "'");
      }
    }
  }
  if (methodName != null && this.logicalMappings != null) {
    String originalName=methodName;
    methodName=this.logicalMappings.getProperty(methodName,methodName);
    if (logger.isDebugEnabled()) {
      logger.debug("Resolved method name '" + originalName + "' to handler method '"+ methodName+ "'");
    }
  }
  if (methodName != null && !StringUtils.hasText(methodName)) {
    if (logger.isDebugEnabled()) {
      logger.debug("Method name '" + methodName + "' is empty: treating it as no method name found");
    }
    methodName=null;
  }
  if (methodName == null) {
    if (this.defaultMethodName != null) {
      methodName=this.defaultMethodName;
      if (logger.isDebugEnabled()) {
        logger.debug("Falling back to default handler method '" + this.defaultMethodName + "'");
      }
    }
 else {
      throw new NoSuchRequestHandlingMethodException(request);
    }
  }
  return methodName;
}
