{
  CopyOnWriteArrayList<Lifecycle> stoppedBeans=new CopyOnWriteArrayList<Lifecycle>();
  Lifecycle bean1=new TestLifecycleBean(stoppedBeans);
  Lifecycle bean2=new TestSmartLifecycleBean(500,200,stoppedBeans);
  Lifecycle bean3=new TestSmartLifecycleBean(Integer.MAX_VALUE,100,stoppedBeans);
  Lifecycle bean4=new TestLifecycleBean(stoppedBeans);
  Lifecycle bean5=new TestSmartLifecycleBean(1,200,stoppedBeans);
  StaticApplicationContext context=new StaticApplicationContext();
  context.getBeanFactory().registerSingleton("bean1",bean1);
  context.getBeanFactory().registerSingleton("bean2",bean2);
  context.getBeanFactory().registerSingleton("bean3",bean3);
  context.getBeanFactory().registerSingleton("bean4",bean4);
  context.getBeanFactory().registerSingleton("bean5",bean5);
  context.refresh();
  assertFalse(bean1.isRunning());
  assertFalse(bean4.isRunning());
  bean1.start();
  bean4.start();
  assertTrue(bean1.isRunning());
  assertTrue(bean2.isRunning());
  assertTrue(bean3.isRunning());
  assertTrue(bean4.isRunning());
  assertTrue(bean5.isRunning());
  context.stop();
  assertFalse(bean1.isRunning());
  assertFalse(bean2.isRunning());
  assertFalse(bean3.isRunning());
  assertFalse(bean4.isRunning());
  assertFalse(bean5.isRunning());
  assertEquals(5,stoppedBeans.size());
  assertEquals(1,getShutdownOrder(stoppedBeans.get(0)));
  assertEquals(500,getShutdownOrder(stoppedBeans.get(1)));
  assertEquals(Integer.MAX_VALUE,getShutdownOrder(stoppedBeans.get(2)));
  assertEquals(Integer.MAX_VALUE,getShutdownOrder(stoppedBeans.get(3)));
  assertEquals(Integer.MAX_VALUE,getShutdownOrder(stoppedBeans.get(4)));
}
