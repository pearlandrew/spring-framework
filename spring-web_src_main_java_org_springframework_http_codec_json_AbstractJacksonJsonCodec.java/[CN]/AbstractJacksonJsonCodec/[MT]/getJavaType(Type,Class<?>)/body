{
  TypeFactory typeFactory=this.mapper.getTypeFactory();
  if (contextClass != null) {
    ResolvableType resolvedType=ResolvableType.forType(type);
    if (type instanceof TypeVariable) {
      ResolvableType resolvedTypeVariable=resolveVariable((TypeVariable<?>)type,ResolvableType.forClass(contextClass));
      if (resolvedTypeVariable != ResolvableType.NONE) {
        return typeFactory.constructType(resolvedTypeVariable.resolve());
      }
    }
 else     if (type instanceof ParameterizedType && resolvedType.hasUnresolvableGenerics()) {
      ParameterizedType parameterizedType=(ParameterizedType)type;
      Class<?>[] generics=new Class<?>[parameterizedType.getActualTypeArguments().length];
      Type[] typeArguments=parameterizedType.getActualTypeArguments();
      for (int i=0; i < typeArguments.length; i++) {
        Type typeArgument=typeArguments[i];
        if (typeArgument instanceof TypeVariable) {
          ResolvableType resolvedTypeArgument=resolveVariable((TypeVariable<?>)typeArgument,ResolvableType.forClass(contextClass));
          if (resolvedTypeArgument != ResolvableType.NONE) {
            generics[i]=resolvedTypeArgument.resolve();
          }
 else {
            generics[i]=ResolvableType.forType(typeArgument).resolve();
          }
        }
 else {
          generics[i]=ResolvableType.forType(typeArgument).resolve();
        }
      }
      return typeFactory.constructType(ResolvableType.forClassWithGenerics(resolvedType.getRawClass(),generics).getType());
    }
  }
  return typeFactory.constructType(type);
}
