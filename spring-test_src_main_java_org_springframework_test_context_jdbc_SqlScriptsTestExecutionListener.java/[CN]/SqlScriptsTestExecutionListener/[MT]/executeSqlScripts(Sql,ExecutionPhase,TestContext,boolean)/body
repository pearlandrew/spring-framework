{
  if (executionPhase != sql.executionPhase()) {
    return;
  }
  MergedSqlConfig mergedSqlConfig=new MergedSqlConfig(sql.config(),testContext.getTestClass());
  if (logger.isDebugEnabled()) {
    logger.debug(String.format("Processing %s for execution phase [%s] and test context %s.",mergedSqlConfig,executionPhase,testContext));
  }
  final ResourceDatabasePopulator populator=new ResourceDatabasePopulator();
  populator.setSqlScriptEncoding(mergedSqlConfig.getEncoding());
  populator.setSeparator(mergedSqlConfig.getSeparator());
  populator.setCommentPrefix(mergedSqlConfig.getCommentPrefix());
  populator.setBlockCommentStartDelimiter(mergedSqlConfig.getBlockCommentStartDelimiter());
  populator.setBlockCommentEndDelimiter(mergedSqlConfig.getBlockCommentEndDelimiter());
  populator.setContinueOnError(mergedSqlConfig.getErrorMode() == ErrorMode.CONTINUE_ON_ERROR);
  populator.setIgnoreFailedDrops(mergedSqlConfig.getErrorMode() == ErrorMode.IGNORE_FAILED_DROPS);
  String[] scripts=getScripts(sql,testContext,classLevel);
  scripts=TestContextResourceUtils.convertToClasspathResourcePaths(testContext.getTestClass(),scripts);
  populator.setScripts(TestContextResourceUtils.convertToResources(testContext.getApplicationContext(),scripts));
  if (logger.isDebugEnabled()) {
    logger.debug("Executing SQL scripts: " + ObjectUtils.nullSafeToString(scripts));
  }
  final DataSource dataSource=TestContextTransactionUtils.retrieveDataSource(testContext,mergedSqlConfig.getDataSource());
  final PlatformTransactionManager transactionManager=TestContextTransactionUtils.retrieveTransactionManager(testContext,mergedSqlConfig.getTransactionManager());
  int propagation=(mergedSqlConfig.getTransactionMode() == TransactionMode.ISOLATED) ? TransactionDefinition.PROPAGATION_REQUIRES_NEW : TransactionDefinition.PROPAGATION_REQUIRED;
  TransactionAttribute transactionAttribute=TestContextTransactionUtils.createDelegatingTransactionAttribute(testContext,new DefaultTransactionAttribute(propagation));
  new TransactionTemplate(transactionManager,transactionAttribute).execute(new TransactionCallbackWithoutResult(){
    @Override public void doInTransactionWithoutResult(    TransactionStatus status){
      populator.execute(dataSource);
    }
  }
);
}
