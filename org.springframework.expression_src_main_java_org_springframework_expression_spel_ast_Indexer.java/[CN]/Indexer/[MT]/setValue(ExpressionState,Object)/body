{
  TypedValue contextObject=state.getActiveContextObject();
  Object targetObject=contextObject.getValue();
  TypeDescriptor targetObjectTypeDescriptor=contextObject.getTypeDescriptor();
  TypedValue index=children[0].getValueInternal(state);
  if (targetObject == null) {
    throw new SpelEvaluationException(SpelMessage.CANNOT_INDEX_INTO_NULL_VALUE);
  }
  if (targetObjectTypeDescriptor.isMap()) {
    Map map=(Map)targetObject;
    Object possiblyConvertedKey=index;
    Object possiblyConvertedValue=newValue;
    if (targetObjectTypeDescriptor.isMapEntryTypeKnown()) {
      possiblyConvertedKey=state.convertValue(index.getValue(),TypeDescriptor.valueOf(targetObjectTypeDescriptor.getMapKeyType()));
      possiblyConvertedValue=state.convertValue(newValue,TypeDescriptor.valueOf(targetObjectTypeDescriptor.getMapValueType()));
    }
    map.put(possiblyConvertedKey,possiblyConvertedValue);
    return;
  }
  if (targetObjectTypeDescriptor.isArray()) {
    int idx=(Integer)state.convertValue(index,TypeDescriptor.valueOf(Integer.class));
    setArrayElement(state,contextObject.getValue(),idx,newValue,targetObjectTypeDescriptor.getElementType());
    return;
  }
 else   if (targetObjectTypeDescriptor.isCollection()) {
    int idx=(Integer)state.convertValue(index,TypeDescriptor.valueOf(Integer.class));
    Collection c=(Collection)targetObject;
    if (idx >= c.size()) {
      if (!growCollection(state,targetObjectTypeDescriptor.getElementType(),idx,c)) {
        throw new SpelEvaluationException(getStartPosition(),SpelMessage.COLLECTION_INDEX_OUT_OF_BOUNDS,c.size(),idx);
      }
    }
    if (targetObject instanceof List) {
      List list=(List)targetObject;
      Object possiblyConvertedValue=state.convertValue(newValue,targetObjectTypeDescriptor.getElementTypeDescriptor());
      list.set(idx,possiblyConvertedValue);
      return;
    }
 else {
      throw new SpelEvaluationException(getStartPosition(),SpelMessage.INDEXING_NOT_SUPPORTED_FOR_TYPE,targetObjectTypeDescriptor.asString());
    }
  }
  if (index.getTypeDescriptor().getType() == String.class) {
    Class<?> contextObjectClass=getObjectClass(contextObject.getValue());
    String name=(String)index.getValue();
    EvaluationContext eContext=state.getEvaluationContext();
    try {
      if (cachedWriteName != null && cachedWriteName.equals(name) && cachedWriteTargetType != null && cachedWriteTargetType.equals(contextObjectClass)) {
        cachedWriteAccessor.write(eContext,targetObject,name,newValue);
        return;
      }
      List<PropertyAccessor> accessorsToTry=AstUtils.getPropertyAccessorsToTry(contextObjectClass,state);
      if (accessorsToTry != null) {
        for (        PropertyAccessor accessor : accessorsToTry) {
          if (accessor.canWrite(eContext,contextObject.getValue(),name)) {
            this.cachedWriteName=name;
            this.cachedWriteTargetType=contextObjectClass;
            this.cachedWriteAccessor=accessor;
            accessor.write(eContext,contextObject.getValue(),name,newValue);
            return;
          }
        }
      }
    }
 catch (    AccessException ae) {
      throw new SpelEvaluationException(getStartPosition(),ae,SpelMessage.EXCEPTION_DURING_PROPERTY_WRITE,name,ae.getMessage());
    }
  }
  throw new SpelEvaluationException(getStartPosition(),SpelMessage.INDEXING_NOT_SUPPORTED_FOR_TYPE,targetObjectTypeDescriptor.asString());
}
