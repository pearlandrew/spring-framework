{
  Class<?> arrayComponentType=clazz;
  if (arrayComponentType == Integer.TYPE) {
    int[] array=(int[])ctx;
    checkAccess(array.length,idx);
    array[idx]=state.convertValue(newValue,INTEGER_TYPE_DESCRIPTOR);
  }
 else   if (arrayComponentType == Boolean.TYPE) {
    boolean[] array=(boolean[])ctx;
    checkAccess(array.length,idx);
    array[idx]=state.convertValue(newValue,BOOLEAN_TYPE_DESCRIPTOR);
  }
 else   if (arrayComponentType == Character.TYPE) {
    char[] array=(char[])ctx;
    checkAccess(array.length,idx);
    array[idx]=state.convertValue(newValue,CHARACTER_TYPE_DESCRIPTOR);
  }
 else   if (arrayComponentType == Long.TYPE) {
    long[] array=(long[])ctx;
    checkAccess(array.length,idx);
    array[idx]=state.convertValue(newValue,LONG_TYPE_DESCRIPTOR);
  }
 else   if (arrayComponentType == Short.TYPE) {
    short[] array=(short[])ctx;
    checkAccess(array.length,idx);
    array[idx]=state.convertValue(newValue,SHORT_TYPE_DESCRIPTOR);
  }
 else   if (arrayComponentType == Double.TYPE) {
    double[] array=(double[])ctx;
    checkAccess(array.length,idx);
    array[idx]=state.convertValue(newValue,DOUBLE_TYPE_DESCRIPTOR);
  }
 else   if (arrayComponentType == Float.TYPE) {
    float[] array=(float[])ctx;
    checkAccess(array.length,idx);
    array[idx]=state.convertValue(newValue,FLOAT_TYPE_DESCRIPTOR);
  }
 else   if (arrayComponentType == Byte.TYPE) {
    byte[] array=(byte[])ctx;
    checkAccess(array.length,idx);
    array[idx]=state.convertValue(newValue,BYTE_TYPE_DESCRIPTOR);
  }
 else {
    Object[] array=(Object[])ctx;
    checkAccess(array.length,idx);
    array[idx]=state.convertValue(newValue,TypeDescriptor.valueOf(clazz));
  }
}
