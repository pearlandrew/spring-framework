{
  TypedValue context=state.getActiveContextObject();
  Object targetObject=context.getValue();
  TypeDescriptor targetObjectTypeDescriptor=context.getTypeDescriptor();
  TypedValue indexValue=null;
  Object index=null;
  if (targetObject instanceof Map && (children[0] instanceof PropertyOrFieldReference)) {
    PropertyOrFieldReference reference=(PropertyOrFieldReference)children[0];
    index=reference.getName();
    indexValue=new TypedValue(index);
  }
 else {
    try {
      state.pushActiveContextObject(state.getRootContextObject());
      indexValue=children[0].getValueInternal(state);
      index=indexValue.getValue();
    }
  finally {
      state.popActiveContextObject();
    }
  }
  if (targetObjectTypeDescriptor.isMap()) {
    if (targetObject == null) {
      throw new SpelEvaluationException(getStartPosition(),SpelMessage.CANNOT_INDEX_INTO_NULL_VALUE);
    }
    Object possiblyConvertedKey=index;
    if (targetObjectTypeDescriptor.isMapEntryTypeKnown()) {
      possiblyConvertedKey=state.convertValue(index,TypeDescriptor.valueOf(targetObjectTypeDescriptor.getMapKeyType()));
    }
    Object o=((Map<?,?>)targetObject).get(possiblyConvertedKey);
    if (targetObjectTypeDescriptor.isMapEntryTypeKnown()) {
      return new TypedValue(o,targetObjectTypeDescriptor.getMapValueTypeDescriptor());
    }
 else {
      return new TypedValue(o);
    }
  }
  int idx=(Integer)state.convertValue(index,TypeDescriptor.valueOf(Integer.class));
  if (targetObject == null) {
    throw new SpelEvaluationException(getStartPosition(),SpelMessage.CANNOT_INDEX_INTO_NULL_VALUE);
  }
  if (targetObject.getClass().isArray()) {
    return new TypedValue(accessArrayElement(targetObject,idx),TypeDescriptor.valueOf(targetObjectTypeDescriptor.getElementType()));
  }
 else   if (targetObject instanceof Collection) {
    Collection c=(Collection)targetObject;
    if (idx >= c.size()) {
      if (state.getConfiguration().isAutoGrowCollections()) {
        Object newCollectionElement=null;
        try {
          int newElements=idx - c.size();
          Class elementClass=targetObjectTypeDescriptor.getElementType();
          if (elementClass == null) {
            throw new SpelEvaluationException(getStartPosition(),SpelMessage.UNABLE_TO_GROW_COLLECTION_UNKNOWN_ELEMENT_TYPE);
          }
          while (newElements > 0) {
            c.add(elementClass.newInstance());
            newElements--;
          }
          newCollectionElement=targetObjectTypeDescriptor.getElementType().newInstance();
        }
 catch (        Exception ex) {
          throw new SpelEvaluationException(getStartPosition(),ex,SpelMessage.UNABLE_TO_GROW_COLLECTION);
        }
        c.add(newCollectionElement);
        return new TypedValue(newCollectionElement,TypeDescriptor.valueOf(targetObjectTypeDescriptor.getElementType()));
      }
 else {
        throw new SpelEvaluationException(getStartPosition(),SpelMessage.COLLECTION_INDEX_OUT_OF_BOUNDS,c.size(),idx);
      }
    }
    int pos=0;
    for (    Object o : c) {
      if (pos == idx) {
        return new TypedValue(o,TypeDescriptor.valueOf(targetObjectTypeDescriptor.getElementType()));
      }
      pos++;
    }
  }
 else   if (targetObject instanceof String) {
    String ctxString=(String)targetObject;
    if (idx >= ctxString.length()) {
      throw new SpelEvaluationException(getStartPosition(),SpelMessage.STRING_INDEX_OUT_OF_BOUNDS,ctxString.length(),idx);
    }
    return new TypedValue(String.valueOf(ctxString.charAt(idx)));
  }
  throw new SpelEvaluationException(getStartPosition(),SpelMessage.INDEXING_NOT_SUPPORTED_FOR_TYPE,targetObjectTypeDescriptor.asString());
}
