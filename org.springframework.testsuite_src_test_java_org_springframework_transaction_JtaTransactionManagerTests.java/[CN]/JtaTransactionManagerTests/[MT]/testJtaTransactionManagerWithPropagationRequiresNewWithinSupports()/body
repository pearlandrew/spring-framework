{
  MockControl utControl=MockControl.createControl(UserTransaction.class);
  UserTransaction ut=(UserTransaction)utControl.getMock();
  ut.getStatus();
  utControl.setReturnValue(Status.STATUS_NO_TRANSACTION,2);
  ut.begin();
  utControl.setVoidCallable(1);
  ut.getStatus();
  utControl.setReturnValue(Status.STATUS_ACTIVE,2);
  ut.commit();
  utControl.setVoidCallable(1);
  utControl.replay();
  final JtaTransactionManager ptm=newJtaTransactionManager(ut);
  TransactionTemplate tt=new TransactionTemplate(ptm);
  tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_SUPPORTS);
  assertFalse(TransactionSynchronizationManager.isSynchronizationActive());
  tt.execute(new TransactionCallbackWithoutResult(){
    protected void doInTransactionWithoutResult(    TransactionStatus status){
      assertTrue(TransactionSynchronizationManager.isSynchronizationActive());
      assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
      assertFalse(TransactionSynchronizationManager.isActualTransactionActive());
      TransactionTemplate tt2=new TransactionTemplate(ptm);
      tt2.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);
      tt2.execute(new TransactionCallbackWithoutResult(){
        protected void doInTransactionWithoutResult(        TransactionStatus status){
          assertTrue(TransactionSynchronizationManager.isSynchronizationActive());
          assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
          assertTrue(TransactionSynchronizationManager.isActualTransactionActive());
        }
      }
);
      assertTrue(TransactionSynchronizationManager.isSynchronizationActive());
      assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
      assertFalse(TransactionSynchronizationManager.isActualTransactionActive());
    }
  }
);
  assertFalse(TransactionSynchronizationManager.isSynchronizationActive());
  utControl.verify();
}
