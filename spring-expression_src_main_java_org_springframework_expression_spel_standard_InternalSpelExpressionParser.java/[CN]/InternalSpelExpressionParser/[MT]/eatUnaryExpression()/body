{
  if (peekToken(TokenKind.PLUS,TokenKind.MINUS,TokenKind.NOT)) {
    Token t=nextToken();
    SpelNodeImpl expr=eatUnaryExpression();
    if (t.kind == TokenKind.NOT) {
      return new OperatorNot(toPos(t),expr);
    }
 else     if (t.kind == TokenKind.PLUS) {
      return new OpPlus(toPos(t),expr);
    }
 else {
      Assert.isTrue(t.kind == TokenKind.MINUS);
      return new OpMinus(toPos(t),expr);
    }
  }
 else   if (peekToken(TokenKind.INC,TokenKind.DEC)) {
    Token t=nextToken();
    SpelNodeImpl expr=eatUnaryExpression();
    if (t.getKind() == TokenKind.INC) {
      return new OpInc(toPos(t),false,expr);
    }
 else {
      return new OpDec(toPos(t),false,expr);
    }
  }
 else {
    return eatPrimaryExpression();
  }
}
