{
  SpelNodeImpl expr=eatLogicalOrExpression();
  if (moreTokens()) {
    Token t=peekToken();
    if (t.kind == TokenKind.ASSIGN) {
      if (expr == null) {
        expr=new NullLiteral(toPos(t.startPos - 1,t.endPos - 1));
      }
      nextToken();
      SpelNodeImpl assignedValue=eatLogicalOrExpression();
      return new Assign(toPos(t),expr,assignedValue);
    }
    if (t.kind == TokenKind.ELVIS) {
      if (expr == null) {
        expr=new NullLiteral(toPos(t.startPos - 1,t.endPos - 2));
      }
      nextToken();
      SpelNodeImpl valueIfNull=eatExpression();
      if (valueIfNull == null) {
        valueIfNull=new NullLiteral(toPos(t.startPos + 1,t.endPos + 1));
      }
      return new Elvis(toPos(t),expr,valueIfNull);
    }
    if (t.kind == TokenKind.QMARK) {
      if (expr == null) {
        expr=new NullLiteral(toPos(t.startPos - 1,t.endPos - 1));
      }
      nextToken();
      SpelNodeImpl ifTrueExprValue=eatExpression();
      eatToken(TokenKind.COLON);
      SpelNodeImpl ifFalseExprValue=eatExpression();
      return new Ternary(toPos(t),expr,ifTrueExprValue,ifFalseExprValue);
    }
  }
  return expr;
}
