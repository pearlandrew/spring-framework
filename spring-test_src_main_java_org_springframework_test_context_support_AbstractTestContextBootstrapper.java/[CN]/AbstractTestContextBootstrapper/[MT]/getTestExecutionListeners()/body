{
  Class<?> clazz=getBootstrapContext().getTestClass();
  Class<TestExecutionListeners> annotationType=TestExecutionListeners.class;
  List<Class<? extends TestExecutionListener>> classesList=new ArrayList<Class<? extends TestExecutionListener>>();
  boolean usingDefaults=false;
  AnnotationDescriptor<TestExecutionListeners> descriptor=MetaAnnotationUtils.findAnnotationDescriptor(clazz,annotationType);
  if (descriptor == null) {
    if (logger.isDebugEnabled()) {
      logger.debug(String.format("@TestExecutionListeners is not present for class [%s]: using defaults.",clazz.getName()));
    }
    usingDefaults=true;
    classesList.addAll(getDefaultTestExecutionListenerClasses());
  }
 else {
    while (descriptor != null) {
      Class<?> declaringClass=descriptor.getDeclaringClass();
      AnnotationAttributes annAttrs=descriptor.getAnnotationAttributes();
      if (logger.isTraceEnabled()) {
        logger.trace(String.format("Retrieved @TestExecutionListeners attributes [%s] for declaring class [%s].",annAttrs,declaringClass.getName()));
      }
      Class<? extends TestExecutionListener>[] valueListenerClasses=(Class<? extends TestExecutionListener>[])annAttrs.getClassArray("value");
      Class<? extends TestExecutionListener>[] listenerClasses=(Class<? extends TestExecutionListener>[])annAttrs.getClassArray("listeners");
      if (!ObjectUtils.isEmpty(valueListenerClasses) && !ObjectUtils.isEmpty(listenerClasses)) {
        throw new IllegalStateException(String.format("Class [%s] configured with @TestExecutionListeners' " + "'value' [%s] and 'listeners' [%s] attributes. Use one or the other, but not both.",declaringClass.getName(),ObjectUtils.nullSafeToString(valueListenerClasses),ObjectUtils.nullSafeToString(listenerClasses)));
      }
 else       if (!ObjectUtils.isEmpty(valueListenerClasses)) {
        listenerClasses=valueListenerClasses;
      }
      if (listenerClasses != null) {
        classesList.addAll(0,Arrays.<Class<? extends TestExecutionListener>>asList(listenerClasses));
      }
      descriptor=(annAttrs.getBoolean("inheritListeners") ? MetaAnnotationUtils.findAnnotationDescriptor(descriptor.getRootDeclaringClass().getSuperclass(),annotationType) : null);
    }
  }
  List<TestExecutionListener> listeners=instantiateListeners(classesList);
  if (usingDefaults) {
    AnnotationAwareOrderComparator.sort(listeners);
  }
  if (logger.isInfoEnabled()) {
    logger.info(String.format("Using TestExecutionListeners: %s",listeners));
  }
  return listeners;
}
