{
  Class<?> clazz=getBootstrapContext().getTestClass();
  Class<TestExecutionListeners> annotationType=TestExecutionListeners.class;
  List<Class<? extends TestExecutionListener>> classesList=new ArrayList<Class<? extends TestExecutionListener>>();
  boolean usingDefaults=false;
  AnnotationDescriptor<TestExecutionListeners> descriptor=MetaAnnotationUtils.findAnnotationDescriptor(clazz,annotationType);
  if (descriptor == null) {
    if (logger.isDebugEnabled()) {
      logger.debug(String.format("@TestExecutionListeners is not present for class [%s]: using defaults.",clazz.getName()));
    }
    usingDefaults=true;
    classesList.addAll(getDefaultTestExecutionListenerClasses());
  }
 else {
    while (descriptor != null) {
      Class<?> declaringClass=descriptor.getDeclaringClass();
      AnnotationAttributes annAttrs=descriptor.getAnnotationAttributes();
      if (logger.isTraceEnabled()) {
        logger.trace(String.format("Retrieved @TestExecutionListeners attributes [%s] for declaring class [%s].",annAttrs,declaringClass.getName()));
      }
      Class<? extends TestExecutionListener>[] listenerClasses=(Class<? extends TestExecutionListener>[])annAttrs.getClassArray("listeners");
      boolean inheritListeners=annAttrs.getBoolean("inheritListeners");
      AnnotationDescriptor<TestExecutionListeners> superDescriptor=MetaAnnotationUtils.findAnnotationDescriptor(descriptor.getRootDeclaringClass().getSuperclass(),annotationType);
      if ((!inheritListeners || superDescriptor == null) && (annAttrs.getEnum("mergeMode") == MergeMode.MERGE_WITH_DEFAULTS)) {
        if (logger.isDebugEnabled()) {
          logger.debug(String.format("Merging default listeners with listeners configured via @TestExecutionListeners for class [%s].",descriptor.getRootDeclaringClass().getName()));
        }
        usingDefaults=true;
        classesList.addAll(getDefaultTestExecutionListenerClasses());
      }
      classesList.addAll(0,Arrays.<Class<? extends TestExecutionListener>>asList(listenerClasses));
      descriptor=(inheritListeners ? superDescriptor : null);
    }
  }
  if (usingDefaults) {
    Set<Class<? extends TestExecutionListener>> classesSet=new HashSet<Class<? extends TestExecutionListener>>();
    classesSet.addAll(classesList);
    classesList.clear();
    classesList.addAll(classesSet);
  }
  List<TestExecutionListener> listeners=instantiateListeners(classesList);
  if (usingDefaults) {
    AnnotationAwareOrderComparator.sort(listeners);
  }
  if (logger.isInfoEnabled()) {
    logger.info(String.format("Using TestExecutionListeners: %s",listeners));
  }
  return listeners;
}
