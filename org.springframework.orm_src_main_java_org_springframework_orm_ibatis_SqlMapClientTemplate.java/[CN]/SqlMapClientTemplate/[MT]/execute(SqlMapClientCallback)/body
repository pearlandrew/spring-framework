{
  Assert.notNull(action,"Callback object must not be null");
  Assert.notNull(this.sqlMapClient,"No SqlMapClient specified");
  SqlMapSession session=this.sqlMapClient.openSession();
  if (logger.isDebugEnabled()) {
    logger.debug("Opened SqlMapSession [" + session + "] for iBATIS operation");
  }
  Connection ibatisCon=null;
  try {
    Connection springCon=null;
    DataSource dataSource=getDataSource();
    boolean transactionAware=(dataSource instanceof TransactionAwareDataSourceProxy);
    try {
      ibatisCon=session.getCurrentConnection();
      if (ibatisCon == null) {
        springCon=(transactionAware ? dataSource.getConnection() : DataSourceUtils.doGetConnection(dataSource));
        session.setUserConnection(springCon);
        if (logger.isDebugEnabled()) {
          logger.debug("Obtained JDBC Connection [" + springCon + "] for iBATIS operation");
        }
      }
 else {
        if (logger.isDebugEnabled()) {
          logger.debug("Reusing JDBC Connection [" + ibatisCon + "] for iBATIS operation");
        }
      }
    }
 catch (    SQLException ex) {
      throw new CannotGetJdbcConnectionException("Could not get JDBC Connection",ex);
    }
    try {
      return action.doInSqlMapClient(session);
    }
 catch (    SQLException ex) {
      throw getExceptionTranslator().translate("SqlMapClient operation",null,ex);
    }
 finally {
      try {
        if (springCon != null) {
          if (transactionAware) {
            springCon.close();
          }
 else {
            DataSourceUtils.doReleaseConnection(springCon,dataSource);
          }
        }
      }
 catch (      Throwable ex) {
        logger.debug("Could not close JDBC Connection",ex);
      }
    }
  }
  finally {
    if (ibatisCon == null) {
      session.close();
    }
  }
}
