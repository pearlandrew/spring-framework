{
  HttpServletRequest servletRequest=request.getNativeRequest(HttpServletRequest.class);
  RequestPart requestPart=parameter.getParameterAnnotation(RequestPart.class);
  boolean isRequired=((requestPart == null || requestPart.required()) && !parameter.isOptional());
  String name=getPartName(parameter,requestPart);
  parameter=parameter.nestedIfOptional();
  Object arg=null;
  Object mpArg=MultipartResolutionDelegate.resolveMultipartArgument(name,parameter,servletRequest);
  if (mpArg != MultipartResolutionDelegate.UNRESOLVABLE) {
    arg=mpArg;
  }
 else {
    try {
      HttpInputMessage inputMessage=new RequestPartServletServerHttpRequest(servletRequest,name);
      arg=readWithMessageConverters(inputMessage,parameter,parameter.getNestedGenericParameterType());
      WebDataBinder binder=binderFactory.createBinder(request,arg,name);
      if (arg != null) {
        validateIfApplicable(binder,parameter);
        if (binder.getBindingResult().hasErrors() && isBindExceptionRequired(binder,parameter)) {
          throw new MethodArgumentNotValidException(parameter,binder.getBindingResult());
        }
      }
      mavContainer.addAttribute(BindingResult.MODEL_KEY_PREFIX + name,binder.getBindingResult());
    }
 catch (    MissingServletRequestPartException ex) {
      if (isRequired) {
        throw ex;
      }
    }
catch (    MultipartException ex) {
      if (isRequired) {
        throw ex;
      }
    }
  }
  if (arg == null && isRequired) {
    if (!MultipartResolutionDelegate.isMultipartRequest(servletRequest)) {
      throw new MultipartException("Current request is not a multipart request");
    }
 else {
      throw new MissingServletRequestPartException(name);
    }
  }
  if (parameter.isOptional()) {
    arg=OptionalResolver.resolveValue(arg);
  }
  return arg;
}
