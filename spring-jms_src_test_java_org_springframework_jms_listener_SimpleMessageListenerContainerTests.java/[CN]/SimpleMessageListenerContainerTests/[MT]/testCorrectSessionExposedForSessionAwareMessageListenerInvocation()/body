{
  final SimpleMessageConsumer messageConsumer=new SimpleMessageConsumer();
  final Session session=mock(Session.class);
  given(session.createQueue(DESTINATION_NAME)).willReturn(QUEUE_DESTINATION);
  given(session.createConsumer(QUEUE_DESTINATION,null)).willReturn(messageConsumer);
  given(session.getTransacted()).willReturn(false);
  given(session.getAcknowledgeMode()).willReturn(Session.AUTO_ACKNOWLEDGE);
  Connection connection=mock(Connection.class);
  given(connection.createSession(this.container.isSessionTransacted(),this.container.getSessionAcknowledgeMode())).willReturn(session);
  final ConnectionFactory connectionFactory=mock(ConnectionFactory.class);
  given(connectionFactory.createConnection()).willReturn(connection);
  final Set<String> failure=new HashSet<String>(1);
  this.container.setConnectionFactory(connectionFactory);
  this.container.setDestinationName(DESTINATION_NAME);
  this.container.setMessageListener(new SessionAwareMessageListener<Message>(){
    @Override public void onMessage(    Message message,    Session sess){
      try {
        assertSame(sess,session);
      }
 catch (      Throwable ex) {
        failure.add("MessageListener execution failed: " + ex);
      }
    }
  }
);
  this.container.afterPropertiesSet();
  this.container.start();
  final Message message=mock(Message.class);
  messageConsumer.sendMessage(message);
  if (!failure.isEmpty()) {
    fail(failure.iterator().next().toString());
  }
  verify(connection).setExceptionListener(this.container);
  verify(connection).start();
}
