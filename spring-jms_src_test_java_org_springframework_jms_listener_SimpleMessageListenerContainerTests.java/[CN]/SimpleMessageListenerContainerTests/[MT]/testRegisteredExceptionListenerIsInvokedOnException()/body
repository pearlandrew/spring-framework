{
  final SimpleMessageConsumer messageConsumer=new SimpleMessageConsumer();
  Session session=mock(Session.class);
  given(session.createQueue(DESTINATION_NAME)).willReturn(QUEUE_DESTINATION);
  given(session.createConsumer(QUEUE_DESTINATION,null)).willReturn(messageConsumer);
  given(session.getTransacted()).willReturn(false);
  Connection connection=mock(Connection.class);
  given(connection.createSession(this.container.isSessionTransacted(),this.container.getSessionAcknowledgeMode())).willReturn(session);
  ConnectionFactory connectionFactory=mock(ConnectionFactory.class);
  given(connectionFactory.createConnection()).willReturn(connection);
  final JMSException theException=new JMSException(EXCEPTION_MESSAGE);
  this.container.setConnectionFactory(connectionFactory);
  this.container.setDestinationName(DESTINATION_NAME);
  this.container.setMessageListener(new SessionAwareMessageListener<Message>(){
    @Override public void onMessage(    Message message,    Session session) throws JMSException {
      throw theException;
    }
  }
);
  ExceptionListener exceptionListener=mock(ExceptionListener.class);
  this.container.setExceptionListener(exceptionListener);
  this.container.afterPropertiesSet();
  this.container.start();
  final Message message=mock(Message.class);
  messageConsumer.sendMessage(message);
  verify(connection).setExceptionListener(this.container);
  verify(connection).start();
  verify(exceptionListener).onException(theException);
}
