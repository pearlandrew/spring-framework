{
  MyCachingMap cache=new MyCachingMap();
  assertFalse(cache.containsKey("value key"));
  assertFalse(cache.containsValue("expensive value to cache"));
  Object value=cache.get("value key");
  assertTrue(cache.createCalled());
  assertEquals(value,"expensive value to cache");
  assertTrue(cache.containsKey("value key"));
  assertTrue(cache.containsValue("expensive value to cache"));
  assertFalse(cache.containsKey("value key 2"));
  value=cache.get("value key 2");
  assertTrue(cache.createCalled());
  assertEquals(value,"expensive value to cache");
  assertTrue(cache.containsKey("value key 2"));
  value=cache.get("value key");
  assertFalse(cache.createCalled());
  assertEquals(value,"expensive value to cache");
  cache.get("value key 2");
  assertFalse(cache.createCalled());
  assertEquals(value,"expensive value to cache");
  assertFalse(cache.containsKey(null));
  assertFalse(cache.containsValue(null));
  value=cache.get(null);
  assertTrue(cache.createCalled());
  assertNull(value);
  assertTrue(cache.containsKey(null));
  assertTrue(cache.containsValue(null));
  value=cache.get(null);
  assertFalse(cache.createCalled());
  assertNull(value);
  Set<String> keySet=cache.keySet();
  assertEquals(3,keySet.size());
  assertTrue(keySet.contains("value key"));
  assertTrue(keySet.contains("value key 2"));
  assertTrue(keySet.contains(null));
  Collection<String> values=cache.values();
  assertEquals(3,values.size());
  assertTrue(values.contains("expensive value to cache"));
  assertTrue(values.contains(null));
  Set<Map.Entry<String,String>> entrySet=cache.entrySet();
  assertEquals(3,entrySet.size());
  keySet=new HashSet<String>();
  values=new HashSet<String>();
  for (  Map.Entry<String,String> entry : entrySet) {
    keySet.add(entry.getKey());
    values.add(entry.getValue());
  }
  assertTrue(keySet.contains("value key"));
  assertTrue(keySet.contains("value key 2"));
  assertTrue(keySet.contains(null));
  assertEquals(2,values.size());
  assertTrue(values.contains("expensive value to cache"));
  assertTrue(values.contains(null));
}
