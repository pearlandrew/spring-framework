{
  if (!this.includeSynonyms) {
    logger.debug("Defaulting to no synonyms in table metadata lookup");
    super.initializeWithTableColumnMetaData(databaseMetaData,catalogName,schemaName,tableName);
    return;
  }
  Connection con=databaseMetaData.getConnection();
  NativeJdbcExtractor nativeJdbcExtractor=getNativeJdbcExtractor();
  if (nativeJdbcExtractor != null) {
    con=nativeJdbcExtractor.getNativeConnection(con);
  }
  boolean isOracleCon;
  try {
    Class<?> oracleConClass=getClass().getClassLoader().loadClass("oracle.jdbc.OracleConnection");
    isOracleCon=oracleConClass.isInstance(con);
  }
 catch (  ClassNotFoundException ex) {
    if (logger.isInfoEnabled()) {
      logger.info("Couldn't find Oracle JDBC API: " + ex);
    }
    isOracleCon=false;
  }
  if (!isOracleCon) {
    logger.warn("Unable to include synonyms in table metadata lookup. Connection used for " + "DatabaseMetaData is not recognized as an Oracle connection: " + con);
    super.initializeWithTableColumnMetaData(databaseMetaData,catalogName,schemaName,tableName);
    return;
  }
  logger.debug("Including synonyms in table metadata lookup");
  Method setIncludeSynonyms;
  Boolean originalValueForIncludeSynonyms;
  try {
    Method getIncludeSynonyms=con.getClass().getMethod("getIncludeSynonyms",(Class[])null);
    ReflectionUtils.makeAccessible(getIncludeSynonyms);
    originalValueForIncludeSynonyms=(Boolean)getIncludeSynonyms.invoke(con);
    setIncludeSynonyms=con.getClass().getMethod("setIncludeSynonyms",new Class<?>[]{boolean.class});
    ReflectionUtils.makeAccessible(setIncludeSynonyms);
    setIncludeSynonyms.invoke(con,Boolean.TRUE);
  }
 catch (  Exception ex) {
    throw new InvalidDataAccessApiUsageException("Couldn't prepare Oracle Connection",ex);
  }
  super.initializeWithTableColumnMetaData(databaseMetaData,catalogName,schemaName,tableName);
  try {
    setIncludeSynonyms.invoke(con,originalValueForIncludeSynonyms);
  }
 catch (  Exception ex) {
    throw new InvalidDataAccessApiUsageException("Couldn't reset Oracle Connection",ex);
  }
}
