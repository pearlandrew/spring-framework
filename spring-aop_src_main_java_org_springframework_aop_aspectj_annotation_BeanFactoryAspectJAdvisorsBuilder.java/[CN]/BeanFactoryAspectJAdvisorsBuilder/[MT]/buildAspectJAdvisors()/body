{
  List<String> aspectNames=null;
synchronized (this) {
    aspectNames=this.aspectBeanNames;
    if (aspectNames == null) {
      List<Advisor> advisors=new LinkedList<Advisor>();
      aspectNames=new LinkedList<String>();
      String[] beanNames=BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.beanFactory,Object.class,true,false);
      for (      String beanName : beanNames) {
        if (!isEligibleBean(beanName)) {
          continue;
        }
        Class beanType=this.beanFactory.getType(beanName);
        if (beanType == null) {
          continue;
        }
        if (this.advisorFactory.isAspect(beanType)) {
          aspectNames.add(beanName);
          AspectMetadata amd=new AspectMetadata(beanType,beanName);
          if (amd.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) {
            MetadataAwareAspectInstanceFactory factory=new BeanFactoryAspectInstanceFactory(this.beanFactory,beanName);
            List<Advisor> classAdvisors=this.advisorFactory.getAdvisors(factory);
            if (this.beanFactory.isSingleton(beanName)) {
              this.advisorsCache.put(beanName,classAdvisors);
            }
 else {
              this.aspectFactoryCache.put(beanName,factory);
            }
            advisors.addAll(classAdvisors);
          }
 else {
            if (this.beanFactory.isSingleton(beanName)) {
              throw new IllegalArgumentException("Bean with name '" + beanName + "' is a singleton, but aspect instantiation model is not singleton");
            }
            MetadataAwareAspectInstanceFactory factory=new PrototypeAspectInstanceFactory(this.beanFactory,beanName);
            this.aspectFactoryCache.put(beanName,factory);
            advisors.addAll(this.advisorFactory.getAdvisors(factory));
          }
        }
      }
      this.aspectBeanNames=aspectNames;
      return advisors;
    }
  }
  if (aspectNames.isEmpty()) {
    return Collections.EMPTY_LIST;
  }
  List<Advisor> advisors=new LinkedList<Advisor>();
  for (  String aspectName : aspectNames) {
    List<Advisor> cachedAdvisors=this.advisorsCache.get(aspectName);
    if (cachedAdvisors != null) {
      advisors.addAll(cachedAdvisors);
    }
 else {
      MetadataAwareAspectInstanceFactory factory=this.aspectFactoryCache.get(aspectName);
      advisors.addAll(this.advisorFactory.getAdvisors(factory));
    }
  }
  return advisors;
}
