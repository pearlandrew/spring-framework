{
  Class<?> targetClass=AopProxyUtils.ultimateTargetClass(target);
  if (targetClass == null && target != null) {
    targetClass=target.getClass();
  }
  final CacheDefinition cacheDef=getCacheDefinitionSource().getCacheDefinition(method,targetClass);
  Object retVal=null;
  if (cacheDef != null) {
    CacheOperationContext context=getOperationContext(cacheDef,method,args,targetClass);
    Collection<Cache<?,?>> caches=context.getCaches();
    if (context.hasConditionPassed()) {
      if (cacheDef instanceof CacheUpdateDefinition) {
        for (        Cache cache : caches) {
          Object key=context.generateKey();
          retVal=cache.get(key);
          if (retVal == null) {
            retVal=invocation.call();
            cache.put(key,(retVal == null ? NULL_RETURN : retVal));
          }
        }
      }
      if (cacheDef instanceof CacheInvalidateDefinition) {
        CacheInvalidateDefinition invalidateDef=(CacheInvalidateDefinition)cacheDef;
        retVal=invocation.call();
        for (        Cache cache : caches) {
          if (invalidateDef.isCacheWide()) {
            cache.clear();
          }
 else {
            Object key=context.generateKey();
            cache.remove(key);
          }
        }
      }
      return retVal;
    }
  }
  return invocation.call();
}
