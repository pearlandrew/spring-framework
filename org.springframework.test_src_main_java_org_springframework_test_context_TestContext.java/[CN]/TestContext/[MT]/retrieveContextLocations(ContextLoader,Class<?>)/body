{
  Assert.notNull(contextLoader,"ContextLoader must not be null");
  Assert.notNull(clazz,"Class must not be null");
  List<String> locationsList=new ArrayList<String>();
  Class<ContextConfiguration> annotationType=ContextConfiguration.class;
  Class<?> declaringClass=AnnotationUtils.findAnnotationDeclaringClass(annotationType,clazz);
  Assert.notNull(declaringClass,"Could not find an 'annotation declaring class' for annotation type [" + annotationType + "] and class ["+ clazz+ "]");
  while (declaringClass != null) {
    ContextConfiguration contextConfiguration=declaringClass.getAnnotation(annotationType);
    if (logger.isTraceEnabled()) {
      logger.trace("Retrieved @ContextConfiguration [" + contextConfiguration + "] for declaring class ["+ declaringClass+ "]");
    }
    String[] valueLocations=contextConfiguration.value();
    String[] locations=contextConfiguration.locations();
    if (!ObjectUtils.isEmpty(valueLocations) && !ObjectUtils.isEmpty(locations)) {
      String msg=String.format("Test class [%s] has been configured with @ContextConfiguration's 'value' [%s] and 'locations' [%s] attributes. Only one declaration of resource locations is permitted per @ContextConfiguration annotation.",declaringClass,ObjectUtils.nullSafeToString(valueLocations),ObjectUtils.nullSafeToString(locations));
      logger.error(msg);
      throw new IllegalStateException(msg);
    }
 else     if (!ObjectUtils.isEmpty(valueLocations)) {
      locations=valueLocations;
    }
    locations=contextLoader.processLocations(declaringClass,locations);
    locationsList.addAll(0,Arrays.<String>asList(locations));
    declaringClass=contextConfiguration.inheritLocations() ? AnnotationUtils.findAnnotationDeclaringClass(annotationType,declaringClass.getSuperclass()) : null;
  }
  return locationsList.toArray(new String[locationsList.size()]);
}
