{
  Assert.notNull(clazz,"Class must not be null");
  Assert.hasText(defaultContextLoaderClassName,"Default ContextLoader class name must not be null or empty");
  Class<ContextConfiguration> annotationType=ContextConfiguration.class;
  Class<?> declaringClass=AnnotationUtils.findAnnotationDeclaringClass(annotationType,clazz);
  Assert.notNull(declaringClass,"Could not find an 'annotation declaring class' for annotation type [" + annotationType + "] and class ["+ clazz+ "]");
  while (declaringClass != null) {
    ContextConfiguration contextConfiguration=declaringClass.getAnnotation(annotationType);
    if (logger.isTraceEnabled()) {
      logger.trace("Processing ContextLoader for @ContextConfiguration [" + contextConfiguration + "] and declaring class ["+ declaringClass+ "]");
    }
    Class<? extends ContextLoader> contextLoaderClass=contextConfiguration.loader();
    if (!ContextLoader.class.equals(contextLoaderClass)) {
      if (logger.isDebugEnabled()) {
        logger.debug("Found explicit ContextLoader [" + contextLoaderClass + "] for @ContextConfiguration ["+ contextConfiguration+ "] and declaring class ["+ declaringClass+ "]");
      }
      return contextLoaderClass;
    }
    declaringClass=AnnotationUtils.findAnnotationDeclaringClass(annotationType,declaringClass.getSuperclass());
  }
  try {
    ContextConfiguration contextConfiguration=clazz.getAnnotation(ContextConfiguration.class);
    if (logger.isTraceEnabled()) {
      logger.trace("Using default ContextLoader class [" + defaultContextLoaderClassName + "] for @ContextConfiguration ["+ contextConfiguration+ "] and class ["+ clazz+ "]");
    }
    return (Class<? extends ContextLoader>)getClass().getClassLoader().loadClass(defaultContextLoaderClassName);
  }
 catch (  ClassNotFoundException ex) {
    throw new IllegalStateException("Could not load default ContextLoader class [" + defaultContextLoaderClassName + "]. Specify @ContextConfiguration's 'loader' "+ "attribute or make the default loader class available.");
  }
}
