{
  Assert.notNull(objectMapper,"ObjectMapper must not be null");
  if (this.findModulesViaServiceLoader) {
    objectMapper.registerModules(ObjectMapper.findModules(this.moduleClassLoader));
  }
 else   if (this.findWellKnownModules) {
    registerWellKnownModulesIfAvailable(objectMapper);
  }
  if (this.modules != null) {
    for (    Module module : this.modules) {
      objectMapper.registerModule(module);
    }
  }
  if (this.moduleClasses != null) {
    for (    Class<? extends Module> module : this.moduleClasses) {
      objectMapper.registerModule(BeanUtils.instantiate(module));
    }
  }
  if (this.dateFormat != null) {
    objectMapper.setDateFormat(this.dateFormat);
  }
  if (this.locale != null) {
    objectMapper.setLocale(this.locale);
  }
  if (this.timeZone != null) {
    objectMapper.setTimeZone(this.timeZone);
  }
  if (this.annotationIntrospector != null) {
    objectMapper.setAnnotationIntrospector(this.annotationIntrospector);
  }
  if (this.serializationInclusion != null) {
    objectMapper.setSerializationInclusion(this.serializationInclusion);
  }
  if (!this.serializers.isEmpty() || !this.deserializers.isEmpty()) {
    SimpleModule module=new SimpleModule();
    addSerializers(module);
    addDeserializers(module);
    objectMapper.registerModule(module);
  }
  customizeDefaultFeatures(objectMapper);
  for (  Object feature : this.features.keySet()) {
    configureFeature(objectMapper,feature,this.features.get(feature));
  }
  if (this.propertyNamingStrategy != null) {
    objectMapper.setPropertyNamingStrategy(this.propertyNamingStrategy);
  }
  for (  Class<?> target : this.mixIns.keySet()) {
    objectMapper.addMixInAnnotations(target,this.mixIns.get(target));
  }
  if (this.handlerInstantiator != null) {
    objectMapper.setHandlerInstantiator(this.handlerInstantiator);
  }
  if (this.filters != null) {
    objectMapper.setFilters(this.filters);
  }
 else   if (this.applicationContext != null) {
    objectMapper.setHandlerInstantiator(new SpringHandlerInstantiator(this.applicationContext.getAutowireCapableBeanFactory()));
  }
}
