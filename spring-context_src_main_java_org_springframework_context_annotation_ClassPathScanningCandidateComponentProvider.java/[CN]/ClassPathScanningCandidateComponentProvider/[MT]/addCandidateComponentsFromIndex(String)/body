{
  Set<BeanDefinition> candidates=new LinkedHashSet<>();
  try {
    Set<String> types=new HashSet<>();
    for (    TypeFilter filter : this.includeFilters) {
      String stereotype=extractStereotype(filter);
      if (stereotype == null) {
        throw new IllegalArgumentException("Failed to extract stereotype from " + filter);
      }
      types.addAll(this.componentsIndex.getCandidateTypes(basePackage,stereotype));
    }
    boolean traceEnabled=logger.isTraceEnabled();
    boolean debugEnabled=logger.isDebugEnabled();
    for (    String type : types) {
      MetadataReader metadataReader=this.metadataReaderFactory.getMetadataReader(type);
      if (isCandidateComponent(metadataReader)) {
        AnnotatedGenericBeanDefinition sbd=new AnnotatedGenericBeanDefinition(metadataReader.getAnnotationMetadata());
        if (isCandidateComponent(sbd)) {
          if (debugEnabled) {
            logger.debug("Using candidate component class from index: " + type);
          }
          candidates.add(sbd);
        }
 else {
          if (debugEnabled) {
            logger.debug("Ignored because not a concrete top-level class: " + type);
          }
        }
      }
 else {
        if (traceEnabled) {
          logger.trace("Ignored because matching an exclude filter: " + type);
        }
      }
    }
  }
 catch (  IOException ex) {
    throw new BeanDefinitionStoreException("I/O failure during classpath scanning",ex);
  }
  return candidates;
}
