{
  SpelExpressionParser parser=new SpelExpressionParser();
  Expression ex=parser.parseExpression("hello ${'world'}",DEFAULT_TEMPLATE_PARSER_CONTEXT);
  checkString("hello world",ex.getValue());
  checkString("hello world",ex.getValue(String.class));
  checkString("hello world",ex.getValue((Object)null,String.class));
  checkString("hello world",ex.getValue(new Rooty()));
  checkString("hello world",ex.getValue(new Rooty(),String.class));
  EvaluationContext ctx=new StandardEvaluationContext();
  checkString("hello world",ex.getValue(ctx));
  checkString("hello world",ex.getValue(ctx,String.class));
  checkString("hello world",ex.getValue(ctx,null,String.class));
  checkString("hello world",ex.getValue(ctx,new Rooty()));
  checkString("hello world",ex.getValue(ctx,new Rooty(),String.class));
  checkString("hello world",ex.getValue(ctx,new Rooty(),String.class));
  Assert.assertEquals("hello ${'world'}",ex.getExpressionString());
  Assert.assertFalse(ex.isWritable(new StandardEvaluationContext()));
  Assert.assertFalse(ex.isWritable(new Rooty()));
  Assert.assertFalse(ex.isWritable(new StandardEvaluationContext(),new Rooty()));
  Assert.assertEquals(String.class,ex.getValueType());
  Assert.assertEquals(String.class,ex.getValueType(ctx));
  Assert.assertEquals(String.class,ex.getValueTypeDescriptor().getType());
  Assert.assertEquals(String.class,ex.getValueTypeDescriptor(ctx).getType());
  Assert.assertEquals(String.class,ex.getValueType(new Rooty()));
  Assert.assertEquals(String.class,ex.getValueType(ctx,new Rooty()));
  Assert.assertEquals(String.class,ex.getValueTypeDescriptor(new Rooty()).getType());
  Assert.assertEquals(String.class,ex.getValueTypeDescriptor(ctx,new Rooty()).getType());
  try {
    ex.setValue(ctx,null);
    Assert.fail();
  }
 catch (  EvaluationException ee) {
  }
  try {
    ex.setValue((Object)null,null);
    Assert.fail();
  }
 catch (  EvaluationException ee) {
  }
  try {
    ex.setValue(ctx,null,null);
    Assert.fail();
  }
 catch (  EvaluationException ee) {
  }
}
