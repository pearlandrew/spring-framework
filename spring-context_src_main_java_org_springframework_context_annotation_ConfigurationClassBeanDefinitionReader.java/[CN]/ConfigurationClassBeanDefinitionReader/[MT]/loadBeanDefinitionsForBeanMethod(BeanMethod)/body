{
  ConfigurationClass configClass=beanMethod.getConfigurationClass();
  MethodMetadata metadata=beanMethod.getMetadata();
  String methodName=metadata.getMethodName();
  if (this.conditionEvaluator.shouldSkip(metadata,ConfigurationPhase.REGISTER_BEAN)) {
    configClass.skippedBeanMethods.add(methodName);
    return;
  }
  if (configClass.skippedBeanMethods.contains(methodName)) {
    return;
  }
  AnnotationAttributes bean=AnnotationConfigUtils.attributesFor(metadata,Bean.class);
  List<String> names=new ArrayList<String>(Arrays.asList(bean.getStringArray("name")));
  String beanName=(names.size() > 0 ? names.remove(0) : methodName);
  for (  String alias : names) {
    this.registry.registerAlias(beanName,alias);
  }
  if (isOverriddenByExistingDefinition(beanMethod,beanName)) {
    return;
  }
  ConfigurationClassBeanDefinition beanDef=new ConfigurationClassBeanDefinition(configClass,metadata);
  beanDef.setResource(configClass.getResource());
  beanDef.setSource(this.sourceExtractor.extractSource(metadata,configClass.getResource()));
  if (metadata.isStatic()) {
    beanDef.setBeanClassName(configClass.getMetadata().getClassName());
    beanDef.setFactoryMethodName(methodName);
  }
 else {
    beanDef.setFactoryBeanName(configClass.getBeanName());
    beanDef.setUniqueFactoryMethodName(methodName);
  }
  beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);
  beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE,Boolean.TRUE);
  AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef,metadata);
  Autowire autowire=bean.getEnum("autowire");
  if (autowire.isAutowire()) {
    beanDef.setAutowireMode(autowire.value());
  }
  String initMethodName=bean.getString("initMethod");
  if (StringUtils.hasText(initMethodName)) {
    beanDef.setInitMethodName(initMethodName);
  }
  String destroyMethodName=bean.getString("destroyMethod");
  if (destroyMethodName != null) {
    beanDef.setDestroyMethodName(destroyMethodName);
  }
  ScopedProxyMode proxyMode=ScopedProxyMode.NO;
  AnnotationAttributes scope=AnnotationConfigUtils.attributesFor(metadata,Scope.class);
  if (scope != null) {
    beanDef.setScope(scope.getString("value"));
    proxyMode=scope.getEnum("proxyMode");
    if (proxyMode == ScopedProxyMode.DEFAULT) {
      proxyMode=ScopedProxyMode.NO;
    }
  }
  BeanDefinition beanDefToRegister=beanDef;
  if (proxyMode != ScopedProxyMode.NO) {
    BeanDefinitionHolder proxyDef=ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef,beanName),this.registry,proxyMode == ScopedProxyMode.TARGET_CLASS);
    beanDefToRegister=new ConfigurationClassBeanDefinition((RootBeanDefinition)proxyDef.getBeanDefinition(),configClass,metadata);
  }
  if (logger.isDebugEnabled()) {
    logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",configClass.getMetadata().getClassName(),beanName));
  }
  this.registry.registerBeanDefinition(beanName,beanDefToRegister);
}
