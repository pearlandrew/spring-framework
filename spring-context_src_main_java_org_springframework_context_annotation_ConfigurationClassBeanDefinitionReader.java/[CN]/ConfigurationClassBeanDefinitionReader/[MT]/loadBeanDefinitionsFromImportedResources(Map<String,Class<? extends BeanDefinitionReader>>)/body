{
  Map<Class<?>,BeanDefinitionReader> readerInstanceCache=new HashMap<>();
  for (  Map.Entry<String,Class<? extends BeanDefinitionReader>> entry : importedResources.entrySet()) {
    String resource=entry.getKey();
    Class<? extends BeanDefinitionReader> readerClass=entry.getValue();
    if (BeanDefinitionReader.class == readerClass) {
      if (StringUtils.endsWithIgnoreCase(resource,".groovy")) {
        readerClass=GroovyBeanDefinitionReader.class;
      }
 else {
        readerClass=XmlBeanDefinitionReader.class;
      }
    }
    BeanDefinitionReader reader=readerInstanceCache.get(readerClass);
    if (reader == null) {
      try {
        reader=readerClass.getConstructor(BeanDefinitionRegistry.class).newInstance(this.registry);
        if (reader instanceof AbstractBeanDefinitionReader) {
          AbstractBeanDefinitionReader abdr=((AbstractBeanDefinitionReader)reader);
          abdr.setResourceLoader(this.resourceLoader);
          abdr.setEnvironment(this.environment);
        }
        readerInstanceCache.put(readerClass,reader);
      }
 catch (      Exception ex) {
        throw new IllegalStateException("Could not instantiate BeanDefinitionReader class [" + readerClass.getName() + "]");
      }
    }
    reader.loadBeanDefinitions(resource);
  }
}
