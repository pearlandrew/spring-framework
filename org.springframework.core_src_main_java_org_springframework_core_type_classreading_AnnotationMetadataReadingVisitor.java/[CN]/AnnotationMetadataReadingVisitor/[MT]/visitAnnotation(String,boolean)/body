{
  final String className=Type.getType(desc).getClassName();
  final Map<String,Object> attributes=new LinkedHashMap<String,Object>();
  return new EmptyVisitor(){
    @Override public void visit(    String name,    Object value){
      Object valueToUse=value;
      if (value instanceof Type) {
        try {
          valueToUse=classLoader.loadClass(((Type)value).getClassName());
        }
 catch (        ClassNotFoundException ex) {
        }
      }
      attributes.put(name,valueToUse);
    }
    @Override public void visitEnum(    String name,    String desc,    String value){
      Object valueToUse=value;
      try {
        Class<?> enumType=classLoader.loadClass(Type.getType(desc).getClassName());
        Field enumConstant=ReflectionUtils.findField(enumType,value);
        if (enumConstant != null) {
          valueToUse=enumConstant.get(null);
        }
      }
 catch (      Exception ex) {
      }
      attributes.put(name,valueToUse);
    }
    @Override public void visitEnd(){
      try {
        Class<?> annotationClass=classLoader.loadClass(className);
        Method[] annotationAttributes=annotationClass.getMethods();
        for (        Method annotationAttribute : annotationAttributes) {
          String attributeName=annotationAttribute.getName();
          Object defaultValue=annotationAttribute.getDefaultValue();
          if (defaultValue != null && !attributes.containsKey(attributeName)) {
            attributes.put(attributeName,defaultValue);
          }
        }
        Annotation[] metaAnnotations=annotationClass.getAnnotations();
        Set<String> metaAnnotationTypeNames=new HashSet<String>();
        for (        Annotation metaAnnotation : metaAnnotations) {
          metaAnnotationTypeNames.add(metaAnnotation.annotationType().getName());
        }
        metaAnnotationMap.put(className,metaAnnotationTypeNames);
      }
 catch (      ClassNotFoundException ex) {
      }
      attributesMap.put(className,attributes);
    }
  }
;
}
