{
  StringBuffer buf=new StringBuffer(strVal);
  int startIndex=strVal.indexOf(this.placeholderPrefix);
  while (startIndex != -1) {
    int endIndex=findPlaceholderEndIndex(buf,startIndex);
    if (endIndex != -1) {
      String placeholder=buf.substring(startIndex + this.placeholderPrefix.length(),endIndex);
      if (!visitedPlaceholders.add(placeholder)) {
        throw new BeanDefinitionStoreException("Circular placeholder reference '" + placeholder + "' in property definitions");
      }
      placeholder=parseStringValue(placeholder,props,visitedPlaceholders);
      String propVal=resolvePlaceholder(placeholder,props,this.systemPropertiesMode);
      if (propVal != null) {
        propVal=parseStringValue(propVal,props,visitedPlaceholders);
        buf.replace(startIndex,endIndex + this.placeholderSuffix.length(),propVal);
        if (logger.isTraceEnabled()) {
          logger.trace("Resolved placeholder '" + placeholder + "'");
        }
        startIndex=buf.indexOf(this.placeholderPrefix,startIndex + propVal.length());
      }
 else       if (this.ignoreUnresolvablePlaceholders) {
        startIndex=buf.indexOf(this.placeholderPrefix,endIndex + this.placeholderSuffix.length());
      }
 else {
        throw new BeanDefinitionStoreException("Could not resolve placeholder '" + placeholder + "'");
      }
      visitedPlaceholders.remove(placeholder);
    }
 else {
      startIndex=-1;
    }
  }
  return buf.toString();
}
