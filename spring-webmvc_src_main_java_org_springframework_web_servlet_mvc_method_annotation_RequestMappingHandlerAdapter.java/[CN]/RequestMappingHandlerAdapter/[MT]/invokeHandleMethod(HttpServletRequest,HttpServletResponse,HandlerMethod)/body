{
  ServletWebRequest webRequest=new ServletWebRequest(request,response);
  WebDataBinderFactory binderFactory=getDataBinderFactory(handlerMethod);
  ModelFactory modelFactory=getModelFactory(handlerMethod,binderFactory);
  ServletInvocableHandlerMethod requestMappingMethod=createRequestMappingMethod(handlerMethod,binderFactory);
  ModelAndViewContainer mavContainer=new ModelAndViewContainer();
  mavContainer.addAllAttributes(RequestContextUtils.getInputFlashMap(request));
  modelFactory.initModel(webRequest,mavContainer,requestMappingMethod);
  mavContainer.setIgnoreDefaultModelOnRedirect(this.ignoreDefaultModelOnRedirect);
  AsyncWebRequest asyncWebRequest=createAsyncWebRequest(request,response);
  asyncWebRequest.setTimeout(this.asyncRequestTimeout);
  final WebAsyncManager asyncManager=AsyncWebUtils.getAsyncManager(request);
  asyncManager.setTaskExecutor(this.taskExecutor);
  asyncManager.setAsyncWebRequest(asyncWebRequest);
  if (asyncManager.hasConcurrentResult()) {
    Object result=asyncManager.getConcurrentResult();
    mavContainer=(ModelAndViewContainer)asyncManager.getConcurrentResultContext()[0];
    asyncManager.resetConcurrentResult();
    if (logger.isDebugEnabled()) {
      logger.debug("Found concurrent result value [" + result + "]");
    }
    requestMappingMethod=requestMappingMethod.wrapConcurrentProcessingResult(result);
  }
  requestMappingMethod.invokeAndHandle(webRequest,mavContainer);
  if (asyncManager.isConcurrentHandlingStarted()) {
    return null;
  }
  return getModelAndView(mavContainer,modelFactory,webRequest);
}
