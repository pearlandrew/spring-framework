{
  Class<? extends Annotation> type=annotation.annotationType();
  RootBeanDefinition bd=(RootBeanDefinition)bdHolder.getBeanDefinition();
  AutowireCandidateQualifier qualifier=bd.getQualifier(type.getName());
  if (qualifier == null) {
    qualifier=bd.getQualifier(ClassUtils.getShortName(type));
  }
  if (qualifier == null) {
    Annotation targetAnnotation=null;
    if (bd.getResolvedFactoryMethod() != null) {
      targetAnnotation=bd.getResolvedFactoryMethod().getAnnotation(type);
    }
    if (targetAnnotation == null) {
      if (this.beanFactory != null) {
        Class<?> beanType=this.beanFactory.getType(bdHolder.getBeanName());
        if (beanType != null) {
          targetAnnotation=ClassUtils.getUserClass(beanType).getAnnotation(type);
        }
      }
      if (targetAnnotation == null && bd.hasBeanClass()) {
        targetAnnotation=ClassUtils.getUserClass(bd.getBeanClass()).getAnnotation(type);
      }
    }
    if (targetAnnotation != null && targetAnnotation.equals(annotation)) {
      return true;
    }
  }
  Map<String,Object> attributes=AnnotationUtils.getAnnotationAttributes(annotation);
  if (attributes.isEmpty() && qualifier == null) {
    return false;
  }
  for (  Map.Entry<String,Object> entry : attributes.entrySet()) {
    String attributeName=entry.getKey();
    Object expectedValue=entry.getValue();
    Object actualValue=null;
    if (qualifier != null) {
      actualValue=qualifier.getAttribute(attributeName);
    }
    if (actualValue == null) {
      actualValue=bd.getAttribute(attributeName);
    }
    if (actualValue == null && attributeName.equals(AutowireCandidateQualifier.VALUE_KEY) && expectedValue instanceof String && bdHolder.matchesName((String)expectedValue)) {
      continue;
    }
    if (actualValue == null && qualifier != null) {
      actualValue=AnnotationUtils.getDefaultValue(annotation,attributeName);
    }
    if (actualValue != null) {
      actualValue=typeConverter.convertIfNecessary(actualValue,expectedValue.getClass());
    }
    if (!expectedValue.equals(actualValue)) {
      return false;
    }
  }
  return true;
}
