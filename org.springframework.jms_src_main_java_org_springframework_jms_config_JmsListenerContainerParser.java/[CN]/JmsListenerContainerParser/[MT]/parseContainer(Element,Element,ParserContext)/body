{
  RootBeanDefinition containerDef=new RootBeanDefinition();
  containerDef.setSource(parserContext.extractSource(containerEle));
  parseListenerConfiguration(listenerEle,parserContext,containerDef);
  parseContainerConfiguration(containerEle,parserContext,containerDef);
  String containerType=containerEle.getAttribute(CONTAINER_TYPE_ATTRIBUTE);
  String containerClass=containerEle.getAttribute(CONTAINER_CLASS_ATTRIBUTE);
  if (!"".equals(containerClass)) {
    containerDef.setBeanClassName(containerClass);
  }
 else   if ("".equals(containerType) || "default".equals(containerType)) {
    containerDef.setBeanClassName("org.springframework.jms.listener.DefaultMessageListenerContainer");
  }
 else   if ("default102".equals(containerType)) {
    containerDef.setBeanClassName("org.springframework.jms.listener.DefaultMessageListenerContainer102");
  }
 else   if ("simple".equals(containerType)) {
    containerDef.setBeanClassName("org.springframework.jms.listener.SimpleMessageListenerContainer");
  }
 else   if ("simple102".equals(containerType)) {
    containerDef.setBeanClassName("org.springframework.jms.listener.SimpleMessageListenerContainer102");
  }
 else {
    parserContext.getReaderContext().error("Invalid 'container-type' attribute: only \"default(102)\" and \"simple(102)\" supported.",containerEle);
  }
  String connectionFactoryBeanName="connectionFactory";
  if (containerEle.hasAttribute(CONNECTION_FACTORY_ATTRIBUTE)) {
    connectionFactoryBeanName=containerEle.getAttribute(CONNECTION_FACTORY_ATTRIBUTE);
    if (!StringUtils.hasText(connectionFactoryBeanName)) {
      parserContext.getReaderContext().error("Listener container 'connection-factory' attribute contains empty value.",containerEle);
    }
  }
  if (StringUtils.hasText(connectionFactoryBeanName)) {
    containerDef.getPropertyValues().add("connectionFactory",new RuntimeBeanReference(connectionFactoryBeanName));
  }
  String taskExecutorBeanName=containerEle.getAttribute(TASK_EXECUTOR_ATTRIBUTE);
  if (StringUtils.hasText(taskExecutorBeanName)) {
    containerDef.getPropertyValues().add("taskExecutor",new RuntimeBeanReference(taskExecutorBeanName));
  }
  String errorHandlerBeanName=containerEle.getAttribute(ERROR_HANDLER_ATTRIBUTE);
  if (StringUtils.hasText(errorHandlerBeanName)) {
    containerDef.getPropertyValues().add("errorHandler",new RuntimeBeanReference(errorHandlerBeanName));
  }
  String destinationResolverBeanName=containerEle.getAttribute(DESTINATION_RESOLVER_ATTRIBUTE);
  if (StringUtils.hasText(destinationResolverBeanName)) {
    containerDef.getPropertyValues().add("destinationResolver",new RuntimeBeanReference(destinationResolverBeanName));
  }
  String cache=containerEle.getAttribute(CACHE_ATTRIBUTE);
  if (StringUtils.hasText(cache)) {
    if (containerType.startsWith("simple")) {
      if (!("auto".equals(cache) || "consumer".equals(cache))) {
        parserContext.getReaderContext().warning("'cache' attribute not actively supported for listener container of type \"simple\". " + "Effective runtime behavior will be equivalent to \"consumer\" / \"auto\".",containerEle);
      }
    }
 else {
      containerDef.getPropertyValues().add("cacheLevelName","CACHE_" + cache.toUpperCase());
    }
  }
  Integer acknowledgeMode=parseAcknowledgeMode(containerEle,parserContext);
  if (acknowledgeMode != null) {
    if (acknowledgeMode == Session.SESSION_TRANSACTED) {
      containerDef.getPropertyValues().add("sessionTransacted",Boolean.TRUE);
    }
 else {
      containerDef.getPropertyValues().add("sessionAcknowledgeMode",acknowledgeMode);
    }
  }
  String transactionManagerBeanName=containerEle.getAttribute(TRANSACTION_MANAGER_ATTRIBUTE);
  if (StringUtils.hasText(transactionManagerBeanName)) {
    if (containerType.startsWith("simple")) {
      parserContext.getReaderContext().error("'transaction-manager' attribute not supported for listener container of type \"simple\".",containerEle);
    }
 else {
      containerDef.getPropertyValues().add("transactionManager",new RuntimeBeanReference(transactionManagerBeanName));
    }
  }
  String concurrency=containerEle.getAttribute(CONCURRENCY_ATTRIBUTE);
  if (StringUtils.hasText(concurrency)) {
    containerDef.getPropertyValues().add("concurrency",concurrency);
  }
  String prefetch=containerEle.getAttribute(PREFETCH_ATTRIBUTE);
  if (StringUtils.hasText(prefetch)) {
    if (containerType.startsWith("default")) {
      containerDef.getPropertyValues().add("maxMessagesPerTask",new Integer(prefetch));
    }
  }
  String receiveTimeout=containerEle.getAttribute(RECEIVE_TIMEOUT_ATTRIBUTE);
  if (StringUtils.hasText(receiveTimeout)) {
    if (containerType.startsWith("default")) {
      containerDef.getPropertyValues().add("receiveTimeout",new Integer(receiveTimeout));
    }
  }
  String phase=containerEle.getAttribute(PHASE_ATTRIBUTE);
  if (StringUtils.hasText(phase)) {
    containerDef.getPropertyValues().add("phase",phase);
  }
  return containerDef;
}
