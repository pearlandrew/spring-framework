{
  MethodInvocation invocation=null;
  Object oldProxy=null;
  boolean setProxyContext=false;
  Class targetClass=null;
  Object target=null;
  try {
    Object retVal=null;
    if (this.advised.exposeProxy) {
      oldProxy=AopContext.setCurrentProxy(proxy);
      setProxyContext=true;
    }
    target=getTarget();
    if (target != null) {
      targetClass=target.getClass();
    }
    List chain=this.advised.getInterceptorsAndDynamicInterceptionAdvice(method,targetClass);
    if (chain.isEmpty() && Modifier.isPublic(method.getModifiers())) {
      retVal=methodProxy.invoke(target,args);
    }
 else {
      invocation=new CglibMethodInvocation(proxy,target,method,args,targetClass,chain,methodProxy);
      retVal=invocation.proceed();
    }
    retVal=massageReturnTypeIfNecessary(proxy,target,method,retVal);
    return retVal;
  }
  finally {
    if (target != null) {
      releaseTarget(target);
    }
    if (setProxyContext) {
      AopContext.setCurrentProxy(oldProxy);
    }
  }
}
