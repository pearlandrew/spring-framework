{
  Field ruleField=null;
  for (  Field field : testClass.getFields()) {
    if (ReflectionUtils.isPublicStaticFinal(field) && SpringClassRule.class.isAssignableFrom(field.getType())) {
      ruleField=field;
      break;
    }
  }
  if (ruleField == null) {
    throw new IllegalStateException(String.format("Failed to find 'public static final SpringClassRule' field in test class [%s]. " + "Consult the Javadoc for SpringClassRule for details.",testClass.getName()));
  }
  if (!ruleField.isAnnotationPresent(ClassRule.class)) {
    throw new IllegalStateException(String.format("SpringClassRule field [%s] must be annotated with JUnit's @ClassRule annotation. " + "Consult the Javadoc for SpringClassRule for details.",ruleField));
  }
  return (SpringClassRule)ReflectionUtils.getField(ruleField,null);
}
