{
  if (returnValue == null) {
    mavContainer.setRequestHandled(true);
    return;
  }
  final DeferredResult<Object> deferredResult=new DeferredResult<Object>();
  WebAsyncUtils.getAsyncManager(webRequest).startDeferredResultProcessing(deferredResult,mavContainer);
  @SuppressWarnings("unchecked") CompletionStage<Object> future=(CompletionStage<Object>)returnValue;
  future.thenAccept(new Consumer<Object>(){
    @Override public void accept(    Object result){
      deferredResult.setResult(result);
    }
  }
);
  future.exceptionally(new Function<Throwable,Object>(){
    @Override public Object apply(    Throwable ex){
      deferredResult.setErrorResult(ex);
      return null;
    }
  }
);
}
