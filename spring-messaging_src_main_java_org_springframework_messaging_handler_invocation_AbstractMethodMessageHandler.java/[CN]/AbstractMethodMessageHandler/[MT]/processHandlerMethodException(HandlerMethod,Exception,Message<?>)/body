{
  if (logger.isDebugEnabled()) {
    logger.debug("Searching methods to handle " + ex.getClass().getSimpleName());
  }
  Class<?> beanType=handlerMethod.getBeanType();
  AbstractExceptionHandlerMethodResolver resolver=this.exceptionHandlerCache.get(beanType);
  if (resolver == null) {
    resolver=createExceptionHandlerMethodResolverFor(beanType);
    this.exceptionHandlerCache.put(beanType,resolver);
  }
  Method method=resolver.resolveMethod(ex);
  if (method == null) {
    logger.error("Unhandled exception",ex);
    return;
  }
  InvocableHandlerMethod invocable=new InvocableHandlerMethod(handlerMethod.getBean(),method);
  invocable.setMessageMethodArgumentResolvers(this.argumentResolvers);
  if (logger.isDebugEnabled()) {
    logger.debug("Invoking " + invocable.getShortLogMessage());
  }
  try {
    Object returnValue=invocable.invoke(message,ex);
    MethodParameter returnType=invocable.getReturnType();
    if (void.class.equals(returnType.getParameterType())) {
      return;
    }
    this.returnValueHandlers.handleReturnValue(returnValue,returnType,message);
  }
 catch (  Throwable t) {
    logger.error("Error while handling exception",t);
    return;
  }
}
