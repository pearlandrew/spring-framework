{
  JpaTransactionObject txObject=(JpaTransactionObject)transaction;
  if (txObject.hasConnectionHolder() && !txObject.getConnectionHolder().isSynchronizedWithTransaction()) {
    throw new IllegalTransactionStateException("Pre-bound JDBC Connection found! JpaTransactionManager does not support " + "running within DataSourceTransactionManager if told to manage the DataSource itself. " + "It is recommended to use a single JpaTransactionManager for all transactions "+ "on a single DataSource, no matter whether JPA or JDBC access.");
  }
  try {
    if (txObject.getEntityManagerHolder() == null || txObject.getEntityManagerHolder().isSynchronizedWithTransaction()) {
      EntityManager newEm=createEntityManagerForTransaction();
      if (logger.isDebugEnabled()) {
        logger.debug("Opened new EntityManager [" + newEm + "] for JPA transaction");
      }
      txObject.setEntityManagerHolder(new EntityManagerHolder(newEm),true);
    }
    EntityManager em=txObject.getEntityManagerHolder().getEntityManager();
    final int timeoutToUse=determineTimeout(definition);
    Object transactionData=getJpaDialect().beginTransaction(em,new DelegatingTransactionDefinition(definition){
      @Override public int getTimeout(){
        return timeoutToUse;
      }
    }
);
    txObject.setTransactionData(transactionData);
    if (timeoutToUse != TransactionDefinition.TIMEOUT_DEFAULT) {
      txObject.getEntityManagerHolder().setTimeoutInSeconds(timeoutToUse);
    }
    if (getDataSource() != null) {
      ConnectionHandle conHandle=getJpaDialect().getJdbcConnection(em,definition.isReadOnly());
      if (conHandle != null) {
        ConnectionHolder conHolder=new ConnectionHolder(conHandle);
        if (timeoutToUse != TransactionDefinition.TIMEOUT_DEFAULT) {
          conHolder.setTimeoutInSeconds(timeoutToUse);
        }
        if (logger.isDebugEnabled()) {
          logger.debug("Exposing JPA transaction as JDBC transaction [" + conHolder.getConnectionHandle() + "]");
        }
        TransactionSynchronizationManager.bindResource(getDataSource(),conHolder);
        txObject.setConnectionHolder(conHolder);
      }
 else {
        if (logger.isDebugEnabled()) {
          logger.debug("Not exposing JPA transaction [" + em + "] as JDBC transaction because "+ "JpaDialect ["+ getJpaDialect()+ "] does not support JDBC Connection retrieval");
        }
      }
    }
    if (txObject.isNewEntityManagerHolder()) {
      TransactionSynchronizationManager.bindResource(getEntityManagerFactory(),txObject.getEntityManagerHolder());
    }
    txObject.getEntityManagerHolder().setSynchronizedWithTransaction(true);
  }
 catch (  TransactionException ex) {
    closeEntityManagerAfterFailedBegin(txObject);
    throw ex;
  }
catch (  Throwable ex) {
    closeEntityManagerAfterFailedBegin(txObject);
    throw new CannotCreateTransactionException("Could not open JPA EntityManager for transaction",ex);
  }
}
