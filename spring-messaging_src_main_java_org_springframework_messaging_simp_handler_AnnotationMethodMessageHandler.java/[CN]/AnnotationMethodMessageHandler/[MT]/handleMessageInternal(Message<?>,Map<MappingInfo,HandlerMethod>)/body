{
  if (logger.isTraceEnabled()) {
    logger.trace("Message " + message);
  }
  SimpMessageHeaderAccessor headers=SimpMessageHeaderAccessor.wrap(message);
  String lookupPath=getLookupPath(headers.getDestination());
  if (lookupPath == null) {
    if (logger.isTraceEnabled()) {
      logger.trace("Ignoring message with destination " + headers.getDestination());
    }
    return;
  }
  HandlerMethod match=getHandlerMethod(lookupPath,handlerMethods);
  if (match == null) {
    if (logger.isTraceEnabled()) {
      logger.trace("No matching method, lookup path " + lookupPath);
    }
    return;
  }
  HandlerMethod handlerMethod=match.createWithResolvedBean();
  InvocableHandlerMethod invocableHandlerMethod=new InvocableHandlerMethod(handlerMethod);
  invocableHandlerMethod.setMessageMethodArgumentResolvers(this.argumentResolvers);
  try {
    headers.setDestination(lookupPath);
    message=MessageBuilder.withPayloadAndHeaders(message.getPayload(),headers).build();
    Object returnValue=invocableHandlerMethod.invoke(message);
    MethodParameter returnType=handlerMethod.getReturnType();
    if (void.class.equals(returnType.getParameterType())) {
      return;
    }
    this.returnValueHandlers.handleReturnValue(returnValue,returnType,message);
  }
 catch (  Exception ex) {
    invokeExceptionHandler(message,handlerMethod,ex);
  }
catch (  Throwable ex) {
    ex.printStackTrace();
  }
}
