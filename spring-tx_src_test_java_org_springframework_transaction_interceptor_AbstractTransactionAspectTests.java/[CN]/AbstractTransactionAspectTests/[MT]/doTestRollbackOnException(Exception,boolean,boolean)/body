{
  TransactionAttribute txatt=new DefaultTransactionAttribute(){
    @Override public boolean rollbackOn(    Throwable t){
      assertTrue(t == ex);
      return shouldRollback;
    }
  }
;
  Method m=exceptionalMethod;
  MapTransactionAttributeSource tas=new MapTransactionAttributeSource();
  tas.register(m,txatt);
  TransactionStatus status=mock(TransactionStatus.class);
  PlatformTransactionManager ptm=mock(PlatformTransactionManager.class);
  given(ptm.getTransaction(txatt)).willReturn(status);
  TransactionSystemException tex=new TransactionSystemException("system exception");
  if (rollbackException) {
    if (shouldRollback) {
      willThrow(tex).given(ptm).rollback(status);
    }
 else {
      willThrow(tex).given(ptm).commit(status);
    }
  }
  TestBean tb=new TestBean();
  ITestBean itb=(ITestBean)advised(tb,ptm,tas);
  try {
    itb.exceptional(ex);
    fail("Should have thrown exception");
  }
 catch (  Throwable t) {
    if (rollbackException) {
      assertEquals("Caught wrong exception",tex,t);
    }
 else {
      assertEquals("Caught wrong exception",ex,t);
    }
  }
  if (!rollbackException) {
    if (shouldRollback) {
      verify(ptm).rollback(status);
    }
 else {
      verify(ptm).commit(status);
    }
  }
}
