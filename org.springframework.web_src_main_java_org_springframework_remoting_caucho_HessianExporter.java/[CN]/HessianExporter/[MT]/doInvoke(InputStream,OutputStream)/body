{
  InputStream isToUse=inputStream;
  OutputStream osToUse=outputStream;
  if (this.debugLogger != null && this.debugLogger.isDebugEnabled()) {
    PrintWriter debugWriter=new PrintWriter(new CommonsLogWriter(this.debugLogger));
    isToUse=new HessianDebugInputStream(inputStream,debugWriter);
    osToUse=new HessianDebugOutputStream(outputStream,debugWriter);
  }
  int code=isToUse.read();
  int major;
  int minor;
  AbstractHessianInput in;
  AbstractHessianOutput out;
  if (code == 'H') {
    major=isToUse.read();
    minor=isToUse.read();
    if (major != 0x02) {
      throw new IOException("Version " + major + "."+ minor+ " is not understood");
    }
    in=new Hessian2Input(isToUse);
    out=new Hessian2Output(osToUse);
    in.readCall();
  }
 else   if (code == 'c') {
    major=isToUse.read();
    minor=isToUse.read();
    in=new HessianInput(isToUse);
    if (major >= 2) {
      out=new Hessian2Output(osToUse);
    }
 else {
      out=new HessianOutput(osToUse);
    }
  }
 else {
    throw new IOException("Expected 'H' (Hessian 2.0) or 'c' (Hessian 1.0) in hessian input at " + code);
  }
  if (this.serializerFactory != null) {
    in.setSerializerFactory(this.serializerFactory);
    out.setSerializerFactory(this.serializerFactory);
  }
  try {
    this.skeleton.invoke(in,out);
  }
  finally {
    try {
      in.close();
      isToUse.close();
    }
 catch (    IOException ex) {
    }
    try {
      out.close();
      osToUse.close();
    }
 catch (    IOException ex) {
    }
  }
}
