{
  String lookupMode=request.getPortletMode().toString();
  Map<RequestMappingInfo,Method> targetHandlerMethods=new LinkedHashMap<RequestMappingInfo,Method>();
  for (  Method handlerMethod : getHandlerMethods()) {
    RequestMapping mapping=AnnotationUtils.findAnnotation(handlerMethod,RequestMapping.class);
    RequestMappingInfo mappingInfo=new RequestMappingInfo();
    mappingInfo.modes=mapping.value();
    mappingInfo.params=mapping.params();
    mappingInfo.action=isActionMethod(handlerMethod);
    mappingInfo.render=isRenderMethod(handlerMethod);
    boolean match=false;
    if (mappingInfo.modes.length > 0) {
      for (      String mappedMode : mappingInfo.modes) {
        if (mappedMode.equalsIgnoreCase(lookupMode)) {
          if (checkParameters(request,response,mappingInfo)) {
            match=true;
          }
 else {
            break;
          }
        }
      }
    }
 else {
      match=checkParameters(request,response,mappingInfo);
    }
    if (match) {
      Method oldMappedMethod=targetHandlerMethods.put(mappingInfo,handlerMethod);
      if (oldMappedMethod != null && oldMappedMethod != handlerMethod) {
        throw new IllegalStateException("Ambiguous handler methods mapped for portlet mode '" + lookupMode + "': {"+ oldMappedMethod+ ", "+ handlerMethod+ "}. If you intend to handle the same mode in multiple methods, then factor "+ "them out into a dedicated handler class with that mode mapped at the type level!");
      }
    }
  }
  if (!targetHandlerMethods.isEmpty()) {
    if (targetHandlerMethods.size() == 1) {
      return targetHandlerMethods.values().iterator().next();
    }
 else {
      RequestMappingInfo bestMappingMatch=null;
      for (      RequestMappingInfo mapping : targetHandlerMethods.keySet()) {
        if (bestMappingMatch == null) {
          bestMappingMatch=mapping;
        }
 else {
          if ((bestMappingMatch.modes.length == 0 && mapping.modes.length > 0) || bestMappingMatch.params.length < mapping.params.length) {
            bestMappingMatch=mapping;
          }
        }
      }
      return targetHandlerMethods.get(bestMappingMatch);
    }
  }
 else {
    throw new UnavailableException("No matching handler method found for portlet request: mode '" + request.getPortletMode() + "', type '"+ (response instanceof ActionResponse ? "action" : "render")+ "', parameters "+ StylerUtils.style(request.getParameterMap()));
  }
}
