{
  if (returnValue instanceof ModelAndView) {
    ModelAndView mav=(ModelAndView)returnValue;
    mav.getModelMap().mergeAttributes(implicitModel);
    return mav;
  }
 else   if (returnValue instanceof org.springframework.web.servlet.ModelAndView) {
    org.springframework.web.servlet.ModelAndView smav=(org.springframework.web.servlet.ModelAndView)returnValue;
    ModelAndView mav=(smav.isReference() ? new ModelAndView(smav.getViewName(),smav.getModelMap()) : new ModelAndView(smav.getView(),smav.getModelMap()));
    mav.getModelMap().mergeAttributes(implicitModel);
    return mav;
  }
 else   if (returnValue instanceof Model) {
    return new ModelAndView().addAllObjects(implicitModel).addAllObjects(((Model)returnValue).asMap());
  }
 else   if (returnValue instanceof View) {
    return new ModelAndView(returnValue).addAllObjects(implicitModel);
  }
 else   if (handlerMethod.isAnnotationPresent(ModelAttribute.class)) {
    addReturnValueAsModelAttribute(handlerMethod,handlerType,returnValue,implicitModel);
    return new ModelAndView().addAllObjects(implicitModel);
  }
 else   if (returnValue instanceof Map) {
    return new ModelAndView().addAllObjects(implicitModel).addAllObjects((Map)returnValue);
  }
 else   if (returnValue instanceof String) {
    return new ModelAndView((String)returnValue).addAllObjects(implicitModel);
  }
 else   if (returnValue == null) {
    return null;
  }
 else   if (!BeanUtils.isSimpleProperty(returnValue.getClass())) {
    addReturnValueAsModelAttribute(handlerMethod,handlerType,returnValue,implicitModel);
    return new ModelAndView().addAllObjects(implicitModel);
  }
 else {
    throw new IllegalArgumentException("Invalid handler method return value: " + returnValue);
  }
}
