{
  PortletRequest request=(PortletRequest)webRequest.getNativeRequest();
  PortletResponse response=(PortletResponse)webRequest.getNativeResponse();
  if (PortletRequest.class.isAssignableFrom(parameterType)) {
    return request;
  }
 else   if (PortletResponse.class.isAssignableFrom(parameterType)) {
    return response;
  }
 else   if (PortletSession.class.isAssignableFrom(parameterType)) {
    return request.getPortletSession();
  }
 else   if (PortletPreferences.class.isAssignableFrom(parameterType)) {
    return request.getPreferences();
  }
 else   if (PortletMode.class.isAssignableFrom(parameterType)) {
    return request.getPortletMode();
  }
 else   if (WindowState.class.isAssignableFrom(parameterType)) {
    return request.getWindowState();
  }
 else   if (PortalContext.class.isAssignableFrom(parameterType)) {
    return request.getPortalContext();
  }
 else   if (Principal.class.isAssignableFrom(parameterType)) {
    return request.getUserPrincipal();
  }
 else   if (Locale.class.equals(parameterType)) {
    return request.getLocale();
  }
 else   if (InputStream.class.isAssignableFrom(parameterType)) {
    if (!(request instanceof ActionRequest)) {
      throw new IllegalStateException("InputStream can only get obtained for ActionRequest");
    }
    return ((ActionRequest)request).getPortletInputStream();
  }
 else   if (Reader.class.isAssignableFrom(parameterType)) {
    if (!(request instanceof ActionRequest)) {
      throw new IllegalStateException("Reader can only get obtained for ActionRequest");
    }
    return ((ActionRequest)request).getReader();
  }
 else   if (OutputStream.class.isAssignableFrom(parameterType)) {
    if (!(response instanceof RenderResponse)) {
      throw new IllegalStateException("OutputStream can only get obtained for RenderResponse");
    }
    return ((RenderResponse)response).getPortletOutputStream();
  }
 else   if (Writer.class.isAssignableFrom(parameterType)) {
    if (!(response instanceof RenderResponse)) {
      throw new IllegalStateException("Writer can only get obtained for RenderResponse");
    }
    return ((RenderResponse)response).getWriter();
  }
  return super.resolveStandardArgument(parameterType,webRequest);
}
