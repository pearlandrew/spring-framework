{
  TypeFactory typeFactory=this.mapper.getTypeFactory();
  JavaType javaType=typeFactory.constructType(type.getType());
  MethodParameter returnType=(type.getSource() instanceof MethodParameter ? (MethodParameter)type.getSource() : null);
  if (type != null && value != null && type.isAssignableFrom(value.getClass())) {
    javaType=getJavaType(type.getType(),null);
  }
  ObjectWriter writer;
  if (returnType != null && returnType.getMethodAnnotation(JsonView.class) != null) {
    JsonView annotation=returnType.getMethodAnnotation(JsonView.class);
    Class<?>[] classes=annotation.value();
    if (classes.length != 1) {
      throw new IllegalArgumentException("@JsonView only supported for response body advice with exactly 1 class argument: " + returnType);
    }
    writer=this.mapper.writerWithView(classes[0]);
  }
 else {
    writer=this.mapper.writer();
  }
  if (javaType != null && javaType.isContainerType()) {
    writer=writer.forType(javaType);
  }
  DataBuffer buffer=bufferFactory.allocateBuffer();
  OutputStream outputStream=buffer.asOutputStream();
  try {
    writer.writeValue(outputStream,value);
  }
 catch (  IOException e) {
    throw new CodecException("Error while writing the data",e);
  }
  return buffer;
}
