{
  MockControl dsControl=MockControl.createControl(DataSource.class);
  DataSource ds=(DataSource)dsControl.getMock();
  MockControl conControl=MockControl.createControl(Connection.class);
  Connection con=(Connection)conControl.getMock();
  MockControl stmtControl=MockControl.createControl(Statement.class);
  Statement stmt=(Statement)stmtControl.getMock();
  MockControl rsControl=MockControl.createControl(ResultSet.class);
  ResultSet rs=(ResultSet)rsControl.getMock();
  ds.getConnection();
  dsControl.setReturnValue(con,2);
  con.createStatement();
  conControl.setReturnValue(stmt,2);
  stmt.executeQuery("select myseq.nextval from dual");
  stmtControl.setReturnValue(rs,2);
  rs.next();
  rsControl.setReturnValue(true,2);
  rs.getLong(1);
  rsControl.setReturnValue(10);
  rs.getLong(1);
  rsControl.setReturnValue(12);
  rs.close();
  rsControl.setVoidCallable(2);
  stmt.close();
  stmtControl.setVoidCallable(2);
  con.close();
  conControl.setVoidCallable(2);
  dsControl.replay();
  conControl.replay();
  stmtControl.replay();
  rsControl.replay();
  OracleSequenceMaxValueIncrementer incrementer=new OracleSequenceMaxValueIncrementer();
  incrementer.setDataSource(ds);
  incrementer.setIncrementerName("myseq");
  incrementer.setPaddingLength(2);
  incrementer.afterPropertiesSet();
  assertEquals(10,incrementer.nextLongValue());
  assertEquals("12",incrementer.nextStringValue());
  dsControl.verify();
  conControl.verify();
  stmtControl.verify();
  rsControl.verify();
}
