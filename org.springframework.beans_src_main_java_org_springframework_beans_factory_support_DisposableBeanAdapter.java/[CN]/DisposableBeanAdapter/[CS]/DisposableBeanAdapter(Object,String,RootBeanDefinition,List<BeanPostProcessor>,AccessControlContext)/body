{
  Assert.notNull(bean,"Bean must not be null");
  this.bean=bean;
  this.beanName=beanName;
  this.invokeDisposableBean=(this.bean instanceof DisposableBean && !beanDefinition.isExternallyManagedDestroyMethod("destroy"));
  this.nonPublicAccessAllowed=beanDefinition.isNonPublicAccessAllowed();
  this.acc=acc;
  final String destroyMethodName=beanDefinition.getDestroyMethodName();
  if (destroyMethodName != null && !(this.invokeDisposableBean && "destroy".equals(destroyMethodName)) && !beanDefinition.isExternallyManagedDestroyMethod(destroyMethodName)) {
    this.destroyMethodName=destroyMethodName;
    try {
      if (System.getSecurityManager() != null) {
        AccessController.doPrivileged(new PrivilegedAction<Object>(){
          public Object run(){
            destroyMethod=(nonPublicAccessAllowed ? BeanUtils.findMethodWithMinimalParameters(bean.getClass(),destroyMethodName) : BeanUtils.findMethodWithMinimalParameters(bean.getClass().getMethods(),destroyMethodName));
            return null;
          }
        }
);
      }
 else {
        this.destroyMethod=(this.nonPublicAccessAllowed ? BeanUtils.findMethodWithMinimalParameters(bean.getClass(),destroyMethodName) : BeanUtils.findMethodWithMinimalParameters(bean.getClass().getMethods(),destroyMethodName));
      }
    }
 catch (    IllegalArgumentException ex) {
      throw new BeanDefinitionValidationException("Couldn't find a unique destroy method on bean with name '" + this.beanName + ": "+ ex.getMessage());
    }
    if (this.destroyMethod == null) {
      if (beanDefinition.isEnforceDestroyMethod()) {
        throw new BeanDefinitionValidationException("Couldn't find a destroy method named '" + destroyMethodName + "' on bean with name '"+ beanName+ "'");
      }
    }
 else {
      Class[] paramTypes=this.destroyMethod.getParameterTypes();
      if (paramTypes.length > 1) {
        throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '"+ beanName+ "' has more than one parameter - not supported as destroy method");
      }
 else       if (paramTypes.length == 1 && !paramTypes[0].equals(boolean.class)) {
        throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '"+ beanName+ "' has a non-boolean parameter - not supported as destroy method");
      }
    }
  }
  this.beanPostProcessors=filterPostProcessors(postProcessors);
}
