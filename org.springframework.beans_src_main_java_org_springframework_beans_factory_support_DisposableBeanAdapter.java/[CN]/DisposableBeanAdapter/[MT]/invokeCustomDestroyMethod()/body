{
  try {
    Method destroyMethod=BeanUtils.findMethodWithMinimalParameters(this.bean.getClass(),this.destroyMethodName);
    if (destroyMethod == null) {
      if (this.enforceDestroyMethod) {
        logger.warn("Couldn't find a destroy method named '" + this.destroyMethodName + "' on bean with name '"+ this.beanName+ "'");
      }
    }
 else {
      Class[] paramTypes=destroyMethod.getParameterTypes();
      if (paramTypes.length > 1) {
        logger.error("Method '" + this.destroyMethodName + "' of bean '"+ this.beanName+ "' has more than one parameter - not supported as destroy method");
      }
 else       if (paramTypes.length == 1 && !paramTypes[0].equals(boolean.class)) {
        logger.error("Method '" + this.destroyMethodName + "' of bean '"+ this.beanName+ "' has a non-boolean parameter - not supported as destroy method");
      }
 else {
        Object[] args=new Object[paramTypes.length];
        if (paramTypes.length == 1) {
          args[0]=Boolean.TRUE;
        }
        if (logger.isDebugEnabled()) {
          logger.debug("Invoking destroy method '" + this.destroyMethodName + "' on bean with name '"+ this.beanName+ "'");
        }
        ReflectionUtils.makeAccessible(destroyMethod);
        try {
          destroyMethod.invoke(this.bean,args);
        }
 catch (        InvocationTargetException ex) {
          String msg="Invocation of destroy method '" + this.destroyMethodName + "' failed on bean with name '"+ this.beanName+ "'";
          if (logger.isDebugEnabled()) {
            logger.warn(msg,ex.getTargetException());
          }
 else {
            logger.warn(msg + ": " + ex.getTargetException());
          }
        }
catch (        Throwable ex) {
          logger.error("Couldn't invoke destroy method '" + this.destroyMethodName + "' on bean with name '"+ this.beanName+ "'",ex);
        }
      }
    }
  }
 catch (  IllegalArgumentException ex) {
    logger.error("Couldn't find a unique destroy method on bean with name '" + this.beanName + ": "+ ex.getMessage());
  }
}
