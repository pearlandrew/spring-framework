{
  Class<?>[] paramTypes=destroyMethod.getParameterTypes();
  final Object[] args=new Object[paramTypes.length];
  if (paramTypes.length == 1) {
    args[0]=Boolean.TRUE;
  }
  if (logger.isDebugEnabled()) {
    logger.debug("Invoking destroy method '" + this.destroyMethodName + "' on bean with name '"+ this.beanName+ "'");
  }
  try {
    if (System.getSecurityManager() != null) {
      AccessController.doPrivileged(new PrivilegedAction<Object>(){
        public Object run(){
          ReflectionUtils.makeAccessible(destroyMethod);
          return null;
        }
      }
);
      try {
        AccessController.doPrivileged(new PrivilegedExceptionAction<Object>(){
          public Object run() throws Exception {
            destroyMethod.invoke(bean,args);
            return null;
          }
        }
,acc);
      }
 catch (      PrivilegedActionException pax) {
        throw (InvocationTargetException)pax.getException();
      }
    }
 else {
      ReflectionUtils.makeAccessible(destroyMethod);
      destroyMethod.invoke(bean,args);
    }
  }
 catch (  InvocationTargetException ex) {
    String msg="Invocation of destroy method '" + this.destroyMethodName + "' failed on bean with name '"+ this.beanName+ "'";
    if (logger.isDebugEnabled()) {
      logger.warn(msg,ex.getTargetException());
    }
 else {
      logger.warn(msg + ": " + ex.getTargetException());
    }
  }
catch (  Throwable ex) {
    logger.error("Couldn't invoke destroy method '" + this.destroyMethodName + "' on bean with name '"+ this.beanName+ "'",ex);
  }
}
