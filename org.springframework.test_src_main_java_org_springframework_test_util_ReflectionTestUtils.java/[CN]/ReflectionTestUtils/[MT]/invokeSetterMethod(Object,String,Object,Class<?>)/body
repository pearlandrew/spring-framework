{
  Assert.notNull(target,"Target object must not be null");
  Assert.notNull(name,"Method name must not be empty");
  Class<?>[] paramTypes=(type != null ? new Class<?>[]{type} : null);
  String setterMethodName=name;
  if (!name.startsWith(SETTER_PREFIX)) {
    setterMethodName=SETTER_PREFIX + StringUtils.capitalize(name);
  }
  Method method=ReflectionUtils.findMethod(target.getClass(),setterMethodName,paramTypes);
  if (method == null && !setterMethodName.equals(name)) {
    setterMethodName=name;
    method=ReflectionUtils.findMethod(target.getClass(),setterMethodName,paramTypes);
  }
  if (method == null) {
    throw new IllegalArgumentException("Could not find setter method [" + setterMethodName + "] on target ["+ target+ "] with parameter type ["+ type+ "]");
  }
  if (logger.isDebugEnabled()) {
    logger.debug("Invoking setter method [" + setterMethodName + "] on target ["+ target+ "]");
  }
  ReflectionUtils.makeAccessible(method);
  ReflectionUtils.invokeMethod(method,target,new Object[]{value});
}
