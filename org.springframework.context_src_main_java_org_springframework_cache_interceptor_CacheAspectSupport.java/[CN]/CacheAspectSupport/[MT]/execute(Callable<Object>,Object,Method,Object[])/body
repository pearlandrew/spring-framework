{
  Class<?> targetClass=AopProxyUtils.ultimateTargetClass(target);
  if (targetClass == null && target != null) {
    targetClass=target.getClass();
  }
  boolean log=logger.isTraceEnabled();
  final CacheDefinition cacheDef=getCacheDefinitionSource().getCacheDefinition(method,targetClass);
  Object retVal=null;
  if (cacheDef != null) {
    CacheOperationContext context=getOperationContext(cacheDef,method,args,target,targetClass);
    Collection<Cache<?,?>> caches=context.getCaches();
    if (context.hasConditionPassed()) {
      if (cacheDef instanceof CacheUpdateDefinition) {
        Object key=context.generateKey();
        if (log) {
          logger.trace("Computed cache key " + key + " for definition "+ cacheDef);
        }
        if (key == null) {
          throw new IllegalArgumentException("Null key returned for cache definition (maybe you are using named params on classes without debug info?) " + cacheDef);
        }
        if (caches.size() == 1) {
          Cache cache=caches.iterator().next();
          retVal=cache.get(key);
          if (cache.containsKey(key)) {
            if (log) {
              logger.trace("Key " + key + " found in cache, returning value "+ retVal);
            }
            return retVal;
          }
 else {
            if (log) {
              logger.trace("Key " + key + " NOT found in cache, invoking target method for caching "+ method);
            }
            retVal=invocation.call();
            cache.put(key,retVal);
          }
        }
 else {
          boolean eagerGet=caches.size() <= 3;
          boolean cacheHit=false;
          for (Iterator<Cache<?,?>> iterator=caches.iterator(); iterator.hasNext() && !cacheHit; ) {
            Cache cache=iterator.next();
            if (eagerGet) {
              retVal=cache.get(key);
            }
            if (cache.containsKey(key)) {
              if (eagerGet) {
                cacheHit=true;
              }
 else {
                retVal=cache.get(key);
                cacheHit=cache.containsKey(key);
              }
            }
          }
          if (!cacheHit) {
            if (log) {
              logger.trace("Key " + key + " NOT found in cache(s), invoking cached target method  "+ method);
            }
            retVal=invocation.call();
          }
 else {
            if (log) {
              logger.trace("Key " + key + " found in cache, returning value "+ retVal);
            }
          }
          for (          Cache cache : caches) {
            cache.putIfAbsent(key,retVal);
          }
        }
      }
      if (cacheDef instanceof CacheInvalidateDefinition) {
        CacheInvalidateDefinition invalidateDef=(CacheInvalidateDefinition)cacheDef;
        retVal=invocation.call();
        Object key=null;
        for (        Cache cache : caches) {
          if (invalidateDef.isCacheWide()) {
            cache.clear();
            if (log) {
              logger.trace("Invalidating entire cache for definition " + cacheDef + " on method "+ method);
            }
          }
 else {
            if (key == null) {
              key=context.generateKey();
            }
            if (log) {
              logger.trace("Invalidating cache key " + key + " for definition "+ cacheDef+ " on method "+ method);
            }
            cache.remove(key);
          }
        }
      }
      return retVal;
    }
 else {
      if (log) {
        logger.trace("Cache condition failed on method " + method + " for definition "+ cacheDef);
      }
    }
  }
  return invocation.call();
}
