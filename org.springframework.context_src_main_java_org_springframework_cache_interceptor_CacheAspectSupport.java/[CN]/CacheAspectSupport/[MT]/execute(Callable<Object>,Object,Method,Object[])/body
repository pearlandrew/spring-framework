{
  if (!this.initialized) {
    return invocation.call();
  }
  boolean log=logger.isTraceEnabled();
  Class<?> targetClass=AopProxyUtils.ultimateTargetClass(target);
  if (targetClass == null && target != null) {
    targetClass=target.getClass();
  }
  final CacheOperation cacheOp=getCacheOperationSource().getCacheOperation(method,targetClass);
  Object retVal=null;
  if (cacheOp != null) {
    CacheOperationContext context=getOperationContext(cacheOp,method,args,target,targetClass);
    Collection<Cache> caches=context.getCaches();
    if (context.hasConditionPassed()) {
      if (cacheOp instanceof CacheUpdateOperation) {
        Object key=context.generateKey();
        if (log) {
          logger.trace("Computed cache key " + key + " for definition "+ cacheOp);
        }
        if (key == null) {
          throw new IllegalArgumentException("Null key returned for cache definition (maybe you are using named params on classes without debug info?) " + cacheOp);
        }
        boolean cacheHit=false;
        for (Iterator<Cache> iterator=caches.iterator(); iterator.hasNext() && !cacheHit; ) {
          Cache cache=iterator.next();
          Cache.ValueWrapper wrapper=cache.get(key);
          if (wrapper != null) {
            cacheHit=true;
            retVal=wrapper.get();
          }
        }
        if (!cacheHit) {
          if (log) {
            logger.trace("Key " + key + " NOT found in cache(s), invoking cached target method  "+ method);
          }
          retVal=invocation.call();
          for (          Cache cache : caches) {
            cache.put(key,retVal);
          }
        }
 else {
          if (log) {
            logger.trace("Key " + key + " found in cache, returning value "+ retVal);
          }
        }
      }
      if (cacheOp instanceof CacheEvictOperation) {
        CacheEvictOperation evictOp=(CacheEvictOperation)cacheOp;
        retVal=invocation.call();
        Object key=null;
        for (        Cache cache : caches) {
          if (evictOp.isCacheWide()) {
            cache.clear();
            if (log) {
              logger.trace("Invalidating entire cache for definition " + cacheOp + " on method "+ method);
            }
          }
 else {
            if (key == null) {
              key=context.generateKey();
            }
            if (log) {
              logger.trace("Invalidating cache key " + key + " for definition "+ cacheOp+ " on method "+ method);
            }
            cache.evict(key);
          }
        }
      }
      return retVal;
    }
 else {
      if (log) {
        logger.trace("Cache condition failed on method " + method + " for definition "+ cacheOp);
      }
    }
  }
  return invocation.call();
}
