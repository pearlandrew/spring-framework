{
  SpelNodeImpl leftOp=getLeftOperand();
  SpelNodeImpl rightOp=getRightOperand();
  if (rightOp == null) {
    Object operandOne=leftOp.getValueInternal(state).getValue();
    if (operandOne instanceof Number) {
      if (operandOne instanceof Double) {
        this.exitTypeDescriptor="D";
      }
 else       if (operandOne instanceof Float) {
        this.exitTypeDescriptor="F";
      }
 else       if (operandOne instanceof Long) {
        this.exitTypeDescriptor="J";
      }
 else       if (operandOne instanceof Integer) {
        this.exitTypeDescriptor="I";
      }
      return new TypedValue(operandOne);
    }
    return state.operate(Operation.ADD,operandOne,null);
  }
  TypedValue operandOneValue=leftOp.getValueInternal(state);
  Object leftOperand=operandOneValue.getValue();
  TypedValue operandTwoValue=rightOp.getValueInternal(state);
  Object rightOperand=operandTwoValue.getValue();
  if (leftOperand instanceof Number && rightOperand instanceof Number) {
    Number leftNumber=(Number)leftOperand;
    Number rightNumber=(Number)rightOperand;
    if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) {
      BigDecimal leftBigDecimal=NumberUtils.convertNumberToTargetClass(leftNumber,BigDecimal.class);
      BigDecimal rightBigDecimal=NumberUtils.convertNumberToTargetClass(rightNumber,BigDecimal.class);
      return new TypedValue(leftBigDecimal.add(rightBigDecimal));
    }
 else     if (leftNumber instanceof Double || rightNumber instanceof Double) {
      if (leftNumber.getClass() == rightNumber.getClass()) {
        this.exitTypeDescriptor="D";
      }
      return new TypedValue(leftNumber.doubleValue() + rightNumber.doubleValue());
    }
 else     if (leftNumber instanceof Float || rightNumber instanceof Float) {
      if (leftNumber.getClass() == rightNumber.getClass()) {
        this.exitTypeDescriptor="F";
      }
      return new TypedValue(leftNumber.floatValue() + rightNumber.floatValue());
    }
 else     if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) {
      BigInteger leftBigInteger=NumberUtils.convertNumberToTargetClass(leftNumber,BigInteger.class);
      BigInteger rightBigInteger=NumberUtils.convertNumberToTargetClass(rightNumber,BigInteger.class);
      return new TypedValue(leftBigInteger.add(rightBigInteger));
    }
 else     if (leftNumber instanceof Long || rightNumber instanceof Long) {
      if (leftNumber.getClass() == rightNumber.getClass()) {
        this.exitTypeDescriptor="J";
      }
      return new TypedValue(leftNumber.longValue() + rightNumber.longValue());
    }
 else     if (CodeFlow.isIntegerForNumericOp(leftNumber) || CodeFlow.isIntegerForNumericOp(rightNumber)) {
      if (leftNumber instanceof Integer && rightNumber instanceof Integer) {
        this.exitTypeDescriptor="I";
      }
      return new TypedValue(leftNumber.intValue() + rightNumber.intValue());
    }
 else {
      return new TypedValue(leftNumber.doubleValue() + rightNumber.doubleValue());
    }
  }
  if (leftOperand instanceof String && rightOperand instanceof String) {
    this.exitTypeDescriptor="Ljava/lang/String";
    return new TypedValue((String)leftOperand + rightOperand);
  }
  if (leftOperand instanceof String) {
    return new TypedValue(leftOperand + (rightOperand == null ? "null" : convertTypedValueToString(operandTwoValue,state)));
  }
  if (rightOperand instanceof String) {
    return new TypedValue((leftOperand == null ? "null" : convertTypedValueToString(operandOneValue,state)) + rightOperand);
  }
  return state.operate(Operation.ADD,leftOperand,rightOperand);
}
