{
  SpelNodeImpl leftOp=getLeftOperand();
  SpelNodeImpl rightOp=getRightOperand();
  if (rightOp == null) {
    Object operandOne=leftOp.getValueInternal(state).getValue();
    if (operandOne instanceof Number) {
      if (operandOne instanceof Double || operandOne instanceof Long || operandOne instanceof BigDecimal) {
        if (operandOne instanceof Double || operandOne instanceof Long) {
          this.exitTypeDescriptor=(operandOne instanceof Double) ? "D" : "J";
        }
        return new TypedValue(operandOne);
      }
      if (operandOne instanceof Float) {
        this.exitTypeDescriptor="F";
        return new TypedValue(((Number)operandOne).floatValue());
      }
      this.exitTypeDescriptor="I";
      return new TypedValue(((Number)operandOne).intValue());
    }
    return state.operate(Operation.ADD,operandOne,null);
  }
  final TypedValue operandOneValue=leftOp.getValueInternal(state);
  final Object leftOperand=operandOneValue.getValue();
  final TypedValue operandTwoValue=rightOp.getValueInternal(state);
  final Object rightOperand=operandTwoValue.getValue();
  if (leftOperand instanceof Number && rightOperand instanceof Number) {
    Number leftNumber=(Number)leftOperand;
    Number rightNumber=(Number)rightOperand;
    if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) {
      BigDecimal leftBigDecimal=NumberUtils.convertNumberToTargetClass(leftNumber,BigDecimal.class);
      BigDecimal rightBigDecimal=NumberUtils.convertNumberToTargetClass(rightNumber,BigDecimal.class);
      return new TypedValue(leftBigDecimal.add(rightBigDecimal));
    }
    if (leftNumber instanceof Double || rightNumber instanceof Double) {
      if (leftNumber instanceof Double && rightNumber instanceof Double) {
        this.exitTypeDescriptor="D";
      }
      return new TypedValue(leftNumber.doubleValue() + rightNumber.doubleValue());
    }
    if (leftNumber instanceof Float || rightNumber instanceof Float) {
      if (leftNumber instanceof Float && rightNumber instanceof Float) {
        this.exitTypeDescriptor="F";
      }
      return new TypedValue(leftNumber.floatValue() + rightNumber.floatValue());
    }
    if (leftNumber instanceof Long || rightNumber instanceof Long) {
      if (leftNumber instanceof Long && rightNumber instanceof Long) {
        this.exitTypeDescriptor="J";
      }
      return new TypedValue(leftNumber.longValue() + rightNumber.longValue());
    }
    this.exitTypeDescriptor="I";
    return new TypedValue(leftNumber.intValue() + rightNumber.intValue());
  }
  if (leftOperand instanceof String && rightOperand instanceof String) {
    return new TypedValue(new StringBuilder((String)leftOperand).append((String)rightOperand).toString());
  }
  if (leftOperand instanceof String) {
    StringBuilder result=new StringBuilder((String)leftOperand);
    result.append((rightOperand == null ? "null" : convertTypedValueToString(operandTwoValue,state)));
    return new TypedValue(result.toString());
  }
  if (rightOperand instanceof String) {
    StringBuilder result=new StringBuilder((leftOperand == null ? "null" : convertTypedValueToString(operandOneValue,state)));
    result.append((String)rightOperand);
    return new TypedValue(result.toString());
  }
  return state.operate(Operation.ADD,leftOperand,rightOperand);
}
