{
  Assert.notNull(classLoader,"ClassLoader must not be null");
  Class<?> instrumentableLoaderClass;
  try {
    instrumentableLoaderClass=classLoader.loadClass(INSTRUMENTABLE_LOADER_CLASS_NAME);
  }
 catch (  ClassNotFoundException ex) {
    throw new IllegalStateException("Could not initialize GlassFishLoadTimeWeaver because GlassFish API classes are not available",ex);
  }
  try {
    this.addTransformerMethod=instrumentableLoaderClass.getMethod("addTransformer",ClassFileTransformer.class);
    this.copyMethod=instrumentableLoaderClass.getMethod("copy");
  }
 catch (  Exception ex) {
    throw new IllegalStateException("Could not initialize GlassFishLoadTimeWeaver because GlassFish API classes are not available",ex);
  }
  ClassLoader clazzLoader=null;
  for (ClassLoader cl=classLoader; cl != null && clazzLoader == null; cl=cl.getParent()) {
    if (instrumentableLoaderClass.isInstance(cl)) {
      clazzLoader=cl;
    }
  }
  if (clazzLoader == null) {
    throw new IllegalArgumentException(classLoader + " and its parents are not suitable ClassLoaders: A [" + instrumentableLoaderClass.getName()+ "] implementation is required.");
  }
  this.classLoader=clazzLoader;
}
