{
  TestBean tb=new TestBean("tb",99);
  JobDetailBean jobDetail0=new JobDetailBean();
  jobDetail0.setJobClass(Job.class);
  jobDetail0.setBeanName("myJob0");
  Map jobData=new HashMap();
  jobData.put("testBean",tb);
  jobDetail0.setJobDataAsMap(jobData);
  jobDetail0.afterPropertiesSet();
  assertEquals(tb,jobDetail0.getJobDataMap().get("testBean"));
  CronTriggerBean trigger0=new CronTriggerBean();
  trigger0.setBeanName("myTrigger0");
  trigger0.setJobDetail(jobDetail0);
  trigger0.setCronExpression("0/1 * * * * ?");
  trigger0.afterPropertiesSet();
  TestMethodInvokingTask task1=new TestMethodInvokingTask();
  MethodInvokingJobDetailFactoryBean mijdfb=new MethodInvokingJobDetailFactoryBean();
  mijdfb.setBeanName("myJob1");
  mijdfb.setTargetObject(task1);
  mijdfb.setTargetMethod("doSomething");
  mijdfb.afterPropertiesSet();
  JobDetail jobDetail1=(JobDetail)mijdfb.getObject();
  SimpleTriggerBean trigger1=new SimpleTriggerBean();
  trigger1.setBeanName("myTrigger1");
  trigger1.setJobDetail(jobDetail1);
  trigger1.setStartDelay(0);
  trigger1.setRepeatInterval(20);
  trigger1.afterPropertiesSet();
  MockControl schedulerControl=MockControl.createControl(Scheduler.class);
  final Scheduler scheduler=(Scheduler)schedulerControl.getMock();
  scheduler.getContext();
  schedulerControl.setReturnValue(new SchedulerContext());
  scheduler.getTrigger("myTrigger0",Scheduler.DEFAULT_GROUP);
  schedulerControl.setReturnValue(null);
  scheduler.getTrigger("myTrigger1",Scheduler.DEFAULT_GROUP);
  schedulerControl.setReturnValue(new SimpleTrigger());
  if (overwrite) {
    scheduler.addJob(jobDetail1,true);
    schedulerControl.setVoidCallable();
    scheduler.rescheduleJob("myTrigger1",Scheduler.DEFAULT_GROUP,trigger1);
    schedulerControl.setReturnValue(new Date());
  }
 else {
    scheduler.getJobDetail("myJob0",Scheduler.DEFAULT_GROUP);
    schedulerControl.setReturnValue(null);
  }
  scheduler.addJob(jobDetail0,true);
  schedulerControl.setVoidCallable();
  scheduler.scheduleJob(trigger0);
  schedulerControl.setThrowable(new ObjectAlreadyExistsException(""));
  if (overwrite) {
    scheduler.rescheduleJob("myTrigger0",Scheduler.DEFAULT_GROUP,trigger0);
    schedulerControl.setReturnValue(new Date());
  }
  scheduler.start();
  schedulerControl.setVoidCallable();
  scheduler.shutdown(false);
  schedulerControl.setVoidCallable();
  schedulerControl.replay();
  SchedulerFactoryBean schedulerFactoryBean=new SchedulerFactoryBean(){
    protected Scheduler createScheduler(    SchedulerFactory schedulerFactory,    String schedulerName){
      return scheduler;
    }
  }
;
  schedulerFactoryBean.setJobFactory(null);
  Map schedulerContext=new HashMap();
  schedulerContext.put("otherTestBean",tb);
  schedulerFactoryBean.setSchedulerContextAsMap(schedulerContext);
  schedulerFactoryBean.setTriggers(new Trigger[]{trigger0,trigger1});
  if (overwrite) {
    schedulerFactoryBean.setOverwriteExistingJobs(true);
  }
  try {
    schedulerFactoryBean.afterPropertiesSet();
  }
  finally {
    schedulerFactoryBean.destroy();
  }
  schedulerControl.verify();
}
