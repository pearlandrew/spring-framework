{
  Set<BeanDefinitionHolder> beanDefinitions=new LinkedHashSet<BeanDefinitionHolder>(4);
  if (jpaPresent && !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) {
    RootBeanDefinition def=new RootBeanDefinition();
    try {
      ClassLoader cl=AnnotationConfigUtils.class.getClassLoader();
      def.setBeanClass(cl.loadClass(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME));
    }
 catch (    ClassNotFoundException ex) {
      throw new IllegalStateException("Cannot load optional framework class: " + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME,ex);
    }
    def.setSource(source);
    def.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
    beanDefinitions.add(registerBeanPostProcessor(registry,def,PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME));
  }
  if (jsr250Present && !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) {
    RootBeanDefinition def=new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class);
    def.setSource(source);
    def.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
    beanDefinitions.add(registerBeanPostProcessor(registry,def,COMMON_ANNOTATION_PROCESSOR_BEAN_NAME));
  }
  if (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {
    RootBeanDefinition def=new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class);
    def.setSource(source);
    def.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
    beanDefinitions.add(registerBeanPostProcessor(registry,def,AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME));
  }
  if (!registry.containsBeanDefinition(REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {
    RootBeanDefinition def=new RootBeanDefinition(RequiredAnnotationBeanPostProcessor.class);
    def.setSource(source);
    def.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
    beanDefinitions.add(registerBeanPostProcessor(registry,def,REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME));
  }
  return beanDefinitions;
}
