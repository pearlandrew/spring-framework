{
  ApplicationContext context=initContext(WebConfig.class);
  RequestMappingHandlerAdapter adapter=context.getBean(RequestMappingHandlerAdapter.class);
  List<HttpMessageConverter<?>> converters=adapter.getMessageConverters();
  assertEquals(9,converters.size());
  for (  HttpMessageConverter<?> converter : converters) {
    if (converter instanceof AbstractJackson2HttpMessageConverter) {
      ObjectMapper objectMapper=((AbstractJackson2HttpMessageConverter)converter).getObjectMapper();
      assertFalse(objectMapper.getDeserializationConfig().isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION));
      assertFalse(objectMapper.getSerializationConfig().isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION));
      assertFalse(objectMapper.getDeserializationConfig().isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES));
      if (converter instanceof MappingJackson2XmlHttpMessageConverter) {
        assertEquals(XmlMapper.class,objectMapper.getClass());
      }
    }
  }
  ConfigurableWebBindingInitializer initializer=(ConfigurableWebBindingInitializer)adapter.getWebBindingInitializer();
  assertNotNull(initializer);
  ConversionService conversionService=initializer.getConversionService();
  assertNotNull(conversionService);
  assertTrue(conversionService instanceof FormattingConversionService);
  Validator validator=initializer.getValidator();
  assertNotNull(validator);
  assertTrue(validator instanceof LocalValidatorFactoryBean);
  DirectFieldAccessor fieldAccessor=new DirectFieldAccessor(adapter);
  @SuppressWarnings("unchecked") List<Object> interceptors=(List<Object>)fieldAccessor.getPropertyValue("requestResponseBodyAdvice");
  assertEquals(1,interceptors.size());
  assertEquals(JsonViewResponseBodyAdvice.class,interceptors.get(0).getClass());
}
