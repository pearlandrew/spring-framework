{
  StaticWebApplicationContext appCxt=new StaticWebApplicationContext();
  appCxt.setServletContext(new MockServletContext(new FileSystemResourceLoader()));
  appCxt.registerSingleton("controller",TestController.class);
  WebConfig webConfig=new WebConfig();
  webConfig.setApplicationContext(appCxt);
  webConfig.setServletContext(appCxt.getServletContext());
  String actual=webConfig.mvcConversionService().convert(new TestBean(),String.class);
  assertEquals("converted",actual);
  RequestMappingHandlerAdapter adapter=webConfig.requestMappingHandlerAdapter();
  assertEquals(1,adapter.getMessageConverters().size());
  ConfigurableWebBindingInitializer initializer=(ConfigurableWebBindingInitializer)adapter.getWebBindingInitializer();
  assertNotNull(initializer);
  BeanPropertyBindingResult bindingResult=new BeanPropertyBindingResult(null,"");
  initializer.getValidator().validate(null,bindingResult);
  assertEquals("invalid",bindingResult.getAllErrors().get(0).getCode());
  @SuppressWarnings("unchecked") List<HandlerMethodArgumentResolver> argResolvers=(List<HandlerMethodArgumentResolver>)new DirectFieldAccessor(adapter).getPropertyValue("customArgumentResolvers");
  assertEquals(1,argResolvers.size());
  @SuppressWarnings("unchecked") List<HandlerMethodReturnValueHandler> handlers=(List<HandlerMethodReturnValueHandler>)new DirectFieldAccessor(adapter).getPropertyValue("customReturnValueHandlers");
  assertEquals(1,handlers.size());
  HandlerExceptionResolverComposite composite=(HandlerExceptionResolverComposite)webConfig.handlerExceptionResolver();
  assertEquals(1,composite.getExceptionResolvers().size());
  RequestMappingHandlerMapping rmHandlerMapping=webConfig.requestMappingHandlerMapping();
  rmHandlerMapping.setApplicationContext(appCxt);
  HandlerExecutionChain chain=rmHandlerMapping.getHandler(new MockHttpServletRequest("GET","/"));
  assertNotNull(chain.getInterceptors());
  assertEquals(2,chain.getInterceptors().length);
  assertEquals(LocaleChangeInterceptor.class,chain.getInterceptors()[0].getClass());
  assertEquals(ConversionServiceExposingInterceptor.class,chain.getInterceptors()[1].getClass());
  AbstractHandlerMapping handlerMapping=(AbstractHandlerMapping)webConfig.viewControllerHandlerMapping();
  handlerMapping.setApplicationContext(appCxt);
  assertNotNull(handlerMapping);
  assertEquals(1,handlerMapping.getOrder());
  HandlerExecutionChain handler=handlerMapping.getHandler(new MockHttpServletRequest("GET","/path"));
  assertNotNull(handler.getHandler());
  handlerMapping=(AbstractHandlerMapping)webConfig.resourceHandlerMapping();
  handlerMapping.setApplicationContext(appCxt);
  assertNotNull(handlerMapping);
  assertEquals(Integer.MAX_VALUE - 1,handlerMapping.getOrder());
  handler=handlerMapping.getHandler(new MockHttpServletRequest("GET","/resources/foo.gif"));
  assertNotNull(handler.getHandler());
  handlerMapping=(AbstractHandlerMapping)webConfig.defaultServletHandlerMapping();
  handlerMapping.setApplicationContext(appCxt);
  assertNotNull(handlerMapping);
  assertEquals(Integer.MAX_VALUE,handlerMapping.getOrder());
  handler=handlerMapping.getHandler(new MockHttpServletRequest("GET","/anyPath"));
  assertNotNull(handler.getHandler());
}
