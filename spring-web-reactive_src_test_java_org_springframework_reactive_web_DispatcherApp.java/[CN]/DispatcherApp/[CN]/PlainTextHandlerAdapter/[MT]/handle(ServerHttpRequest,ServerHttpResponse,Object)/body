{
  PlainTextHandler textHandler=(PlainTextHandler)handler;
  final Publisher<String> resultPublisher=textHandler.handle(request,response);
  return new Publisher<HandlerResult>(){
    @Override public void subscribe(    Subscriber<? super HandlerResult> handlerResultSubscriber){
      handlerResultSubscriber.onSubscribe(new AbstractSubscription<HandlerResult>(handlerResultSubscriber){
        @Override protected void requestInternal(        long n){
          resultPublisher.subscribe(new Subscriber<Object>(){
            @Override public void onSubscribe(            Subscription subscription){
              subscription.request(Long.MAX_VALUE);
            }
            @Override public void onNext(            Object result){
              invokeOnNext(new HandlerResult(result));
            }
            @Override public void onError(            Throwable error){
              invokeOnError(error);
            }
            @Override public void onComplete(){
              invokeOnComplete();
            }
          }
);
        }
      }
);
    }
  }
;
}
