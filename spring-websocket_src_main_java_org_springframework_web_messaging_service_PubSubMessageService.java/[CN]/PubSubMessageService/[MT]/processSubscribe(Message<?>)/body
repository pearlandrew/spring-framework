{
  if (logger.isDebugEnabled()) {
    logger.debug("Subscribe " + message);
  }
  PubSubHeaders headers=PubSubHeaders.fromMessageHeaders(message.getHeaders());
  final String subscriptionId=headers.getSubscriptionId();
  EventRegistration registration=getEventBus().registerConsumer(getPublishKey(headers.getDestination()),new EventConsumer<Message<?>>(){
    @Override public void accept(    Message<?> message){
      PubSubHeaders inHeaders=PubSubHeaders.fromMessageHeaders(message.getHeaders());
      PubSubHeaders outHeaders=PubSubHeaders.create();
      outHeaders.setDestinations(inHeaders.getDestinations());
      outHeaders.setContentType(inHeaders.getContentType());
      outHeaders.setSubscriptionId(subscriptionId);
      Object payload=message.getPayload();
      message=new GenericMessage<Object>(payload,outHeaders.toMessageHeaders());
      getEventBus().send(AbstractMessageService.SERVER_TO_CLIENT_MESSAGE_KEY,message);
    }
  }
);
  addSubscription((String)message.getHeaders().get("sessionId"),registration);
}
