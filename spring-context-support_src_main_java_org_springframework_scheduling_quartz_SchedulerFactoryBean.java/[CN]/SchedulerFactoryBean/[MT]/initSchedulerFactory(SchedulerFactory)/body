{
  if (!(schedulerFactory instanceof StdSchedulerFactory)) {
    if (this.configLocation != null || this.quartzProperties != null || this.taskExecutor != null || this.dataSource != null) {
      throw new IllegalArgumentException("StdSchedulerFactory required for applying Quartz properties: " + schedulerFactory);
    }
    return;
  }
  Properties mergedProps=new Properties();
  if (this.resourceLoader != null) {
    mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_CLASS_LOAD_HELPER_CLASS,ResourceLoaderClassLoadHelper.class.getName());
  }
  if (this.taskExecutor != null) {
    mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,LocalTaskExecutorThreadPool.class.getName());
  }
 else {
    mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,SimpleThreadPool.class.getName());
    mergedProps.setProperty(PROP_THREAD_COUNT,Integer.toString(DEFAULT_THREAD_COUNT));
  }
  if (this.configLocation != null) {
    if (logger.isInfoEnabled()) {
      logger.info("Loading Quartz config from [" + this.configLocation + "]");
    }
    PropertiesLoaderUtils.fillProperties(mergedProps,this.configLocation);
  }
  CollectionUtils.mergePropertiesIntoMap(this.quartzProperties,mergedProps);
  if (this.dataSource != null) {
    mergedProps.put(StdSchedulerFactory.PROP_JOB_STORE_CLASS,LocalDataSourceJobStore.class.getName());
  }
  if (this.schedulerName != null) {
    mergedProps.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME,this.schedulerName);
  }
  ((StdSchedulerFactory)schedulerFactory).initialize(mergedProps);
}
