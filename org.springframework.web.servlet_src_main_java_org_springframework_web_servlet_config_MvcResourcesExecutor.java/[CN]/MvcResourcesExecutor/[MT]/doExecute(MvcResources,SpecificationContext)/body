{
  BeanDefinitionRegistry registry=specContext.getRegistry();
  ComponentRegistrar registrar=specContext.getRegistrar();
  Object source=spec.source();
  if (!registry.containsBeanDefinition(HANDLER_ADAPTER_BEAN_NAME)) {
    RootBeanDefinition handlerAdapterDef=new RootBeanDefinition(HttpRequestHandlerAdapter.class);
    handlerAdapterDef.setSource(source);
    handlerAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
    registry.registerBeanDefinition(HANDLER_ADAPTER_BEAN_NAME,handlerAdapterDef);
    registrar.registerComponent(new BeanComponentDefinition(handlerAdapterDef,HANDLER_ADAPTER_BEAN_NAME));
  }
  RootBeanDefinition resourceHandlerDef=new RootBeanDefinition(ResourceHttpRequestHandler.class);
  resourceHandlerDef.setSource(source);
  resourceHandlerDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
  resourceHandlerDef.getPropertyValues().add("locations",spec.locations());
  if (spec.cachePeriod() != null) {
    resourceHandlerDef.getPropertyValues().add("cacheSeconds",spec.cachePeriod());
  }
  String resourceHandlerBeanName=registrar.registerWithGeneratedName(resourceHandlerDef);
  registry.registerBeanDefinition(resourceHandlerBeanName,resourceHandlerDef);
  registrar.registerComponent(new BeanComponentDefinition(resourceHandlerDef,resourceHandlerBeanName));
  Map<String,String> urlMap=new ManagedMap<String,String>();
  urlMap.put(spec.mapping(),resourceHandlerBeanName);
  RootBeanDefinition handlerMappingDef=new RootBeanDefinition(SimpleUrlHandlerMapping.class);
  handlerMappingDef.setSource(source);
  handlerMappingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
  handlerMappingDef.getPropertyValues().add("urlMap",urlMap);
  if (spec.order() != null) {
    handlerMappingDef.getPropertyValues().add("order",spec.order());
  }
  String beanName=registrar.registerWithGeneratedName(handlerMappingDef);
  registry.registerBeanDefinition(beanName,handlerMappingDef);
  registrar.registerComponent(new BeanComponentDefinition(handlerMappingDef,beanName));
}
