{
  Assert.notNull(source,"Source must not be null");
  Assert.notNull(target,"Target must not be null");
  Class actualEditable=target.getClass();
  if (editable != null) {
    if (!editable.isInstance(target)) {
      throw new IllegalArgumentException("Target class [" + target.getClass().getName() + "] not assignable to Editable class ["+ editable.getName()+ "]");
    }
    actualEditable=editable;
  }
  PropertyDescriptor[] targetPds=getPropertyDescriptors(actualEditable);
  List ignoreList=(ignoreProperties != null) ? Arrays.asList(ignoreProperties) : null;
  for (  PropertyDescriptor targetPd : targetPds) {
    if (targetPd.getWriteMethod() != null && (ignoreProperties == null || (!ignoreList.contains(targetPd.getName())))) {
      PropertyDescriptor sourcePd=getPropertyDescriptor(source.getClass(),targetPd.getName());
      if (sourcePd != null && sourcePd.getReadMethod() != null) {
        try {
          Method readMethod=sourcePd.getReadMethod();
          if (!Modifier.isPublic(readMethod.getDeclaringClass().getModifiers())) {
            readMethod.setAccessible(true);
          }
          Object value=readMethod.invoke(source);
          Method writeMethod=targetPd.getWriteMethod();
          if (!Modifier.isPublic(writeMethod.getDeclaringClass().getModifiers())) {
            writeMethod.setAccessible(true);
          }
          writeMethod.invoke(target,value);
        }
 catch (        Throwable ex) {
          throw new FatalBeanException("Could not copy properties from source to target",ex);
        }
      }
    }
  }
}
