{
  final SessionFactory sf=mock(SessionFactory.class);
  Session session=mock(Session.class);
  given(sf.openSession()).willReturn(session);
  given(session.getSessionFactory()).willReturn(sf);
  StaticWebApplicationContext wac=new StaticWebApplicationContext();
  wac.setServletContext(sc);
  wac.getDefaultListableBeanFactory().registerSingleton("sessionFactory",sf);
  wac.refresh();
  sc.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE,wac);
  MockFilterConfig filterConfig=new MockFilterConfig(wac.getServletContext(),"filter");
  final AtomicInteger count=new AtomicInteger(0);
  final OpenSessionInViewFilter filter=new OpenSessionInViewFilter();
  filter.init(filterConfig);
  final FilterChain filterChain=new FilterChain(){
    @Override public void doFilter(    ServletRequest servletRequest,    ServletResponse servletResponse){
      assertTrue(TransactionSynchronizationManager.hasResource(sf));
      count.incrementAndGet();
    }
  }
;
  AsyncWebRequest asyncWebRequest=new StandardServletAsyncWebRequest(this.request,this.response);
  WebAsyncManager asyncManager=WebAsyncUtils.getAsyncManager(this.request);
  asyncManager.setTaskExecutor(new SyncTaskExecutor());
  asyncManager.setAsyncWebRequest(asyncWebRequest);
  asyncManager.startCallableProcessing(new Callable<String>(){
    @Override public String call() throws Exception {
      return "anything";
    }
  }
);
  assertFalse(TransactionSynchronizationManager.hasResource(sf));
  filter.doFilter(this.request,this.response,filterChain);
  assertFalse(TransactionSynchronizationManager.hasResource(sf));
  assertEquals(1,count.get());
  verify(session,never()).close();
  this.request.setAsyncStarted(false);
  assertFalse(TransactionSynchronizationManager.hasResource(sf));
  filter.doFilter(this.request,this.response,filterChain);
  assertFalse(TransactionSynchronizationManager.hasResource(sf));
  assertEquals(2,count.get());
  verify(session).setFlushMode(FlushMode.MANUAL);
  verify(session).close();
  wac.close();
}
