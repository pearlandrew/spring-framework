{
  final SessionFactory sf=createStrictMock(SessionFactory.class);
  final Session session=createStrictMock(Session.class);
  expect(sf.openSession()).andReturn(session);
  expect(session.getSessionFactory()).andReturn(sf);
  expect(session.getFlushMode()).andReturn(FlushMode.MANUAL);
  session.setFlushMode(FlushMode.MANUAL);
  replay(sf);
  replay(session);
  StaticWebApplicationContext wac=new StaticWebApplicationContext();
  wac.setServletContext(sc);
  wac.getDefaultListableBeanFactory().registerSingleton("sessionFactory",sf);
  wac.refresh();
  sc.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE,wac);
  MockFilterConfig filterConfig=new MockFilterConfig(wac.getServletContext(),"filter");
  MockFilterConfig filterConfig2=new MockFilterConfig(wac.getServletContext(),"filter2");
  filterConfig.addInitParameter("singleSession","false");
  filterConfig2.addInitParameter("singleSession","false");
  filterConfig2.addInitParameter("sessionFactoryBeanName","mySessionFactory");
  OpenSessionInViewInterceptor interceptor=new OpenSessionInViewInterceptor();
  interceptor.setSessionFactory(sf);
  interceptor.setSingleSession(false);
  interceptor.preHandle(webRequest);
  final OpenSessionInViewFilter filter=new OpenSessionInViewFilter();
  filter.init(filterConfig);
  final OpenSessionInViewFilter filter2=new OpenSessionInViewFilter();
  filter2.init(filterConfig2);
  final FilterChain filterChain=new FilterChain(){
    @Override public void doFilter(    ServletRequest servletRequest,    ServletResponse servletResponse){
      HibernateTransactionManager tm=new HibernateTransactionManager(sf);
      TransactionStatus ts=tm.getTransaction(new DefaultTransactionDefinition(TransactionDefinition.PROPAGATION_SUPPORTS));
      org.hibernate.Session sess=SessionFactoryUtils.getSession(sf,true);
      SessionFactoryUtils.releaseSession(sess,sf);
      tm.commit(ts);
      verify(session);
      reset(session);
      try {
        expect(session.close()).andReturn(null);
      }
 catch (      HibernateException ex) {
      }
      replay(session);
      servletRequest.setAttribute("invoked",Boolean.TRUE);
    }
  }
;
  FilterChain filterChain2=new FilterChain(){
    @Override public void doFilter(    ServletRequest servletRequest,    ServletResponse servletResponse) throws IOException, ServletException {
      filter.doFilter(servletRequest,servletResponse,filterChain);
    }
  }
;
  filter.doFilter(this.request,this.response,filterChain2);
  assertNotNull(this.request.getAttribute("invoked"));
  interceptor.postHandle(webRequest,null);
  interceptor.afterCompletion(webRequest,null);
  verify(sf);
  verify(session);
  wac.close();
}
