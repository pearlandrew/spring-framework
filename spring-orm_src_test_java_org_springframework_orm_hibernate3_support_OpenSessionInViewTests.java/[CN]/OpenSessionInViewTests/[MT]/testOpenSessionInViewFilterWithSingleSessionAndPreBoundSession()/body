{
  final SessionFactory sf=mock(SessionFactory.class);
  Session session=mock(Session.class);
  given(sf.openSession()).willReturn(session);
  given(session.getSessionFactory()).willReturn(sf);
  StaticWebApplicationContext wac=new StaticWebApplicationContext();
  wac.setServletContext(sc);
  wac.getDefaultListableBeanFactory().registerSingleton("sessionFactory",sf);
  wac.refresh();
  sc.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE,wac);
  MockFilterConfig filterConfig=new MockFilterConfig(wac.getServletContext(),"filter");
  MockFilterConfig filterConfig2=new MockFilterConfig(wac.getServletContext(),"filter2");
  filterConfig2.addInitParameter("sessionFactoryBeanName","mySessionFactory");
  OpenSessionInViewInterceptor interceptor=new OpenSessionInViewInterceptor();
  interceptor.setSessionFactory(sf);
  interceptor.preHandle(this.webRequest);
  final OpenSessionInViewFilter filter=new OpenSessionInViewFilter();
  filter.init(filterConfig);
  final FilterChain filterChain=new FilterChain(){
    @Override public void doFilter(    ServletRequest servletRequest,    ServletResponse servletResponse){
      assertTrue(TransactionSynchronizationManager.hasResource(sf));
      servletRequest.setAttribute("invoked",Boolean.TRUE);
    }
  }
;
  assertTrue(TransactionSynchronizationManager.hasResource(sf));
  filter.doFilter(this.request,this.response,filterChain);
  assertTrue(TransactionSynchronizationManager.hasResource(sf));
  assertNotNull(this.request.getAttribute("invoked"));
  interceptor.postHandle(this.webRequest,null);
  interceptor.afterCompletion(this.webRequest,null);
  verify(session).setFlushMode(FlushMode.MANUAL);
  verify(session).close();
  wac.close();
}
