{
  MockControl sfControl=MockControl.createControl(SessionFactory.class);
  final SessionFactory sf=(SessionFactory)sfControl.getMock();
  final MockControl sessionControl=MockControl.createControl(Session.class);
  final Session session=(Session)sessionControl.getMock();
  sf.openSession();
  sfControl.setReturnValue(session,1);
  session.getSessionFactory();
  sessionControl.setReturnValue(sf);
  session.getFlushMode();
  sessionControl.setReturnValue(FlushMode.MANUAL,1);
  session.setFlushMode(FlushMode.MANUAL);
  sessionControl.setVoidCallable(1);
  sfControl.replay();
  sessionControl.replay();
  MockControl sf2Control=MockControl.createControl(SessionFactory.class);
  final SessionFactory sf2=(SessionFactory)sf2Control.getMock();
  final MockControl session2Control=MockControl.createControl(Session.class);
  final Session session2=(Session)session2Control.getMock();
  MockControl txControl=MockControl.createControl(Transaction.class);
  Transaction tx=(Transaction)txControl.getMock();
  MockControl conControl=MockControl.createControl(Connection.class);
  Connection con=(Connection)conControl.getMock();
  sf2.openSession();
  sf2Control.setReturnValue(session2,1);
  session2.beginTransaction();
  session2Control.setReturnValue(tx,1);
  session2.connection();
  session2Control.setReturnValue(con,2);
  tx.commit();
  txControl.setVoidCallable(1);
  session2.isConnected();
  session2Control.setReturnValue(true,1);
  con.isReadOnly();
  conControl.setReturnValue(false,1);
  session2.setFlushMode(FlushMode.MANUAL);
  session2Control.setVoidCallable(1);
  sf2Control.replay();
  session2Control.replay();
  txControl.replay();
  conControl.replay();
  MockServletContext sc=new MockServletContext();
  StaticWebApplicationContext wac=new StaticWebApplicationContext();
  wac.setServletContext(sc);
  wac.getDefaultListableBeanFactory().registerSingleton("sessionFactory",sf);
  wac.getDefaultListableBeanFactory().registerSingleton("mySessionFactory",sf2);
  wac.refresh();
  sc.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE,wac);
  MockHttpServletRequest request=new MockHttpServletRequest(sc);
  MockHttpServletResponse response=new MockHttpServletResponse();
  MockFilterConfig filterConfig=new MockFilterConfig(wac.getServletContext(),"filter");
  MockFilterConfig filterConfig2=new MockFilterConfig(wac.getServletContext(),"filter2");
  filterConfig.addInitParameter("singleSession","false");
  filterConfig2.addInitParameter("singleSession","false");
  filterConfig2.addInitParameter("sessionFactoryBeanName","mySessionFactory");
  final OpenSessionInViewFilter filter=new OpenSessionInViewFilter();
  filter.init(filterConfig);
  final OpenSessionInViewFilter filter2=new OpenSessionInViewFilter();
  filter2.init(filterConfig2);
  final FilterChain filterChain=new FilterChain(){
    public void doFilter(    ServletRequest servletRequest,    ServletResponse servletResponse){
      HibernateTransactionManager tm=new HibernateTransactionManager(sf);
      TransactionStatus ts=tm.getTransaction(new DefaultTransactionDefinition(TransactionDefinition.PROPAGATION_SUPPORTS));
      org.hibernate.Session sess=SessionFactoryUtils.getSession(sf,true);
      SessionFactoryUtils.releaseSession(sess,sf);
      tm.commit(ts);
      sessionControl.verify();
      sessionControl.reset();
      session.close();
      sessionControl.setReturnValue(null,1);
      sessionControl.replay();
      servletRequest.setAttribute("invoked",Boolean.TRUE);
    }
  }
;
  final FilterChain filterChain2=new FilterChain(){
    public void doFilter(    ServletRequest servletRequest,    ServletResponse servletResponse) throws IOException, ServletException {
      HibernateTransactionManager tm=new HibernateTransactionManager(sf2);
      TransactionStatus ts=tm.getTransaction(new DefaultTransactionDefinition());
      tm.commit(ts);
      session2Control.verify();
      session2Control.reset();
      session2.close();
      session2Control.setReturnValue(null,1);
      session2Control.replay();
      filter.doFilter(servletRequest,servletResponse,filterChain);
    }
  }
;
  FilterChain filterChain3=new PassThroughFilterChain(filter2,filterChain2);
  filter2.doFilter(request,response,filterChain3);
  assertNotNull(request.getAttribute("invoked"));
  sfControl.verify();
  sessionControl.verify();
  sf2Control.verify();
  session2Control.verify();
  txControl.verify();
  conControl.verify();
  wac.close();
}
