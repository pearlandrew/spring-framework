{
  final SessionFactory sf=createStrictMock(SessionFactory.class);
  Session session=createStrictMock(Session.class);
  expect(sf.openSession()).andReturn(session);
  expect(session.getSessionFactory()).andReturn(sf);
  session.setFlushMode(FlushMode.MANUAL);
  replay(sf);
  replay(session);
  StaticWebApplicationContext wac=new StaticWebApplicationContext();
  wac.setServletContext(sc);
  wac.getDefaultListableBeanFactory().registerSingleton("sessionFactory",sf);
  wac.refresh();
  sc.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE,wac);
  MockFilterConfig filterConfig=new MockFilterConfig(wac.getServletContext(),"filter");
  final OpenSessionInViewFilter filter=new OpenSessionInViewFilter();
  filter.init(filterConfig);
  final FilterChain filterChain=new FilterChain(){
    public void doFilter(    ServletRequest servletRequest,    ServletResponse servletResponse){
      assertTrue(TransactionSynchronizationManager.hasResource(sf));
      servletRequest.setAttribute("invoked",Boolean.TRUE);
    }
  }
;
  AsyncWebRequest asyncWebRequest=createStrictMock(AsyncWebRequest.class);
  expect(asyncWebRequest.isAsyncStarted()).andReturn(true);
  expect(asyncWebRequest.isAsyncStarted()).andReturn(true);
  replay(asyncWebRequest);
  AsyncExecutionChain chain=AsyncExecutionChain.getForCurrentRequest(this.request);
  chain.setAsyncWebRequest(asyncWebRequest);
  assertFalse(TransactionSynchronizationManager.hasResource(sf));
  filter.doFilter(this.request,this.response,filterChain);
  assertFalse(TransactionSynchronizationManager.hasResource(sf));
  assertNotNull(this.request.getAttribute("invoked"));
  verify(sf);
  verify(session);
  verify(asyncWebRequest);
  chain.setTaskExecutor(new SyncTaskExecutor());
  chain.setCallable(new Callable<Object>(){
    public Object call(){
      assertTrue(TransactionSynchronizationManager.hasResource(sf));
      return null;
    }
  }
);
  reset(asyncWebRequest);
  asyncWebRequest.startAsync();
  expect(asyncWebRequest.isAsyncCompleted()).andReturn(false);
  asyncWebRequest.complete();
  replay(asyncWebRequest);
  reset(sf);
  reset(session);
  expect(session.close()).andReturn(null);
  replay(sf);
  replay(session);
  chain.startCallableChainProcessing();
  assertFalse(TransactionSynchronizationManager.hasResource(sf));
  verify(sf);
  verify(session);
  verify(asyncWebRequest);
  wac.close();
}
