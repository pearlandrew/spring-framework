{
  final SessionFactory sf=createStrictMock(SessionFactory.class);
  Session session=createStrictMock(Session.class);
  OpenSessionInViewInterceptor interceptor=new OpenSessionInViewInterceptor();
  interceptor.setSessionFactory(sf);
  expect(sf.openSession()).andReturn(session);
  expect(session.getSessionFactory()).andReturn(sf);
  session.setFlushMode(FlushMode.MANUAL);
  replay(sf);
  replay(session);
  interceptor.preHandle(this.webRequest);
  assertTrue(TransactionSynchronizationManager.hasResource(sf));
  AbstractDelegatingCallable asyncCallable=interceptor.getAsyncCallable(this.webRequest);
  assertNotNull(asyncCallable);
  interceptor.postHandleAsyncStarted(this.webRequest);
  assertFalse(TransactionSynchronizationManager.hasResource(sf));
  verify(sf);
  verify(session);
  asyncCallable.setNext(new Callable<Object>(){
    public Object call(){
      return null;
    }
  }
);
  asyncCallable.call();
  assertTrue("Session not bound to async thread",TransactionSynchronizationManager.hasResource(sf));
  verify(sf);
  verify(session);
  reset(sf);
  reset(session);
  replay(sf);
  replay(session);
  interceptor.postHandle(this.webRequest,null);
  assertTrue(TransactionSynchronizationManager.hasResource(sf));
  verify(sf);
  verify(session);
  reset(sf);
  reset(session);
  expect(session.close()).andReturn(null);
  replay(sf);
  replay(session);
  interceptor.afterCompletion(this.webRequest,null);
  assertFalse(TransactionSynchronizationManager.hasResource(sf));
  verify(sf);
  verify(session);
}
