{
  final SessionFactory sf=mock(SessionFactory.class);
  Session session=mock(Session.class);
  OpenSessionInViewInterceptor interceptor=new OpenSessionInViewInterceptor();
  interceptor.setSessionFactory(sf);
  given(sf.openSession()).willReturn(session);
  given(session.getSessionFactory()).willReturn(sf);
  interceptor.preHandle(this.webRequest);
  assertTrue(TransactionSynchronizationManager.hasResource(sf));
  AsyncWebRequest asyncWebRequest=new StandardServletAsyncWebRequest(this.request,this.response);
  WebAsyncManager asyncManager=WebAsyncUtils.getAsyncManager(this.request);
  asyncManager.setTaskExecutor(new SyncTaskExecutor());
  asyncManager.setAsyncWebRequest(asyncWebRequest);
  asyncManager.startCallableProcessing(new Callable<String>(){
    @Override public String call() throws Exception {
      return "anything";
    }
  }
);
  interceptor.afterConcurrentHandlingStarted(this.webRequest);
  assertFalse(TransactionSynchronizationManager.hasResource(sf));
  interceptor.preHandle(this.webRequest);
  assertTrue("Session not bound to async thread",TransactionSynchronizationManager.hasResource(sf));
  interceptor.postHandle(this.webRequest,null);
  assertTrue(TransactionSynchronizationManager.hasResource(sf));
  verify(session,never()).close();
  interceptor.afterCompletion(this.webRequest,null);
  assertFalse(TransactionSynchronizationManager.hasResource(sf));
  verify(session).setFlushMode(FlushMode.MANUAL);
  verify(session).close();
}
