{
  final SessionFactory sf=createStrictMock(SessionFactory.class);
  Session session=createStrictMock(Session.class);
  OpenSessionInViewInterceptor interceptor=new OpenSessionInViewInterceptor();
  interceptor.setSessionFactory(sf);
  expect(sf.openSession()).andReturn(session);
  expect(session.getSessionFactory()).andReturn(sf);
  session.setFlushMode(FlushMode.MANUAL);
  replay(sf);
  replay(session);
  interceptor.preHandle(this.webRequest);
  assertTrue(TransactionSynchronizationManager.hasResource(sf));
  verify(sf);
  verify(session);
  AsyncWebRequest asyncWebRequest=createStrictMock(AsyncWebRequest.class);
  asyncWebRequest.addCompletionHandler((Runnable)anyObject());
  asyncWebRequest.setTimeoutHandler((Runnable)anyObject());
  asyncWebRequest.addCompletionHandler((Runnable)anyObject());
  asyncWebRequest.startAsync();
  replay(asyncWebRequest);
  WebAsyncManager asyncManager=WebAsyncUtils.getAsyncManager(this.request);
  asyncManager.setTaskExecutor(new SyncTaskExecutor());
  asyncManager.setAsyncWebRequest(asyncWebRequest);
  asyncManager.startCallableProcessing(new Callable<String>(){
    public String call() throws Exception {
      return "anything";
    }
  }
);
  verify(asyncWebRequest);
  interceptor.afterConcurrentHandlingStarted(this.webRequest);
  assertFalse(TransactionSynchronizationManager.hasResource(sf));
  interceptor.preHandle(this.webRequest);
  assertTrue("Session not bound to async thread",TransactionSynchronizationManager.hasResource(sf));
  verify(sf);
  reset(sf);
  replay(sf);
  verify(session);
  reset(session);
  replay(session);
  interceptor.postHandle(this.webRequest,null);
  assertTrue(TransactionSynchronizationManager.hasResource(sf));
  verify(sf);
  reset(sf);
  verify(session);
  reset(session);
  expect(session.close()).andReturn(null);
  replay(sf);
  replay(session);
  interceptor.afterCompletion(this.webRequest,null);
  assertFalse(TransactionSynchronizationManager.hasResource(sf));
  verify(sf);
  verify(session);
}
