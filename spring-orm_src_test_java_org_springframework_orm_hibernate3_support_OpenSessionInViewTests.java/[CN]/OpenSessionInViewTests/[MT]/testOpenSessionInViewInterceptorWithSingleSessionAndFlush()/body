{
  MockControl sfControl=MockControl.createControl(SessionFactory.class);
  final SessionFactory sf=(SessionFactory)sfControl.getMock();
  MockControl sessionControl=MockControl.createControl(Session.class);
  Session session=(Session)sessionControl.getMock();
  OpenSessionInViewInterceptor interceptor=new OpenSessionInViewInterceptor();
  interceptor.setSessionFactory(sf);
  interceptor.setFlushMode(HibernateAccessor.FLUSH_AUTO);
  MockServletContext sc=new MockServletContext();
  MockHttpServletRequest request=new MockHttpServletRequest(sc);
  MockHttpServletResponse response=new MockHttpServletResponse();
  sf.openSession();
  sfControl.setReturnValue(session,1);
  session.getSessionFactory();
  sessionControl.setReturnValue(sf);
  sfControl.replay();
  sessionControl.replay();
  interceptor.preHandle(new ServletWebRequest(request));
  assertTrue(TransactionSynchronizationManager.hasResource(sf));
  sfControl.verify();
  sessionControl.verify();
  sfControl.reset();
  sessionControl.reset();
  session.flush();
  sessionControl.setVoidCallable(1);
  sfControl.replay();
  sessionControl.replay();
  interceptor.postHandle(new ServletWebRequest(request),null);
  assertTrue(TransactionSynchronizationManager.hasResource(sf));
  sfControl.verify();
  sessionControl.verify();
  sfControl.reset();
  sessionControl.reset();
  session.close();
  sessionControl.setReturnValue(null,1);
  sfControl.replay();
  sessionControl.replay();
  interceptor.afterCompletion(new ServletWebRequest(request),null);
  assertFalse(TransactionSynchronizationManager.hasResource(sf));
  sfControl.verify();
  sessionControl.verify();
}
