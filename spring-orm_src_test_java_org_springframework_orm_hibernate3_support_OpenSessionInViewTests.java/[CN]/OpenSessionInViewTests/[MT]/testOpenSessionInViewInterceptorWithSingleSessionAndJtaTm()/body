{
  final SessionFactoryImplementor sf=createStrictMock(SessionFactoryImplementor.class);
  Session session=createStrictMock(Session.class);
  TransactionManager tm=createStrictMock(TransactionManager.class);
  expect(tm.getTransaction()).andReturn(null);
  expect(tm.getTransaction()).andReturn(null);
  replay(tm);
  OpenSessionInViewInterceptor interceptor=new OpenSessionInViewInterceptor();
  interceptor.setSessionFactory(sf);
  expect(sf.openSession()).andReturn(session);
  expect(sf.getTransactionManager()).andReturn(tm);
  session.setFlushMode(FlushMode.MANUAL);
  expect(sf.getTransactionManager()).andReturn(tm);
  expect(session.isOpen()).andReturn(true);
  replay(sf);
  replay(session);
  interceptor.preHandle(this.webRequest);
  assertTrue(TransactionSynchronizationManager.hasResource(sf));
  interceptor.preHandle(this.webRequest);
  assertEquals(session,SessionFactoryUtils.getSession(sf,false));
  interceptor.preHandle(this.webRequest);
  interceptor.postHandle(this.webRequest,null);
  interceptor.afterCompletion(this.webRequest,null);
  interceptor.postHandle(this.webRequest,null);
  interceptor.afterCompletion(this.webRequest,null);
  interceptor.preHandle(this.webRequest);
  interceptor.postHandle(this.webRequest,null);
  interceptor.afterCompletion(this.webRequest,null);
  verify(sf);
  verify(session);
  reset(sf);
  reset(session);
  replay(sf);
  replay(session);
  interceptor.postHandle(this.webRequest,null);
  assertTrue(TransactionSynchronizationManager.hasResource(sf));
  verify(sf);
  verify(session);
  reset(sf);
  reset(session);
  expect(session.close()).andReturn(null);
  replay(sf);
  replay(session);
  interceptor.afterCompletion(this.webRequest,null);
  assertFalse(TransactionSynchronizationManager.hasResource(sf));
  verify(sf);
  verify(session);
}
