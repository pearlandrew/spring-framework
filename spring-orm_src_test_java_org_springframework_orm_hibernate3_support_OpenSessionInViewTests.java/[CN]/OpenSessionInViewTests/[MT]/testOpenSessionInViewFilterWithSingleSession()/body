{
  final SessionFactory sf=createStrictMock(SessionFactory.class);
  Session session=createStrictMock(Session.class);
  expect(sf.openSession()).andReturn(session);
  expect(session.getSessionFactory()).andReturn(sf);
  session.setFlushMode(FlushMode.MANUAL);
  expect(session.close()).andReturn(null);
  replay(sf);
  replay(session);
  final SessionFactory sf2=createStrictMock(SessionFactory.class);
  Session session2=createStrictMock(Session.class);
  expect(sf2.openSession()).andReturn(session2);
  expect(session2.getSessionFactory()).andReturn(sf2);
  session2.setFlushMode(FlushMode.AUTO);
  expect(session2.close()).andReturn(null);
  replay(sf2);
  replay(session2);
  StaticWebApplicationContext wac=new StaticWebApplicationContext();
  wac.setServletContext(sc);
  wac.getDefaultListableBeanFactory().registerSingleton("sessionFactory",sf);
  wac.getDefaultListableBeanFactory().registerSingleton("mySessionFactory",sf2);
  wac.refresh();
  sc.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE,wac);
  MockFilterConfig filterConfig=new MockFilterConfig(wac.getServletContext(),"filter");
  MockFilterConfig filterConfig2=new MockFilterConfig(wac.getServletContext(),"filter2");
  filterConfig2.addInitParameter("sessionFactoryBeanName","mySessionFactory");
  filterConfig2.addInitParameter("flushMode","AUTO");
  final OpenSessionInViewFilter filter=new OpenSessionInViewFilter();
  filter.init(filterConfig);
  final OpenSessionInViewFilter filter2=new OpenSessionInViewFilter();
  filter2.init(filterConfig2);
  final FilterChain filterChain=new FilterChain(){
    public void doFilter(    ServletRequest servletRequest,    ServletResponse servletResponse){
      assertTrue(TransactionSynchronizationManager.hasResource(sf));
      servletRequest.setAttribute("invoked",Boolean.TRUE);
    }
  }
;
  final FilterChain filterChain2=new FilterChain(){
    public void doFilter(    ServletRequest servletRequest,    ServletResponse servletResponse) throws IOException, ServletException {
      assertTrue(TransactionSynchronizationManager.hasResource(sf2));
      filter.doFilter(servletRequest,servletResponse,filterChain);
    }
  }
;
  FilterChain filterChain3=new PassThroughFilterChain(filter2,filterChain2);
  assertFalse(TransactionSynchronizationManager.hasResource(sf));
  assertFalse(TransactionSynchronizationManager.hasResource(sf2));
  filter2.doFilter(this.request,this.response,filterChain3);
  assertFalse(TransactionSynchronizationManager.hasResource(sf));
  assertFalse(TransactionSynchronizationManager.hasResource(sf2));
  assertNotNull(this.request.getAttribute("invoked"));
  verify(sf);
  verify(session);
  verify(sf2);
  verify(session2);
  wac.close();
}
