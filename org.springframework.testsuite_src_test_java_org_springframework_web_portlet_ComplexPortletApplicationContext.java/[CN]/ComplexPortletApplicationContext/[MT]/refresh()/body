{
  registerSingleton("standardHandlerAdapter",SimpleControllerHandlerAdapter.class);
  registerSingleton("portletHandlerAdapter",SimplePortletHandlerAdapter.class);
  registerSingleton("myHandlerAdapter",MyHandlerAdapter.class);
  registerSingleton("viewController",ViewController.class);
  registerSingleton("editController",EditController.class);
  registerSingleton("helpController1",HelpController1.class);
  registerSingleton("helpController2",HelpController2.class);
  registerSingleton("testController1",TestController1.class);
  registerSingleton("testController2",TestController2.class);
  registerSingleton("requestLocaleCheckingController",RequestLocaleCheckingController.class);
  registerSingleton("localeContextCheckingController",LocaleContextCheckingController.class);
  registerSingleton("exceptionThrowingHandler1",ExceptionThrowingHandler.class);
  registerSingleton("exceptionThrowingHandler2",ExceptionThrowingHandler.class);
  registerSingleton("unknownHandler",Object.class);
  registerSingleton("myPortlet",MyPortlet.class);
  registerSingleton("portletMultipartResolver",MockMultipartResolver.class);
  registerSingleton("portletPostProcessor",SimplePortletPostProcessor.class);
  registerSingleton("testListener",TestApplicationListener.class);
  ConstructorArgumentValues cvs=new ConstructorArgumentValues();
  cvs.addIndexedArgumentValue(0,new MockPortletContext());
  cvs.addIndexedArgumentValue(1,"complex");
  registerBeanDefinition("portletConfig",new RootBeanDefinition(MockPortletConfig.class,cvs,null));
  UserRoleAuthorizationInterceptor userRoleInterceptor=new UserRoleAuthorizationInterceptor();
  userRoleInterceptor.setAuthorizedRoles(new String[]{"role1","role2"});
  ParameterHandlerMapping interceptingHandlerMapping=new ParameterHandlerMapping();
  interceptingHandlerMapping.setParameterName("interceptingParam");
  ParameterMappingInterceptor parameterMappingInterceptor=new ParameterMappingInterceptor();
  parameterMappingInterceptor.setParameterName("interceptingParam");
  List interceptors=new ArrayList();
  interceptors.add(parameterMappingInterceptor);
  interceptors.add(userRoleInterceptor);
  interceptors.add(new MyHandlerInterceptor1());
  interceptors.add(new MyHandlerInterceptor2());
  MutablePropertyValues pvs=new MutablePropertyValues();
  Map portletModeMap=new ManagedMap();
  portletModeMap.put("view",new RuntimeBeanReference("viewController"));
  portletModeMap.put("edit",new RuntimeBeanReference("editController"));
  pvs.addPropertyValue("portletModeMap",portletModeMap);
  pvs.addPropertyValue("interceptors",interceptors);
  registerSingleton("handlerMapping3",PortletModeHandlerMapping.class,pvs);
  pvs=new MutablePropertyValues();
  Map parameterMap=new ManagedMap();
  parameterMap.put("test1",new RuntimeBeanReference("testController1"));
  parameterMap.put("test2",new RuntimeBeanReference("testController2"));
  parameterMap.put("requestLocaleChecker",new RuntimeBeanReference("requestLocaleCheckingController"));
  parameterMap.put("contextLocaleChecker",new RuntimeBeanReference("localeContextCheckingController"));
  parameterMap.put("exception1",new RuntimeBeanReference("exceptionThrowingHandler1"));
  parameterMap.put("exception2",new RuntimeBeanReference("exceptionThrowingHandler2"));
  parameterMap.put("myPortlet",new RuntimeBeanReference("myPortlet"));
  parameterMap.put("unknown",new RuntimeBeanReference("unknownHandler"));
  pvs.addPropertyValue("parameterMap",parameterMap);
  pvs.addPropertyValue("parameterName","myParam");
  pvs.addPropertyValue("order","2");
  registerSingleton("handlerMapping2",ParameterHandlerMapping.class,pvs);
  pvs=new MutablePropertyValues();
  Map innerMap=new ManagedMap();
  innerMap.put("help1",new RuntimeBeanReference("helpController1"));
  innerMap.put("help2",new RuntimeBeanReference("helpController2"));
  Map outerMap=new ManagedMap();
  outerMap.put("help",innerMap);
  pvs.addPropertyValue("portletModeParameterMap",outerMap);
  pvs.addPropertyValue("order","1");
  registerSingleton("handlerMapping1",PortletModeParameterHandlerMapping.class,pvs);
  pvs=new MutablePropertyValues();
  pvs.addPropertyValue("order","1");
  pvs.addPropertyValue("exceptionMappings","java.lang.IllegalAccessException=failed-illegalaccess\n" + "PortletRequestBindingException=failed-binding\n" + "UnavailableException=failed-unavailable");
  pvs.addPropertyValue("defaultErrorView","failed-default-1");
  registerSingleton("exceptionResolver",SimpleMappingExceptionResolver.class,pvs);
  pvs=new MutablePropertyValues();
  pvs.addPropertyValue("order","0");
  pvs.addPropertyValue("exceptionMappings","java.lang.Exception=failed-exception\n" + "java.lang.RuntimeException=failed-runtime");
  List mappedHandlers=new ManagedList();
  mappedHandlers.add(new RuntimeBeanReference("exceptionThrowingHandler1"));
  pvs.addPropertyValue("mappedHandlers",mappedHandlers);
  pvs.addPropertyValue("defaultErrorView","failed-default-0");
  registerSingleton("handlerExceptionResolver",SimpleMappingExceptionResolver.class,pvs);
  addMessage("test",Locale.ENGLISH,"test message");
  addMessage("test",Locale.CANADA,"Canadian & test message");
  addMessage("test.args",Locale.ENGLISH,"test {0} and {1}");
  super.refresh();
}
