{
  this.dataSource=SchedulerFactoryBean.getConfigTimeDataSource();
  if (this.dataSource == null) {
    throw new SchedulerConfigException("No local DataSource found for configuration - " + "'dataSource' property must be set on SchedulerFactoryBean");
  }
  setDataSource(TX_DATA_SOURCE_PREFIX + getInstanceName());
  setDontSetAutoCommitFalse(true);
  DBConnectionManager.getInstance().addConnectionProvider(TX_DATA_SOURCE_PREFIX + getInstanceName(),new ConnectionProvider(){
    @Override public Connection getConnection() throws SQLException {
      return DataSourceUtils.doGetConnection(dataSource);
    }
    @Override public void shutdown(){
    }
    public void initialize(){
    }
  }
);
  DataSource nonTxDataSource=SchedulerFactoryBean.getConfigTimeNonTransactionalDataSource();
  final DataSource nonTxDataSourceToUse=(nonTxDataSource != null ? nonTxDataSource : this.dataSource);
  setNonManagedTXDataSource(NON_TX_DATA_SOURCE_PREFIX + getInstanceName());
  DBConnectionManager.getInstance().addConnectionProvider(NON_TX_DATA_SOURCE_PREFIX + getInstanceName(),new ConnectionProvider(){
    @Override public Connection getConnection() throws SQLException {
      return nonTxDataSourceToUse.getConnection();
    }
    @Override public void shutdown(){
    }
    public void initialize(){
    }
  }
);
  try {
    String productName=JdbcUtils.extractDatabaseMetaData(this.dataSource,"getDatabaseProductName").toString();
    productName=JdbcUtils.commonDatabaseName(productName);
    if (productName != null && productName.toLowerCase().contains("hsql")) {
      setUseDBLocks(false);
      setLockHandler(new SimpleSemaphore());
    }
  }
 catch (  MetaDataAccessException ex) {
    logWarnIfNonZero(1,"Could not detect database type. Assuming locks can be taken.");
  }
  super.initialize(loadHelper,signaler);
}
