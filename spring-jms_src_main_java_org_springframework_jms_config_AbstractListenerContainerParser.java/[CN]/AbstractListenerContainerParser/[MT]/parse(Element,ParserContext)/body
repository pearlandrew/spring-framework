{
  CompositeComponentDefinition compositeDef=new CompositeComponentDefinition(element.getTagName(),parserContext.extractSource(element));
  parserContext.pushContainingComponent(compositeDef);
  PropertyValues commonProperties=parseCommonContainerProperties(element,parserContext);
  PropertyValues specificProperties=parseSpecificContainerProperties(element,parserContext);
  String factoryId=element.getAttribute(FACTORY_ID_ATTRIBUTE);
  if (StringUtils.hasText(factoryId)) {
    RootBeanDefinition beanDefinition=createContainerFactory(factoryId,element,parserContext,commonProperties,specificProperties);
    if (beanDefinition != null) {
      beanDefinition.setSource(parserContext.extractSource(element));
      parserContext.registerBeanComponent(new BeanComponentDefinition(beanDefinition,factoryId));
    }
  }
  NodeList childNodes=element.getChildNodes();
  for (int i=0; i < childNodes.getLength(); i++) {
    Node child=childNodes.item(i);
    if (child.getNodeType() == Node.ELEMENT_NODE) {
      String localName=parserContext.getDelegate().getLocalName(child);
      if (LISTENER_ELEMENT.equals(localName)) {
        parseListener(element,(Element)child,parserContext,commonProperties,specificProperties);
      }
    }
  }
  parserContext.popAndRegisterContainingComponent();
  return null;
}
