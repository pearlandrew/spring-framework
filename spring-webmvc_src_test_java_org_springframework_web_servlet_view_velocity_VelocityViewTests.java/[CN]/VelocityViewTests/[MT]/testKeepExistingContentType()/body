{
  final String templateName="test.vm";
  WebApplicationContext wac=mock(WebApplicationContext.class);
  MockServletContext sc=new MockServletContext();
  sc.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE,wac);
  final Template expectedTemplate=new Template();
  VelocityConfig vc=new VelocityConfig(){
    @Override public VelocityEngine getVelocityEngine(){
      return new TestVelocityEngine(templateName,expectedTemplate);
    }
  }
;
  Map<String,VelocityConfig> configurers=new HashMap<String,VelocityConfig>();
  configurers.put("velocityConfigurer",vc);
  given(wac.getBeansOfType(VelocityConfig.class,true,false)).willReturn(configurers);
  given(wac.getServletContext()).willReturn(sc);
  given(wac.getBean("requestDataValueProcessor",RequestDataValueProcessor.class)).willReturn(null);
  HttpServletRequest request=new MockHttpServletRequest();
  final HttpServletResponse expectedResponse=new MockHttpServletResponse();
  expectedResponse.setContentType("myContentType");
  VelocityView vv=new VelocityView(){
    @Override protected void mergeTemplate(    Template template,    Context context,    HttpServletResponse response){
      assertTrue(template == expectedTemplate);
      assertTrue(response == expectedResponse);
    }
    @Override protected void exposeHelpers(    Map<String,Object> model,    HttpServletRequest request) throws Exception {
      model.put("myHelper","myValue");
    }
  }
;
  vv.setUrl(templateName);
  vv.setApplicationContext(wac);
  vv.render(new HashMap<String,Object>(),request,expectedResponse);
  assertEquals("myContentType",expectedResponse.getContentType());
}
