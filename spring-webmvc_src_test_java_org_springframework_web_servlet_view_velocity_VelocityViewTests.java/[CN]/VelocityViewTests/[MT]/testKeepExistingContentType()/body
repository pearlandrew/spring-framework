{
  final String templateName="test.vm";
  WebApplicationContext wac=createMock(WebApplicationContext.class);
  MockServletContext sc=new MockServletContext();
  sc.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE,wac);
  final Template expectedTemplate=new Template();
  VelocityConfig vc=new VelocityConfig(){
    @Override public VelocityEngine getVelocityEngine(){
      return new TestVelocityEngine(templateName,expectedTemplate);
    }
  }
;
  wac.getBeansOfType(VelocityConfig.class,true,false);
  Map<String,Object> configurers=new HashMap<String,Object>();
  configurers.put("velocityConfigurer",vc);
  expectLastCall().andReturn(configurers);
  wac.getParentBeanFactory();
  expectLastCall().andReturn(null);
  wac.getServletContext();
  expectLastCall().andReturn(sc).times(3);
  wac.getBean("requestDataValueProcessor",RequestDataValueProcessor.class);
  expectLastCall().andReturn(null);
  replay(wac);
  HttpServletRequest request=new MockHttpServletRequest();
  final HttpServletResponse expectedResponse=new MockHttpServletResponse();
  expectedResponse.setContentType("myContentType");
  VelocityView vv=new VelocityView(){
    @Override protected void mergeTemplate(    Template template,    Context context,    HttpServletResponse response){
      assertTrue(template == expectedTemplate);
      assertTrue(response == expectedResponse);
    }
    @Override protected void exposeHelpers(    Map<String,Object> model,    HttpServletRequest request) throws Exception {
      model.put("myHelper","myValue");
    }
  }
;
  vv.setUrl(templateName);
  vv.setApplicationContext(wac);
  vv.render(new HashMap<String,Object>(),request,expectedResponse);
  verify(wac);
  assertEquals("myContentType",expectedResponse.getContentType());
}
