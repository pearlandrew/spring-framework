{
  final String templateName="test.vm";
  WebApplicationContext wac=mock(WebApplicationContext.class);
  given(wac.getServletContext()).willReturn(new MockServletContext());
  final Template expectedTemplate=new Template();
  VelocityConfig vc=new VelocityConfig(){
    @Override public VelocityEngine getVelocityEngine(){
      return new TestVelocityEngine(templateName,expectedTemplate);
    }
  }
;
  Map<String,VelocityConfig> configurers=new HashMap<String,VelocityConfig>();
  configurers.put("velocityConfigurer",vc);
  given(wac.getBeansOfType(VelocityConfig.class,true,false)).willReturn(configurers);
  HttpServletRequest req=mock(HttpServletRequest.class);
  given(req.getAttribute(View.PATH_VARIABLES)).willReturn(null);
  given(req.getAttribute(DispatcherServlet.LOCALE_RESOLVER_ATTRIBUTE)).willReturn(new AcceptHeaderLocaleResolver());
  given(req.getLocale()).willReturn(Locale.CANADA);
  final HttpServletResponse expectedResponse=new MockHttpServletResponse();
  VelocityView vv=new VelocityView(){
    @Override protected void mergeTemplate(    Template template,    Context context,    HttpServletResponse response) throws Exception {
      assertTrue(template == expectedTemplate);
      assertTrue(response == expectedResponse);
      assertEquals("myValue",context.get("myHelper"));
      assertTrue(context.get("math") instanceof MathTool);
      assertTrue(context.get("dateTool") instanceof DateTool);
      DateTool dateTool=(DateTool)context.get("dateTool");
      assertTrue(dateTool.getLocale().equals(Locale.CANADA));
      assertTrue(context.get("numberTool") instanceof NumberTool);
      NumberTool numberTool=(NumberTool)context.get("numberTool");
      assertTrue(numberTool.getLocale().equals(Locale.CANADA));
    }
    @Override protected void exposeHelpers(    Map<String,Object> model,    HttpServletRequest request) throws Exception {
      model.put("myHelper","myValue");
    }
  }
;
  vv.setUrl(templateName);
  vv.setApplicationContext(wac);
  Map<String,Class> toolAttributes=new HashMap<String,Class>();
  toolAttributes.put("math",MathTool.class);
  vv.setToolAttributes(toolAttributes);
  vv.setDateToolAttribute("dateTool");
  vv.setNumberToolAttribute("numberTool");
  vv.setExposeSpringMacroHelpers(false);
  vv.render(new HashMap<String,Object>(),req,expectedResponse);
  assertEquals(AbstractView.DEFAULT_CONTENT_TYPE,expectedResponse.getContentType());
}
