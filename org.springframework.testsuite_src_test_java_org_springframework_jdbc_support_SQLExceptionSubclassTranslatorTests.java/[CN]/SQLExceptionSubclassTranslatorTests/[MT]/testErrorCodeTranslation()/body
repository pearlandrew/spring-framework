{
  if (JdkVersion.getMajorJavaVersion() < JdkVersion.JAVA_16) {
    return;
  }
  SQLExceptionTranslator sext=new SQLErrorCodeSQLExceptionTranslator(ERROR_CODES);
  SQLException dataIntegrityViolationEx=SQLExceptionSubclassFactory.newSQLDataException("","",0);
  DataIntegrityViolationException divex=(DataIntegrityViolationException)sext.translate("task","SQL",dataIntegrityViolationEx);
  assertEquals(dataIntegrityViolationEx,divex.getCause());
  SQLException featureNotSupEx=SQLExceptionSubclassFactory.newSQLFeatureNotSupportedException("","",0);
  InvalidDataAccessApiUsageException idaex=(InvalidDataAccessApiUsageException)sext.translate("task","SQL",featureNotSupEx);
  assertEquals(featureNotSupEx,idaex.getCause());
  SQLException dataIntegrityViolationEx2=SQLExceptionSubclassFactory.newSQLIntegrityConstraintViolationException("","",0);
  DataIntegrityViolationException divex2=(DataIntegrityViolationException)sext.translate("task","SQL",dataIntegrityViolationEx2);
  assertEquals(dataIntegrityViolationEx2,divex2.getCause());
  SQLException permissionDeniedEx=SQLExceptionSubclassFactory.newSQLInvalidAuthorizationSpecException("","",0);
  PermissionDeniedDataAccessException pdaex=(PermissionDeniedDataAccessException)sext.translate("task","SQL",permissionDeniedEx);
  assertEquals(permissionDeniedEx,pdaex.getCause());
  SQLException dataAccessResourceEx=SQLExceptionSubclassFactory.newSQLNonTransientConnectionException("","",0);
  DataAccessResourceFailureException darex=(DataAccessResourceFailureException)sext.translate("task","SQL",dataAccessResourceEx);
  assertEquals(dataAccessResourceEx,darex.getCause());
  SQLException badSqlEx2=SQLExceptionSubclassFactory.newSQLSyntaxErrorException("","",0);
  BadSqlGrammarException bsgex2=(BadSqlGrammarException)sext.translate("task","SQL2",badSqlEx2);
  assertEquals("SQL2",bsgex2.getSql());
  assertEquals(badSqlEx2,bsgex2.getSQLException());
  SQLException tranRollbackEx=SQLExceptionSubclassFactory.newSQLTransactionRollbackException("","",0);
  ConcurrencyFailureException cfex=(ConcurrencyFailureException)sext.translate("task","SQL",tranRollbackEx);
  assertEquals(tranRollbackEx,cfex.getCause());
  SQLException transientConnEx=SQLExceptionSubclassFactory.newSQLTransientConnectionException("","",0);
  TransientDataAccessResourceException tdarex=(TransientDataAccessResourceException)sext.translate("task","SQL",transientConnEx);
  assertEquals(transientConnEx,tdarex.getCause());
  SQLException transientConnEx2=SQLExceptionSubclassFactory.newSQLTimeoutException("","",0);
  TransientDataAccessResourceException tdarex2=(TransientDataAccessResourceException)sext.translate("task","SQL",transientConnEx2);
  assertEquals(transientConnEx2,tdarex2.getCause());
  SQLException recoverableEx=SQLExceptionSubclassFactory.newSQLRecoverableException("","",0);
  RecoverableDataAccessException rdaex2=(RecoverableDataAccessException)sext.translate("task","SQL",recoverableEx);
  assertEquals(recoverableEx,rdaex2.getCause());
  SQLException sexEct=new SQLException("","",1);
  BadSqlGrammarException bsgEct=(BadSqlGrammarException)sext.translate("task","SQL-ECT",sexEct);
  assertEquals("SQL-ECT",bsgEct.getSql());
  assertEquals(sexEct,bsgEct.getSQLException());
  SQLException sexFbt=new SQLException("","07xxx",666666666);
  BadSqlGrammarException bsgFbt=(BadSqlGrammarException)sext.translate("task","SQL-FBT",sexFbt);
  assertEquals("SQL-FBT",bsgFbt.getSql());
  assertEquals(sexFbt,bsgFbt.getSQLException());
  SQLException sexFbt2=new SQLException("","08xxx",666666666);
  DataAccessResourceFailureException darfFbt=(DataAccessResourceFailureException)sext.translate("task","SQL-FBT2",sexFbt2);
  assertEquals(sexFbt2,darfFbt.getCause());
}
