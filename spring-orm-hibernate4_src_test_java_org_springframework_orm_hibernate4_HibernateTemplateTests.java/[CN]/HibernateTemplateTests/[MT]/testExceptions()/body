{
  SQLException sqlEx=new SQLException("argh","27");
  final JDBCConnectionException jcex=new JDBCConnectionException("mymsg",sqlEx);
  try {
    hibernateTemplate.execute(new HibernateCallback<Object>(){
      @Override public Object doInHibernate(      Session session){
        throw jcex;
      }
    }
);
    fail("Should have thrown DataAccessResourceFailureException");
  }
 catch (  DataAccessResourceFailureException ex) {
    assertEquals(jcex,ex.getCause());
    assertTrue(ex.getMessage().contains("mymsg"));
  }
  final SQLGrammarException sgex=new SQLGrammarException("mymsg",sqlEx);
  try {
    hibernateTemplate.execute(new HibernateCallback<Object>(){
      @Override public Object doInHibernate(      Session session){
        throw sgex;
      }
    }
);
    fail("Should have thrown InvalidDataAccessResourceUsageException");
  }
 catch (  InvalidDataAccessResourceUsageException ex) {
    assertEquals(sgex,ex.getCause());
    assertTrue(ex.getMessage().contains("mymsg"));
  }
  final LockAcquisitionException laex=new LockAcquisitionException("mymsg",sqlEx);
  try {
    hibernateTemplate.execute(new HibernateCallback<Object>(){
      @Override public Object doInHibernate(      Session session){
        throw laex;
      }
    }
);
    fail("Should have thrown CannotAcquireLockException");
  }
 catch (  CannotAcquireLockException ex) {
    assertEquals(laex,ex.getCause());
    assertTrue(ex.getMessage().contains("mymsg"));
  }
  final ConstraintViolationException cvex=new ConstraintViolationException("mymsg",sqlEx,"myconstraint");
  try {
    hibernateTemplate.execute(new HibernateCallback<Object>(){
      @Override public Object doInHibernate(      Session session){
        throw cvex;
      }
    }
);
    fail("Should have thrown DataIntegrityViolationException");
  }
 catch (  DataIntegrityViolationException ex) {
    assertEquals(cvex,ex.getCause());
    assertTrue(ex.getMessage().contains("mymsg"));
  }
  final DataException dex=new DataException("mymsg",sqlEx);
  try {
    hibernateTemplate.execute(new HibernateCallback<Object>(){
      @Override public Object doInHibernate(      Session session){
        throw dex;
      }
    }
);
    fail("Should have thrown DataIntegrityViolationException");
  }
 catch (  DataIntegrityViolationException ex) {
    assertEquals(dex,ex.getCause());
    assertTrue(ex.getMessage().contains("mymsg"));
  }
  final JDBCException jdex=new JDBCException("mymsg",sqlEx);
  try {
    hibernateTemplate.execute(new HibernateCallback<Object>(){
      @Override public Object doInHibernate(      Session session){
        throw jdex;
      }
    }
);
    fail("Should have thrown HibernateJdbcException");
  }
 catch (  HibernateJdbcException ex) {
    assertEquals(jdex,ex.getCause());
    assertTrue(ex.getMessage().contains("mymsg"));
  }
  final PropertyValueException pvex=new PropertyValueException("mymsg","myentity","myproperty");
  try {
    hibernateTemplate.execute(new HibernateCallback<Object>(){
      @Override public Object doInHibernate(      Session session){
        throw pvex;
      }
    }
);
    fail("Should have thrown DataIntegrityViolationException");
  }
 catch (  DataIntegrityViolationException ex) {
    assertEquals(pvex,ex.getCause());
    assertTrue(ex.getMessage().contains("mymsg"));
  }
  try {
    hibernateTemplate.execute(new HibernateCallback<Object>(){
      @Override public Object doInHibernate(      Session session){
        throw new PersistentObjectException("");
      }
    }
);
    fail("Should have thrown InvalidDataAccessApiUsageException");
  }
 catch (  InvalidDataAccessApiUsageException ex) {
  }
  try {
    hibernateTemplate.execute(new HibernateCallback<Object>(){
      @Override public Object doInHibernate(      Session session){
        throw new TransientObjectException("");
      }
    }
);
    fail("Should have thrown InvalidDataAccessApiUsageException");
  }
 catch (  InvalidDataAccessApiUsageException ex) {
  }
  final ObjectDeletedException odex=new ObjectDeletedException("msg","id",TestBean.class.getName());
  try {
    hibernateTemplate.execute(new HibernateCallback<Object>(){
      @Override public Object doInHibernate(      Session session){
        throw odex;
      }
    }
);
    fail("Should have thrown InvalidDataAccessApiUsageException");
  }
 catch (  InvalidDataAccessApiUsageException ex) {
    assertEquals(odex,ex.getCause());
  }
  final QueryException qex=new QueryException("msg","query");
  try {
    hibernateTemplate.execute(new HibernateCallback<Object>(){
      @Override public Object doInHibernate(      Session session){
        throw qex;
      }
    }
);
    fail("Should have thrown InvalidDataAccessResourceUsageException");
  }
 catch (  HibernateQueryException ex) {
    assertEquals(qex,ex.getCause());
    assertEquals("query",ex.getQueryString());
  }
  final UnresolvableObjectException uoex=new UnresolvableObjectException("id",TestBean.class.getName());
  try {
    hibernateTemplate.execute(new HibernateCallback<Object>(){
      @Override public Object doInHibernate(      Session session){
        throw uoex;
      }
    }
);
    fail("Should have thrown HibernateObjectRetrievalFailureException");
  }
 catch (  HibernateObjectRetrievalFailureException ex) {
    assertEquals(TestBean.class.getName(),ex.getPersistentClassName());
    assertEquals("id",ex.getIdentifier());
    assertEquals(uoex,ex.getCause());
  }
  final ObjectNotFoundException onfe=new ObjectNotFoundException("id",TestBean.class.getName());
  try {
    hibernateTemplate.execute(new HibernateCallback<Object>(){
      @Override public Object doInHibernate(      Session session){
        throw onfe;
      }
    }
);
    fail("Should have thrown HibernateObjectRetrievalFailureException");
  }
 catch (  HibernateObjectRetrievalFailureException ex) {
    assertEquals(TestBean.class.getName(),ex.getPersistentClassName());
    assertEquals("id",ex.getIdentifier());
    assertEquals(onfe,ex.getCause());
  }
  final WrongClassException wcex=new WrongClassException("msg","id",TestBean.class.getName());
  try {
    hibernateTemplate.execute(new HibernateCallback<Object>(){
      @Override public Object doInHibernate(      Session session){
        throw wcex;
      }
    }
);
    fail("Should have thrown HibernateObjectRetrievalFailureException");
  }
 catch (  HibernateObjectRetrievalFailureException ex) {
    assertEquals(TestBean.class.getName(),ex.getPersistentClassName());
    assertEquals("id",ex.getIdentifier());
    assertEquals(wcex,ex.getCause());
  }
  final NonUniqueResultException nuex=new NonUniqueResultException(2);
  try {
    hibernateTemplate.execute(new HibernateCallback<Object>(){
      @Override public Object doInHibernate(      Session session){
        throw nuex;
      }
    }
);
    fail("Should have thrown IncorrectResultSizeDataAccessException");
  }
 catch (  IncorrectResultSizeDataAccessException ex) {
    assertEquals(1,ex.getExpectedSize());
    assertEquals(-1,ex.getActualSize());
  }
  final StaleObjectStateException sosex=new StaleObjectStateException(TestBean.class.getName(),"id");
  try {
    hibernateTemplate.execute(new HibernateCallback<Object>(){
      @Override public Object doInHibernate(      Session session){
        throw sosex;
      }
    }
);
    fail("Should have thrown HibernateOptimisticLockingFailureException");
  }
 catch (  HibernateOptimisticLockingFailureException ex) {
    assertEquals(TestBean.class.getName(),ex.getPersistentClassName());
    assertEquals("id",ex.getIdentifier());
    assertEquals(sosex,ex.getCause());
  }
  final StaleStateException ssex=new StaleStateException("msg");
  try {
    hibernateTemplate.execute(new HibernateCallback<Object>(){
      @Override public Object doInHibernate(      Session session){
        throw ssex;
      }
    }
);
    fail("Should have thrown HibernateOptimisticLockingFailureException");
  }
 catch (  HibernateOptimisticLockingFailureException ex) {
    assertNull(ex.getPersistentClassName());
    assertNull(ex.getIdentifier());
    assertEquals(ssex,ex.getCause());
  }
  final HibernateException hex=new HibernateException("msg");
  try {
    hibernateTemplate.execute(new HibernateCallback<Object>(){
      @Override public Object doInHibernate(      Session session){
        throw hex;
      }
    }
);
    fail("Should have thrown HibernateSystemException");
  }
 catch (  HibernateSystemException ex) {
    assertEquals(hex,ex.getCause());
  }
}
