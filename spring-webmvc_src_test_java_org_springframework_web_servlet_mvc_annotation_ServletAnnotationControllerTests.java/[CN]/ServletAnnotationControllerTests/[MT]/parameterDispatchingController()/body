{
  final MockServletContext servletContext=new MockServletContext();
  final MockServletConfig servletConfig=new MockServletConfig(servletContext);
  @SuppressWarnings("serial") DispatcherServlet servlet=new DispatcherServlet(){
    @Override protected WebApplicationContext createWebApplicationContext(    WebApplicationContext parent){
      GenericWebApplicationContext wac=new GenericWebApplicationContext();
      wac.setServletContext(servletContext);
      RootBeanDefinition bd=new RootBeanDefinition(MyParameterDispatchingController.class);
      wac.registerBeanDefinition("controller",bd);
      AnnotationConfigUtils.registerAnnotationConfigProcessors(wac);
      wac.getBeanFactory().registerResolvableDependency(ServletConfig.class,servletConfig);
      wac.refresh();
      return wac;
    }
  }
;
  servlet.init(servletConfig);
  MockHttpServletRequest request=new MockHttpServletRequest(servletContext,"GET","/myPath.do");
  MockHttpServletResponse response=new MockHttpServletResponse();
  HttpSession session=request.getSession();
  servlet.service(request,response);
  assertEquals("myView",response.getContentAsString());
  assertSame(servletContext,request.getAttribute("servletContext"));
  assertSame(servletConfig,request.getAttribute("servletConfig"));
  assertSame(session.getId(),request.getAttribute("sessionId"));
  assertSame(request.getRequestURI(),request.getAttribute("requestUri"));
  assertSame(request.getLocale(),request.getAttribute("locale"));
  request=new MockHttpServletRequest(servletContext,"GET","/myPath.do");
  response=new MockHttpServletResponse();
  session=request.getSession();
  servlet.service(request,response);
  assertEquals("myView",response.getContentAsString());
  assertSame(servletContext,request.getAttribute("servletContext"));
  assertSame(servletConfig,request.getAttribute("servletConfig"));
  assertSame(session.getId(),request.getAttribute("sessionId"));
  assertSame(request.getRequestURI(),request.getAttribute("requestUri"));
  request=new MockHttpServletRequest(servletContext,"GET","/myPath.do");
  request.addParameter("view","other");
  response=new MockHttpServletResponse();
  servlet.service(request,response);
  assertEquals("myOtherView",response.getContentAsString());
  request=new MockHttpServletRequest(servletContext,"GET","/myPath.do");
  request.addParameter("view","my");
  request.addParameter("lang","de");
  response=new MockHttpServletResponse();
  servlet.service(request,response);
  assertEquals("myLangView",response.getContentAsString());
  request=new MockHttpServletRequest(servletContext,"GET","/myPath.do");
  request.addParameter("surprise","!");
  response=new MockHttpServletResponse();
  servlet.service(request,response);
  assertEquals("mySurpriseView",response.getContentAsString());
  MyParameterDispatchingController deserialized=(MyParameterDispatchingController)SerializationTestUtils.serializeAndDeserialize(servlet.getWebApplicationContext().getBean("controller"));
  assertNotNull(deserialized.request);
  assertNotNull(deserialized.session);
}
