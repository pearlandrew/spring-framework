{
  UserTransaction ut=mock(UserTransaction.class);
  given(ut.getStatus()).willReturn(Status.STATUS_NO_TRANSACTION,Status.STATUS_ACTIVE);
  final SessionFactory sf=mock(SessionFactory.class);
  final Session session=mock(Session.class);
  given(sf.openSession()).willReturn(session);
  given(session.getSessionFactory()).willReturn(sf);
  given(session.isOpen()).willReturn(true);
  given(session.getFlushMode()).willReturn(FlushMode.AUTO);
  JtaTransactionManager tm=new JtaTransactionManager(ut);
  TransactionTemplate tt=new TransactionTemplate(tm);
  tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_SUPPORTS);
  final TransactionTemplate tt2=new TransactionTemplate(tm);
  tt2.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  tt.execute(new TransactionCallback(){
    @Override public Object doInTransaction(    TransactionStatus status){
      assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
      assertTrue("Is not new transaction",!status.isNewTransaction());
      assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
      assertFalse(TransactionSynchronizationManager.isActualTransactionActive());
      HibernateTemplate ht=new HibernateTemplate(sf);
      ht.setFlushMode(HibernateTemplate.FLUSH_EAGER);
      ht.execute(new HibernateCallback(){
        @Override public Object doInHibernate(        org.hibernate.Session session){
          return null;
        }
      }
);
      assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
      tt2.execute(new TransactionCallback(){
        @Override public Object doInTransaction(        TransactionStatus status){
          HibernateTemplate ht=new HibernateTemplate(sf);
          ht.setFlushMode(HibernateTemplate.FLUSH_EAGER);
          return ht.executeFind(new HibernateCallback(){
            @Override public Object doInHibernate(            org.hibernate.Session session){
              assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
              return null;
            }
          }
);
        }
      }
);
      assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
      assertFalse(TransactionSynchronizationManager.isActualTransactionActive());
      return null;
    }
  }
);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  verify(session,times(3)).flush();
  verify(session).close();
}
