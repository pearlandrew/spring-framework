{
  UserTransaction ut=mock(UserTransaction.class);
  given(ut.getStatus()).willReturn(Status.STATUS_NO_TRANSACTION,Status.STATUS_ACTIVE);
  final SessionFactory sf=mock(SessionFactory.class);
  final Session session=mock(Session.class);
  given(sf.openSession()).willReturn(session);
  given(session.getSessionFactory()).willReturn(sf);
  given(session.isOpen()).willReturn(true);
  given(session.getFlushMode()).willReturn(FlushMode.AUTO);
  JtaTransactionManager ptm=new JtaTransactionManager(ut);
  TransactionTemplate tt=new TransactionTemplate(ptm);
  final List l=new ArrayList();
  l.add("test");
  final HibernateException flushEx=new HibernateException("flush failure");
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  willThrow(flushEx).given(session).flush();
  try {
    tt.execute(new TransactionCallback(){
      @Override public Object doInTransaction(      TransactionStatus status){
        try {
          assertTrue("JTA synchronizations active",TransactionSynchronizationManager.isSynchronizationActive());
          assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
          HibernateTemplate ht=new HibernateTemplate(sf);
          ht.setExposeNativeSession(true);
          List htl=ht.executeFind(new HibernateCallback(){
            @Override public Object doInHibernate(            org.hibernate.Session sess){
              assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
              assertEquals(session,sess);
              return l;
            }
          }
);
          ht=new HibernateTemplate(sf);
          ht.setExposeNativeSession(true);
          htl=ht.executeFind(new HibernateCallback(){
            @Override public Object doInHibernate(            org.hibernate.Session sess){
              assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
              assertEquals(session,sess);
              return l;
            }
          }
);
          assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
          return htl;
        }
 catch (        Error err) {
          err.printStackTrace();
          throw err;
        }
      }
    }
);
  }
 catch (  DataAccessException ex) {
    assertTrue(flushEx == ex.getCause());
  }
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  verify(ut).begin();
  verify(ut).rollback();
  verify(session).close();
}
