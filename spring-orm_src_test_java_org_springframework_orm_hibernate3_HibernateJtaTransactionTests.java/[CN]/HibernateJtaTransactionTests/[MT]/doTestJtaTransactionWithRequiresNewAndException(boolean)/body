{
  UserTransaction ut=mock(UserTransaction.class);
  TransactionManager tm=mock(TransactionManager.class);
  javax.transaction.Transaction tx=mock(javax.transaction.Transaction.class);
  final SessionFactory sf=mock(SessionFactory.class);
  final Session session1=mock(Session.class);
  given(ut.getStatus()).willReturn(Status.STATUS_NO_TRANSACTION,Status.STATUS_ACTIVE,Status.STATUS_ACTIVE);
  if (suspendException) {
    given(tm.suspend()).willThrow(new SystemException());
  }
 else {
    given(tm.suspend()).willReturn(tx);
    willDoNothing().willThrow(new SystemException()).given(ut).begin();
  }
  given(sf.openSession()).willReturn(session1);
  given(session1.getSessionFactory()).willReturn(sf);
  JtaTransactionManager ptm=new JtaTransactionManager();
  ptm.setUserTransaction(ut);
  ptm.setTransactionManager(tm);
  final TransactionTemplate tt=new TransactionTemplate(ptm);
  tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  try {
    tt.execute(new TransactionCallback(){
      @Override public Object doInTransaction(      TransactionStatus status){
        org.hibernate.Session outerSession=SessionFactoryUtils.getSession(sf,false);
        assertSame(session1,outerSession);
        SessionHolder holder=(SessionHolder)TransactionSynchronizationManager.getResource(sf);
        assertTrue("Has thread session",holder != null);
        tt.execute(new TransactionCallback(){
          @Override public Object doInTransaction(          TransactionStatus status){
            return null;
          }
        }
);
        return null;
      }
    }
);
    fail("Should have thrown TransactionException");
  }
 catch (  TransactionException ex) {
  }
 finally {
    assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  }
  verify(ut,atLeastOnce()).begin();
  if (!suspendException) {
    verify(tm).resume(tx);
  }
  verify(ut).rollback();
  verify(session1).disconnect();
  verify(session1).close();
}
