{
  TransactionManager tm=mock(TransactionManager.class);
  MockJtaTransaction transaction=new MockJtaTransaction();
  given(tm.getTransaction()).willReturn(transaction);
  final SessionFactoryImplementor sf=mock(SessionFactoryImplementor.class);
  final Session session=mock(Session.class);
  given(sf.getTransactionManager()).willReturn(tm);
  given(session.isOpen()).willReturn(true);
  if (flushNever) {
    given(session.getFlushMode()).willReturn(FlushMode.MANUAL,FlushMode.AUTO,FlushMode.MANUAL);
  }
 else {
    given(session.getFlushMode()).willReturn(FlushMode.AUTO);
  }
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  TransactionSynchronizationManager.bindResource(sf,new SessionHolder(session));
  try {
    assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
    HibernateTemplate ht=new HibernateTemplate(sf);
    ht.setExposeNativeSession(true);
    for (int i=0; i < 5; i++) {
      ht.executeFind(new HibernateCallback(){
        @Override public Object doInHibernate(        org.hibernate.Session sess){
          assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
          assertEquals(session,sess);
          return null;
        }
      }
);
    }
    Synchronization synchronization=transaction.getSynchronization();
    assertTrue("JTA synchronization registered",synchronization != null);
    synchronization.beforeCompletion();
    synchronization.afterCompletion(Status.STATUS_COMMITTED);
    assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
  }
  finally {
    TransactionSynchronizationManager.unbindResource(sf);
  }
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  InOrder ordered=inOrder(session);
  if (flushNever) {
    ordered.verify(session).setFlushMode(FlushMode.AUTO);
    ordered.verify(session).setFlushMode(FlushMode.MANUAL);
  }
 else {
    ordered.verify(session).flush();
  }
  ordered.verify(session).disconnect();
}
