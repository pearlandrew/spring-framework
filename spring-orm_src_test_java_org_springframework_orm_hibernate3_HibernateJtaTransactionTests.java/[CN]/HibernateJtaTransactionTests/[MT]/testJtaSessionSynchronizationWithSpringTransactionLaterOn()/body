{
  MockControl utControl=MockControl.createControl(UserTransaction.class);
  UserTransaction ut=(UserTransaction)utControl.getMock();
  MockControl tmControl=MockControl.createControl(TransactionManager.class);
  TransactionManager tm=(TransactionManager)tmControl.getMock();
  MockJtaTransaction transaction=new MockJtaTransaction();
  ut.getStatus();
  utControl.setReturnValue(Status.STATUS_ACTIVE,1);
  tm.getTransaction();
  tmControl.setReturnValue(transaction,6);
  MockControl sfControl=MockControl.createControl(SessionFactoryImplementor.class);
  final SessionFactoryImplementor sf=(SessionFactoryImplementor)sfControl.getMock();
  final MockControl sessionControl=MockControl.createControl(Session.class);
  final Session session=(Session)sessionControl.getMock();
  sf.openSession();
  sfControl.setReturnValue(session,1);
  sf.getTransactionManager();
  sfControl.setReturnValue(tm,6);
  session.isOpen();
  sessionControl.setReturnValue(true,4);
  session.getFlushMode();
  sessionControl.setReturnValue(FlushMode.AUTO,1);
  session.flush();
  sessionControl.setVoidCallable(1);
  session.close();
  sessionControl.setReturnValue(null,1);
  utControl.replay();
  tmControl.replay();
  sfControl.replay();
  sessionControl.replay();
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  final HibernateTemplate ht=new HibernateTemplate(sf);
  ht.setExposeNativeSession(true);
  for (int i=0; i < 2; i++) {
    ht.executeFind(new HibernateCallback(){
      @Override public Object doInHibernate(      org.hibernate.Session sess){
        assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
        assertEquals(session,sess);
        return null;
      }
    }
);
  }
  TransactionTemplate tt=new TransactionTemplate(new JtaTransactionManager(ut));
  tt.execute(new TransactionCallbackWithoutResult(){
    @Override protected void doInTransactionWithoutResult(    TransactionStatus status){
      for (int i=2; i < 5; i++) {
        ht.executeFind(new HibernateCallback(){
          @Override public Object doInHibernate(          org.hibernate.Session sess){
            assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
            assertEquals(session,sess);
            return null;
          }
        }
);
      }
    }
  }
);
  Synchronization synchronization=transaction.getSynchronization();
  assertTrue("JTA synchronization registered",synchronization != null);
  synchronization.beforeCompletion();
  synchronization.afterCompletion(Status.STATUS_COMMITTED);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  utControl.verify();
  tmControl.verify();
  sfControl.verify();
  sessionControl.verify();
}
