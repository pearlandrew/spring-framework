{
  MockControl tmControl=MockControl.createControl(TransactionManager.class);
  TransactionManager tm=(TransactionManager)tmControl.getMock();
  MockJtaTransaction transaction=new MockJtaTransaction();
  tm.getTransaction();
  tmControl.setReturnValue(transaction,6);
  MockControl sfControl=MockControl.createControl(SessionFactoryImplementor.class);
  final SessionFactoryImplementor sf=(SessionFactoryImplementor)sfControl.getMock();
  final MockControl sessionControl=MockControl.createControl(Session.class);
  final Session session=(Session)sessionControl.getMock();
  sf.openSession();
  sfControl.setReturnValue(session,1);
  sf.getTransactionManager();
  sfControl.setReturnValue(tm,6);
  session.isOpen();
  sessionControl.setReturnValue(true,4);
  session.close();
  sessionControl.setReturnValue(null,1);
  tmControl.replay();
  sfControl.replay();
  sessionControl.replay();
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  HibernateTemplate ht=new HibernateTemplate(sf);
  ht.setExposeNativeSession(true);
  for (int i=0; i < 5; i++) {
    ht.executeFind(new HibernateCallback(){
      @Override public Object doInHibernate(      org.hibernate.Session sess){
        assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
        assertEquals(session,sess);
        return null;
      }
    }
);
  }
  Synchronization synchronization=transaction.getSynchronization();
  assertTrue("JTA synchronization registered",synchronization != null);
  synchronization.afterCompletion(Status.STATUS_ROLLEDBACK);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  tmControl.verify();
  sfControl.verify();
  sessionControl.verify();
}
