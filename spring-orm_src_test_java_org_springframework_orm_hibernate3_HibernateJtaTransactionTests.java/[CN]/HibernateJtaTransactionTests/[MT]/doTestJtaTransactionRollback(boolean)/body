{
  UserTransaction ut=mock(UserTransaction.class);
  given(ut.getStatus()).willReturn(Status.STATUS_NO_TRANSACTION,Status.STATUS_ACTIVE);
  final SessionFactory sf=mock(SessionFactory.class);
  final Session session=mock(Session.class);
  given(sf.openSession()).willReturn(session);
  given(session.getSessionFactory()).willReturn(sf);
  JtaTransactionManager ptm=new JtaTransactionManager(ut);
  TransactionTemplate tt=new TransactionTemplate(ptm);
  final List l=new ArrayList();
  l.add("test");
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  Object result=tt.execute(new TransactionCallback(){
    @Override public Object doInTransaction(    TransactionStatus status){
      try {
        assertTrue("JTA synchronizations active",TransactionSynchronizationManager.isSynchronizationActive());
        HibernateTemplate ht=new HibernateTemplate(sf);
        List htl=ht.executeFind(new HibernateCallback(){
          @Override public Object doInHibernate(          org.hibernate.Session session){
            return l;
          }
        }
);
        if (flush) {
          status.flush();
        }
        status.setRollbackOnly();
        return htl;
      }
 catch (      Error err) {
        err.printStackTrace();
        throw err;
      }
    }
  }
);
  assertTrue("Correct result list",result == l);
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  InOrder ordered=inOrder(ut);
  ordered.verify(ut).begin();
  ordered.verify(ut).rollback();
  if (flush) {
    verify(session).flush();
  }
  verify(session).close();
}
