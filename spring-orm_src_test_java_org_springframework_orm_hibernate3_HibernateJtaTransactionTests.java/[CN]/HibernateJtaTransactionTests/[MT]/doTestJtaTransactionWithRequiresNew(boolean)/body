{
  UserTransaction ut=mock(UserTransaction.class);
  TransactionManager tm=mock(TransactionManager.class);
  javax.transaction.Transaction tx1=mock(javax.transaction.Transaction.class);
  final SessionFactory sf=mock(SessionFactory.class);
  final Session session1=mock(Session.class);
  final Session session2=mock(Session.class);
  given(ut.getStatus()).willReturn(Status.STATUS_NO_TRANSACTION,Status.STATUS_ACTIVE,Status.STATUS_ACTIVE,Status.STATUS_ACTIVE,Status.STATUS_ACTIVE,Status.STATUS_ACTIVE);
  given(tm.suspend()).willReturn(tx1);
  given(sf.openSession()).willReturn(session1,session2);
  given(session1.getSessionFactory()).willReturn(sf);
  given(session2.getSessionFactory()).willReturn(sf);
  given(session1.isOpen()).willReturn(true);
  given(session2.isOpen()).willReturn(true);
  given(session2.getFlushMode()).willReturn(FlushMode.AUTO);
  if (!rollback) {
    given(session1.getFlushMode()).willReturn(FlushMode.AUTO);
  }
  JtaTransactionManager ptm=new JtaTransactionManager();
  ptm.setUserTransaction(ut);
  ptm.setTransactionManager(tm);
  final TransactionTemplate tt=new TransactionTemplate(ptm);
  tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  try {
    tt.execute(new TransactionCallback(){
      @Override public Object doInTransaction(      TransactionStatus status){
        org.hibernate.Session outerSession=SessionFactoryUtils.getSession(sf,false);
        assertSame(session1,outerSession);
        SessionHolder holder=(SessionHolder)TransactionSynchronizationManager.getResource(sf);
        assertTrue("Has thread session",holder != null);
        try {
          tt.execute(new TransactionCallback(){
            @Override public Object doInTransaction(            TransactionStatus status){
              org.hibernate.Session innerSession=SessionFactoryUtils.getSession(sf,false);
              assertSame(session2,innerSession);
              HibernateTemplate ht=new HibernateTemplate(sf);
              ht.setFlushMode(HibernateTemplate.FLUSH_EAGER);
              return ht.executeFind(new HibernateCallback(){
                @Override public Object doInHibernate(                org.hibernate.Session innerSession){
                  if (rollback) {
                    throw new HibernateException("");
                  }
                  return null;
                }
              }
);
            }
          }
);
          return null;
        }
  finally {
          assertTrue("Same thread session as before",outerSession == SessionFactoryUtils.getSession(sf,false));
        }
      }
    }
);
    if (rollback) {
      fail("Should have thrown DataAccessException");
    }
  }
 catch (  DataAccessException ex) {
    if (!rollback) {
      throw ex;
    }
  }
 finally {
    assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  }
  verify(ut,times(2)).begin();
  verify(tm).resume(tx1);
  if (rollback) {
    verify(ut,times(2)).rollback();
  }
 else {
    verify(ut,times(2)).commit();
  }
  verify(session1).disconnect();
  verify(session1).close();
  if (!rollback) {
    verify(session1).flush();
    verify(session2,atLeastOnce()).flush();
  }
  verify(session2).close();
}
