{
  TransactionManager tm=mock(TransactionManager.class);
  MockJtaTransaction transaction=new MockJtaTransaction();
  given(tm.getTransaction()).willReturn(transaction);
  final SessionFactory sf=mock(SessionFactory.class);
  final Session session=mock(Session.class);
  final SessionFactoryImplementor sfi=mock(SessionFactoryImplementor.class);
  given(sf.openSession()).willReturn(session);
  given(session.getSessionFactory()).willReturn(sfi);
  given(sfi.getTransactionManager()).willReturn(tm);
  given(session.isOpen()).willReturn(true);
  given(session.getFlushMode()).willReturn(FlushMode.AUTO);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  HibernateTemplate ht=new HibernateTemplate(sf);
  ht.setExposeNativeSession(true);
  for (int i=0; i < 5; i++) {
    ht.executeFind(new HibernateCallback(){
      @Override public Object doInHibernate(      org.hibernate.Session sess){
        assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
        assertEquals(session,sess);
        return null;
      }
    }
);
  }
  Synchronization synchronization=transaction.getSynchronization();
  assertTrue("JTA Synchronization registered",synchronization != null);
  synchronization.beforeCompletion();
  synchronization.afterCompletion(Status.STATUS_COMMITTED);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  verify(session).flush();
  verify(session).close();
}
