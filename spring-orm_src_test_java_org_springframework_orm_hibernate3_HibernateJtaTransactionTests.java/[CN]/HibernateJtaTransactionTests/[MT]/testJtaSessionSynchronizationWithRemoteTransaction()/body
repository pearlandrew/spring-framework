{
  MockControl tmControl=MockControl.createControl(TransactionManager.class);
  TransactionManager tm=(TransactionManager)tmControl.getMock();
  MockJtaTransaction transaction=new MockJtaTransaction();
  MockControl sfControl=MockControl.createControl(SessionFactoryImplementor.class);
  final SessionFactoryImplementor sf=(SessionFactoryImplementor)sfControl.getMock();
  final MockControl sessionControl=MockControl.createControl(Session.class);
  final Session session=(Session)sessionControl.getMock();
  for (int j=0; j < 2; j++) {
    tmControl.reset();
    sfControl.reset();
    sessionControl.reset();
    tm.getTransaction();
    tmControl.setReturnValue(transaction,6);
    sf.openSession();
    sfControl.setReturnValue(session,1);
    sf.getTransactionManager();
    sfControl.setReturnValue(tm,6);
    session.isOpen();
    sessionControl.setReturnValue(true,4);
    session.getFlushMode();
    sessionControl.setReturnValue(FlushMode.AUTO,1);
    session.flush();
    sessionControl.setVoidCallable(1);
    session.close();
    sessionControl.setReturnValue(null,1);
    tmControl.replay();
    sfControl.replay();
    sessionControl.replay();
    if (j == 0) {
      assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
    }
 else {
      assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
    }
    HibernateTemplate ht=new HibernateTemplate(sf);
    ht.setExposeNativeSession(true);
    for (int i=0; i < 5; i++) {
      ht.executeFind(new HibernateCallback(){
        @Override public Object doInHibernate(        org.hibernate.Session sess){
          assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
          assertEquals(session,sess);
          return null;
        }
      }
);
    }
    final Synchronization synchronization=transaction.getSynchronization();
    assertTrue("JTA synchronization registered",synchronization != null);
    Thread synch=new Thread(){
      @Override public void run(){
        synchronization.beforeCompletion();
        synchronization.afterCompletion(Status.STATUS_COMMITTED);
      }
    }
;
    synch.start();
    synch.join();
    assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
    SessionHolder sessionHolder=(SessionHolder)TransactionSynchronizationManager.getResource(sf);
    assertTrue("Thread session holder empty",sessionHolder.isEmpty());
    assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
    tmControl.verify();
    sfControl.verify();
    sessionControl.verify();
  }
  TransactionSynchronizationManager.unbindResource(sf);
}
