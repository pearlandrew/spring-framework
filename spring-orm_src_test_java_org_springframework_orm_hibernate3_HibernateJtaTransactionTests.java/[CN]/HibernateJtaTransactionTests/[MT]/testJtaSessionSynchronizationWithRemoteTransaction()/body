{
  TransactionManager tm=mock(TransactionManager.class);
  MockJtaTransaction transaction=new MockJtaTransaction();
  final SessionFactoryImplementor sf=mock(SessionFactoryImplementor.class);
  final Session session=mock(Session.class);
  given(tm.getTransaction()).willReturn(transaction);
  given(sf.openSession()).willReturn(session);
  given(sf.getTransactionManager()).willReturn(tm);
  given(session.isOpen()).willReturn(true);
  given(session.getFlushMode()).willReturn(FlushMode.AUTO);
  for (int j=0; j < 2; j++) {
    if (j == 0) {
      assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
    }
 else {
      assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
    }
    HibernateTemplate ht=new HibernateTemplate(sf);
    ht.setExposeNativeSession(true);
    for (int i=0; i < 5; i++) {
      ht.executeFind(new HibernateCallback(){
        @Override public Object doInHibernate(        org.hibernate.Session sess){
          assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
          assertEquals(session,sess);
          return null;
        }
      }
);
    }
    final Synchronization synchronization=transaction.getSynchronization();
    assertTrue("JTA synchronization registered",synchronization != null);
    Thread synch=new Thread(){
      @Override public void run(){
        synchronization.beforeCompletion();
        synchronization.afterCompletion(Status.STATUS_COMMITTED);
      }
    }
;
    synch.start();
    synch.join();
    assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
    SessionHolder sessionHolder=(SessionHolder)TransactionSynchronizationManager.getResource(sf);
    assertTrue("Thread session holder empty",sessionHolder.isEmpty());
    assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  }
  verify(session,times(2)).flush();
  verify(session,times(2)).close();
  TransactionSynchronizationManager.unbindResource(sf);
}
