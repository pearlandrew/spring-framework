{
  HttpServletRequest servletRequest=getHttpServletRequest(request);
  HttpServletResponse servletResponse=getHttpServletResponse(response);
  final ServletWebSocketHttpExchange exchange=createHttpExchange(servletRequest,servletResponse);
  exchange.putAttachment(HandshakeUtil.PATH_PARAMS,Collections.<String,String>emptyMap());
  ServerWebSocketContainer wsContainer=(ServerWebSocketContainer)getContainer(servletRequest);
  final EndpointSessionHandler endpointSessionHandler=new EndpointSessionHandler(wsContainer);
  final ConfiguredServerEndpoint configuredServerEndpoint=createConfiguredServerEndpoint(selectedProtocol,selectedExtensions,endpoint,servletRequest);
  final Handshake handshake=getHandshakeToUse(exchange,configuredServerEndpoint);
  HttpUpgradeListener upgradeListener=(HttpUpgradeListener)Proxy.newProxyInstance(getClass().getClassLoader(),new Class<?>[]{HttpUpgradeListener.class},new InvocationHandler(){
    @Override public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {
      if ("handleUpgrade".equals(method.getName())) {
        Object connection=args[0];
        Object bufferPool=ReflectionUtils.invokeMethod(getBufferPoolMethod,exchange);
        WebSocketChannel channel=(WebSocketChannel)ReflectionUtils.invokeMethod(createChannelMethod,handshake,exchange,connection,bufferPool);
        if (peerConnections != null) {
          peerConnections.add(channel);
        }
        endpointSessionHandler.onConnect(exchange,channel);
        return null;
      }
 else {
        return ReflectionUtils.invokeMethod(method,this,args);
      }
    }
  }
);
  exchange.upgradeChannel(upgradeListener);
  handshake.handshake(exchange);
}
