{
  Method[] methods=StringGenericParameter.class.getMethods();
  Method bridgeMethod=null;
  Method bridgedMethod=null;
  for (int i=0; i < methods.length; i++) {
    Method method=methods[i];
    if ("getFor".equals(method.getName()) && !method.getParameterTypes()[0].equals(Integer.class)) {
      if (method.getReturnType().equals(Object.class)) {
        bridgeMethod=method;
      }
 else {
        bridgedMethod=method;
      }
    }
  }
  assertNotNull("bridgedMethod should not be null",bridgedMethod);
  assertNotNull("bridgeMethod should not be null",bridgeMethod);
  assertTrue(bridgeMethod.isBridge());
  assertFalse(bridgedMethod.isBridge());
  assertEquals(bridgedMethod,BridgeMethodResolver.findBridgedMethod(bridgeMethod));
}
