{
  if (!this.lookupMethodsChecked.contains(beanName)) {
    ReflectionUtils.doWithMethods(beanClass,new ReflectionUtils.MethodCallback(){
      @Override public void doWith(      Method method) throws IllegalArgumentException, IllegalAccessException {
        Lookup lookup=method.getAnnotation(Lookup.class);
        if (lookup != null) {
          LookupOverride override=new LookupOverride(method,lookup.value());
          try {
            RootBeanDefinition mbd=(RootBeanDefinition)beanFactory.getMergedBeanDefinition(beanName);
            mbd.getMethodOverrides().addOverride(override);
          }
 catch (          NoSuchBeanDefinitionException ex) {
            throw new BeanCreationException(beanName,"Cannot apply @Lookup to beans without corresponding bean definition");
          }
        }
      }
    }
);
    this.lookupMethodsChecked.add(beanName);
  }
  Constructor<?>[] candidateConstructors=this.candidateConstructorsCache.get(beanClass);
  if (candidateConstructors == null) {
synchronized (this.candidateConstructorsCache) {
      candidateConstructors=this.candidateConstructorsCache.get(beanClass);
      if (candidateConstructors == null) {
        Constructor<?>[] rawCandidates=beanClass.getDeclaredConstructors();
        List<Constructor<?>> candidates=new ArrayList<Constructor<?>>(rawCandidates.length);
        Constructor<?> requiredConstructor=null;
        Constructor<?> defaultConstructor=null;
        for (        Constructor<?> candidate : rawCandidates) {
          AnnotationAttributes annotation=findAutowiredAnnotation(candidate);
          if (annotation != null) {
            if (requiredConstructor != null) {
              throw new BeanCreationException(beanName,"Invalid autowire-marked constructor: " + candidate + ". Found another constructor with 'required' Autowired annotation: "+ requiredConstructor);
            }
            if (candidate.getParameterTypes().length == 0) {
              throw new IllegalStateException("Autowired annotation requires at least one argument: " + candidate);
            }
            boolean required=determineRequiredStatus(annotation);
            if (required) {
              if (!candidates.isEmpty()) {
                throw new BeanCreationException(beanName,"Invalid autowire-marked constructors: " + candidates + ". Found another constructor with 'required' Autowired annotation: "+ candidate);
              }
              requiredConstructor=candidate;
            }
            candidates.add(candidate);
          }
 else           if (candidate.getParameterTypes().length == 0) {
            defaultConstructor=candidate;
          }
        }
        if (!candidates.isEmpty()) {
          if (requiredConstructor == null && defaultConstructor != null) {
            candidates.add(defaultConstructor);
          }
          candidateConstructors=candidates.toArray(new Constructor<?>[candidates.size()]);
        }
 else {
          candidateConstructors=new Constructor<?>[0];
        }
        this.candidateConstructorsCache.put(beanClass,candidateConstructors);
      }
    }
  }
  return (candidateConstructors.length > 0 ? candidateConstructors : null);
}
