{
  LinkedList<InjectionMetadata.InjectedElement> elements=new LinkedList<>();
  Class<?> targetClass=clazz;
  do {
    final LinkedList<InjectionMetadata.InjectedElement> currElements=new LinkedList<>();
    ReflectionUtils.doWithLocalFields(targetClass,new ReflectionUtils.FieldCallback(){
      @Override public void doWith(      Field field) throws IllegalArgumentException, IllegalAccessException {
        AnnotationAttributes ann=findAutowiredAnnotation(field);
        if (ann != null) {
          if (Modifier.isStatic(field.getModifiers())) {
            if (logger.isWarnEnabled()) {
              logger.warn("Autowired annotation is not supported on static fields: " + field);
            }
            return;
          }
          boolean required=determineRequiredStatus(ann);
          currElements.add(new AutowiredFieldElement(field,required));
        }
      }
    }
);
    ReflectionUtils.doWithLocalMethods(targetClass,new ReflectionUtils.MethodCallback(){
      @Override public void doWith(      Method method) throws IllegalArgumentException, IllegalAccessException {
        Method bridgedMethod=BridgeMethodResolver.findBridgedMethod(method);
        if (!BridgeMethodResolver.isVisibilityBridgeMethodPair(method,bridgedMethod)) {
          return;
        }
        AnnotationAttributes ann=findAutowiredAnnotation(bridgedMethod);
        if (ann != null && method.equals(ClassUtils.getMostSpecificMethod(method,clazz))) {
          if (Modifier.isStatic(method.getModifiers())) {
            if (logger.isWarnEnabled()) {
              logger.warn("Autowired annotation is not supported on static methods: " + method);
            }
            return;
          }
          if (method.getParameterTypes().length == 0) {
            if (logger.isWarnEnabled()) {
              logger.warn("Autowired annotation should be used on methods with parameters: " + method);
            }
          }
          boolean required=determineRequiredStatus(ann);
          PropertyDescriptor pd=BeanUtils.findPropertyForMethod(bridgedMethod,clazz);
          currElements.add(new AutowiredMethodElement(method,required,pd));
        }
      }
    }
);
    elements.addAll(0,currElements);
    targetClass=targetClass.getSuperclass();
  }
 while (targetClass != null && targetClass != Object.class);
  return new InjectionMetadata(clazz,elements);
}
