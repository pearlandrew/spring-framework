{
  if (checkPropertySkipping(pvs)) {
    return;
  }
  Method method=(Method)this.member;
  Object[] arguments;
  if (this.cached) {
    arguments=resolveCachedArguments(beanName);
  }
 else {
    Class<?>[] paramTypes=method.getParameterTypes();
    arguments=new Object[paramTypes.length];
    DependencyDescriptor[] descriptors=new DependencyDescriptor[paramTypes.length];
    Set<String> autowiredBeanNames=new LinkedHashSet<>(paramTypes.length);
    TypeConverter typeConverter=beanFactory.getTypeConverter();
    for (int i=0; i < arguments.length; i++) {
      MethodParameter methodParam=new MethodParameter(method,i);
      DependencyDescriptor currDesc=new DependencyDescriptor(methodParam,this.required);
      currDesc.setContainingClass(bean.getClass());
      descriptors[i]=currDesc;
      try {
        Object arg=beanFactory.resolveDependency(currDesc,beanName,autowiredBeanNames,typeConverter);
        if (arg == null && !this.required) {
          arguments=null;
          break;
        }
        arguments[i]=arg;
      }
 catch (      BeansException ex) {
        throw new UnsatisfiedDependencyException(null,beanName,new InjectionPoint(methodParam),ex);
      }
    }
synchronized (this) {
      if (!this.cached) {
        if (arguments != null) {
          this.cachedMethodArguments=new Object[paramTypes.length];
          for (int i=0; i < arguments.length; i++) {
            this.cachedMethodArguments[i]=descriptors[i];
          }
          registerDependentBeans(beanName,autowiredBeanNames);
          if (autowiredBeanNames.size() == paramTypes.length) {
            Iterator<String> it=autowiredBeanNames.iterator();
            for (int i=0; i < paramTypes.length; i++) {
              String autowiredBeanName=it.next();
              if (beanFactory.containsBean(autowiredBeanName)) {
                if (beanFactory.isTypeMatch(autowiredBeanName,paramTypes[i])) {
                  this.cachedMethodArguments[i]=new ShortcutDependencyDescriptor(descriptors[i],autowiredBeanName);
                }
              }
            }
          }
        }
 else {
          this.cachedMethodArguments=null;
        }
        this.cached=true;
      }
    }
  }
  if (arguments != null) {
    try {
      ReflectionUtils.makeAccessible(method);
      method.invoke(bean,arguments);
    }
 catch (    InvocationTargetException ex) {
      throw ex.getTargetException();
    }
  }
}
