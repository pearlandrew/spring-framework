{
  final Deferred<Void,Promise<Void>> deferred=Promises.<Void>defer().get();
  stream.consume(SingleUseConsumer.once(new Consumer<TcpConnection<Message<P>,Message<P>>>(){
    @Override public void accept(    TcpConnection<Message<P>,Message<P>> conn){
      deferred.accept((Void)null);
    }
  }
));
  stream.when(Throwable.class,SingleUseConsumer.once(new Consumer<Throwable>(){
    @Override public void accept(    Throwable throwable){
      deferred.accept(throwable);
    }
  }
));
  return deferred.compose();
}
