{
  builder.setLazyInit(false);
  ManagedMap<RuntimeBeanReference,String> cronTaskMap=new ManagedMap<RuntimeBeanReference,String>();
  ManagedMap<RuntimeBeanReference,String> fixedDelayTaskMap=new ManagedMap<RuntimeBeanReference,String>();
  ManagedMap<RuntimeBeanReference,String> fixedRateTaskMap=new ManagedMap<RuntimeBeanReference,String>();
  ManagedMap<RuntimeBeanReference,RuntimeBeanReference> triggerTaskMap=new ManagedMap<RuntimeBeanReference,RuntimeBeanReference>();
  NodeList childNodes=element.getChildNodes();
  for (int i=0; i < childNodes.getLength(); i++) {
    Node child=childNodes.item(i);
    if (!isScheduledElement(child,parserContext)) {
      continue;
    }
    Element taskElement=(Element)child;
    String ref=taskElement.getAttribute("ref");
    String method=taskElement.getAttribute("method");
    if (!StringUtils.hasText(ref) || !StringUtils.hasText(method)) {
      parserContext.getReaderContext().error("Both 'ref' and 'method' are required",taskElement);
      continue;
    }
    RuntimeBeanReference runnableBeanRef=new RuntimeBeanReference(createRunnableBean(ref,method,taskElement,parserContext));
    String cronAttribute=taskElement.getAttribute("cron");
    String fixedDelayAttribute=taskElement.getAttribute("fixed-delay");
    String fixedRateAttribute=taskElement.getAttribute("fixed-rate");
    String triggerAttribute=taskElement.getAttribute("trigger");
    boolean hasCronAttribute=StringUtils.hasText(cronAttribute);
    boolean hasFixedDelayAttribute=StringUtils.hasText(fixedDelayAttribute);
    boolean hasFixedRateAttribute=StringUtils.hasText(fixedRateAttribute);
    boolean hasTriggerAttribute=StringUtils.hasText(triggerAttribute);
    if (!(hasCronAttribute | hasFixedDelayAttribute | hasFixedRateAttribute| hasTriggerAttribute)) {
      parserContext.getReaderContext().error("exactly one of the 'cron', 'fixed-delay', 'fixed-rate', or 'trigger' attributes is required",taskElement);
      continue;
    }
    if (hasCronAttribute) {
      cronTaskMap.put(runnableBeanRef,cronAttribute);
    }
    if (hasFixedDelayAttribute) {
      fixedDelayTaskMap.put(runnableBeanRef,fixedDelayAttribute);
    }
    if (hasFixedRateAttribute) {
      fixedRateTaskMap.put(runnableBeanRef,fixedRateAttribute);
    }
    if (hasTriggerAttribute) {
      triggerTaskMap.put(runnableBeanRef,new RuntimeBeanReference(triggerAttribute));
    }
  }
  String schedulerRef=element.getAttribute("scheduler");
  if (StringUtils.hasText(schedulerRef)) {
    builder.addPropertyReference("taskScheduler",schedulerRef);
  }
  builder.addPropertyValue("cronTasks",cronTaskMap);
  builder.addPropertyValue("fixedDelayTasks",fixedDelayTaskMap);
  builder.addPropertyValue("fixedRateTasks",fixedRateTaskMap);
  builder.addPropertyValue("triggerTasks",triggerTaskMap);
}
