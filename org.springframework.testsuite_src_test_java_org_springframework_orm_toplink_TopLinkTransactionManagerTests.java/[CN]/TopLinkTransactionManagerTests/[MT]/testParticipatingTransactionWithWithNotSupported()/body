{
  MockControl sessionControl=MockControl.createControl(Session.class);
  final Session session=(Session)sessionControl.getMock();
  MockControl uowControl=MockControl.createControl(UnitOfWork.class);
  UnitOfWork uow=(UnitOfWork)uowControl.getMock();
  final SessionFactory sf=new MockSessionFactory(session);
  session.getActiveUnitOfWork();
  sessionControl.setReturnValue(uow,2);
  uow.beginEarlyTransaction();
  uowControl.setVoidCallable(1);
  uow.commit();
  uowControl.setVoidCallable();
  session.release();
  sessionControl.setVoidCallable(2);
  sessionControl.replay();
  uowControl.replay();
  TopLinkTransactionManager tm=new TopLinkTransactionManager(sf);
  final TransactionTemplate tt=new TransactionTemplate(tm);
  tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  tt.execute(new TransactionCallback(){
    public Object doInTransaction(    TransactionStatus status){
      SessionHolder holder=(SessionHolder)TransactionSynchronizationManager.getResource(sf);
      assertTrue("Has thread session",holder != null);
      tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_NOT_SUPPORTED);
      tt.execute(new TransactionCallback(){
        public Object doInTransaction(        TransactionStatus status){
          assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
          TopLinkTemplate ht=new TopLinkTemplate(sf);
          return ht.execute(new TopLinkCallback(){
            public Object doInTopLink(            Session session){
              return null;
            }
          }
);
        }
      }
);
      assertTrue("Same thread session as before",holder.getSession() == SessionFactoryUtils.getSession(sf,false));
      return null;
    }
  }
);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  sessionControl.verify();
  uowControl.verify();
}
