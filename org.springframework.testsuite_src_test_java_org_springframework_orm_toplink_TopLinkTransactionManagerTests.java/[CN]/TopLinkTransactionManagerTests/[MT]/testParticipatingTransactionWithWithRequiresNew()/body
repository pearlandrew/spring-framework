{
  MockControl session1Control=MockControl.createControl(Session.class);
  final Session session1=(Session)session1Control.getMock();
  MockControl session2Control=MockControl.createControl(Session.class);
  final Session session2=(Session)session2Control.getMock();
  MockControl uow1Control=MockControl.createControl(UnitOfWork.class);
  UnitOfWork uow1=(UnitOfWork)uow1Control.getMock();
  MockControl uow2Control=MockControl.createControl(UnitOfWork.class);
  UnitOfWork uow2=(UnitOfWork)uow2Control.getMock();
  final MockSessionFactory sf=new MockSessionFactory(session1);
  session2.getActiveUnitOfWork();
  session2Control.setReturnValue(uow2,2);
  uow2.beginEarlyTransaction();
  uow2Control.setVoidCallable(1);
  uow2.commit();
  uow2Control.setVoidCallable();
  session2.release();
  session2Control.setVoidCallable();
  session1.getActiveUnitOfWork();
  session1Control.setReturnValue(uow1,2);
  uow1.beginEarlyTransaction();
  uow1Control.setVoidCallable(1);
  uow1.commit();
  uow1Control.setVoidCallable();
  session1.release();
  session1Control.setVoidCallable();
  session1Control.replay();
  uow1Control.replay();
  session2Control.replay();
  uow2Control.replay();
  PlatformTransactionManager tm=new TopLinkTransactionManager(sf);
  final TransactionTemplate tt=new TransactionTemplate(tm);
  tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  tt.execute(new TransactionCallback(){
    public Object doInTransaction(    TransactionStatus status){
      final SessionHolder holder=(SessionHolder)TransactionSynchronizationManager.getResource(sf);
      assertTrue("Has thread session",holder != null);
      sf.setSession(session2);
      tt.execute(new TransactionCallback(){
        public Object doInTransaction(        TransactionStatus status){
          TopLinkTemplate ht=new TopLinkTemplate(sf);
          return ht.execute(new TopLinkCallback(){
            public Object doInTopLink(            Session session){
              assertTrue("Not enclosing session",session != holder.getSession());
              return null;
            }
          }
);
        }
      }
);
      assertTrue("Same thread session as before",holder.getSession() == SessionFactoryUtils.getSession(sf,false));
      return null;
    }
  }
);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  session1Control.verify();
  session2Control.verify();
  uow1Control.verify();
  uow2Control.verify();
}
