{
  MockControl sessionControl=MockControl.createControl(Session.class);
  final Session session=(Session)sessionControl.getMock();
  MockControl uowControl=MockControl.createControl(UnitOfWork.class);
  UnitOfWork uow=(UnitOfWork)uowControl.getMock();
  final SessionFactory sf=new MockSessionFactory(session);
  session.getActiveUnitOfWork();
  sessionControl.setReturnValue(uow,1);
  uow.beginEarlyTransaction();
  uowControl.setVoidCallable(1);
  session.release();
  sessionControl.setVoidCallable(1);
  sessionControl.replay();
  uowControl.replay();
  TopLinkTransactionManager tm=new TopLinkTransactionManager();
  tm.setSessionFactory(sf);
  tm.setJdbcExceptionTranslator(new SQLStateSQLExceptionTranslator());
  TransactionTemplate tt=new TransactionTemplate(tm);
  tt.setIsolationLevel(TransactionDefinition.ISOLATION_SERIALIZABLE);
  tt.setTimeout(10);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  try {
    Object result=tt.execute(new TransactionCallback(){
      public Object doInTransaction(      TransactionStatus status){
        assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
        TopLinkTemplate template=new TopLinkTemplate(sf);
        return template.execute(new TopLinkCallback(){
          public Object doInTopLink(          Session session){
            throw new RuntimeException("failure");
          }
        }
);
      }
    }
);
    fail("Should have propagated RuntimeException");
  }
 catch (  RuntimeException ex) {
    assertTrue(ex.getMessage().equals("failure"));
  }
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  sessionControl.verify();
  uowControl.verify();
}
