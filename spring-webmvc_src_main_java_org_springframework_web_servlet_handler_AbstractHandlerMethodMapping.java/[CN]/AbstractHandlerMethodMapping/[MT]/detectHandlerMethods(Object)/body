{
  Class<?> handlerType=(handler instanceof String ? getApplicationContext().getType((String)handler) : handler.getClass());
  final Class<?> userType=ClassUtils.getUserClass(handlerType);
  Map<Method,T> methods=MethodIntrospector.selectMethods(userType,new MethodIntrospector.MetadataLookup<T>(){
    @Override public T inspect(    Method method){
      try {
        return getMappingForMethod(method,userType);
      }
 catch (      Throwable ex) {
        throw new IllegalStateException("Invalid mapping on handler class [" + handlerType.getName() + "]: "+ method,ex);
      }
    }
  }
);
  if (logger.isDebugEnabled()) {
    logger.debug(methods.size() + " request handler methods found on " + userType+ ": "+ methods);
  }
  for (  Map.Entry<Method,T> entry : methods.entrySet()) {
    Method invocableMethod=AopUtils.selectInvocableMethod(entry.getKey(),userType);
    T mapping=entry.getValue();
    registerHandlerMethod(handler,invocableMethod,mapping);
  }
}
