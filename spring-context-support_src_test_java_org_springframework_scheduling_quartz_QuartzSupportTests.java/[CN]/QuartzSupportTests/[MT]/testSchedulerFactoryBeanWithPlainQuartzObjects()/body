{
  JobFactory jobFactory=new AdaptableJobFactory();
  TestBean tb=new TestBean("tb",99);
  JobDetail jobDetail0=new JobDetail();
  jobDetail0.setJobClass(Job.class);
  jobDetail0.setName("myJob0");
  jobDetail0.setGroup(Scheduler.DEFAULT_GROUP);
  jobDetail0.getJobDataMap().put("testBean",tb);
  assertEquals(tb,jobDetail0.getJobDataMap().get("testBean"));
  CronTrigger trigger0=new CronTrigger();
  trigger0.setName("myTrigger0");
  trigger0.setGroup(Scheduler.DEFAULT_GROUP);
  trigger0.setJobName("myJob0");
  trigger0.setJobGroup(Scheduler.DEFAULT_GROUP);
  trigger0.setStartTime(new Date());
  trigger0.setCronExpression("0/1 * * * * ?");
  TestMethodInvokingTask task1=new TestMethodInvokingTask();
  MethodInvokingJobDetailFactoryBean mijdfb=new MethodInvokingJobDetailFactoryBean();
  mijdfb.setName("myJob1");
  mijdfb.setGroup(Scheduler.DEFAULT_GROUP);
  mijdfb.setTargetObject(task1);
  mijdfb.setTargetMethod("doSomething");
  mijdfb.afterPropertiesSet();
  JobDetail jobDetail1=mijdfb.getObject();
  SimpleTrigger trigger1=new SimpleTrigger();
  trigger1.setName("myTrigger1");
  trigger1.setGroup(Scheduler.DEFAULT_GROUP);
  trigger1.setJobName("myJob1");
  trigger1.setJobGroup(Scheduler.DEFAULT_GROUP);
  trigger1.setStartTime(new Date());
  trigger1.setRepeatCount(SimpleTrigger.REPEAT_INDEFINITELY);
  trigger1.setRepeatInterval(20);
  final Scheduler scheduler=mock(Scheduler.class);
  given(scheduler.scheduleJob(trigger0)).willReturn(new Date());
  given(scheduler.scheduleJob(trigger1)).willReturn(new Date());
  SchedulerFactoryBean schedulerFactoryBean=new SchedulerFactoryBean(){
    @Override protected Scheduler createScheduler(    SchedulerFactory schedulerFactory,    String schedulerName){
      return scheduler;
    }
  }
;
  schedulerFactoryBean.setJobFactory(jobFactory);
  schedulerFactoryBean.setJobDetails(new JobDetail[]{jobDetail0,jobDetail1});
  schedulerFactoryBean.setTriggers(new Trigger[]{trigger0,trigger1});
  try {
    schedulerFactoryBean.afterPropertiesSet();
    schedulerFactoryBean.start();
  }
  finally {
    schedulerFactoryBean.destroy();
  }
  verify(scheduler).setJobFactory(jobFactory);
  verify(scheduler).getJobDetail("myJob0",Scheduler.DEFAULT_GROUP);
  verify(scheduler).getJobDetail("myJob1",Scheduler.DEFAULT_GROUP);
  verify(scheduler).getTrigger("myTrigger0",Scheduler.DEFAULT_GROUP);
  verify(scheduler).getTrigger("myTrigger1",Scheduler.DEFAULT_GROUP);
  verify(scheduler).addJob(jobDetail0,true);
  verify(scheduler).addJob(jobDetail1,true);
  verify(scheduler).scheduleJob(trigger0);
  verify(scheduler).scheduleJob(trigger1);
  verify(scheduler).start();
  verify(scheduler).shutdown(false);
}
