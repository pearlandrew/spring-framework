{
  TestBean tb=new TestBean("tb",99);
  JobDetailBean jobDetail0=new JobDetailBean();
  jobDetail0.setJobClass(Job.class);
  jobDetail0.setBeanName("myJob0");
  Map<String,Object> jobData=new HashMap<String,Object>();
  jobData.put("testBean",tb);
  jobDetail0.setJobDataAsMap(jobData);
  jobDetail0.afterPropertiesSet();
  assertEquals(tb,jobDetail0.getJobDataMap().get("testBean"));
  CronTriggerBean trigger0=new CronTriggerBean();
  trigger0.setBeanName("myTrigger0");
  trigger0.setJobDetail(jobDetail0);
  trigger0.setCronExpression("0/1 * * * * ?");
  trigger0.afterPropertiesSet();
  TestMethodInvokingTask task1=new TestMethodInvokingTask();
  MethodInvokingJobDetailFactoryBean mijdfb=new MethodInvokingJobDetailFactoryBean();
  mijdfb.setBeanName("myJob1");
  if (prototypeJob) {
    StaticListableBeanFactory beanFactory=new StaticListableBeanFactory();
    beanFactory.addBean("task",task1);
    mijdfb.setTargetBeanName("task");
    mijdfb.setBeanFactory(beanFactory);
  }
 else {
    mijdfb.setTargetObject(task1);
  }
  mijdfb.setTargetMethod("doSomething");
  mijdfb.afterPropertiesSet();
  JobDetail jobDetail1=mijdfb.getObject();
  SimpleTriggerBean trigger1=new SimpleTriggerBean();
  trigger1.setBeanName("myTrigger1");
  trigger1.setJobDetail(jobDetail1);
  trigger1.setStartDelay(0);
  trigger1.setRepeatInterval(20);
  trigger1.afterPropertiesSet();
  final Scheduler scheduler=mock(Scheduler.class);
  given(scheduler.getContext()).willReturn(new SchedulerContext());
  given(scheduler.scheduleJob(trigger0)).willReturn(new Date());
  given(scheduler.scheduleJob(trigger1)).willReturn(new Date());
  SchedulerFactoryBean schedulerFactoryBean=new SchedulerFactoryBean(){
    @Override protected Scheduler createScheduler(    SchedulerFactory schedulerFactory,    String schedulerName){
      return scheduler;
    }
  }
;
  schedulerFactoryBean.setJobFactory(null);
  Map<String,Object> schedulerContext=new HashMap<String,Object>();
  schedulerContext.put("otherTestBean",tb);
  schedulerFactoryBean.setSchedulerContextAsMap(schedulerContext);
  if (explicitJobDetail) {
    schedulerFactoryBean.setJobDetails(new JobDetail[]{jobDetail0});
  }
  schedulerFactoryBean.setTriggers(new Trigger[]{trigger0,trigger1});
  try {
    schedulerFactoryBean.afterPropertiesSet();
    schedulerFactoryBean.start();
  }
  finally {
    schedulerFactoryBean.destroy();
  }
  verify(scheduler).getJobDetail("myJob0",Scheduler.DEFAULT_GROUP);
  verify(scheduler).getJobDetail("myJob1",Scheduler.DEFAULT_GROUP);
  verify(scheduler).getTrigger("myTrigger0",Scheduler.DEFAULT_GROUP);
  verify(scheduler).getTrigger("myTrigger1",Scheduler.DEFAULT_GROUP);
  verify(scheduler).addJob(jobDetail0,true);
  verify(scheduler).addJob(jobDetail1,true);
  verify(scheduler).start();
  verify(scheduler).shutdown(false);
}
