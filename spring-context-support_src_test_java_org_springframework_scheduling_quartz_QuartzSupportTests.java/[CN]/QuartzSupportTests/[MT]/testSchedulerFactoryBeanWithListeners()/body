{
  JobFactory jobFactory=new AdaptableJobFactory();
  final Scheduler scheduler=mock(Scheduler.class);
  SchedulerListener schedulerListener=new TestSchedulerListener();
  JobListener globalJobListener=new TestJobListener();
  JobListener jobListener=new TestJobListener();
  TriggerListener globalTriggerListener=new TestTriggerListener();
  TriggerListener triggerListener=new TestTriggerListener();
  SchedulerFactoryBean schedulerFactoryBean=new SchedulerFactoryBean(){
    @Override protected Scheduler createScheduler(    SchedulerFactory schedulerFactory,    String schedulerName){
      return scheduler;
    }
  }
;
  schedulerFactoryBean.setJobFactory(jobFactory);
  schedulerFactoryBean.setSchedulerListeners(new SchedulerListener[]{schedulerListener});
  schedulerFactoryBean.setGlobalJobListeners(new JobListener[]{globalJobListener});
  schedulerFactoryBean.setJobListeners(new JobListener[]{jobListener});
  schedulerFactoryBean.setGlobalTriggerListeners(new TriggerListener[]{globalTriggerListener});
  schedulerFactoryBean.setTriggerListeners(new TriggerListener[]{triggerListener});
  try {
    schedulerFactoryBean.afterPropertiesSet();
    schedulerFactoryBean.start();
  }
  finally {
    schedulerFactoryBean.destroy();
  }
  verify(scheduler).setJobFactory(jobFactory);
  verify(scheduler).addSchedulerListener(schedulerListener);
  verify(scheduler).addGlobalJobListener(globalJobListener);
  verify(scheduler).addJobListener(jobListener);
  verify(scheduler).addGlobalTriggerListener(globalTriggerListener);
  verify(scheduler).addTriggerListener(triggerListener);
  verify(scheduler).start();
  verify(scheduler).shutdown(false);
}
