{
  byte[] abc=new byte[]{'a','b','c'};
  byte[] def=new byte[]{'d','e','f'};
  queue.putSignal(abc);
  queue.putSignal(def);
  queue.complete();
  final AtomicBoolean complete=new AtomicBoolean(false);
  final List<byte[]> received=new ArrayList<byte[]>(2);
  publisher.subscribe(new Subscriber<byte[]>(){
    @Override public void onSubscribe(    Subscription s){
      s.request(Long.MAX_VALUE);
    }
    @Override public void onNext(    byte[] bytes){
      received.add(bytes);
    }
    @Override public void onError(    Throwable t){
      fail("onError not expected");
    }
    @Override public void onComplete(){
      complete.set(true);
    }
  }
);
  while (!complete.get()) {
  }
  assertEquals(2,received.size());
  assertSame(abc,received.get(0));
  assertSame(def,received.get(1));
}
