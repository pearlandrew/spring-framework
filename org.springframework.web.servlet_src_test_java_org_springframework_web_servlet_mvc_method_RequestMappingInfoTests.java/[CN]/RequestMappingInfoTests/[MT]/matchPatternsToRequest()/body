{
  MockHttpServletRequest request=new MockHttpServletRequest("GET","/foo");
  RequestMappingInfo match=createFromPatterns("/foo").getMatchingRequestMapping(request);
  assertNotNull(match);
  request=new MockHttpServletRequest("GET","/foo/bar");
  match=createFromPatterns("/foo/*").getMatchingRequestMapping(request);
  assertNotNull("Pattern match",match);
  request=new MockHttpServletRequest("GET","/foo.html");
  match=createFromPatterns("/foo").getMatchingRequestMapping(request);
  assertNotNull("Implicit match by extension",match);
  assertEquals("Contains matched pattern","/foo.*",match.getPatternsCondition().getPatterns().iterator().next());
  request=new MockHttpServletRequest("GET","/foo/");
  match=createFromPatterns("/foo").getMatchingRequestMapping(request);
  assertNotNull("Implicit match by trailing slash",match);
  assertEquals("Contains matched pattern","/foo/",match.getPatternsCondition().getPatterns().iterator().next());
  request=new MockHttpServletRequest("GET","/foo.html");
  match=createFromPatterns("/foo.jpg").getMatchingRequestMapping(request);
  assertNull("Implicit match ignored if pattern has extension",match);
  request=new MockHttpServletRequest("GET","/foo.html");
  match=createFromPatterns("/foo.jpg").getMatchingRequestMapping(request);
  assertNull("Implicit match ignored on pattern with trailing slash",match);
}
