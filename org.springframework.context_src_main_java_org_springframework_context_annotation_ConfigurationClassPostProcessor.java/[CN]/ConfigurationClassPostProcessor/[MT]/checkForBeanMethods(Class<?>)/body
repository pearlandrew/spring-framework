{
  ReflectionUtils.doWithMethods(featureConfigClass,new ReflectionUtils.MethodCallback(){
    public void doWith(    Method beanMethod) throws IllegalArgumentException, IllegalAccessException {
      throw new FeatureMethodExecutionException(format("@FeatureConfiguration classes must not contain @Bean-annotated methods. " + "%s.%s() is annotated with @Bean and must be removed in order to proceed. " + "Consider moving this method into a dedicated @Configuration class and "+ "injecting the bean as a parameter into any @Feature method(s) that need it.",beanMethod.getDeclaringClass().getSimpleName(),beanMethod.getName()));
    }
  }
,new ReflectionUtils.MethodFilter(){
    public boolean matches(    Method candidateMethod){
      return BeanAnnotationHelper.isBeanAnnotated(candidateMethod);
    }
  }
);
}
