{
  Map<String,Object> featureConfigBeans=retrieveFeatureConfigurationBeans(beanFactory);
  if (featureConfigBeans.size() == 0) {
    return;
  }
  for (  final Object featureConfigBean : featureConfigBeans.values()) {
    checkForBeanMethods(featureConfigBean.getClass());
  }
  if (!cglibAvailable) {
    throw new IllegalStateException("CGLIB is required to process @FeatureConfiguration classes. " + "Either add CGLIB to the classpath or remove the following @FeatureConfiguration bean definitions: " + featureConfigBeans.keySet());
  }
  final EarlyBeanReferenceProxyCreator proxyCreator=new EarlyBeanReferenceProxyCreator(beanFactory);
  final SpecificationContext specificationContext=createSpecificationContext(beanFactory);
  for (  final Object featureConfigBean : featureConfigBeans.values()) {
    ReflectionUtils.doWithMethods(featureConfigBean.getClass(),new ReflectionUtils.MethodCallback(){
      public void doWith(      Method featureMethod) throws IllegalArgumentException, IllegalAccessException {
        processFeatureMethod(featureMethod,featureConfigBean,specificationContext,proxyCreator);
      }
    }
,new ReflectionUtils.MethodFilter(){
      public boolean matches(      Method candidateMethod){
        return candidateMethod.isAnnotationPresent(Feature.class);
      }
    }
);
  }
}
