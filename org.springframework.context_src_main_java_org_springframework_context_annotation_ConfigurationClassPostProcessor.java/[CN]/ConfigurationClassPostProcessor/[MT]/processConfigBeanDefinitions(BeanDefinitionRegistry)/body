{
  Set<BeanDefinitionHolder> configCandidates=new LinkedHashSet<BeanDefinitionHolder>();
  for (  String beanName : registry.getBeanDefinitionNames()) {
    BeanDefinition beanDef=registry.getBeanDefinition(beanName);
    if (ConfigurationClassBeanDefinitionReader.checkConfigurationClassCandidate(beanDef,this.metadataReaderFactory)) {
      configCandidates.add(new BeanDefinitionHolder(beanDef,beanName));
    }
  }
  if (configCandidates.isEmpty()) {
    return;
  }
  ConfigurationClassParser parser=new ConfigurationClassParser(this.metadataReaderFactory,this.problemReporter);
  for (  BeanDefinitionHolder holder : configCandidates) {
    BeanDefinition bd=holder.getBeanDefinition();
    try {
      if (bd instanceof AbstractBeanDefinition && ((AbstractBeanDefinition)bd).hasBeanClass()) {
        parser.parse(((AbstractBeanDefinition)bd).getBeanClass(),holder.getBeanName());
      }
 else {
        parser.parse(bd.getBeanClassName(),holder.getBeanName());
      }
    }
 catch (    IOException ex) {
      throw new BeanDefinitionStoreException("Failed to load bean class: " + bd.getBeanClassName(),ex);
    }
  }
  parser.validate();
  ConfigurationClassBeanDefinitionReader reader=new ConfigurationClassBeanDefinitionReader(registry,this.sourceExtractor,this.problemReporter,this.metadataReaderFactory);
  reader.loadBeanDefinitions(parser.getConfigurationClasses());
}
