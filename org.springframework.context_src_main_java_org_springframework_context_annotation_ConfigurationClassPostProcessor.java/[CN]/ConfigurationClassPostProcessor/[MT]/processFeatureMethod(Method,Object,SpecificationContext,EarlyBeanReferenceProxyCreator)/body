{
  try {
    if (!(FeatureSpecification.class.isAssignableFrom(featureMethod.getReturnType()))) {
      throw new IllegalArgumentException(format("Return type for @Feature method %s.%s() must be assignable to FeatureSpecification",featureMethod.getDeclaringClass().getSimpleName(),featureMethod.getName()));
    }
    List<Object> beanArgs=new ArrayList<Object>();
    Class<?>[] parameterTypes=featureMethod.getParameterTypes();
    for (int i=0; i < parameterTypes.length; i++) {
      MethodParameter mp=new MethodParameter(featureMethod,i);
      DependencyDescriptor dd=new DependencyDescriptor(mp,true,false);
      Object proxiedBean=proxyCreator.createProxy(dd);
      beanArgs.add(proxiedBean);
    }
    FeatureSpecification spec;
    featureMethod.setAccessible(true);
    spec=(FeatureSpecification)featureMethod.invoke(configInstance,beanArgs.toArray(new Object[beanArgs.size()]));
    Assert.notNull(spec,format("The specification returned from @Feature method %s.%s() must not be null",featureMethod.getDeclaringClass().getSimpleName(),featureMethod.getName()));
    if (spec instanceof SourceAwareSpecification) {
      ((SourceAwareSpecification)spec).source(featureMethod);
      ((SourceAwareSpecification)spec).sourceName(featureMethod.getName());
    }
    spec.execute(specificationContext);
  }
 catch (  Exception ex) {
    throw new FeatureMethodExecutionException(ex);
  }
}
