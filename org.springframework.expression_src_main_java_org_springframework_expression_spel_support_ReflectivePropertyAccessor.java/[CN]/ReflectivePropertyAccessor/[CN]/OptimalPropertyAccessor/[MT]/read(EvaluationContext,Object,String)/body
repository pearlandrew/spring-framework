{
  if (member instanceof Method) {
    try {
      if (needsToBeMadeAccessible) {
        ReflectionUtils.makeAccessible((Method)member);
      }
      Object value=((Method)member).invoke(target);
      return new TypedValue(value,typeDescriptor.narrowType(value));
    }
 catch (    Exception ex) {
      throw new AccessException("Unable to access property '" + name + "' through getter",ex);
    }
  }
  if (member instanceof Field) {
    try {
      if (needsToBeMadeAccessible) {
        ReflectionUtils.makeAccessible((Field)member);
      }
      Object value=((Field)member).get(target);
      return new TypedValue(value,typeDescriptor.narrowType(value));
    }
 catch (    Exception ex) {
      throw new AccessException("Unable to access field: " + name,ex);
    }
  }
  throw new AccessException("Neither getter nor field found for property '" + name + "'");
}
