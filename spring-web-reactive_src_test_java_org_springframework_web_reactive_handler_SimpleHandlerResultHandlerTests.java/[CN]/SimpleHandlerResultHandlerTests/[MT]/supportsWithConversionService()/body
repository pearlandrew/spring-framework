{
  GenericConversionService conversionService=new GenericConversionService();
  conversionService.addConverter(new ReactiveStreamsToCompletableFutureConverter());
  conversionService.addConverter(new ReactiveStreamsToReactorConverter());
  conversionService.addConverter(new ReactiveStreamsToRxJava1Converter());
  SimpleHandlerResultHandler resultHandler=new SimpleHandlerResultHandler(conversionService);
  TestController controller=new TestController();
  HandlerMethod hm=new HandlerMethod(controller,TestController.class.getMethod("voidReturnValue"));
  ResolvableType type=ResolvableType.forMethodParameter(hm.getReturnType());
  assertTrue(resultHandler.supports(new HandlerResult(hm,null,type)));
  hm=new HandlerMethod(controller,TestController.class.getMethod("publisherString"));
  type=ResolvableType.forMethodParameter(hm.getReturnType());
  assertFalse(resultHandler.supports(new HandlerResult(hm,null,type)));
  hm=new HandlerMethod(controller,TestController.class.getMethod("publisherVoid"));
  type=ResolvableType.forMethodParameter(hm.getReturnType());
  assertTrue(resultHandler.supports(new HandlerResult(hm,null,type)));
  hm=new HandlerMethod(controller,TestController.class.getMethod("streamVoid"));
  type=ResolvableType.forMethodParameter(hm.getReturnType());
  assertTrue(resultHandler.supports(new HandlerResult(hm,null,type)));
  hm=new HandlerMethod(controller,TestController.class.getMethod("observableVoid"));
  type=ResolvableType.forMethodParameter(hm.getReturnType());
  assertTrue(resultHandler.supports(new HandlerResult(hm,null,type)));
  hm=new HandlerMethod(controller,TestController.class.getMethod("completableFutureVoid"));
  type=ResolvableType.forMethodParameter(hm.getReturnType());
  assertTrue(resultHandler.supports(new HandlerResult(hm,null,type)));
}
