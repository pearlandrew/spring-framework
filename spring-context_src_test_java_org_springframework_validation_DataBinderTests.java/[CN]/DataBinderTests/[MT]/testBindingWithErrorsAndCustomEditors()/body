{
  TestBean rod=new TestBean();
  DataBinder binder=new DataBinder(rod,"person");
  binder.registerCustomEditor(String.class,"touchy",new PropertyEditorSupport(){
    public void setAsText(    String text) throws IllegalArgumentException {
      setValue("prefix_" + text);
    }
    public String getAsText(){
      return getValue().toString().substring(7);
    }
  }
);
  binder.registerCustomEditor(TestBean.class,"spouse",new PropertyEditorSupport(){
    public void setAsText(    String text) throws IllegalArgumentException {
      setValue(new TestBean(text,0));
    }
    public String getAsText(){
      return ((TestBean)getValue()).getName();
    }
  }
);
  MutablePropertyValues pvs=new MutablePropertyValues();
  pvs.add("name","Rod");
  pvs.add("age","32x");
  pvs.add("touchy","m.y");
  pvs.add("spouse","Kerry");
  binder.bind(pvs);
  try {
    binder.close();
    fail("Should have thrown BindException");
  }
 catch (  BindException ex) {
    assertTrue("changed name correctly",rod.getName().equals("Rod"));
    Map<?,?> model=binder.getBindingResult().getModel();
    TestBean tb=(TestBean)model.get("person");
    assertTrue("Same object",tb.equals(rod));
    BindingResult br=(BindingResult)model.get(BindingResult.MODEL_KEY_PREFIX + "person");
    assertTrue("Added itself to map",br == binder.getBindingResult());
    assertTrue(br.hasErrors());
    assertTrue("Correct number of errors",br.getErrorCount() == 2);
    assertTrue("Has age errors",br.hasFieldErrors("age"));
    assertTrue("Correct number of age errors",br.getFieldErrorCount("age") == 1);
    assertEquals("32x",binder.getBindingResult().getFieldValue("age"));
    assertEquals("32x",binder.getBindingResult().getFieldError("age").getRejectedValue());
    assertEquals(0,tb.getAge());
    assertTrue("Has touchy errors",br.hasFieldErrors("touchy"));
    assertTrue("Correct number of touchy errors",br.getFieldErrorCount("touchy") == 1);
    assertEquals("m.y",binder.getBindingResult().getFieldValue("touchy"));
    assertEquals("m.y",binder.getBindingResult().getFieldError("touchy").getRejectedValue());
    assertNull(tb.getTouchy());
    assertTrue("Does not have spouse errors",!br.hasFieldErrors("spouse"));
    assertEquals("Kerry",binder.getBindingResult().getFieldValue("spouse"));
    assertNotNull(tb.getSpouse());
  }
}
