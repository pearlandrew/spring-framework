{
  if (checkPropertySkipping(pvs)) {
    return;
  }
  Method method=(Method)this.member;
  try {
    Object[] arguments;
    if (this.cached) {
      arguments=resolveCachedArguments(beanName);
    }
 else {
synchronized (pvs) {
        if (!this.cached) {
          Class[] paramTypes=method.getParameterTypes();
          arguments=new Object[paramTypes.length];
          Set<String> autowiredBeanNames=new LinkedHashSet<String>(arguments.length);
          TypeConverter typeConverter=beanFactory.getTypeConverter();
          this.cachedMethodArguments=new Object[arguments.length];
          for (int i=0; i < arguments.length; i++) {
            MethodParameter methodParam=new MethodParameter(method,i);
            GenericTypeResolver.resolveParameterType(methodParam,bean.getClass());
            DependencyDescriptor descriptor=new DependencyDescriptor(methodParam,this.required);
            this.cachedMethodArguments[i]=descriptor;
            arguments[i]=beanFactory.resolveDependency(descriptor,beanName,autowiredBeanNames,typeConverter);
            if (arguments[i] == null) {
              arguments=null;
              break;
            }
          }
          if (arguments != null) {
            registerDependentBeans(beanName,autowiredBeanNames);
            if (autowiredBeanNames.size() == paramTypes.length) {
              Iterator<String> it=autowiredBeanNames.iterator();
              for (int i=0; i < paramTypes.length; i++) {
                String autowiredBeanName=it.next();
                if (beanFactory.containsBean(autowiredBeanName)) {
                  if (beanFactory.isTypeMatch(autowiredBeanName,paramTypes[i])) {
                    this.cachedMethodArguments[i]=new RuntimeBeanReference(autowiredBeanName);
                  }
                }
 else {
                  this.cachedMethodArguments[i]=arguments[i];
                }
              }
            }
          }
 else {
            this.cachedMethodArguments=null;
          }
          this.cached=true;
        }
 else {
          arguments=resolveCachedArguments(beanName);
        }
      }
    }
    if (arguments != null) {
      ReflectionUtils.makeAccessible(method);
      method.invoke(bean,arguments);
    }
  }
 catch (  InvocationTargetException ex) {
    throw ex.getTargetException();
  }
catch (  Throwable ex) {
    throw new BeanCreationException("Could not autowire method: " + method,ex);
  }
}
