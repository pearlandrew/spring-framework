{
  if (checkPropertySkipping(pvs)) {
    return;
  }
  Method method=(Method)this.member;
  try {
    Object[] arguments;
    if (this.cached) {
      arguments=resolveCachedArguments(beanName);
    }
 else {
      Class[] paramTypes=method.getParameterTypes();
      arguments=new Object[paramTypes.length];
      DependencyDescriptor[] descriptors=new DependencyDescriptor[paramTypes.length];
      Set<String> autowiredBeanNames=new LinkedHashSet<String>(paramTypes.length);
      TypeConverter typeConverter=beanFactory.getTypeConverter();
      for (int i=0; i < arguments.length; i++) {
        MethodParameter methodParam=new MethodParameter(method,i);
        GenericTypeResolver.resolveParameterType(methodParam,bean.getClass());
        descriptors[i]=new DependencyDescriptor(methodParam,this.required);
        arguments[i]=beanFactory.resolveDependency(descriptors[i],beanName,autowiredBeanNames,typeConverter);
        if (arguments[i] == null && !this.required) {
          arguments=null;
          break;
        }
      }
synchronized (this) {
        if (!this.cached) {
          if (arguments != null) {
            this.cachedMethodArguments=new Object[arguments.length];
            for (int i=0; i < arguments.length; i++) {
              this.cachedMethodArguments[i]=descriptors[i];
            }
            registerDependentBeans(beanName,autowiredBeanNames);
            if (autowiredBeanNames.size() == paramTypes.length) {
              Iterator<String> it=autowiredBeanNames.iterator();
              for (int i=0; i < paramTypes.length; i++) {
                String autowiredBeanName=it.next();
                if (beanFactory.containsBean(autowiredBeanName)) {
                  if (beanFactory.isTypeMatch(autowiredBeanName,paramTypes[i])) {
                    this.cachedMethodArguments[i]=new RuntimeBeanReference(autowiredBeanName);
                  }
                }
              }
            }
          }
 else {
            this.cachedMethodArguments=null;
          }
          this.cached=true;
        }
      }
    }
    if (arguments != null) {
      ReflectionUtils.makeAccessible(method);
      method.invoke(bean,arguments);
    }
  }
 catch (  InvocationTargetException ex) {
    throw ex.getTargetException();
  }
catch (  Throwable ex) {
    throw new BeanCreationException("Could not autowire method: " + method,ex);
  }
}
