{
  InjectionMetadata metadata=this.injectionMetadataCache.get(clazz);
  if (metadata == null) {
synchronized (this.injectionMetadataCache) {
      metadata=this.injectionMetadataCache.get(clazz);
      if (metadata == null) {
        final InjectionMetadata newMetadata=new InjectionMetadata(clazz);
        ReflectionUtils.doWithFields(clazz,new ReflectionUtils.FieldCallback(){
          public void doWith(          Field field){
            Annotation annotation=findAutowiredAnnotation(field);
            if (annotation != null) {
              if (Modifier.isStatic(field.getModifiers())) {
                throw new IllegalStateException("Autowired annotation is not supported on static fields");
              }
              boolean required=determineRequiredStatus(annotation);
              newMetadata.addInjectedField(new AutowiredFieldElement(field,required));
            }
          }
        }
);
        ReflectionUtils.doWithMethods(clazz,new ReflectionUtils.MethodCallback(){
          public void doWith(          Method method){
            if (!isFactoryMethod(method)) {
              Annotation annotation=findAutowiredAnnotation(method);
              if (annotation != null && method.equals(ClassUtils.getMostSpecificMethod(method,clazz))) {
                if (Modifier.isStatic(method.getModifiers())) {
                  throw new IllegalStateException("Autowired annotation is not supported on static methods");
                }
                if (method.getParameterTypes().length == 0) {
                  throw new IllegalStateException("Autowired annotation requires at least one argument: " + method);
                }
                boolean required=determineRequiredStatus(annotation);
                PropertyDescriptor pd=BeanUtils.findPropertyForMethod(method);
                newMetadata.addInjectedMethod(new AutowiredMethodElement(method,required,pd));
              }
            }
          }
          private boolean isFactoryMethod(          Method method){
            if (AnnotationUtils.findAnnotation(method,FactoryMethod.class) != null) {
              return true;
            }
 else {
              return false;
            }
          }
        }
);
        metadata=newMetadata;
        this.injectionMetadataCache.put(clazz,metadata);
      }
    }
  }
  return metadata;
}
