{
  Method handlerMethodToInvoke=BridgeMethodResolver.findBridgedMethod(handlerMethod);
  try {
    boolean debug=logger.isDebugEnabled();
    for (    String attrName : this.methodResolver.getActualSessionAttributeNames()) {
      Object attrValue=this.sessionAttributeStore.retrieveAttribute(webRequest,attrName);
      if (attrValue != null) {
        implicitModel.addAttribute(attrName,attrValue);
      }
    }
    for (    Method attributeMethod : this.methodResolver.getModelAttributeMethods()) {
      Method attributeMethodToInvoke=BridgeMethodResolver.findBridgedMethod(attributeMethod);
      Object[] args=resolveHandlerArguments(attributeMethodToInvoke,handler,webRequest,implicitModel);
      if (debug) {
        logger.debug("Invoking model attribute method: " + attributeMethodToInvoke);
      }
      String attrName=AnnotationUtils.findAnnotation(attributeMethod,ModelAttribute.class).value();
      if (!"".equals(attrName) && implicitModel.containsAttribute(attrName)) {
        continue;
      }
      ReflectionUtils.makeAccessible(attributeMethodToInvoke);
      Object attrValue=attributeMethodToInvoke.invoke(handler,args);
      if ("".equals(attrName)) {
        Class<?> resolvedType=GenericTypeResolver.resolveReturnType(attributeMethodToInvoke,handler.getClass());
        attrName=Conventions.getVariableNameForReturnType(attributeMethodToInvoke,resolvedType,attrValue);
      }
      if (!implicitModel.containsAttribute(attrName)) {
        implicitModel.addAttribute(attrName,attrValue);
      }
    }
    Object[] args=resolveHandlerArguments(handlerMethodToInvoke,handler,webRequest,implicitModel);
    if (debug) {
      logger.debug("Invoking request handler method: " + handlerMethodToInvoke);
    }
    ReflectionUtils.makeAccessible(handlerMethodToInvoke);
    return handlerMethodToInvoke.invoke(handler,args);
  }
 catch (  IllegalStateException ex) {
    throw new HandlerMethodInvocationException(handlerMethodToInvoke,ex);
  }
catch (  InvocationTargetException ex) {
    ReflectionUtils.rethrowException(ex.getTargetException());
    return null;
  }
}
