{
  if (logger.isDebugEnabled()) {
    logger.debug("Creating CGLIB proxy: target source is " + this.advised.getTargetSource());
  }
  try {
    Class<?> rootClass=this.advised.getTargetClass();
    Assert.state(rootClass != null,"Target class must be available for creating a CGLIB proxy");
    Class<?> proxySuperClass=rootClass;
    if (ClassUtils.isCglibProxyClass(rootClass)) {
      proxySuperClass=rootClass.getSuperclass();
      Class<?>[] additionalInterfaces=rootClass.getInterfaces();
      for (      Class<?> additionalInterface : additionalInterfaces) {
        this.advised.addInterface(additionalInterface);
      }
    }
    validateClassIfNecessary(proxySuperClass);
    Enhancer enhancer=createEnhancer();
    if (classLoader != null) {
      enhancer.setClassLoader(classLoader);
      if (classLoader instanceof SmartClassLoader && ((SmartClassLoader)classLoader).isClassReloadable(proxySuperClass)) {
        enhancer.setUseCache(false);
      }
    }
    enhancer.setSuperclass(proxySuperClass);
    enhancer.setInterfaces(AopProxyUtils.completeProxiedInterfaces(this.advised));
    enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE);
    enhancer.setStrategy(new UndeclaredThrowableStrategy(UndeclaredThrowableException.class));
    Callback[] callbacks=getCallbacks(rootClass);
    Class<?>[] types=new Class<?>[callbacks.length];
    for (int x=0; x < types.length; x++) {
      types[x]=callbacks[x].getClass();
    }
    enhancer.setCallbackFilter(new ProxyCallbackFilter(this.advised.getConfigurationOnlyCopy(),this.fixedInterceptorMap,this.fixedInterceptorOffset));
    enhancer.setCallbackTypes(types);
    return createProxyClassAndInstance(enhancer,callbacks);
  }
 catch (  CodeGenerationException ex) {
    throw new AopConfigException("Could not generate CGLIB subclass of class [" + this.advised.getTargetClass() + "]: "+ "Common causes of this problem include using a final class or a non-visible class",ex);
  }
catch (  IllegalArgumentException ex) {
    throw new AopConfigException("Could not generate CGLIB subclass of class [" + this.advised.getTargetClass() + "]: "+ "Common causes of this problem include using a final class or a non-visible class",ex);
  }
catch (  Exception ex) {
    throw new AopConfigException("Unexpected AOP exception",ex);
  }
}
