{
  Assert.notNull(deferredResult,"DeferredResult must not be null");
  Assert.state(this.asyncWebRequest != null,"AsyncWebRequest must not be null");
  Long timeout=deferredResult.getTimeoutValue();
  if (timeout != null) {
    this.asyncWebRequest.setTimeout(timeout);
  }
  List<DeferredResultProcessingInterceptor> interceptors=new ArrayList<DeferredResultProcessingInterceptor>();
  interceptors.add(deferredResult.getInterceptor());
  interceptors.addAll(this.deferredResultInterceptors.values());
  interceptors.add(timeoutDeferredResultInterceptor);
  final DeferredResultInterceptorChain interceptorChain=new DeferredResultInterceptorChain(interceptors);
  this.asyncWebRequest.addTimeoutHandler(new Runnable(){
    public void run(){
      try {
        interceptorChain.triggerAfterTimeout(asyncWebRequest,deferredResult);
      }
 catch (      Throwable t) {
        setConcurrentResultAndDispatch(t);
      }
    }
  }
);
  this.asyncWebRequest.addCompletionHandler(new Runnable(){
    public void run(){
      interceptorChain.triggerAfterCompletion(asyncWebRequest,deferredResult);
    }
  }
);
  startAsyncProcessing(processingContext);
  try {
    interceptorChain.applyPreProcess(this.asyncWebRequest,deferredResult);
    deferredResult.setResultHandler(new DeferredResultHandler(){
      public void handleResult(      Object result){
        result=interceptorChain.applyPostProcess(asyncWebRequest,deferredResult,result);
        setConcurrentResultAndDispatch(result);
      }
    }
);
  }
 catch (  Throwable t) {
    setConcurrentResultAndDispatch(t);
  }
}
