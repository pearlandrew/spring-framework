{
  Assert.notNull(deferredResult,"DeferredResult must not be null");
  Long timeout=deferredResult.getTimeoutMilliseconds();
  if (timeout != null) {
    this.asyncWebRequest.setTimeout(timeout);
  }
  if (deferredResult.hasTimeoutResult()) {
    this.asyncWebRequest.setTimeoutHandler(new Runnable(){
      public void run(){
        deferredResult.applyTimeoutResult();
      }
    }
);
  }
  final DeferredResultInterceptorChain chain=new DeferredResultInterceptorChain(this.deferredResultInterceptors.values());
  chain.applyPreProcess(this.asyncWebRequest,deferredResult);
  this.asyncWebRequest.addCompletionHandler(new Runnable(){
    public void run(){
      if (deferredResult.expire()) {
        chain.triggerAfterExpiration(asyncWebRequest,deferredResult);
      }
    }
  }
);
  startAsyncProcessing(processingContext);
  deferredResult.setResultHandler(new DeferredResultHandler(){
    public void handleResult(    Object result){
      concurrentResult=result;
      if (logger.isDebugEnabled()) {
        logger.debug("Deferred result value [" + concurrentResult + "]");
      }
      chain.applyPostProcess(asyncWebRequest,deferredResult,result);
      logger.debug("Dispatching request to complete processing");
      asyncWebRequest.dispatch();
    }
  }
);
}
