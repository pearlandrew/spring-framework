{
  Assert.notNull(deferredResult,"DeferredResult must not be null");
  Assert.state(this.asyncWebRequest != null,"AsyncWebRequest must not be null");
  Long timeout=deferredResult.getTimeoutMilliseconds();
  if (timeout != null) {
    this.asyncWebRequest.setTimeout(timeout);
  }
  final DeferredResultInterceptorChain chain=new DeferredResultInterceptorChain(this.deferredResultInterceptors.values());
  this.asyncWebRequest.setTimeoutHandler(new Runnable(){
    public void run(){
      if (!deferredResult.applyTimeoutResult()) {
        try {
          chain.triggerAfterTimeout(asyncWebRequest,deferredResult);
        }
 catch (        Throwable t) {
          setConcurrentResultAndDispatch(t);
        }
      }
    }
  }
);
  this.asyncWebRequest.addCompletionHandler(new Runnable(){
    public void run(){
      deferredResult.expire();
      chain.triggerAfterCompletion(asyncWebRequest,deferredResult);
    }
  }
);
  startAsyncProcessing(processingContext);
  try {
    chain.applyPreProcess(this.asyncWebRequest,deferredResult);
    deferredResult.setResultHandler(new DeferredResultHandler(){
      public void handleResult(      Object result){
        result=chain.applyPostProcess(asyncWebRequest,deferredResult,result);
        setConcurrentResultAndDispatch(result);
      }
    }
);
  }
 catch (  Throwable t) {
    setConcurrentResultAndDispatch(t);
  }
}
