{
  Assert.notNull(contextLoader,"ContextLoader must not be null");
  Assert.notNull(clazz,"Class must not be null");
  boolean processConfigurationClasses=(contextLoader instanceof ResourceTypeAwareContextLoader) && ResourceType.CLASSES == ((ResourceTypeAwareContextLoader)contextLoader).getResourceType();
  LocationsResolver locationsResolver=processConfigurationClasses ? classNameLocationsResolver : resourcePathLocationsResolver;
  Class<ContextConfiguration> annotationType=ContextConfiguration.class;
  Class<?> declaringClass=AnnotationUtils.findAnnotationDeclaringClass(annotationType,clazz);
  Assert.notNull(declaringClass,String.format("Could not find an 'annotation declaring class' for annotation type [%s] and class [%s]",annotationType,clazz));
  final List<String> locationsList=new ArrayList<String>();
  while (declaringClass != null) {
    ContextConfiguration contextConfiguration=declaringClass.getAnnotation(annotationType);
    if (logger.isTraceEnabled()) {
      logger.trace(String.format("Retrieved @ContextConfiguration [%s] for declaring class [%s].",contextConfiguration,declaringClass));
    }
    String[] resolvedLocations=locationsResolver.resolveLocations(contextConfiguration,declaringClass);
    String[] processedLocations=contextLoader.processLocations(declaringClass,resolvedLocations);
    locationsList.addAll(0,Arrays.asList(processedLocations));
    declaringClass=contextConfiguration.inheritLocations() ? AnnotationUtils.findAnnotationDeclaringClass(annotationType,declaringClass.getSuperclass()) : null;
  }
  return StringUtils.toStringArray(locationsList);
}
