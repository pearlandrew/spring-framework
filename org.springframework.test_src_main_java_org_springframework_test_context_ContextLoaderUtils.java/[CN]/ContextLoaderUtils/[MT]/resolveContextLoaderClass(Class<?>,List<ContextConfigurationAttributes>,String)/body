{
  Assert.notNull(testClass,"Class must not be null");
  Assert.notEmpty(configAttributesList,"ContextConfigurationAttributes list must not be null or empty");
  Assert.hasText(defaultContextLoaderClassName,"Default ContextLoader class name must not be null or empty");
  for (  ContextConfigurationAttributes configAttributes : configAttributesList) {
    if (logger.isTraceEnabled()) {
      logger.trace(String.format("Processing ContextLoader for context configuration attributes [%s] and test class [%s]",configAttributes,testClass));
    }
    Class<? extends ContextLoader> contextLoaderClass=configAttributes.getContextLoaderClass();
    if (!ContextLoader.class.equals(contextLoaderClass)) {
      if (logger.isDebugEnabled()) {
        logger.debug(String.format("Found explicit ContextLoader class [%s] for context configuration attributes [%s] and test class [%s]",contextLoaderClass,configAttributes,testClass));
      }
      return contextLoaderClass;
    }
  }
  try {
    if (logger.isTraceEnabled()) {
      logger.trace(String.format("Using default ContextLoader class [%s] for test class [%s]",defaultContextLoaderClassName,testClass));
    }
    return (Class<? extends ContextLoader>)ContextLoaderUtils.class.getClassLoader().loadClass(defaultContextLoaderClassName);
  }
 catch (  ClassNotFoundException ex) {
    throw new IllegalStateException("Could not load default ContextLoader class [" + defaultContextLoaderClassName + "]. Specify @ContextConfiguration's 'loader' "+ "attribute or make the default loader class available.");
  }
}
