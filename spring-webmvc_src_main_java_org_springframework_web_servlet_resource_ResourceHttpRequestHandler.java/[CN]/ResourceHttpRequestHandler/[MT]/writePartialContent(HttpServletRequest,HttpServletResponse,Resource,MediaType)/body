{
  long resourceLength=resource.contentLength();
  List<HttpRange> ranges;
  try {
    HttpHeaders requestHeaders=new ServletServerHttpRequest(request).getHeaders();
    ranges=requestHeaders.getRange();
  }
 catch (  IllegalArgumentException ex) {
    response.addHeader("Content-Range","bytes */" + resourceLength);
    response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE);
    return;
  }
  response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT);
  if (ranges.size() == 1) {
    HttpRange range=ranges.get(0);
    long rangeStart=range.getRangeStart(resourceLength);
    long rangeEnd=range.getRangeEnd(resourceLength);
    long rangeLength=rangeEnd - rangeStart + 1;
    setHeaders(response,resource,contentType);
    response.addHeader("Content-Range","bytes " + rangeStart + "-"+ rangeEnd+ "/"+ resourceLength);
    response.setContentLength((int)rangeLength);
    InputStream in=resource.getInputStream();
    try {
      copyRange(in,response.getOutputStream(),rangeStart,rangeEnd);
    }
  finally {
      try {
        in.close();
      }
 catch (      IOException ex) {
      }
    }
  }
 else {
    String boundaryString=MimeTypeUtils.generateMultipartBoundaryString();
    response.setContentType("multipart/byteranges; boundary=" + boundaryString);
    ServletOutputStream out=response.getOutputStream();
    for (    HttpRange range : ranges) {
      long rangeStart=range.getRangeStart(resourceLength);
      long rangeEnd=range.getRangeEnd(resourceLength);
      InputStream in=resource.getInputStream();
      out.println();
      out.println("--" + boundaryString);
      if (contentType != null) {
        out.println("Content-Type: " + contentType);
      }
      out.println("Content-Range: bytes " + rangeStart + "-"+ rangeEnd+ "/"+ resourceLength);
      out.println();
      copyRange(in,out,rangeStart,rangeEnd);
    }
    out.println();
    out.print("--" + boundaryString + "--");
  }
}
