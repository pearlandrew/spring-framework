{
  Assert.notNull(method,"Method must not be null");
  Assert.notNull(args,"Argument array must not be null");
  Assert.notNull(classLoader,"ClassLoader must not be null");
  TypeVariable<Method>[] declaredTypeVariables=method.getTypeParameters();
  Type genericReturnType=method.getGenericReturnType();
  Type[] methodArgumentTypes=method.getGenericParameterTypes();
  if (declaredTypeVariables.length == 0) {
    return method.getReturnType();
  }
  if (args.length < methodArgumentTypes.length) {
    return null;
  }
  boolean locallyDeclaredTypeVariableMatchesReturnType=false;
  for (  TypeVariable<Method> currentTypeVariable : declaredTypeVariables) {
    if (currentTypeVariable.equals(genericReturnType)) {
      locallyDeclaredTypeVariableMatchesReturnType=true;
      break;
    }
  }
  if (locallyDeclaredTypeVariableMatchesReturnType) {
    for (int i=0; i < methodArgumentTypes.length; i++) {
      Type currentMethodArgumentType=methodArgumentTypes[i];
      if (currentMethodArgumentType.equals(genericReturnType)) {
        return args[i].getClass();
      }
      if (currentMethodArgumentType instanceof ParameterizedType) {
        ParameterizedType parameterizedType=(ParameterizedType)currentMethodArgumentType;
        Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();
        for (        Type typeArg : actualTypeArguments) {
          if (typeArg.equals(genericReturnType)) {
            Object arg=args[i];
            if (arg instanceof Class) {
              return (Class<?>)arg;
            }
 else             if (arg instanceof String) {
              try {
                return classLoader.loadClass((String)arg);
              }
 catch (              ClassNotFoundException ex) {
                throw new IllegalStateException("Could not resolve specified class name argument [" + arg + "]",ex);
              }
            }
 else {
              return method.getReturnType();
            }
          }
        }
      }
    }
  }
  return method.getReturnType();
}
