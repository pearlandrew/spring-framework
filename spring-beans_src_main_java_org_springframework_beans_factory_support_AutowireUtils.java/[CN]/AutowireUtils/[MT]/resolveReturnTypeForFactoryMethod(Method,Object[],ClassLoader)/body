{
  Assert.notNull(method,"Method must not be null");
  Assert.notNull(args,"Argument array must not be null");
  Assert.notNull(classLoader,"ClassLoader must not be null");
  TypeVariable<Method>[] declaredTypeVariables=method.getTypeParameters();
  Type genericReturnType=method.getGenericReturnType();
  Type[] methodParameterTypes=method.getGenericParameterTypes();
  Assert.isTrue(args.length == methodParameterTypes.length,"Argument array does not match parameter count");
  boolean locallyDeclaredTypeVariableMatchesReturnType=false;
  for (  TypeVariable<Method> currentTypeVariable : declaredTypeVariables) {
    if (currentTypeVariable.equals(genericReturnType)) {
      locallyDeclaredTypeVariableMatchesReturnType=true;
      break;
    }
  }
  if (locallyDeclaredTypeVariableMatchesReturnType) {
    for (int i=0; i < methodParameterTypes.length; i++) {
      Type methodParameterType=methodParameterTypes[i];
      Object arg=args[i];
      if (methodParameterType.equals(genericReturnType)) {
        if (arg instanceof TypedStringValue) {
          TypedStringValue typedValue=((TypedStringValue)arg);
          if (typedValue.hasTargetType()) {
            return typedValue.getTargetType();
          }
          try {
            return typedValue.resolveTargetType(classLoader);
          }
 catch (          ClassNotFoundException ex) {
            throw new IllegalStateException("Failed to resolve value type [" + typedValue.getTargetTypeName() + "] for factory method argument",ex);
          }
        }
        if (arg != null && !(arg instanceof BeanMetadataElement)) {
          return arg.getClass();
        }
        return method.getReturnType();
      }
 else       if (methodParameterType instanceof ParameterizedType) {
        ParameterizedType parameterizedType=(ParameterizedType)methodParameterType;
        Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();
        for (        Type typeArg : actualTypeArguments) {
          if (typeArg.equals(genericReturnType)) {
            if (arg instanceof Class) {
              return (Class<?>)arg;
            }
 else {
              String className=null;
              if (arg instanceof String) {
                className=(String)arg;
              }
 else               if (arg instanceof TypedStringValue) {
                TypedStringValue typedValue=((TypedStringValue)arg);
                String targetTypeName=typedValue.getTargetTypeName();
                if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {
                  className=typedValue.getValue();
                }
              }
              if (className != null) {
                try {
                  return ClassUtils.forName(className,classLoader);
                }
 catch (                ClassNotFoundException ex) {
                  throw new IllegalStateException("Could not resolve class name [" + arg + "] for factory method argument",ex);
                }
              }
              return method.getReturnType();
            }
          }
        }
      }
    }
  }
  return method.getReturnType();
}
