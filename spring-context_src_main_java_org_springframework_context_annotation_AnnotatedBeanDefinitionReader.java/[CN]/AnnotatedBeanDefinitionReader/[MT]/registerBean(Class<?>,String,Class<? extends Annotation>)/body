{
  AnnotatedGenericBeanDefinition abd=new AnnotatedGenericBeanDefinition(annotatedClass);
  AnnotationMetadata metadata=abd.getMetadata();
  if (metadata.isAnnotated(Profile.class.getName())) {
    AnnotationAttributes profile=MetadataUtils.attributesFor(metadata,Profile.class);
    if (!this.environment.acceptsProfiles(profile.getStringArray("value"))) {
      return;
    }
  }
  ScopeMetadata scopeMetadata=this.scopeMetadataResolver.resolveScopeMetadata(abd);
  abd.setScope(scopeMetadata.getScopeName());
  String beanName=(name != null ? name : this.beanNameGenerator.generateBeanName(abd,this.registry));
  AnnotationConfigUtils.processCommonDefinitionAnnotations(abd);
  if (qualifiers != null) {
    for (    Class<? extends Annotation> qualifier : qualifiers) {
      if (Primary.class.equals(qualifier)) {
        abd.setPrimary(true);
      }
 else       if (Lazy.class.equals(qualifier)) {
        abd.setLazyInit(true);
      }
 else {
        abd.addQualifier(new AutowireCandidateQualifier(qualifier));
      }
    }
  }
  BeanDefinitionHolder definitionHolder=new BeanDefinitionHolder(abd,beanName);
  definitionHolder=AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata,definitionHolder,this.registry);
  BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder,this.registry);
}
