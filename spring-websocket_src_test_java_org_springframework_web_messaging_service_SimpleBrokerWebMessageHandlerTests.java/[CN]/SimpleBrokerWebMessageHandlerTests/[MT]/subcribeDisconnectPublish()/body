{
  this.messageHandler.handleSubscribe(createSubscriptionMessage("sess1","sub1","/foo"));
  this.messageHandler.handleSubscribe(createSubscriptionMessage("sess1","sub2","/foo"));
  this.messageHandler.handleSubscribe(createSubscriptionMessage("sess1","sub3","/bar"));
  this.messageHandler.handleSubscribe(createSubscriptionMessage("sess2","sub1","/foo"));
  this.messageHandler.handleSubscribe(createSubscriptionMessage("sess2","sub2","/foo"));
  this.messageHandler.handleSubscribe(createSubscriptionMessage("sess2","sub3","/bar"));
  WebMessageHeaderAccesssor headers=WebMessageHeaderAccesssor.create(MessageType.DISCONNECT);
  headers.setSessionId("sess1");
  Message<byte[]> message=MessageBuilder.withPayload(new byte[0]).copyHeaders(headers.toMap()).build();
  this.messageHandler.handleDisconnect(message);
  this.messageHandler.handlePublish(createMessage("/foo","message1"));
  this.messageHandler.handlePublish(createMessage("/bar","message2"));
  verify(this.clientChannel,times(3)).send(this.messageCaptor.capture());
  assertCapturedMessage(this.messageCaptor.getAllValues().get(0),"sess2","sub1","/foo");
  assertCapturedMessage(this.messageCaptor.getAllValues().get(1),"sess2","sub2","/foo");
  assertCapturedMessage(this.messageCaptor.getAllValues().get(2),"sess2","sub3","/bar");
}
