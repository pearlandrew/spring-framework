{
  SimpMessageHeaderAccessor headers=SimpMessageHeaderAccessor.wrap(message);
  SimpMessageType messageType=headers.getMessageType();
  String destination=headers.getDestination();
  if (!checkDestinationPrefix(destination)) {
    if (logger.isTraceEnabled()) {
      logger.trace("Ingoring message with destination " + destination);
    }
    return;
  }
  if (SimpMessageType.SUBSCRIBE.equals(messageType)) {
    this.subscriptionRegistry.registerSubscription(message);
  }
 else   if (SimpMessageType.UNSUBSCRIBE.equals(messageType)) {
    this.subscriptionRegistry.unregisterSubscription(message);
  }
 else   if (SimpMessageType.MESSAGE.equals(messageType)) {
    sendMessageToSubscribers(headers.getDestination(),message);
  }
 else   if (SimpMessageType.DISCONNECT.equals(messageType)) {
    String sessionId=headers.getSessionId();
    this.subscriptionRegistry.unregisterAllSubscriptions(sessionId);
  }
 else   if (SimpMessageType.CONNECT.equals(messageType)) {
    SimpMessageHeaderAccessor replyHeaders=SimpMessageHeaderAccessor.create(SimpMessageType.CONNECT_ACK);
    replyHeaders.setSessionId(headers.getSessionId());
    replyHeaders.setHeader(SimpMessageHeaderAccessor.CONNECT_MESSAGE_HEADER,message);
    Message<byte[]> connectAck=MessageBuilder.withPayload(EMPTY_PAYLOAD).setHeaders(replyHeaders).build();
    this.messageChannel.send(connectAck);
  }
}
