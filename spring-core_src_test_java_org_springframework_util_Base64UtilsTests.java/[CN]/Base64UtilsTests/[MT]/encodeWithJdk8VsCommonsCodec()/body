{
  Base64Utils.Base64Delegate jdkDelegate=new Base64Utils.JdkBase64Delegate();
  Base64Utils.Base64Delegate commonsDelegate=new Base64Utils.CommonsCodecBase64Delegate();
  byte[] bytes=new byte[]{-0x4f,0xa,-0x73,-0x4f,0x64,-0x20,0x75,0x41,0x5,-0x49,-0x57,-0x65,-0x19,0x2e,0x3f,-0x1b};
  assertArrayEquals(jdkDelegate.encode(bytes),commonsDelegate.encode(bytes));
  assertArrayEquals(bytes,jdkDelegate.decode(jdkDelegate.encode(bytes)));
  assertArrayEquals(bytes,commonsDelegate.decode(commonsDelegate.encode(bytes)));
  bytes="Hello World".getBytes("UTF-8");
  assertArrayEquals(jdkDelegate.encode(bytes),commonsDelegate.encode(bytes));
  assertArrayEquals(bytes,jdkDelegate.decode(jdkDelegate.encode(bytes)));
  assertArrayEquals(bytes,commonsDelegate.decode(commonsDelegate.encode(bytes)));
  bytes="Hello World\r\nSecond Line".getBytes("UTF-8");
  assertArrayEquals(jdkDelegate.encode(bytes),commonsDelegate.encode(bytes));
  assertArrayEquals(bytes,jdkDelegate.decode(jdkDelegate.encode(bytes)));
  assertArrayEquals(bytes,commonsDelegate.decode(commonsDelegate.encode(bytes)));
  bytes="Hello World\r\nSecond Line\r\n".getBytes("UTF-8");
  assertArrayEquals(jdkDelegate.encode(bytes),commonsDelegate.encode(bytes));
  assertArrayEquals(bytes,jdkDelegate.decode(jdkDelegate.encode(bytes)));
  assertArrayEquals(bytes,commonsDelegate.decode(commonsDelegate.encode(bytes)));
}
