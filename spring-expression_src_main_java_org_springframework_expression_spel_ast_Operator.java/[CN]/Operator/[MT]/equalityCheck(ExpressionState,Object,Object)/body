{
  if (left instanceof Number && right instanceof Number) {
    Number leftNumber=(Number)left;
    Number rightNumber=(Number)right;
    if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) {
      BigDecimal leftBigDecimal=NumberUtils.convertNumberToTargetClass(leftNumber,BigDecimal.class);
      BigDecimal rightBigDecimal=NumberUtils.convertNumberToTargetClass(rightNumber,BigDecimal.class);
      return (leftBigDecimal == null ? rightBigDecimal == null : leftBigDecimal.compareTo(rightBigDecimal) == 0);
    }
    if (leftNumber instanceof Double || rightNumber instanceof Double) {
      return (leftNumber.doubleValue() == rightNumber.doubleValue());
    }
    if (leftNumber instanceof Float || rightNumber instanceof Float) {
      return (leftNumber.floatValue() == rightNumber.floatValue());
    }
    if (leftNumber instanceof Long || rightNumber instanceof Long) {
      return (leftNumber.longValue() == rightNumber.longValue());
    }
    return (leftNumber.intValue() == rightNumber.intValue());
  }
  if (left instanceof CharSequence && right instanceof CharSequence) {
    return left.toString().equals(right.toString());
  }
  if (ObjectUtils.nullSafeEquals(left,right)) {
    return true;
  }
  if (left instanceof Comparable && right instanceof Comparable) {
    Class<?> ancestor=ClassUtils.determineCommonAncestor(left.getClass(),right.getClass());
    if (ancestor != null && Comparable.class.isAssignableFrom(ancestor)) {
      return (state.getTypeComparator().compare(left,right) == 0);
    }
  }
  return false;
}
