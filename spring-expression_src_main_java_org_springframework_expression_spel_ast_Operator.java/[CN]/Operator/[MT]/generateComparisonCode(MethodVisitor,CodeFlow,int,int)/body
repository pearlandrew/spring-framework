{
  String leftDesc=getLeftOperand().exitTypeDescriptor;
  String rightDesc=getRightOperand().exitTypeDescriptor;
  boolean unboxLeft=!CodeFlow.isPrimitive(leftDesc);
  boolean unboxRight=!CodeFlow.isPrimitive(rightDesc);
  DescriptorComparison dc=DescriptorComparison.checkNumericCompatibility(leftDesc,rightDesc,this.leftActualDescriptor,this.rightActualDescriptor);
  char targetType=dc.compatibleType;
  getLeftOperand().generateCode(mv,cf);
  if (unboxLeft) {
    CodeFlow.insertUnboxInsns(mv,targetType,leftDesc);
  }
  cf.enterCompilationScope();
  getRightOperand().generateCode(mv,cf);
  cf.exitCompilationScope();
  if (unboxRight) {
    CodeFlow.insertUnboxInsns(mv,targetType,rightDesc);
  }
  Label elseTarget=new Label();
  Label endOfIf=new Label();
  if (targetType == 'D') {
    mv.visitInsn(DCMPG);
    mv.visitJumpInsn(compInstruction1,elseTarget);
  }
 else   if (targetType == 'F') {
    mv.visitInsn(FCMPG);
    mv.visitJumpInsn(compInstruction1,elseTarget);
  }
 else   if (targetType == 'J') {
    mv.visitInsn(LCMP);
    mv.visitJumpInsn(compInstruction1,elseTarget);
  }
 else   if (targetType == 'I') {
    mv.visitJumpInsn(compInstruction2,elseTarget);
  }
 else {
    throw new IllegalStateException("Unexpected descriptor " + leftDesc);
  }
  mv.visitInsn(ICONST_1);
  mv.visitJumpInsn(GOTO,endOfIf);
  mv.visitLabel(elseTarget);
  mv.visitInsn(ICONST_0);
  mv.visitLabel(endOfIf);
  cf.pushDescriptor("Z");
}
