{
  String leftDesc=getLeftOperand().getExitDescriptor();
  String rightDesc=getRightOperand().getExitDescriptor();
  boolean unboxLeft=!CodeFlow.isPrimitive(leftDesc);
  boolean unboxRight=!CodeFlow.isPrimitive(rightDesc);
  char targetType=CodeFlow.toPrimitiveTargetDesc(leftDesc);
  getLeftOperand().generateCode(mv,codeflow);
  if (unboxLeft) {
    CodeFlow.insertUnboxInsns(mv,targetType,false);
  }
  getRightOperand().generateCode(mv,codeflow);
  if (unboxRight) {
    CodeFlow.insertUnboxInsns(mv,targetType,false);
  }
  Label elseTarget=new Label();
  Label endOfIf=new Label();
  if (targetType == 'D') {
    mv.visitInsn(DCMPG);
    mv.visitJumpInsn(compareInstruction1,elseTarget);
  }
 else   if (targetType == 'F') {
    mv.visitInsn(FCMPG);
    mv.visitJumpInsn(compareInstruction1,elseTarget);
  }
 else   if (targetType == 'J') {
    mv.visitInsn(LCMP);
    mv.visitJumpInsn(compareInstruction1,elseTarget);
  }
 else   if (targetType == 'I') {
    mv.visitJumpInsn(compareInstruction2,elseTarget);
  }
 else {
    throw new IllegalStateException("Unexpected descriptor " + leftDesc);
  }
  mv.visitInsn(ICONST_1);
  mv.visitJumpInsn(GOTO,endOfIf);
  mv.visitLabel(elseTarget);
  mv.visitInsn(ICONST_0);
  mv.visitLabel(endOfIf);
  codeflow.pushDescriptor("Z");
}
