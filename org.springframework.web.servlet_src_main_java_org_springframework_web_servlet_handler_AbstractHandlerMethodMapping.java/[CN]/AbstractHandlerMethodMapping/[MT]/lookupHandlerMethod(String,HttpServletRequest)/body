{
  List<T> keys=urlMap.get(lookupPath);
  if (keys == null) {
    keys=new ArrayList<T>(handlerMethods.keySet());
  }
  List<Match> matches=new ArrayList<Match>();
  for (  T key : keys) {
    T match=getMatchingMappingKey(key,lookupPath,request);
    if (match != null) {
      matches.add(new Match(match,handlerMethods.get(key)));
    }
  }
  if (!matches.isEmpty()) {
    Comparator<Match> comparator=new MatchComparator(getMappingKeyComparator(lookupPath,request));
    Collections.sort(matches,comparator);
    if (logger.isTraceEnabled()) {
      logger.trace("Found " + matches.size() + " matching mapping(s) for ["+ lookupPath+ "] : "+ matches);
    }
    Match bestMatch=matches.get(0);
    if (matches.size() > 1) {
      Match secondBestMatch=matches.get(1);
      if (comparator.compare(bestMatch,secondBestMatch) == 0) {
        Method m1=bestMatch.handlerMethod.getMethod();
        Method m2=secondBestMatch.handlerMethod.getMethod();
        throw new IllegalStateException("Ambiguous handler methods mapped for HTTP path '" + request.getRequestURL() + "': {"+ m1+ ", "+ m2+ "}");
      }
    }
    handleMatch(bestMatch.mappingKey,lookupPath,request);
    return bestMatch.handlerMethod;
  }
 else {
    return handleNoMatch(handlerMethods.keySet(),lookupPath,request);
  }
}
