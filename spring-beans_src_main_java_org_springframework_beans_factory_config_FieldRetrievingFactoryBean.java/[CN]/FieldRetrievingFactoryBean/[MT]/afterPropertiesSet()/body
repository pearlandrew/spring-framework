{
  if (this.targetClass != null && this.targetObject != null) {
    throw new IllegalArgumentException("Specify either targetClass or targetObject, not both");
  }
  if (this.targetClass == null && this.targetObject == null) {
    if (this.targetField != null) {
      throw new IllegalArgumentException("Specify targetClass or targetObject in combination with targetField");
    }
    if (this.staticField == null) {
      this.staticField=this.beanName;
    }
    int lastDotIndex=this.staticField.lastIndexOf('.');
    if (lastDotIndex == -1 || lastDotIndex == this.staticField.length()) {
      throw new IllegalArgumentException("staticField must be a fully qualified class plus static field name: " + "e.g. 'example.MyExampleClass.MY_EXAMPLE_FIELD'");
    }
    String className=this.staticField.substring(0,lastDotIndex);
    String fieldName=this.staticField.substring(lastDotIndex + 1);
    this.targetClass=ClassUtils.forName(className,this.beanClassLoader);
    this.targetField=fieldName;
  }
 else   if (this.targetField == null) {
    throw new IllegalArgumentException("targetField is required");
  }
  Class targetClass=(this.targetObject != null) ? this.targetObject.getClass() : this.targetClass;
  this.fieldObject=targetClass.getField(this.targetField);
}
