{
  final DriverManagerDataSource ds=new DriverManagerDataSource();
  LocalSessionFactoryBean lsfb=new LocalSessionFactoryBean();
  lsfb.setDataSource(ds);
  Properties props=new Properties();
  props.setProperty("hibernate.dialect",HSQLDialect.class.getName());
  lsfb.setHibernateProperties(props);
  lsfb.afterPropertiesSet();
  final SessionFactory sf=lsfb.getObject();
  HibernateTransactionManager tm=new HibernateTransactionManager();
  tm.setSessionFactory(sf);
  tm.afterPropertiesSet();
  TransactionTemplate tt=new TransactionTemplate(tm);
  tt.setIsolationLevel(TransactionDefinition.ISOLATION_SERIALIZABLE);
  tt.setTimeout(10);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(ds));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  try {
    tt.execute(new TransactionCallback(){
      public Object doInTransaction(      TransactionStatus status){
        assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
        assertTrue("Has thread connection",TransactionSynchronizationManager.hasResource(ds));
        Session session=((SessionHolder)TransactionSynchronizationManager.getResource(sf)).getSession();
        return session.createQuery("from java.lang.Object").list();
      }
    }
);
    fail("Should have thrown CannotCreateTransactionException");
  }
 catch (  CannotCreateTransactionException ex) {
  }
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(ds));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
}
