{
  final SessionFactory sf=mock(SessionFactory.class);
  final ImplementingSession session1=mock(ImplementingSession.class);
  final ImplementingSession session2=mock(ImplementingSession.class);
  Connection con=mock(Connection.class);
  Transaction tx=mock(Transaction.class);
  given(sf.openSession()).willReturn(session1,session2);
  given(session1.getSessionFactory()).willReturn(sf);
  given(session1.getFlushMode()).willReturn(FlushMode.AUTO);
  given(session2.beginTransaction()).willReturn(tx);
  given(session2.connection()).willReturn(con);
  given(session2.getFlushMode()).willReturn(FlushMode.AUTO);
  given(session2.isOpen()).willReturn(true);
  given(session2.isConnected()).willReturn(true);
  LocalSessionFactoryBean lsfb=new LocalSessionFactoryBean(){
    @Override protected SessionFactory buildSessionFactory(    LocalSessionFactoryBuilder sfb){
      return sf;
    }
  }
;
  lsfb.afterPropertiesSet();
  final SessionFactory sfProxy=lsfb.getObject();
  PlatformTransactionManager tm=new HibernateTransactionManager(sfProxy);
  TransactionTemplate tt=new TransactionTemplate(tm);
  tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_SUPPORTS);
  final TransactionTemplate tt2=new TransactionTemplate(tm);
  tt2.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  tt.execute(new TransactionCallback(){
    @Override public Object doInTransaction(    TransactionStatus status){
      assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sfProxy));
      assertTrue("Is not new transaction",!status.isNewTransaction());
      assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
      assertFalse(TransactionSynchronizationManager.isActualTransactionActive());
      Session session=sfProxy.openSession();
      assertSame(session1,session);
      tt2.execute(new TransactionCallback(){
        @Override public Object doInTransaction(        TransactionStatus status){
          assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
          assertTrue(TransactionSynchronizationManager.isActualTransactionActive());
          Session session=((SessionHolder)TransactionSynchronizationManager.getResource(sf)).getSession();
          assertSame(session2,session);
          session.flush();
          return null;
        }
      }
);
      session.flush();
      session.close();
      assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
      assertFalse(TransactionSynchronizationManager.isActualTransactionActive());
      return null;
    }
  }
);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  verify(session1).flush();
  verify(session1).close();
  verify(session2).flush();
  verify(session2).close();
  verify(tx).commit();
}
