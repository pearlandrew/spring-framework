{
  MockControl sfControl=MockControl.createControl(SessionFactory.class);
  final SessionFactory sf=(SessionFactory)sfControl.getMock();
  MockControl session1Control=MockControl.createControl(ImplementingSession.class);
  final ImplementingSession session1=(ImplementingSession)session1Control.getMock();
  MockControl session2Control=MockControl.createControl(ImplementingSession.class);
  final ImplementingSession session2=(ImplementingSession)session2Control.getMock();
  MockControl conControl=MockControl.createControl(Connection.class);
  Connection con=(Connection)conControl.getMock();
  MockControl txControl=MockControl.createControl(Transaction.class);
  Transaction tx=(Transaction)txControl.getMock();
  sf.openSession();
  sfControl.setReturnValue(session1,1);
  session1.flush();
  session1Control.setVoidCallable(1);
  session1.close();
  session1Control.setReturnValue(null,1);
  sf.openSession();
  sfControl.setReturnValue(session2,1);
  session2.beginTransaction();
  session2Control.setReturnValue(tx,1);
  session2.connection();
  session2Control.setReturnValue(con,2);
  session2.flush();
  session2Control.setVoidCallable(1);
  tx.commit();
  txControl.setVoidCallable(1);
  session2.isConnected();
  session2Control.setReturnValue(true,1);
  session2.close();
  session2Control.setReturnValue(null,1);
  sfControl.replay();
  session1Control.replay();
  session2Control.replay();
  txControl.replay();
  LocalSessionFactoryBean lsfb=new LocalSessionFactoryBean(){
    @Override protected SessionFactory buildSessionFactory(    LocalSessionFactoryBuilder sfb){
      return sf;
    }
  }
;
  lsfb.afterPropertiesSet();
  final SessionFactory sfProxy=lsfb.getObject();
  PlatformTransactionManager tm=new HibernateTransactionManager(sfProxy);
  TransactionTemplate tt=new TransactionTemplate(tm);
  tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_SUPPORTS);
  final TransactionTemplate tt2=new TransactionTemplate(tm);
  tt2.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  tt.execute(new TransactionCallback(){
    public Object doInTransaction(    TransactionStatus status){
      assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sfProxy));
      assertTrue("Is not new transaction",!status.isNewTransaction());
      assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
      assertFalse(TransactionSynchronizationManager.isActualTransactionActive());
      Session session=sfProxy.openSession();
      assertSame(session1,session);
      tt2.execute(new TransactionCallback(){
        public Object doInTransaction(        TransactionStatus status){
          assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
          assertTrue(TransactionSynchronizationManager.isActualTransactionActive());
          Session session=((SessionHolder)TransactionSynchronizationManager.getResource(sf)).getSession();
          assertSame(session2,session);
          session.flush();
          return null;
        }
      }
);
      session.flush();
      session.close();
      assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
      assertFalse(TransactionSynchronizationManager.isActualTransactionActive());
      return null;
    }
  }
);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  sfControl.verify();
  session1Control.verify();
  session2Control.verify();
  txControl.verify();
}
