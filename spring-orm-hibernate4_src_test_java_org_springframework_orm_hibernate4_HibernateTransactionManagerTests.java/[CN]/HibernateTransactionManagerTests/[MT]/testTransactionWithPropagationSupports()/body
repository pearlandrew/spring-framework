{
  MockControl sfControl=MockControl.createControl(SessionFactory.class);
  final SessionFactory sf=(SessionFactory)sfControl.getMock();
  MockControl sessionControl=MockControl.createControl(ImplementingSession.class);
  final ImplementingSession session=(ImplementingSession)sessionControl.getMock();
  sf.openSession();
  sfControl.setReturnValue(session,1);
  session.flush();
  sessionControl.setVoidCallable(1);
  session.close();
  sessionControl.setReturnValue(null,1);
  sfControl.replay();
  sessionControl.replay();
  LocalSessionFactoryBean lsfb=new LocalSessionFactoryBean(){
    @Override protected SessionFactory buildSessionFactory(    LocalSessionFactoryBuilder sfb){
      return sf;
    }
  }
;
  lsfb.afterPropertiesSet();
  final SessionFactory sfProxy=lsfb.getObject();
  PlatformTransactionManager tm=new HibernateTransactionManager(sfProxy);
  TransactionTemplate tt=new TransactionTemplate(tm);
  tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_SUPPORTS);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sfProxy));
  tt.execute(new TransactionCallback(){
    @Override public Object doInTransaction(    TransactionStatus status){
      assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sfProxy));
      assertTrue("Is not new transaction",!status.isNewTransaction());
      assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
      assertFalse(TransactionSynchronizationManager.isActualTransactionActive());
      Session session=sf.openSession();
      session.flush();
      session.close();
      return null;
    }
  }
);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sfProxy));
  sfControl.verify();
  sessionControl.verify();
}
