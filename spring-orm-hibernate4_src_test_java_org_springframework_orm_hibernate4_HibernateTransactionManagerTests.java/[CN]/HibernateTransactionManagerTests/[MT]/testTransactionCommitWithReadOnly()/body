{
  Connection con=mock(Connection.class);
  final SessionFactory sf=mock(SessionFactory.class);
  ImplementingSession session=mock(ImplementingSession.class);
  Transaction tx=mock(Transaction.class);
  Query query=mock(Query.class);
  final List list=new ArrayList();
  list.add("test");
  given(sf.openSession()).willReturn(session);
  given(session.beginTransaction()).willReturn(tx);
  given(session.connection()).willReturn(con);
  given(session.isOpen()).willReturn(true);
  given(session.createQuery("some query string")).willReturn(query);
  given(query.list()).willReturn(list);
  given(session.isConnected()).willReturn(true);
  given(con.isReadOnly()).willReturn(true);
  HibernateTransactionManager tm=new HibernateTransactionManager(sf);
  TransactionTemplate tt=new TransactionTemplate(tm);
  tt.setReadOnly(true);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  Object result=tt.execute(new TransactionCallback(){
    @Override public Object doInTransaction(    TransactionStatus status){
      assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
      assertTrue(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
      assertTrue(TransactionSynchronizationManager.isActualTransactionActive());
      Session session=((SessionHolder)TransactionSynchronizationManager.getResource(sf)).getSession();
      return session.createQuery("some query string").list();
    }
  }
);
  assertTrue("Correct result list",result == list);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  verify(session).setFlushMode(FlushMode.MANUAL);
  verify(con).setReadOnly(true);
  verify(tx).commit();
  verify(con).setReadOnly(false);
  verify(session).close();
}
