{
  final SessionFactory sf=mock(SessionFactory.class);
  final Session session=mock(Session.class);
  final Transaction tx1=mock(Transaction.class);
  final Transaction tx2=mock(Transaction.class);
  given(sf.getCurrentSession()).willReturn(session);
  given(session.isOpen()).willReturn(true);
  given(session.getTransaction()).willReturn(tx1,tx2);
  given(session.beginTransaction()).willReturn(tx1,tx2);
  given(session.getFlushMode()).willReturn(FlushMode.MANUAL);
  HibernateTransactionManager tm=new HibernateTransactionManager();
  tm.setSessionFactory(sf);
  tm.setPrepareConnection(false);
  tm.setHibernateManagedSession(true);
  final TransactionTemplate tt=new TransactionTemplate(tm);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  try {
    tt.execute(new TransactionCallbackWithoutResult(){
      @Override public void doInTransactionWithoutResult(      TransactionStatus status){
        assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
        tt.execute(new TransactionCallbackWithoutResult(){
          @Override public void doInTransactionWithoutResult(          TransactionStatus status){
            status.setRollbackOnly();
            Session sess=((SessionHolder)TransactionSynchronizationManager.getResource(sf)).getSession();
            assertEquals(session,sess);
          }
        }
);
      }
    }
);
    fail("Should have thrown UnexpectedRollbackException");
  }
 catch (  UnexpectedRollbackException ex) {
  }
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  tt.execute(new TransactionCallbackWithoutResult(){
    @Override public void doInTransactionWithoutResult(    TransactionStatus status){
      assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
      Session sess=((SessionHolder)TransactionSynchronizationManager.getResource(sf)).getSession();
      assertEquals(session,sess);
    }
  }
);
  verify(tx1).rollback();
  verify(tx2).commit();
  InOrder ordered=inOrder(session);
  ordered.verify(session).setFlushMode(FlushMode.AUTO);
  ordered.verify(session).setFlushMode(FlushMode.MANUAL);
}
