{
  Connection con=mock(Connection.class);
  final SessionFactory sf=mock(SessionFactory.class);
  final ImplementingSession session=mock(ImplementingSession.class);
  Transaction tx=mock(Transaction.class);
  given(sf.openSession()).willReturn(session);
  given(session.beginTransaction()).willReturn(tx);
  given(session.isOpen()).willReturn(true);
  given(session.getFlushMode()).willReturn(FlushMode.AUTO);
  given(session.isConnected()).willReturn(true);
  given(session.connection()).willReturn(con);
  LocalSessionFactoryBean lsfb=new LocalSessionFactoryBean(){
    @Override protected SessionFactory buildSessionFactory(    LocalSessionFactoryBuilder sfb){
      return sf;
    }
  }
;
  lsfb.afterPropertiesSet();
  final SessionFactory sfProxy=lsfb.getObject();
  PlatformTransactionManager tm=new HibernateTransactionManager(sfProxy);
  final TransactionTemplate tt=new TransactionTemplate(tm);
  final List l=new ArrayList();
  l.add("test");
  Object result=tt.execute(new TransactionCallback(){
    @Override public Object doInTransaction(    TransactionStatus status){
      return tt.execute(new TransactionCallback(){
        @Override public Object doInTransaction(        TransactionStatus status){
          Session session=((SessionHolder)TransactionSynchronizationManager.getResource(sf)).getSession();
          session.flush();
          return l;
        }
      }
);
    }
  }
);
  assertTrue("Correct result list",result == l);
  verify(session).flush();
  verify(session).close();
  verify(tx).commit();
}
