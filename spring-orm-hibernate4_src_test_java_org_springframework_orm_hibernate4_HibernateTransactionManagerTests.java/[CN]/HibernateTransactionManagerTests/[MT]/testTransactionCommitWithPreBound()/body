{
  MockControl dsControl=MockControl.createControl(DataSource.class);
  final DataSource ds=(DataSource)dsControl.getMock();
  MockControl conControl=MockControl.createControl(Connection.class);
  Connection con=(Connection)conControl.getMock();
  MockControl sfControl=MockControl.createControl(SessionFactory.class);
  final SessionFactory sf=(SessionFactory)sfControl.getMock();
  MockControl sessionControl=MockControl.createControl(ImplementingSession.class);
  final ImplementingSession session=(ImplementingSession)sessionControl.getMock();
  MockControl txControl=MockControl.createControl(Transaction.class);
  Transaction tx=(Transaction)txControl.getMock();
  session.getFlushMode();
  sessionControl.setReturnValue(FlushMode.AUTO,2);
  session.beginTransaction();
  sessionControl.setReturnValue(tx,1);
  session.connection();
  sessionControl.setReturnValue(con,3);
  con.getTransactionIsolation();
  conControl.setReturnValue(Connection.TRANSACTION_READ_COMMITTED);
  con.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
  conControl.setVoidCallable(1);
  con.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
  conControl.setVoidCallable(1);
  tx.commit();
  txControl.setVoidCallable(1);
  session.isConnected();
  sessionControl.setReturnValue(true,1);
  con.isReadOnly();
  conControl.setReturnValue(false,1);
  session.disconnect();
  sessionControl.setReturnValue(null,1);
  dsControl.replay();
  conControl.replay();
  sfControl.replay();
  sessionControl.replay();
  txControl.replay();
  HibernateTransactionManager tm=new HibernateTransactionManager();
  tm.setSessionFactory(sf);
  tm.setDataSource(ds);
  TransactionTemplate tt=new TransactionTemplate(tm);
  tt.setIsolationLevel(TransactionDefinition.ISOLATION_SERIALIZABLE);
  final List l=new ArrayList();
  l.add("test");
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(ds));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  TransactionSynchronizationManager.bindResource(sf,new SessionHolder(session));
  assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
  Object result=tt.execute(new TransactionCallback(){
    @Override public Object doInTransaction(    TransactionStatus status){
      assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
      assertTrue("Has thread connection",TransactionSynchronizationManager.hasResource(ds));
      SessionHolder sessionHolder=(SessionHolder)TransactionSynchronizationManager.getResource(sf);
      assertTrue("Has thread transaction",sessionHolder.getTransaction() != null);
      Session sess=((SessionHolder)TransactionSynchronizationManager.getResource(sf)).getSession();
      assertEquals(session,sess);
      return l;
    }
  }
);
  assertTrue("Correct result list",result == l);
  assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
  SessionHolder sessionHolder=(SessionHolder)TransactionSynchronizationManager.getResource(sf);
  assertTrue("Hasn't thread transaction",sessionHolder.getTransaction() == null);
  TransactionSynchronizationManager.unbindResource(sf);
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(ds));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  dsControl.verify();
  conControl.verify();
  sfControl.verify();
  sessionControl.verify();
  txControl.verify();
}
