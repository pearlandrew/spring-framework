{
  Connection con=mock(Connection.class);
  final SessionFactory sf=mock(SessionFactory.class);
  ImplementingSession session=mock(ImplementingSession.class);
  Transaction tx=mock(Transaction.class);
  given(sf.openSession()).willReturn(session);
  given(session.beginTransaction()).willReturn(tx);
  given(session.isOpen()).willReturn(true);
  SQLException sqlEx=new SQLException("argh","27");
  Exception rootCause=null;
  ConstraintViolationException jdbcEx=new ConstraintViolationException("mymsg",sqlEx,null);
  rootCause=jdbcEx;
  willThrow(jdbcEx).given(tx).commit();
  given(session.isConnected()).willReturn(true);
  given(session.connection()).willReturn(con);
  HibernateTransactionManager tm=new HibernateTransactionManager(sf);
  TransactionTemplate tt=new TransactionTemplate(tm);
  final List l=new ArrayList();
  l.add("test");
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  try {
    tt.execute(new TransactionCallback(){
      @Override public Object doInTransaction(      TransactionStatus status){
        assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
        return l;
      }
    }
);
    fail("Should have thrown DataIntegrityViolationException");
  }
 catch (  DataIntegrityViolationException ex) {
    assertEquals(rootCause,ex.getCause());
    assertTrue(ex.getMessage().contains("mymsg"));
  }
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  verify(session).close();
  verify(tx).rollback();
}
