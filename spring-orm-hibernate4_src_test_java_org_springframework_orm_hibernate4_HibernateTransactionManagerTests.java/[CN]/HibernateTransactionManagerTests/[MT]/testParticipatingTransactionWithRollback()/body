{
  MockControl conControl=MockControl.createControl(Connection.class);
  Connection con=(Connection)conControl.getMock();
  MockControl sfControl=MockControl.createControl(SessionFactory.class);
  final SessionFactory sf=(SessionFactory)sfControl.getMock();
  MockControl sessionControl=MockControl.createControl(ImplementingSession.class);
  ImplementingSession session=(ImplementingSession)sessionControl.getMock();
  MockControl txControl=MockControl.createControl(Transaction.class);
  Transaction tx=(Transaction)txControl.getMock();
  sf.openSession();
  sfControl.setReturnValue(session,1);
  session.beginTransaction();
  sessionControl.setReturnValue(tx,1);
  session.close();
  sessionControl.setReturnValue(null,1);
  tx.rollback();
  txControl.setVoidCallable(1);
  session.isConnected();
  sessionControl.setReturnValue(true,1);
  session.connection();
  sessionControl.setReturnValue(con,2);
  con.isReadOnly();
  conControl.setReturnValue(false,1);
  sfControl.replay();
  sessionControl.replay();
  txControl.replay();
  PlatformTransactionManager tm=new HibernateTransactionManager(sf);
  final TransactionTemplate tt=new TransactionTemplate(tm);
  try {
    tt.execute(new TransactionCallback(){
      public Object doInTransaction(      TransactionStatus status){
        return tt.execute(new TransactionCallback(){
          public Object doInTransaction(          TransactionStatus status){
            throw new RuntimeException("application exception");
          }
        }
);
      }
    }
);
    fail("Should have thrown RuntimeException");
  }
 catch (  RuntimeException ex) {
  }
  sfControl.verify();
  sessionControl.verify();
  txControl.verify();
}
