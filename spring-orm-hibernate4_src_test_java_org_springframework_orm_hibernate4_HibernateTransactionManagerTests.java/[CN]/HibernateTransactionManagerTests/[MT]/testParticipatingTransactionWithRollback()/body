{
  Connection con=mock(Connection.class);
  final SessionFactory sf=mock(SessionFactory.class);
  ImplementingSession session=mock(ImplementingSession.class);
  Transaction tx=mock(Transaction.class);
  given(sf.openSession()).willReturn(session);
  given(session.beginTransaction()).willReturn(tx);
  given(session.isOpen()).willReturn(true);
  given(session.getFlushMode()).willReturn(FlushMode.AUTO);
  given(session.isConnected()).willReturn(true);
  given(session.connection()).willReturn(con);
  PlatformTransactionManager tm=new HibernateTransactionManager(sf);
  final TransactionTemplate tt=new TransactionTemplate(tm);
  try {
    tt.execute(new TransactionCallback(){
      @Override public Object doInTransaction(      TransactionStatus status){
        return tt.execute(new TransactionCallback(){
          @Override public Object doInTransaction(          TransactionStatus status){
            throw new RuntimeException("application exception");
          }
        }
);
      }
    }
);
    fail("Should have thrown RuntimeException");
  }
 catch (  RuntimeException ex) {
  }
  verify(session).close();
  verify(tx).rollback();
}
