{
  Connection con=mock(Connection.class);
  final SessionFactory sf=mock(SessionFactory.class);
  ImplementingSession session=mock(ImplementingSession.class);
  Transaction tx=mock(Transaction.class);
  given(sf.openSession()).willReturn(session);
  given(session.beginTransaction()).willReturn(tx);
  given(session.isOpen()).willReturn(true);
  given(session.getFlushMode()).willReturn(FlushMode.AUTO);
  given(session.isConnected()).willReturn(true);
  given(session.connection()).willReturn(con);
  PlatformTransactionManager tm=new HibernateTransactionManager(sf);
  TransactionTemplate tt=new TransactionTemplate(tm);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  tt.execute(new TransactionCallback(){
    @Override public Object doInTransaction(    TransactionStatus status){
      assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
      Session session=((SessionHolder)TransactionSynchronizationManager.getResource(sf)).getSession();
      session.flush();
      status.setRollbackOnly();
      return null;
    }
  }
);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  verify(session).flush();
  verify(session).close();
  verify(tx).rollback();
}
