{
  MockServletContext sc=new MockServletContext();
  sc.addInitParameter("key4","mykey4");
  StaticWebApplicationContext wac=new StaticWebApplicationContext();
  wac.setServletContext(sc);
  MutablePropertyValues pvs=new MutablePropertyValues();
  pvs.add("age","${age}");
  pvs.add("name","name${var}${var}${");
  pvs.add("spouse",new RuntimeBeanReference("${ref}"));
  wac.registerSingleton("tb1",TestBean.class,pvs);
  ConstructorArgumentValues cas=new ConstructorArgumentValues();
  cas.addIndexedArgumentValue(1,"${age}");
  cas.addGenericArgumentValue("${var}name${age}");
  pvs=new MutablePropertyValues();
  List<Object> friends=new ManagedList<Object>();
  friends.add("na${age}me");
  friends.add(new RuntimeBeanReference("${ref}"));
  pvs.add("friends",friends);
  Set<Object> someSet=new ManagedSet<Object>();
  someSet.add("na${age}me");
  someSet.add(new RuntimeBeanReference("${ref}"));
  pvs.add("someSet",someSet);
  Map<String,Object> someMap=new ManagedMap<String,Object>();
  someMap.put("key1",new RuntimeBeanReference("${ref}"));
  someMap.put("key2","${age}name");
  MutablePropertyValues innerPvs=new MutablePropertyValues();
  innerPvs.add("touchy","${os.name}");
  RootBeanDefinition innerBd=new RootBeanDefinition(TestBean.class);
  innerBd.setPropertyValues(innerPvs);
  someMap.put("key3",innerBd);
  MutablePropertyValues innerPvs2=new MutablePropertyValues(innerPvs);
  someMap.put("${key4}",new BeanDefinitionHolder(new ChildBeanDefinition("tb1",innerPvs2),"child"));
  pvs.add("someMap",someMap);
  RootBeanDefinition bd=new RootBeanDefinition(TestBean.class,cas,pvs);
  wac.getDefaultListableBeanFactory().registerBeanDefinition("tb2",bd);
  pvs=new MutablePropertyValues();
  pvs.add("properties","var=${m}var\nref=tb2\nm=my");
  pvs.add("searchContextAttributes",Boolean.TRUE);
  wac.registerSingleton("configurer",ServletContextPropertyPlaceholderConfigurer.class,pvs);
  sc.setAttribute("age",new Integer(98));
  wac.refresh();
  TestBean tb1=(TestBean)wac.getBean("tb1");
  TestBean tb2=(TestBean)wac.getBean("tb2");
  assertEquals(98,tb1.getAge());
  assertEquals(98,tb2.getAge());
  assertEquals("namemyvarmyvar${",tb1.getName());
  assertEquals("myvarname98",tb2.getName());
  assertEquals(tb2,tb1.getSpouse());
  assertEquals(2,tb2.getFriends().size());
  assertEquals("na98me",tb2.getFriends().iterator().next());
  assertEquals(tb2,tb2.getFriends().toArray()[1]);
  assertEquals(2,tb2.getSomeSet().size());
  assertTrue(tb2.getSomeSet().contains("na98me"));
  assertTrue(tb2.getSomeSet().contains(tb2));
  assertEquals(4,tb2.getSomeMap().size());
  assertEquals(tb2,tb2.getSomeMap().get("key1"));
  assertEquals("98name",tb2.getSomeMap().get("key2"));
  TestBean inner1=(TestBean)tb2.getSomeMap().get("key3");
  TestBean inner2=(TestBean)tb2.getSomeMap().get("mykey4");
  assertEquals(0,inner1.getAge());
  assertEquals(null,inner1.getName());
  assertEquals(System.getProperty("os.name"),inner1.getTouchy());
  assertEquals(98,inner2.getAge());
  assertEquals("namemyvarmyvar${",inner2.getName());
  assertEquals(System.getProperty("os.name"),inner2.getTouchy());
}
