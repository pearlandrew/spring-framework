{
  List<Expression> expressions=new LinkedList<Expression>();
  int startIdx=0;
  String prefix=context.getExpressionPrefix();
  String suffix=context.getExpressionSuffix();
  while (startIdx < expressionString.length()) {
    int prefixIndex=findUnescapedOccurenceOf(prefix,expressionString,startIdx);
    if (prefixIndex >= startIdx) {
      if (prefixIndex > startIdx) {
        expressions.add(createLiteralExpression(context,expressionString.substring(startIdx,prefixIndex)));
      }
      int afterPrefixIndex=prefixIndex + prefix.length();
      int suffixIndex=skipToCorrectEndSuffix(prefix,suffix,expressionString,afterPrefixIndex);
      if (suffixIndex == -1) {
        throw new ParseException(expressionString,"No ending suffix '" + suffix + "' for expression starting at character "+ prefixIndex+ ": "+ expressionString.substring(prefixIndex));
      }
      if (suffixIndex == afterPrefixIndex) {
        throw new ParseException(expressionString,"No expression defined within delimiter '" + prefix + suffix+ "' at character "+ prefixIndex);
      }
 else {
        String expr=expressionString.substring(prefixIndex + prefix.length(),suffixIndex);
        expressions.add(doParseExpression(unescape(context,expr),context));
        startIdx=suffixIndex + suffix.length();
      }
    }
 else {
      expressions.add(createLiteralExpression(context,expressionString.substring(startIdx)));
      startIdx=expressionString.length();
    }
  }
  return expressions.toArray(new Expression[expressions.size()]);
}
