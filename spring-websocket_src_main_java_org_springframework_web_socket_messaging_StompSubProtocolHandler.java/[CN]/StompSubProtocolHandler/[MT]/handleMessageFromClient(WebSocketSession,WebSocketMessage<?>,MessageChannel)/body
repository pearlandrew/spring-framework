{
  Message<?> message;
  try {
    Assert.isInstanceOf(TextMessage.class,webSocketMessage);
    String payload=((TextMessage)webSocketMessage).getPayload();
    ByteBuffer byteBuffer=ByteBuffer.wrap(payload.getBytes(UTF8_CHARSET));
    message=this.stompDecoder.decode(byteBuffer);
  }
 catch (  Throwable ex) {
    logger.error("Failed to parse STOMP frame, WebSocket message payload",ex);
    sendErrorMessage(session,ex);
    return;
  }
  try {
    StompHeaderAccessor headers=StompHeaderAccessor.wrap(message);
    if (logger.isTraceEnabled()) {
      if (SimpMessageType.HEARTBEAT.equals(headers.getMessageType())) {
        logger.trace("Received heartbeat from client session=" + session.getId());
      }
 else {
        logger.trace("Received message from client session=" + session.getId());
      }
    }
    headers.setSessionId(session.getId());
    headers.setUser(session.getPrincipal());
    message=MessageBuilder.withPayload(message.getPayload()).setHeaders(headers).build();
    outputChannel.send(message);
  }
 catch (  Throwable ex) {
    logger.error("Terminating STOMP session due to failure to send message",ex);
    sendErrorMessage(session,ex);
  }
}
