{
  List<Message<byte[]>> messages;
  try {
    Assert.isInstanceOf(TextMessage.class,webSocketMessage);
    TextMessage textMessage=(TextMessage)webSocketMessage;
    ByteBuffer byteBuffer=ByteBuffer.wrap(textMessage.asBytes());
    BufferingStompDecoder decoder=this.decoders.get(session.getId());
    if (decoder == null) {
      throw new IllegalStateException("No decoder for session id '" + session.getId() + "'");
    }
    messages=decoder.decode(byteBuffer);
    if (messages.isEmpty()) {
      if (logger.isTraceEnabled()) {
        logger.trace("Incomplete STOMP frame content received in session " + session + ", bufferSize="+ decoder.getBufferSize()+ ", bufferSizeLimit="+ decoder.getBufferSizeLimit()+ ".");
      }
      return;
    }
  }
 catch (  Throwable ex) {
    if (logger.isErrorEnabled()) {
      logger.error("Failed to parse " + webSocketMessage + " in session "+ session.getId()+ ". Sending STOMP ERROR to client.",ex);
    }
    sendErrorMessage(session,ex);
    return;
  }
  for (  Message<byte[]> message : messages) {
    try {
      StompHeaderAccessor headerAccessor=MessageHeaderAccessor.getAccessor(message,StompHeaderAccessor.class);
      if (logger.isTraceEnabled()) {
        logger.trace("From client: " + headerAccessor.getShortLogMessage(message.getPayload()));
      }
      headerAccessor.setSessionId(session.getId());
      headerAccessor.setSessionAttributes(session.getAttributes());
      headerAccessor.setUser(session.getPrincipal());
      headerAccessor.setImmutable();
      if (this.eventPublisher != null) {
        if (StompCommand.CONNECT.equals(headerAccessor.getCommand())) {
          this.stats.incrementConnectCount();
          publishEvent(new SessionConnectEvent(this,message));
        }
 else         if (StompCommand.DISCONNECT.equals(headerAccessor.getCommand())) {
          this.stats.incrementDisconnectCount();
        }
 else         if (StompCommand.SUBSCRIBE.equals(headerAccessor.getCommand())) {
          publishEvent(new SessionSubscribeEvent(this,message));
        }
 else         if (StompCommand.UNSUBSCRIBE.equals(headerAccessor.getCommand())) {
          publishEvent(new SessionUnsubscribeEvent(this,message));
        }
      }
      try {
        SimpAttributesContextHolder.setAttributesFromMessage(message);
        outputChannel.send(message);
      }
  finally {
        SimpAttributesContextHolder.resetAttributes();
      }
    }
 catch (    Throwable ex) {
      logger.error("Failed to send STOMP message from client to application MessageChannel" + " in session " + session.getId() + ". Sending STOMP ERROR to client.",ex);
      sendErrorMessage(session,ex);
    }
  }
}
