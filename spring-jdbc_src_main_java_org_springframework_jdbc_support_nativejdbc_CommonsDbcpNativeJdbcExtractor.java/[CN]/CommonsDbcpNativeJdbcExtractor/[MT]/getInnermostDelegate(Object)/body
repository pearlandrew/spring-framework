{
  if (obj == null) {
    return null;
  }
  try {
    Class classToAnalyze=obj.getClass();
    while (!Modifier.isPublic(classToAnalyze.getModifiers())) {
      classToAnalyze=classToAnalyze.getSuperclass();
      if (classToAnalyze == null) {
        return obj;
      }
    }
    Method getInnermostDelegate=classToAnalyze.getMethod(GET_INNERMOST_DELEGATE_METHOD_NAME,(Class[])null);
    Object delegate=ReflectionUtils.invokeJdbcMethod(getInnermostDelegate,obj);
    return (delegate != null ? delegate : obj);
  }
 catch (  NoSuchMethodException ex) {
    return obj;
  }
catch (  SecurityException ex) {
    throw new IllegalStateException("Commons DBCP getInnermostDelegate method is not accessible: " + ex);
  }
}
