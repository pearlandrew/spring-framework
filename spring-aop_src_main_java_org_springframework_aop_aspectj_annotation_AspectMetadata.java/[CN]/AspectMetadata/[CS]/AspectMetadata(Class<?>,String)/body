{
  this.aspectName=aspectName;
  Class<?> currClass=aspectClass;
  AjType<?> ajType=null;
  while (currClass != Object.class) {
    AjType<?> ajTypeToCheck=AjTypeSystem.getAjType(currClass);
    if (ajTypeToCheck.isAspect()) {
      ajType=ajTypeToCheck;
      break;
    }
    currClass=currClass.getSuperclass();
  }
  if (ajType == null) {
    throw new IllegalArgumentException("Class '" + aspectClass.getName() + "' is not an @AspectJ aspect");
  }
  if (ajType.getDeclarePrecedence().length > 0) {
    throw new IllegalArgumentException("DeclarePrecendence not presently supported in Spring AOP");
  }
  this.aspectClass=ajType.getJavaClass();
  this.ajType=ajType;
switch (this.ajType.getPerClause().getKind()) {
case SINGLETON:
    this.perClausePointcut=Pointcut.TRUE;
  return;
case PERTARGET:
case PERTHIS:
AspectJExpressionPointcut ajexp=new AspectJExpressionPointcut();
ajexp.setLocation("@Aspect annotation on " + aspectClass.getName());
ajexp.setExpression(findPerClause(aspectClass));
this.perClausePointcut=ajexp;
return;
case PERTYPEWITHIN:
this.perClausePointcut=new ComposablePointcut(new TypePatternClassFilter(findPerClause(aspectClass)));
return;
default :
throw new AopConfigException("PerClause " + ajType.getPerClause().getKind() + " not supported by Spring AOP for "+ aspectClass);
}
}
