{
  SpelNodeImpl leftOp=getLeftOperand();
  SpelNodeImpl rightOp=getRightOperand();
  Object leftOperand=leftOp.getValueInternal(state).getValue();
  Object rightOperand=rightOp.getValueInternal(state).getValue();
  if (leftOperand instanceof Number && rightOperand instanceof Number) {
    Number leftNumber=(Number)leftOperand;
    Number rightNumber=(Number)rightOperand;
    if (leftNumber instanceof BigDecimal) {
      BigDecimal leftBigDecimal=NumberUtils.convertNumberToTargetClass(leftNumber,BigDecimal.class);
      return new TypedValue(leftBigDecimal.pow(rightNumber.intValue()));
    }
    if (leftNumber instanceof Double || rightNumber instanceof Double) {
      return new TypedValue(Math.pow(leftNumber.doubleValue(),rightNumber.doubleValue()));
    }
    if (leftNumber instanceof Float || rightNumber instanceof Float) {
      return new TypedValue(Math.pow(leftNumber.floatValue(),rightNumber.floatValue()));
    }
    if (leftNumber instanceof Long || rightNumber instanceof Long) {
      double d=Math.pow(leftNumber.longValue(),rightNumber.longValue());
      return new TypedValue((long)d);
    }
    double d=Math.pow(leftNumber.longValue(),rightNumber.longValue());
    if (d > Integer.MAX_VALUE) {
      return new TypedValue((long)d);
    }
 else {
      return new TypedValue((int)d);
    }
  }
  return state.operate(Operation.POWER,leftOperand,rightOperand);
}
