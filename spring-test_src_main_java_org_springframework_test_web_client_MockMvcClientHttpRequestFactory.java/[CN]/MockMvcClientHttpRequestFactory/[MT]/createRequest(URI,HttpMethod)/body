{
  return new MockClientHttpRequest(httpMethod,uri){
    @Override public ClientHttpResponse executeInternal() throws IOException {
      try {
        MockHttpServletRequestBuilder requestBuilder=request(httpMethod,uri.toString());
        requestBuilder.content(getBodyAsBytes());
        requestBuilder.headers(getHeaders());
        MvcResult mvcResult=MockMvcClientHttpRequestFactory.this.mockMvc.perform(requestBuilder).andReturn();
        MockHttpServletResponse servletResponse=mvcResult.getResponse();
        HttpStatus status=HttpStatus.valueOf(servletResponse.getStatus());
        byte[] body=servletResponse.getContentAsByteArray();
        HttpHeaders headers=getResponseHeaders(servletResponse);
        MockClientHttpResponse clientResponse=new MockClientHttpResponse(body,status);
        clientResponse.getHeaders().putAll(headers);
        return clientResponse;
      }
 catch (      Exception ex) {
        byte[] body=ex.toString().getBytes(StandardCharsets.UTF_8);
        return new MockClientHttpResponse(body,HttpStatus.INTERNAL_SERVER_ERROR);
      }
    }
  }
;
}
