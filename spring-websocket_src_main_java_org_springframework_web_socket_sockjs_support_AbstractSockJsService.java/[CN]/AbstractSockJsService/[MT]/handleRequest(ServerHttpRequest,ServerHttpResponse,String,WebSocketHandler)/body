{
  if (sockJsPath == null) {
    if (logger.isWarnEnabled()) {
      logger.warn("Expected SockJS path. Failing request: " + request.getURI());
    }
    response.setStatusCode(HttpStatus.NOT_FOUND);
    return;
  }
  try {
    request.getHeaders();
  }
 catch (  InvalidMediaTypeException ex) {
  }
  String requestInfo=logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : "";
  try {
    if (sockJsPath.equals("") || sockJsPath.equals("/")) {
      logger.debug(requestInfo);
      response.getHeaders().setContentType(new MediaType("text","plain",UTF8_CHARSET));
      response.getBody().write("Welcome to SockJS!\n".getBytes(UTF8_CHARSET));
    }
 else     if (sockJsPath.equals("/info")) {
      logger.debug(requestInfo);
      this.infoHandler.handle(request,response);
    }
 else     if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {
      if (!this.allowedOrigins.isEmpty() && !this.allowedOrigins.contains("*")) {
        if (logger.isDebugEnabled()) {
          logger.debug("Iframe support is disabled when an origin check is required, ignoring " + requestInfo);
        }
        response.setStatusCode(HttpStatus.NOT_FOUND);
        return;
      }
      if (this.allowedOrigins.isEmpty()) {
        response.getHeaders().add(XFRAME_OPTIONS_HEADER,"SAMEORIGIN");
      }
      logger.debug(requestInfo);
      this.iframeHandler.handle(request,response);
    }
 else     if (sockJsPath.equals("/websocket")) {
      if (isWebSocketEnabled()) {
        logger.debug(requestInfo);
        handleRawWebSocketRequest(request,response,wsHandler);
      }
 else       if (logger.isDebugEnabled()) {
        logger.debug("WebSocket disabled, ignoring " + requestInfo);
      }
    }
 else {
      String[] pathSegments=StringUtils.tokenizeToStringArray(sockJsPath.substring(1),"/");
      if (pathSegments.length != 3) {
        if (logger.isWarnEnabled()) {
          logger.warn("Ignoring invalid transport request " + requestInfo);
        }
        response.setStatusCode(HttpStatus.NOT_FOUND);
        return;
      }
      String serverId=pathSegments[0];
      String sessionId=pathSegments[1];
      String transport=pathSegments[2];
      if (!isWebSocketEnabled() && transport.equals("websocket")) {
        if (logger.isDebugEnabled()) {
          logger.debug("WebSocket transport is disabled, ignoring " + requestInfo);
        }
        response.setStatusCode(HttpStatus.NOT_FOUND);
        return;
      }
 else       if (!validateRequest(serverId,sessionId,transport)) {
        if (logger.isWarnEnabled()) {
          logger.warn("Ignoring transport request " + requestInfo);
        }
        response.setStatusCode(HttpStatus.NOT_FOUND);
        return;
      }
      handleTransportRequest(request,response,wsHandler,sessionId,transport);
    }
    response.close();
  }
 catch (  IOException ex) {
    throw new SockJsException("Failed to write to the response",null,ex);
  }
}
