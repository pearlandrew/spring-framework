{
  try {
    Assert.isTrue(method.getParameterCount() == 0,"Only no-arg methods may be annotated with @Scheduled");
    Method invocableMethod=AopUtils.selectInvocableMethod(method,bean.getClass());
    Runnable runnable=new ScheduledMethodRunnable(bean,invocableMethod);
    boolean processedSchedule=false;
    String errorMessage="Exactly one of the 'cron', 'fixedDelay(String)', or 'fixedRate(String)' attributes is required";
    Set<ScheduledTask> tasks=this.scheduledTasks.get(bean);
    if (tasks == null) {
      tasks=new LinkedHashSet<>(4);
      this.scheduledTasks.put(bean,tasks);
    }
    long initialDelay=scheduled.initialDelay();
    String initialDelayString=scheduled.initialDelayString();
    if (StringUtils.hasText(initialDelayString)) {
      Assert.isTrue(initialDelay < 0,"Specify 'initialDelay' or 'initialDelayString', not both");
      if (this.embeddedValueResolver != null) {
        initialDelayString=this.embeddedValueResolver.resolveStringValue(initialDelayString);
      }
      try {
        initialDelay=Long.parseLong(initialDelayString);
      }
 catch (      NumberFormatException ex) {
        throw new IllegalArgumentException("Invalid initialDelayString value \"" + initialDelayString + "\" - cannot parse into integer");
      }
    }
    String cron=scheduled.cron();
    if (StringUtils.hasText(cron)) {
      Assert.isTrue(initialDelay == -1,"'initialDelay' not supported for cron triggers");
      processedSchedule=true;
      String zone=scheduled.zone();
      if (this.embeddedValueResolver != null) {
        cron=this.embeddedValueResolver.resolveStringValue(cron);
        zone=this.embeddedValueResolver.resolveStringValue(zone);
      }
      TimeZone timeZone;
      if (StringUtils.hasText(zone)) {
        timeZone=StringUtils.parseTimeZoneString(zone);
      }
 else {
        timeZone=TimeZone.getDefault();
      }
      tasks.add(this.registrar.scheduleCronTask(new CronTask(runnable,new CronTrigger(cron,timeZone))));
    }
    if (initialDelay < 0) {
      initialDelay=0;
    }
    long fixedDelay=scheduled.fixedDelay();
    if (fixedDelay >= 0) {
      Assert.isTrue(!processedSchedule,errorMessage);
      processedSchedule=true;
      tasks.add(this.registrar.scheduleFixedDelayTask(new IntervalTask(runnable,fixedDelay,initialDelay)));
    }
    String fixedDelayString=scheduled.fixedDelayString();
    if (StringUtils.hasText(fixedDelayString)) {
      Assert.isTrue(!processedSchedule,errorMessage);
      processedSchedule=true;
      if (this.embeddedValueResolver != null) {
        fixedDelayString=this.embeddedValueResolver.resolveStringValue(fixedDelayString);
      }
      try {
        fixedDelay=Long.parseLong(fixedDelayString);
      }
 catch (      NumberFormatException ex) {
        throw new IllegalArgumentException("Invalid fixedDelayString value \"" + fixedDelayString + "\" - cannot parse into integer");
      }
      tasks.add(this.registrar.scheduleFixedDelayTask(new IntervalTask(runnable,fixedDelay,initialDelay)));
    }
    long fixedRate=scheduled.fixedRate();
    if (fixedRate >= 0) {
      Assert.isTrue(!processedSchedule,errorMessage);
      processedSchedule=true;
      tasks.add(this.registrar.scheduleFixedRateTask(new IntervalTask(runnable,fixedRate,initialDelay)));
    }
    String fixedRateString=scheduled.fixedRateString();
    if (StringUtils.hasText(fixedRateString)) {
      Assert.isTrue(!processedSchedule,errorMessage);
      processedSchedule=true;
      if (this.embeddedValueResolver != null) {
        fixedRateString=this.embeddedValueResolver.resolveStringValue(fixedRateString);
      }
      try {
        fixedRate=Long.parseLong(fixedRateString);
      }
 catch (      NumberFormatException ex) {
        throw new IllegalArgumentException("Invalid fixedRateString value \"" + fixedRateString + "\" - cannot parse into integer");
      }
      tasks.add(this.registrar.scheduleFixedRateTask(new IntervalTask(runnable,fixedRate,initialDelay)));
    }
    Assert.isTrue(processedSchedule,errorMessage);
  }
 catch (  IllegalArgumentException ex) {
    throw new IllegalStateException("Encountered invalid @Scheduled method '" + method.getName() + "': "+ ex.getMessage());
  }
}
