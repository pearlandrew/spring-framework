{
  if (this.scheduler != null) {
    this.registrar.setScheduler(this.scheduler);
  }
  if (this.beanFactory instanceof ListableBeanFactory) {
    Map<String,SchedulingConfigurer> configurers=((ListableBeanFactory)this.beanFactory).getBeansOfType(SchedulingConfigurer.class);
    for (    SchedulingConfigurer configurer : configurers.values()) {
      configurer.configureTasks(this.registrar);
    }
  }
  if (this.registrar.hasTasks() && this.registrar.getScheduler() == null) {
    Assert.state(this.beanFactory != null,"BeanFactory must be set to find scheduler by type");
    try {
      this.registrar.setTaskScheduler(this.beanFactory.getBean(TaskScheduler.class));
    }
 catch (    NoUniqueBeanDefinitionException ex) {
      try {
        this.registrar.setTaskScheduler(this.beanFactory.getBean(DEFAULT_TASK_SCHEDULER_BEAN_NAME,TaskScheduler.class));
      }
 catch (      NoSuchBeanDefinitionException ex2) {
        throw new IllegalStateException("More than one TaskScheduler bean exists within the context, and " + "none is named 'taskScheduler'. Mark one of them as primary or name it 'taskScheduler' " + "(possibly as an alias); or implement the SchedulingConfigurer interface and call "+ "ScheduledTaskRegistrar#setScheduler explicitly within the configureTasks() callback.",ex);
      }
    }
catch (    NoSuchBeanDefinitionException ex) {
      logger.debug("Could not find default TaskScheduler bean",ex);
      try {
        this.registrar.setScheduler(this.beanFactory.getBean(ScheduledExecutorService.class));
      }
 catch (      NoUniqueBeanDefinitionException ex2) {
        throw new IllegalStateException("More than one ScheduledExecutorService bean exists within " + "the context. Mark one of them as primary; or implement the SchedulingConfigurer " + "interface and call ScheduledTaskRegistrar#setScheduler explicitly within the "+ "configureTasks() callback.",ex);
      }
catch (      NoSuchBeanDefinitionException ex2) {
        logger.debug("Could not find default ScheduledExecutorService bean",ex);
      }
    }
  }
  this.registrar.afterPropertiesSet();
}
