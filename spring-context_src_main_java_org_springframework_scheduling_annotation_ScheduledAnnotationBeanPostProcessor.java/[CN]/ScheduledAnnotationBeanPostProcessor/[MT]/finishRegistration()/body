{
  if (this.scheduler != null) {
    this.registrar.setScheduler(this.scheduler);
  }
  if (this.beanFactory instanceof ListableBeanFactory) {
    Map<String,SchedulingConfigurer> configurers=((ListableBeanFactory)this.beanFactory).getBeansOfType(SchedulingConfigurer.class);
    for (    SchedulingConfigurer configurer : configurers.values()) {
      configurer.configureTasks(this.registrar);
    }
  }
  if (this.registrar.hasTasks() && this.registrar.getScheduler() == null) {
    Assert.state(this.beanFactory != null,"BeanFactory must be set to find scheduler by type");
    try {
      this.registrar.setTaskScheduler(this.beanFactory.getBean(TaskScheduler.class));
    }
 catch (    NoUniqueBeanDefinitionException ex) {
      try {
        this.registrar.setTaskScheduler(this.beanFactory.getBean(DEFAULT_TASK_SCHEDULER_BEAN_NAME,TaskScheduler.class));
      }
 catch (      NoSuchBeanDefinitionException ex2) {
        if (logger.isInfoEnabled()) {
          logger.info("More than one TaskScheduler bean exists within the context, and " + "none is named 'taskScheduler'. Mark one of them as primary or name it 'taskScheduler' " + "(possibly as an alias); or implement the SchedulingConfigurer interface and call "+ "ScheduledTaskRegistrar#setScheduler explicitly within the configureTasks() callback: "+ ex.getBeanNamesFound());
        }
      }
    }
catch (    NoSuchBeanDefinitionException ex) {
      logger.debug("Could not find default TaskScheduler bean",ex);
      try {
        this.registrar.setScheduler(this.beanFactory.getBean(ScheduledExecutorService.class));
      }
 catch (      NoUniqueBeanDefinitionException ex2) {
        try {
          this.registrar.setScheduler(this.beanFactory.getBean(DEFAULT_TASK_SCHEDULER_BEAN_NAME,ScheduledExecutorService.class));
        }
 catch (        NoSuchBeanDefinitionException ex3) {
          if (logger.isInfoEnabled()) {
            logger.info("More than one ScheduledExecutorService bean exists within the context, and " + "none is named 'taskScheduler'. Mark one of them as primary or name it 'taskScheduler' " + "(possibly as an alias); or implement the SchedulingConfigurer interface and call "+ "ScheduledTaskRegistrar#setScheduler explicitly within the configureTasks() callback: "+ ex2.getBeanNamesFound());
          }
        }
      }
catch (      NoSuchBeanDefinitionException ex2) {
        logger.debug("Could not find default ScheduledExecutorService bean",ex2);
        logger.info("No TaskScheduler/ScheduledExecutorService bean found for scheduled processing");
      }
    }
  }
  this.registrar.afterPropertiesSet();
}
