{
  Class<?> targetClass=AopUtils.getTargetClass(bean);
  if (!this.nonAnnotatedClasses.contains(targetClass)) {
    Map<Method,Set<Scheduled>> annotatedMethods=MethodIntrospector.selectMethods(targetClass,new MethodIntrospector.MetadataLookup<Set<Scheduled>>(){
      @Override public Set<Scheduled> inspect(      Method method){
        Set<Scheduled> scheduledMethods=AnnotatedElementUtils.getMergedRepeatableAnnotations(method,Scheduled.class,Schedules.class);
        return (!scheduledMethods.isEmpty() ? scheduledMethods : null);
      }
    }
);
    if (annotatedMethods.isEmpty()) {
      this.nonAnnotatedClasses.add(targetClass);
      if (logger.isTraceEnabled()) {
        logger.trace("No @Scheduled annotations found on bean class: " + bean.getClass());
      }
    }
 else {
      for (      Map.Entry<Method,Set<Scheduled>> entry : annotatedMethods.entrySet()) {
        Method method=entry.getKey();
        for (        Scheduled scheduled : entry.getValue()) {
          processScheduled(scheduled,method,bean);
        }
      }
      if (logger.isDebugEnabled()) {
        logger.debug(annotatedMethods.size() + " @Scheduled methods processed on bean '" + beanName+ "': "+ annotatedMethods);
      }
    }
  }
  return bean;
}
