{
  ResultSet tableColumns=null;
  String metaDataCatalogName=metaDataCatalogNameToUse(tmd.getCatalogName());
  String metaDataSchemaName=metaDataSchemaNameToUse(tmd.getSchemaName());
  String metaDataTableName=tableNameToUse(tmd.getTableName());
  if (logger.isDebugEnabled()) {
    logger.debug("Retrieving metadata for " + metaDataCatalogName + "/"+ metaDataSchemaName+ "/"+ metaDataTableName);
  }
  try {
    tableColumns=databaseMetaData.getColumns(metaDataCatalogName,metaDataSchemaName,metaDataTableName,null);
    while (tableColumns.next()) {
      String columnName=tableColumns.getString("COLUMN_NAME");
      int dataType=tableColumns.getInt("DATA_TYPE");
      if (dataType == Types.DECIMAL) {
        String typeName=tableColumns.getString("TYPE_NAME");
        int decimalDigits=tableColumns.getInt("DECIMAL_DIGITS");
        if ("NUMBER".equals(typeName) && decimalDigits == 0) {
          dataType=Types.NUMERIC;
          if (logger.isDebugEnabled()) {
            logger.debug("Overriding metadata: " + columnName + " now using NUMERIC instead of DECIMAL");
          }
        }
      }
      boolean nullable=tableColumns.getBoolean("NULLABLE");
      TableParameterMetaData meta=new TableParameterMetaData(columnName,dataType,nullable);
      this.insertParameterMetaData.add(meta);
      if (logger.isDebugEnabled()) {
        logger.debug("Retrieved metadata: " + meta.getParameterName() + " "+ meta.getSqlType()+ " "+ meta.isNullable());
      }
    }
  }
 catch (  SQLException ex) {
    logger.warn("Error while retrieving metadata for table columns: " + ex.getMessage());
  }
 finally {
    try {
      if (tableColumns != null)       tableColumns.close();
    }
 catch (    SQLException ex) {
      logger.warn("Problem closing ResultSet for table column metadata " + ex.getMessage());
    }
  }
}
