{
  TestBean target=new TestBean("myname",99);
  final HttpInvokerServiceExporter exporter=new HttpInvokerServiceExporter(){
    protected InputStream decorateInputStream(    HttpServletRequest request,    InputStream is) throws IOException {
      if ("gzip".equals(request.getHeader("Compression"))) {
        return new GZIPInputStream(is);
      }
 else {
        return is;
      }
    }
    protected OutputStream decorateOutputStream(    HttpServletRequest request,    HttpServletResponse response,    OutputStream os) throws IOException {
      if ("gzip".equals(request.getHeader("Compression"))) {
        return new GZIPOutputStream(os);
      }
 else {
        return os;
      }
    }
  }
;
  exporter.setServiceInterface(ITestBean.class);
  exporter.setService(target);
  exporter.afterPropertiesSet();
  HttpInvokerProxyFactoryBean pfb=new HttpInvokerProxyFactoryBean();
  pfb.setServiceInterface(ITestBean.class);
  pfb.setServiceUrl("http://myurl");
  pfb.setHttpInvokerRequestExecutor(new AbstractHttpInvokerRequestExecutor(){
    protected RemoteInvocationResult doExecuteRequest(    HttpInvokerClientConfiguration config,    ByteArrayOutputStream baos) throws IOException, ClassNotFoundException {
      assertEquals("http://myurl",config.getServiceUrl());
      MockHttpServletRequest request=new MockHttpServletRequest();
      request.addHeader("Compression","gzip");
      MockHttpServletResponse response=new MockHttpServletResponse();
      request.setContent(baos.toByteArray());
      try {
        exporter.handleRequest(request,response);
      }
 catch (      ServletException ex) {
        throw new IOException(ex.toString());
      }
      return readRemoteInvocationResult(new ByteArrayInputStream(response.getContentAsByteArray()),config.getCodebaseUrl());
    }
    protected OutputStream decorateOutputStream(    OutputStream os) throws IOException {
      return new GZIPOutputStream(os);
    }
    protected InputStream decorateInputStream(    InputStream is) throws IOException {
      return new GZIPInputStream(is);
    }
  }
);
  pfb.afterPropertiesSet();
  ITestBean proxy=(ITestBean)pfb.getObject();
  assertEquals("myname",proxy.getName());
  assertEquals(99,proxy.getAge());
  proxy.setAge(50);
  assertEquals(50,proxy.getAge());
  try {
    proxy.exceptional(new IllegalStateException());
    fail("Should have thrown IllegalStateException");
  }
 catch (  IllegalStateException ex) {
  }
  try {
    proxy.exceptional(new IllegalAccessException());
    fail("Should have thrown IllegalAccessException");
  }
 catch (  IllegalAccessException ex) {
  }
}
