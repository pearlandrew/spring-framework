{
  builder.setLazyInit(false);
  ManagedList<RuntimeBeanReference> cronTaskList=new ManagedList<RuntimeBeanReference>();
  ManagedList<RuntimeBeanReference> fixedDelayTaskList=new ManagedList<RuntimeBeanReference>();
  ManagedList<RuntimeBeanReference> fixedRateTaskList=new ManagedList<RuntimeBeanReference>();
  ManagedList<RuntimeBeanReference> triggerTaskList=new ManagedList<RuntimeBeanReference>();
  NodeList childNodes=element.getChildNodes();
  for (int i=0; i < childNodes.getLength(); i++) {
    Node child=childNodes.item(i);
    if (!isScheduledElement(child,parserContext)) {
      continue;
    }
    Element taskElement=(Element)child;
    String ref=taskElement.getAttribute("ref");
    String method=taskElement.getAttribute("method");
    if (!StringUtils.hasText(ref) || !StringUtils.hasText(method)) {
      parserContext.getReaderContext().error("Both 'ref' and 'method' are required",taskElement);
      continue;
    }
    String cronAttribute=taskElement.getAttribute("cron");
    String fixedDelayAttribute=taskElement.getAttribute("fixed-delay");
    String fixedRateAttribute=taskElement.getAttribute("fixed-rate");
    String triggerAttribute=taskElement.getAttribute("trigger");
    String initialDelayAttribute=taskElement.getAttribute("initial-delay");
    boolean hasCronAttribute=StringUtils.hasText(cronAttribute);
    boolean hasFixedDelayAttribute=StringUtils.hasText(fixedDelayAttribute);
    boolean hasFixedRateAttribute=StringUtils.hasText(fixedRateAttribute);
    boolean hasTriggerAttribute=StringUtils.hasText(triggerAttribute);
    boolean hasInitialDelayAttribute=StringUtils.hasText(initialDelayAttribute);
    if (!(hasCronAttribute || hasFixedDelayAttribute || hasFixedRateAttribute|| hasTriggerAttribute)) {
      parserContext.getReaderContext().error("one of the 'cron', 'fixed-delay', 'fixed-rate', or 'trigger' attributes is required",taskElement);
      continue;
    }
    if (hasInitialDelayAttribute && (hasCronAttribute || hasTriggerAttribute)) {
      parserContext.getReaderContext().error("the 'initial-delay' attribute may not be used with cron and trigger tasks",taskElement);
      continue;
    }
    String runnableName=runnableReference(ref,method,taskElement,parserContext).getBeanName();
    if (hasFixedDelayAttribute) {
      fixedDelayTaskList.add(intervalTaskReference(runnableName,initialDelayAttribute,fixedDelayAttribute,taskElement,parserContext));
    }
    if (hasFixedRateAttribute) {
      fixedRateTaskList.add(intervalTaskReference(runnableName,initialDelayAttribute,fixedRateAttribute,taskElement,parserContext));
    }
    if (hasCronAttribute) {
      cronTaskList.add(cronTaskReference(runnableName,cronAttribute,taskElement,parserContext));
    }
    if (hasTriggerAttribute) {
      String triggerName=new RuntimeBeanReference(triggerAttribute).getBeanName();
      triggerTaskList.add(triggerTaskReference(runnableName,triggerName,taskElement,parserContext));
    }
  }
  String schedulerRef=element.getAttribute("scheduler");
  if (StringUtils.hasText(schedulerRef)) {
    builder.addPropertyReference("taskScheduler",schedulerRef);
  }
  builder.addPropertyValue("cronTasksList",cronTaskList);
  builder.addPropertyValue("fixedDelayTasksList",fixedDelayTaskList);
  builder.addPropertyValue("fixedRateTasksList",fixedRateTaskList);
  builder.addPropertyValue("triggerTasksList",triggerTaskList);
}
