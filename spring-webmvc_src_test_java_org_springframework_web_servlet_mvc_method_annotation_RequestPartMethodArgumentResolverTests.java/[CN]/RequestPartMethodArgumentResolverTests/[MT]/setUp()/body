{
  Method method=getClass().getMethod("handle",SimpleBean.class,SimpleBean.class,SimpleBean.class,MultipartFile.class,List.class,Integer.TYPE,MultipartFile.class,Part.class,List.class,MultipartFile.class);
  paramRequestPart=new MethodParameter(method,0);
  paramRequestPart.initParameterNameDiscovery(new LocalVariableTableParameterNameDiscoverer());
  paramNamedRequestPart=new MethodParameter(method,1);
  paramValidRequestPart=new MethodParameter(method,2);
  paramMultipartFile=new MethodParameter(method,3);
  paramMultipartFileList=new MethodParameter(method,4);
  paramInt=new MethodParameter(method,5);
  paramMultipartFileNotAnnot=new MethodParameter(method,6);
  paramMultipartFileNotAnnot.initParameterNameDiscovery(new LocalVariableTableParameterNameDiscoverer());
  paramPart=new MethodParameter(method,7);
  paramPart.initParameterNameDiscovery(new LocalVariableTableParameterNameDiscoverer());
  paramPartList=new MethodParameter(method,8);
  paramRequestParamAnnot=new MethodParameter(method,9);
  messageConverter=mock(HttpMessageConverter.class);
  given(messageConverter.getSupportedMediaTypes()).willReturn(Collections.singletonList(MediaType.TEXT_PLAIN));
  resolver=new RequestPartMethodArgumentResolver(Collections.<HttpMessageConverter<?>>singletonList(messageConverter));
  reset(messageConverter);
  multipartFile1=new MockMultipartFile("requestPart","","text/plain",(byte[])null);
  multipartFile2=new MockMultipartFile("requestPart","","text/plain",(byte[])null);
  multipartRequest=new MockMultipartHttpServletRequest();
  multipartRequest.addFile(multipartFile1);
  multipartRequest.addFile(multipartFile2);
  servletResponse=new MockHttpServletResponse();
  webRequest=new ServletWebRequest(multipartRequest,servletResponse);
}
