{
  StompHeaderAccessor headers=StompHeaderAccessor.wrap(message);
  String sessionId=headers.getSessionId();
  String destination=headers.getDestination();
  StompCommand command=headers.getStompCommand();
  SimpMessageType messageType=headers.getMessageType();
  if (!this.running) {
    if (logger.isTraceEnabled()) {
      logger.trace("STOMP broker relay not running. Ignoring message id=" + headers.getId());
    }
    return;
  }
  if (SimpMessageType.MESSAGE.equals(messageType)) {
    sessionId=(sessionId == null) ? STOMP_RELAY_SYSTEM_SESSION_ID : sessionId;
    headers.setSessionId(sessionId);
    command=(command == null) ? StompCommand.SEND : command;
    headers.setStompCommandIfNotSet(command);
    message=MessageBuilder.fromMessage(message).copyHeaders(headers.toMap()).build();
  }
  if (headers.getStompCommand() == null) {
    logger.error("Ignoring message, no STOMP command: " + message);
    return;
  }
  if (sessionId == null) {
    logger.error("Ignoring message, no sessionId: " + message);
    return;
  }
  if (command.requiresDestination() && (destination == null)) {
    logger.error("Ignoring " + command + " message, no destination: "+ message);
    return;
  }
  try {
    if ((destination == null) || supportsDestination(destination)) {
      if (logger.isTraceEnabled()) {
        logger.trace("Processing message: " + message);
      }
      handleInternal(message,messageType,sessionId);
    }
  }
 catch (  Throwable t) {
    logger.error("Failed to handle message " + message,t);
  }
}
