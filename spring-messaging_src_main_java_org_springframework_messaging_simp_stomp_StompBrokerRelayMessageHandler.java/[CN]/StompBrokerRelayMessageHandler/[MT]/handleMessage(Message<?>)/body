{
  StompHeaderAccessor headers=StompHeaderAccessor.wrap(message);
  String sessionId=headers.getSessionId();
  String destination=headers.getDestination();
  StompCommand command=headers.getCommand();
  SimpMessageType messageType=headers.getMessageType();
  if (!this.running) {
    if (logger.isTraceEnabled()) {
      logger.trace("STOMP broker relay not running. Ignoring message id=" + headers.getId());
    }
    return;
  }
  if (SimpMessageType.MESSAGE.equals(messageType)) {
    sessionId=(sessionId == null) ? STOMP_RELAY_SYSTEM_SESSION_ID : sessionId;
    headers.setSessionId(sessionId);
    command=(command == null) ? StompCommand.SEND : command;
    headers.setCommandIfNotSet(command);
    message=MessageBuilder.withPayloadAndHeaders(message.getPayload(),headers).build();
  }
  if (headers.getCommand() == null) {
    logger.error("Ignoring message, no STOMP command: " + message);
    return;
  }
  if (sessionId == null) {
    logger.error("Ignoring message, no sessionId: " + message);
    return;
  }
  try {
    if (checkDestinationPrefix(command,destination)) {
      if (logger.isTraceEnabled()) {
        logger.trace("Processing message: " + message);
      }
      if (SimpMessageType.CONNECT.equals(messageType)) {
        headers.setHeartbeat(0,0);
        message=MessageBuilder.withPayloadAndHeaders(message.getPayload(),headers).build();
        RelaySession session=new RelaySession(sessionId);
        this.relaySessions.put(sessionId,session);
        session.open(message);
      }
 else       if (SimpMessageType.DISCONNECT.equals(messageType)) {
        RelaySession session=this.relaySessions.remove(sessionId);
        if (session == null) {
          if (logger.isTraceEnabled()) {
            logger.trace("Session already removed, sessionId=" + sessionId);
          }
          return;
        }
        session.forward(message);
      }
 else {
        RelaySession session=this.relaySessions.get(sessionId);
        if (session == null) {
          logger.warn("Session id=" + sessionId + " not found. Ignoring message: "+ message);
          return;
        }
        session.forward(message);
      }
    }
  }
 catch (  Throwable t) {
    logger.error("Failed to handle message " + message,t);
  }
}
