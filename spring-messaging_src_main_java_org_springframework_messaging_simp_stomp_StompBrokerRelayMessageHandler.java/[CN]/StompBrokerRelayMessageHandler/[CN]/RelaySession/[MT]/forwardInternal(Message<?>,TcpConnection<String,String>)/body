{
  if (logger.isTraceEnabled()) {
    logger.trace("Forwarding message to STOMP broker, message id=" + message.getHeaders().getId());
  }
  byte[] bytes=stompMessageConverter.fromMessage(message);
  final Deferred<Boolean,Promise<Boolean>> deferred=new DeferredPromiseSpec<Boolean>().get();
  connection.send(new String(bytes,Charset.forName("UTF-8")),new Consumer<Boolean>(){
    @Override public void accept(    Boolean success){
      if (!success && StompHeaderAccessor.wrap(message).getCommand() != StompCommand.DISCONNECT) {
        deferred.accept(false);
      }
 else {
        deferred.accept(true);
      }
    }
  }
);
  Boolean success=null;
  try {
    success=deferred.compose().await();
    if (success == null) {
      sendError(sessionId,"Timed out waiting for message to be forwarded to the broker");
    }
 else     if (!success) {
      sendError(sessionId,"Failed to forward message to the broker");
    }
  }
 catch (  InterruptedException ie) {
    Thread.currentThread().interrupt();
    sendError(sessionId,"Interrupted while forwarding message to the broker");
  }
  if (success == null) {
    success=false;
  }
  return success;
}
