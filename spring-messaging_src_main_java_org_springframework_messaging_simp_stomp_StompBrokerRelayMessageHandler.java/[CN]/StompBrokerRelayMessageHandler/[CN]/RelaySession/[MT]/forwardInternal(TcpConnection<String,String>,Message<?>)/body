{
  if (logger.isTraceEnabled()) {
    logger.trace("Forwarding to STOMP broker, message: " + message);
  }
  byte[] bytes=stompMessageConverter.fromMessage(message);
  String payload=new String(bytes,Charset.forName("UTF-8"));
  final Deferred<Boolean,Promise<Boolean>> deferred=new DeferredPromiseSpec<Boolean>().get();
  tcpConnection.send(payload,new Consumer<Boolean>(){
    @Override public void accept(    Boolean success){
      deferred.accept(success);
    }
  }
);
  Boolean success=null;
  try {
    success=deferred.compose().await();
    if (success == null) {
      handleTcpClientFailure("Timed out waiting for message to be forwarded to the broker",null);
    }
 else     if (!success) {
      if (StompHeaderAccessor.wrap(message).getCommand() != StompCommand.DISCONNECT) {
        handleTcpClientFailure("Failed to forward message to the broker",null);
      }
    }
  }
 catch (  InterruptedException ex) {
    Thread.currentThread().interrupt();
    handleTcpClientFailure("Interrupted while forwarding message to the broker",ex);
  }
  return (success != null) ? success : false;
}
