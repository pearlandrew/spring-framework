{
  if (!this.isStompConnected) {
    if (this.isRemoteClientSession) {
      throw new IllegalStateException("Unexpected client message " + message + (this.tcpConnection != null ? "before STOMP CONNECTED frame" : "after TCP connection closed"));
    }
 else {
      throw new IllegalStateException("Cannot forward messages on system connection " + (this.tcpConnection != null ? "before STOMP CONNECTED frame" : "while inactive") + ". Try listening for BrokerAvailabilityEvent ApplicationContext events.");
    }
  }
  if (logger.isDebugEnabled()) {
    StompHeaderAccessor headers=StompHeaderAccessor.wrap(message);
    if (SimpMessageType.HEARTBEAT.equals(headers.getMessageType())) {
      logger.trace("Forwarding heartbeat to broker");
    }
 else {
      logger.debug("Forwarding message to broker");
    }
  }
  @SuppressWarnings("unchecked") ListenableFuture<Void> future=this.tcpConnection.send((Message<byte[]>)message);
  future.addCallback(new ListenableFutureCallback<Void>(){
    @Override public void onSuccess(    Void result){
      StompCommand command=StompHeaderAccessor.wrap(message).getCommand();
      if (command == StompCommand.DISCONNECT) {
        clearConnection();
      }
    }
    @Override public void onFailure(    Throwable t){
      handleTcpConnectionFailure("Failed to send message " + message,t);
    }
  }
);
  return future;
}
