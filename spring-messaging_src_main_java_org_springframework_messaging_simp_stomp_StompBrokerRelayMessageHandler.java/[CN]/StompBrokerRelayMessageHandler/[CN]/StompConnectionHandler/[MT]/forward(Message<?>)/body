{
  if (!this.isStompConnected) {
    if (logger.isWarnEnabled()) {
      logger.warn("Connection to broker inactive or not ready, ignoring message=" + message);
    }
    return new ListenableFutureTask<Boolean>(new Callable<Boolean>(){
      @Override public Boolean call() throws Exception {
        return Boolean.FALSE;
      }
    }
);
  }
  if (logger.isTraceEnabled()) {
    logger.trace("Forwarding message to broker: " + message);
  }
  @SuppressWarnings("unchecked") ListenableFuture<Boolean> future=this.tcpConnection.send((Message<byte[]>)message);
  future.addCallback(new ListenableFutureCallback<Boolean>(){
    @Override public void onSuccess(    Boolean result){
      StompCommand command=StompHeaderAccessor.wrap(message).getCommand();
      if (command == StompCommand.DISCONNECT) {
        resetTcpConnection();
      }
    }
    @Override public void onFailure(    Throwable t){
      handleTcpConnectionFailure("Failed to send message " + message,t);
    }
  }
);
  return future;
}
