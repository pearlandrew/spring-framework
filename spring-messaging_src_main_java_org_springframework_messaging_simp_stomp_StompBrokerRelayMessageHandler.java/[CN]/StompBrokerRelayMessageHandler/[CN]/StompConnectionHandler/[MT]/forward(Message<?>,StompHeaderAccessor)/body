{
  TcpConnection<byte[]> conn=this.tcpConnection;
  if (!this.isStompConnected) {
    if (this.isRemoteClientSession) {
      if (logger.isDebugEnabled()) {
        logger.debug("TCP connection closed already, ignoring " + accessor.getShortLogMessage((byte[])message.getPayload()));
      }
      return EMPTY_TASK;
    }
 else {
      throw new IllegalStateException("Cannot forward messages " + (conn != null ? "before STOMP CONNECTED. " : "while inactive. ") + "Consider subscribing to receive BrokerAvailabilityEvent's from "+ "an ApplicationListener Spring bean. Dropped "+ accessor.getShortLogMessage((byte[])message.getPayload()));
    }
  }
  final Message<?> messageToSend=(accessor.isMutable() && accessor.isModified()) ? MessageBuilder.createMessage(message.getPayload(),accessor.getMessageHeaders()) : message;
  StompCommand command=accessor.getCommand();
  if (logger.isDebugEnabled() && (StompCommand.SEND.equals(command) || StompCommand.SUBSCRIBE.equals(command) || StompCommand.UNSUBSCRIBE.equals(command)|| StompCommand.DISCONNECT.equals(command))) {
    logger.debug("Forwarding " + accessor.getShortLogMessage(message.getPayload()));
  }
 else   if (logger.isTraceEnabled()) {
    logger.trace("Forwarding " + accessor.getDetailedLogMessage(message.getPayload()));
  }
  ListenableFuture<Void> future=conn.send((Message<byte[]>)messageToSend);
  future.addCallback(new ListenableFutureCallback<Void>(){
    @Override public void onSuccess(    Void result){
      if (accessor.getCommand() == StompCommand.DISCONNECT) {
        afterDisconnectSent(accessor);
      }
    }
    @Override public void onFailure(    Throwable ex){
      if (tcpConnection != null) {
        handleTcpConnectionFailure("failed to forward " + accessor.getShortLogMessage(message.getPayload()),ex);
      }
 else       if (logger.isErrorEnabled()) {
        logger.error("Failed to forward " + accessor.getShortLogMessage(message.getPayload()));
      }
    }
  }
);
  return future;
}
