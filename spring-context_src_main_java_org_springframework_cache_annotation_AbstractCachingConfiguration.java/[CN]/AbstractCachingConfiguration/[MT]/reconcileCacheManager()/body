{
  if (!CollectionUtils.isEmpty(cachingConfigurers)) {
    int nConfigurers=cachingConfigurers.size();
    if (nConfigurers > 1) {
      throw new IllegalStateException(nConfigurers + " implementations of " + "CachingConfigurer were found when only 1 was expected. "+ "Refactor the configuration such that CachingConfigurer is "+ "implemented only once or not at all.");
    }
    C cachingConfigurer=cachingConfigurers.iterator().next();
    useCachingConfigurer(cachingConfigurer);
  }
  if (this.cacheManager == null && !CollectionUtils.isEmpty(cacheManagerBeans)) {
    int nManagers=cacheManagerBeans.size();
    if (nManagers > 1) {
      throw new IllegalStateException(nManagers + " beans of type CacheManager " + "were found when only 1 was expected. Remove all but one of the "+ "CacheManager bean definitions, or implement CachingConfigurer "+ "to make explicit which CacheManager should be used for "+ "annotation-driven cache management.");
    }
    this.cacheManager=cacheManagerBeans.iterator().next();
  }
  if (this.cacheManager == null) {
    throw new IllegalStateException("No bean of type CacheManager could be found. " + "Register a CacheManager bean or remove the @EnableCaching annotation " + "from your configuration.");
  }
}
