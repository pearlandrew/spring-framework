{
  GenericApplicationContext gac=new GenericApplicationContext();
  gac.registerBeanDefinition("translator",new RootBeanDefinition(PersistenceExceptionTranslationPostProcessor.class));
  gac.registerBeanDefinition("notProxied",new RootBeanDefinition(RepositoryInterfaceImpl.class));
  gac.registerBeanDefinition("proxied",new RootBeanDefinition(StereotypedRepositoryInterfaceImpl.class));
  gac.registerBeanDefinition("classProxied",new RootBeanDefinition(RepositoryWithoutInterface.class));
  gac.registerBeanDefinition("classProxiedAndAdvised",new RootBeanDefinition(RepositoryWithoutInterfaceAndOtherwiseAdvised.class));
  gac.registerBeanDefinition("chainedTranslator",new RootBeanDefinition(ChainedPersistenceExceptionTranslator.class));
  gac.registerBeanDefinition("proxyCreator",BeanDefinitionBuilder.rootBeanDefinition(AnnotationAwareAspectJAutoProxyCreator.class).addPropertyValue("order",50).getBeanDefinition());
  gac.registerBeanDefinition("logger",new RootBeanDefinition(LogAllAspect.class));
  gac.refresh();
  RepositoryInterface shouldNotBeProxied=(RepositoryInterface)gac.getBean("notProxied");
  assertFalse(AopUtils.isAopProxy(shouldNotBeProxied));
  RepositoryInterface shouldBeProxied=(RepositoryInterface)gac.getBean("proxied");
  assertTrue(AopUtils.isAopProxy(shouldBeProxied));
  RepositoryWithoutInterface rwi=(RepositoryWithoutInterface)gac.getBean("classProxied");
  assertTrue(AopUtils.isAopProxy(rwi));
  checkWillTranslateExceptions(rwi);
  Additional rwi2=(Additional)gac.getBean("classProxiedAndAdvised");
  assertTrue(AopUtils.isAopProxy(rwi2));
  rwi2.additionalMethod();
  checkWillTranslateExceptions(rwi2);
}
