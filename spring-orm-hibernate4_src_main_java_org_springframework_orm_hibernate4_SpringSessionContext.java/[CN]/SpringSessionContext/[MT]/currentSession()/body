{
  Object value=TransactionSynchronizationManager.getResource(this.sessionFactory);
  if (value instanceof Session) {
    return (Session)value;
  }
 else   if (value instanceof SessionHolder) {
    SessionHolder sessionHolder=(SessionHolder)value;
    Session session=sessionHolder.getSession();
    if (TransactionSynchronizationManager.isSynchronizationActive() && !sessionHolder.isSynchronizedWithTransaction()) {
      TransactionSynchronizationManager.registerSynchronization(new SpringSessionSynchronization(sessionHolder,this.sessionFactory,false));
      sessionHolder.setSynchronizedWithTransaction(true);
      FlushMode flushMode=session.getFlushMode();
      if (flushMode.equals(FlushMode.MANUAL) && !TransactionSynchronizationManager.isCurrentTransactionReadOnly()) {
        session.setFlushMode(FlushMode.AUTO);
        sessionHolder.setPreviousFlushMode(flushMode);
      }
    }
    return session;
  }
  if (this.transactionManager != null) {
    try {
      if (this.transactionManager.getStatus() == Status.STATUS_ACTIVE) {
        Session session=this.jtaSessionContext.currentSession();
        if (TransactionSynchronizationManager.isSynchronizationActive()) {
          TransactionSynchronizationManager.registerSynchronization(new SpringFlushSynchronization(session));
        }
        return session;
      }
    }
 catch (    SystemException ex) {
      throw new HibernateException("JTA TransactionManager found but status check failed",ex);
    }
  }
  if (TransactionSynchronizationManager.isSynchronizationActive()) {
    Session session=this.sessionFactory.openSession();
    if (TransactionSynchronizationManager.isCurrentTransactionReadOnly()) {
      session.setFlushMode(FlushMode.MANUAL);
    }
    SessionHolder sessionHolder=new SessionHolder(session);
    TransactionSynchronizationManager.registerSynchronization(new SpringSessionSynchronization(sessionHolder,this.sessionFactory,true));
    TransactionSynchronizationManager.bindResource(this.sessionFactory,sessionHolder);
    sessionHolder.setSynchronizedWithTransaction(true);
    return session;
  }
 else {
    throw new HibernateException("Could not obtain transaction-synchronized Session for current thread");
  }
}
