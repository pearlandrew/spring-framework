{
  final List<TcpClient<Message<P>,Message<P>>> clients;
synchronized (this.tcpClients) {
    clients=new ArrayList<TcpClient<Message<P>,Message<P>>>(this.tcpClients);
  }
  Promise<Void> promise=Streams.from(clients).flatMap(new Function<TcpClient<Message<P>,Message<P>>,Promise<Void>>(){
    @Override public Promise<Void> apply(    final TcpClient<Message<P>,Message<P>> client){
      return client.shutdown().onComplete(new Consumer<Promise<Void>>(){
        @Override public void accept(        Promise<Void> voidPromise){
synchronized (tcpClients) {
            tcpClients.remove(client);
          }
        }
      }
);
    }
  }
).next();
  return new PassThroughPromiseToListenableFutureAdapter<Void>(promise);
}
