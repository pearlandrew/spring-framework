{
  final List<TcpClient<Message<P>,Message<P>>> clients;
synchronized (this.tcpClients) {
    clients=new ArrayList<TcpClient<Message<P>,Message<P>>>(this.tcpClients);
  }
  Promise<Boolean> promise=Streams.from(clients).flatMap(new Function<TcpClient<Message<P>,Message<P>>,Promise<Boolean>>(){
    @Override public Promise<Boolean> apply(    TcpClient<Message<P>,Message<P>> client){
      return client.close();
    }
  }
).reduce(new BiFunction<Boolean,Boolean,Boolean>(){
    @Override public Boolean apply(    Boolean prev,    Boolean next){
      return prev && next;
    }
  }
).next();
  return new PassThroughPromiseToListenableFutureAdapter<Boolean>(promise);
}
