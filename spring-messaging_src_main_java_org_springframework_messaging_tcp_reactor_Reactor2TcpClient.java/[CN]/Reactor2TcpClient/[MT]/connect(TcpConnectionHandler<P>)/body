{
  Assert.notNull(connectionHandler,"TcpConnectionHandler must not be null");
  final TcpClient<Message<P>,Message<P>> tcpClient;
  final Runnable cleanupTask;
synchronized (this.tcpClients) {
    if (this.stopping) {
      IllegalStateException ex=new IllegalStateException("Shutting down.");
      connectionHandler.afterConnectFailure(ex);
      return new PassThroughPromiseToListenableFutureAdapter<Void>(Promises.<Void>error(ex));
    }
    tcpClient=NetStreams.tcpClient(REACTOR_TCP_CLIENT_TYPE,this.tcpClientSpecFactory);
    this.tcpClients.add(tcpClient);
    cleanupTask=new Runnable(){
      @Override public void run(){
synchronized (tcpClients) {
          tcpClients.remove(tcpClient);
        }
      }
    }
;
  }
  Promise<Void> promise=tcpClient.start(new MessageChannelStreamHandler<P>(connectionHandler,cleanupTask));
  return new PassThroughPromiseToListenableFutureAdapter<Void>(promise.onError(new Consumer<Throwable>(){
    @Override public void accept(    Throwable ex){
      cleanupTask.run();
      connectionHandler.afterConnectFailure(ex);
    }
  }
));
}
