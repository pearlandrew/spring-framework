{
  String businessHoursCronExpression="0 0 9-17 * * MON-FRI";
  StaticApplicationContext context=new StaticApplicationContext();
  BeanDefinition processorDefinition=new RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class);
  BeanDefinition placeholderDefinition=new RootBeanDefinition(PropertyPlaceholderConfigurer.class);
  Properties properties=new Properties();
  properties.setProperty("schedules.businessHours",businessHoursCronExpression);
  placeholderDefinition.getPropertyValues().addPropertyValue("properties",properties);
  BeanDefinition targetDefinition=new RootBeanDefinition(ScheduledAnnotationBeanPostProcessorTests.PropertyPlaceholderTestBean.class);
  context.registerBeanDefinition("placeholder",placeholderDefinition);
  context.registerBeanDefinition("postProcessor",processorDefinition);
  context.registerBeanDefinition("target",targetDefinition);
  context.refresh();
  Object postProcessor=context.getBean("postProcessor");
  Object target=context.getBean("target");
  ScheduledTaskRegistrar registrar=(ScheduledTaskRegistrar)new DirectFieldAccessor(postProcessor).getPropertyValue("registrar");
  Map<Runnable,String> cronTasks=(Map<Runnable,String>)new DirectFieldAccessor(registrar).getPropertyValue("cronTasks");
  assertEquals(1,cronTasks.size());
  MethodInvokingRunnable runnable=(MethodInvokingRunnable)cronTasks.keySet().iterator().next();
  Object targetObject=runnable.getTargetObject();
  String targetMethod=runnable.getTargetMethod();
  assertEquals(target,targetObject);
  assertEquals("x",targetMethod);
  assertEquals(businessHoursCronExpression,cronTasks.values().iterator().next());
}
