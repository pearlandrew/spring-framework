{
  String sql="SELECT NAME AS NAME, PROPERTY AS PROPERTY, VALUE AS VALUE FROM T";
  MockControl ctrlResultSet=MockControl.createControl(ResultSet.class);
  ResultSet mockResultSet=(ResultSet)ctrlResultSet.getMock();
  ctrlResultSet.expectAndReturn(mockResultSet.next(),true,2);
  ctrlResultSet.expectAndReturn(mockResultSet.next(),false);
  ctrlResultSet.expectAndReturn(mockResultSet.getString(1),"one");
  ctrlResultSet.expectAndReturn(mockResultSet.getString(2),"(class)");
  ctrlResultSet.expectAndReturn(mockResultSet.getString(3),"org.springframework.beans.TestBean");
  ctrlResultSet.expectAndReturn(mockResultSet.getString(1),"one");
  ctrlResultSet.expectAndReturn(mockResultSet.getString(2),"age");
  ctrlResultSet.expectAndReturn(mockResultSet.getString(3),"53");
  mockResultSet.close();
  ctrlResultSet.setVoidCallable();
  MockControl ctrlStatement=MockControl.createControl(Statement.class);
  Statement mockStatement=(Statement)ctrlStatement.getMock();
  ctrlStatement.expectAndReturn(mockStatement.executeQuery(sql),mockResultSet);
  if (debugEnabled) {
    ctrlStatement.expectAndReturn(mockStatement.getWarnings(),null);
  }
  mockStatement.close();
  ctrlStatement.setVoidCallable();
  mockConnection.createStatement();
  ctrlConnection.setReturnValue(mockStatement);
  ctrlResultSet.replay();
  ctrlStatement.replay();
  replay();
  DefaultListableBeanFactory bf=new DefaultListableBeanFactory();
  JdbcBeanDefinitionReader reader=new JdbcBeanDefinitionReader(bf);
  reader.setDataSource(mockDataSource);
  reader.loadBeanDefinitions(sql);
  assertEquals("Incorrect number of bean definitions",1,bf.getBeanDefinitionCount());
  TestBean tb=(TestBean)bf.getBean("one");
  assertEquals("Age in TestBean was wrong.",53,tb.getAge());
  ctrlResultSet.verify();
  ctrlStatement.verify();
}
