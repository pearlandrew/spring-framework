{
  Map<String,Lifecycle> lifecycleBeans=getLifecycleBeans();
  Map<Integer,LifecycleGroup> phases=new HashMap<Integer,LifecycleGroup>();
  for (  Map.Entry<String,? extends Lifecycle> entry : lifecycleBeans.entrySet()) {
    Lifecycle lifecycle=entry.getValue();
    if (!autoStartupOnly || (lifecycle instanceof SmartLifecycle && ((SmartLifecycle)lifecycle).isAutoStartup())) {
      int phase=getPhase(lifecycle);
      LifecycleGroup group=phases.get(phase);
      if (group == null) {
        group=new LifecycleGroup(phase,this.timeoutPerShutdownPhase,lifecycleBeans);
        phases.put(phase,group);
      }
      group.add(entry.getKey(),lifecycle);
    }
  }
  if (phases.size() > 0) {
    List<Integer> keys=new ArrayList<Integer>(phases.keySet());
    Collections.sort(keys);
    for (    Integer key : keys) {
      phases.get(key).start();
    }
  }
  this.running=true;
}
