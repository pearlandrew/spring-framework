{
  Assert.hasLength(uri,"'uri' must not be empty");
  Matcher m=URI_PATTERN.matcher(uri);
  if (m.matches()) {
    UriComponentsBuilder builder=new UriComponentsBuilder();
    String scheme=m.group(2);
    String userInfo=m.group(5);
    String host=m.group(6);
    String port=m.group(8);
    String path=m.group(9);
    String query=m.group(11);
    String fragment=m.group(13);
    boolean opaque=false;
    if (StringUtils.hasLength(scheme)) {
      String s=uri.substring(scheme.length());
      if (!s.startsWith(":/")) {
        opaque=true;
      }
    }
    builder.scheme(scheme);
    if (opaque) {
      String ssp=uri.substring(scheme.length()).substring(1);
      if (StringUtils.hasLength(fragment)) {
        ssp=ssp.substring(0,ssp.length() - (fragment.length() + 1));
      }
      builder.schemeSpecificPart(ssp);
    }
 else {
      builder.userInfo(userInfo);
      builder.host(host);
      if (StringUtils.hasLength(port)) {
        builder.port(port);
      }
      builder.path(path);
      builder.query(query);
    }
    if (StringUtils.hasText(fragment)) {
      builder.fragment(fragment);
    }
    return builder;
  }
 else {
    throw new IllegalArgumentException("[" + uri + "] is not a valid URI");
  }
}
