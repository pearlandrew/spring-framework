{
  URI uri=request.getURI();
  UriComponentsBuilder builder=UriComponentsBuilder.fromUri(uri);
  String scheme=uri.getScheme();
  String host=uri.getHost();
  int port=uri.getPort();
  String forwardedHeader=request.getHeaders().getFirst("Forwarded");
  if (StringUtils.hasText(forwardedHeader)) {
    String forwardedToUse=StringUtils.commaDelimitedListToStringArray(forwardedHeader)[0];
    Matcher m=FORWARDED_HOST_PATTERN.matcher(forwardedToUse);
    if (m.find()) {
      host=m.group(1).trim();
    }
    m=FORWARDED_PROTO_PATTERN.matcher(forwardedToUse);
    if (m.find()) {
      scheme=m.group(1).trim();
    }
  }
 else {
    String hostHeader=request.getHeaders().getFirst("X-Forwarded-Host");
    if (StringUtils.hasText(hostHeader)) {
      String[] hosts=StringUtils.commaDelimitedListToStringArray(hostHeader);
      String hostToUse=hosts[0];
      if (hostToUse.contains(":")) {
        String[] hostAndPort=StringUtils.split(hostToUse,":");
        host=hostAndPort[0];
        port=Integer.parseInt(hostAndPort[1]);
      }
 else {
        host=hostToUse;
        port=-1;
      }
    }
    String portHeader=request.getHeaders().getFirst("X-Forwarded-Port");
    if (StringUtils.hasText(portHeader)) {
      String[] ports=StringUtils.commaDelimitedListToStringArray(portHeader);
      port=Integer.parseInt(ports[0]);
    }
    String protocolHeader=request.getHeaders().getFirst("X-Forwarded-Proto");
    if (StringUtils.hasText(protocolHeader)) {
      String[] protocols=StringUtils.commaDelimitedListToStringArray(protocolHeader);
      scheme=protocols[0];
    }
  }
  builder.scheme(scheme);
  builder.host(host);
  builder.port(null);
  if (scheme.equals("http") && port != 80 || scheme.equals("https") && port != 443) {
    builder.port(port);
  }
  return builder;
}
