{
  String forwardedHeader=headers.getFirst("Forwarded");
  if (StringUtils.hasText(forwardedHeader)) {
    String forwardedToUse=StringUtils.commaDelimitedListToStringArray(forwardedHeader)[0];
    Matcher matcher=FORWARDED_HOST_PATTERN.matcher(forwardedToUse);
    if (matcher.find()) {
      host(matcher.group(1).trim());
    }
    matcher=FORWARDED_PROTO_PATTERN.matcher(forwardedToUse);
    if (matcher.find()) {
      scheme(matcher.group(1).trim());
    }
  }
 else {
    String hostHeader=headers.getFirst("X-Forwarded-Host");
    if (StringUtils.hasText(hostHeader)) {
      String[] hosts=StringUtils.commaDelimitedListToStringArray(hostHeader);
      String hostToUse=hosts[0];
      if (hostToUse.contains(":")) {
        String[] hostAndPort=StringUtils.split(hostToUse,":");
        host(hostAndPort[0]);
        port(Integer.parseInt(hostAndPort[1]));
      }
 else {
        host(hostToUse);
        port(null);
      }
    }
    String portHeader=headers.getFirst("X-Forwarded-Port");
    if (StringUtils.hasText(portHeader)) {
      String[] ports=StringUtils.commaDelimitedListToStringArray(portHeader);
      port(Integer.parseInt(ports[0]));
    }
    String protocolHeader=headers.getFirst("X-Forwarded-Proto");
    if (StringUtils.hasText(protocolHeader)) {
      String[] protocols=StringUtils.commaDelimitedListToStringArray(protocolHeader);
      scheme(protocols[0]);
    }
  }
  if ((this.scheme.equals("http") && "80".equals(this.port)) || (this.scheme.equals("https") && "443".equals(this.port))) {
    this.port=null;
  }
  return this;
}
