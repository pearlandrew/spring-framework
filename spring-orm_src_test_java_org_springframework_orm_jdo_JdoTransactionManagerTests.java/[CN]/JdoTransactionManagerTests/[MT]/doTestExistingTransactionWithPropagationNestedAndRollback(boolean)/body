{
  final DataSource ds=mock(DataSource.class);
  JdoDialect dialect=mock(JdoDialect.class);
  final Connection con=mock(Connection.class);
  DatabaseMetaData md=mock(DatabaseMetaData.class);
  Savepoint sp=mock(Savepoint.class);
  given(pmf.getPersistenceManager()).willReturn(pm);
  given(pm.currentTransaction()).willReturn(tx);
  given(md.supportsSavepoints()).willReturn(true);
  given(con.getMetaData()).willReturn(md);
  given(con.setSavepoint(ConnectionHolder.SAVEPOINT_NAME_PREFIX + 1)).willReturn(sp);
  final TransactionTemplate tt=new TransactionTemplate();
  tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_NESTED);
  ConnectionHandle conHandle=new SimpleConnectionHandle(con);
  given(dialect.getJdbcConnection(pm,false)).willReturn(conHandle);
  given(tx.isActive()).willReturn(!manualSavepoint);
  JdoTransactionManager tm=new JdoTransactionManager();
  tm.setNestedTransactionAllowed(true);
  tm.setPersistenceManagerFactory(pmf);
  tm.setDataSource(ds);
  tm.setJdoDialect(dialect);
  tt.setTransactionManager(tm);
  final List l=new ArrayList();
  l.add("test");
  assertTrue("Hasn't thread pm",!TransactionSynchronizationManager.hasResource(pmf));
  Object result=tt.execute(new TransactionCallback(){
    @Override public Object doInTransaction(    TransactionStatus status){
      assertTrue("Has thread pm",TransactionSynchronizationManager.hasResource(pmf));
      assertTrue("Has thread con",TransactionSynchronizationManager.hasResource(ds));
      if (manualSavepoint) {
        Object savepoint=status.createSavepoint();
        status.rollbackToSavepoint(savepoint);
      }
 else {
        tt.execute(new TransactionCallbackWithoutResult(){
          @Override protected void doInTransactionWithoutResult(          TransactionStatus status){
            assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(pmf));
            assertTrue("Has thread connection",TransactionSynchronizationManager.hasResource(ds));
            status.setRollbackOnly();
          }
        }
);
      }
      PersistenceManagerFactoryUtils.getPersistenceManager(pmf,true).flush();
      return l;
    }
  }
);
  assertTrue("Correct result list",result == l);
  assertTrue("Hasn't thread pm",!TransactionSynchronizationManager.hasResource(pmf));
  assertTrue("Hasn't thread con",!TransactionSynchronizationManager.hasResource(ds));
  verify(pm).flush();
  verify(pm).close();
  verify(con).setSavepoint(ConnectionHolder.SAVEPOINT_NAME_PREFIX + 1);
  verify(con).rollback(sp);
  verify(dialect).beginTransaction(tx,tt);
  verify(dialect).releaseJdbcConnection(conHandle,pm);
  verify(dialect).cleanupTransaction(null);
  verify(tx).commit();
}
