{
  given(pmf.getPersistenceManager()).willReturn(pm);
  given(pmf.getPersistenceManagerProxy()).willReturn(pm);
  given(pm.currentTransaction()).willReturn(tx);
  PlatformTransactionManager tm=new JdoTransactionManager(pmf);
  TransactionTemplate tt=new TransactionTemplate(tm);
  final List l=new ArrayList();
  l.add("test");
  assertTrue("Hasn't thread pm",!TransactionSynchronizationManager.hasResource(pmf));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  Object result=tt.execute(new TransactionCallback(){
    @Override public Object doInTransaction(    TransactionStatus status){
      assertTrue("Has thread pm",TransactionSynchronizationManager.hasResource(pmf));
      TransactionAwarePersistenceManagerFactoryProxy proxyFactory=new TransactionAwarePersistenceManagerFactoryProxy();
      proxyFactory.setTargetPersistenceManagerFactory(pmf);
      PersistenceManagerFactory pmfProxy=proxyFactory.getObject();
      assertEquals(pm.toString(),pmfProxy.getPersistenceManager().toString());
      pmfProxy.getPersistenceManager().flush();
      pmfProxy.getPersistenceManager().close();
      SpringPersistenceManagerProxyBean proxyBean=new SpringPersistenceManagerProxyBean();
      proxyBean.setPersistenceManagerFactory(pmf);
      proxyBean.afterPropertiesSet();
      PersistenceManager pmProxy=proxyBean.getObject();
      assertSame(pmf,pmProxy.getPersistenceManagerFactory());
      pmProxy.flush();
      pmProxy.close();
      StandardPersistenceManagerProxyBean stdProxyBean=new StandardPersistenceManagerProxyBean();
      stdProxyBean.setPersistenceManagerFactory(pmf);
      PersistenceManager stdPmProxy=stdProxyBean.getObject();
      stdPmProxy.flush();
      JdoTemplate jt=new JdoTemplate(pmf);
      return jt.execute(new JdoCallback(){
        @Override public Object doInJdo(        PersistenceManager pm2){
          pm2.flush();
          return l;
        }
      }
);
    }
  }
);
  assertTrue("Correct result list",result == l);
  assertTrue("Hasn't thread pm",!TransactionSynchronizationManager.hasResource(pmf));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  verify(pm,times(4)).flush();
  verify(pm).close();
  verify(tx).begin();
  verify(tx).commit();
}
