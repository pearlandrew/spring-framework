{
  final DataSource ds=mock(DataSource.class);
  JdoDialect dialect=mock(JdoDialect.class);
  final Connection con=mock(Connection.class);
  ConnectionHandle conHandle=new SimpleConnectionHandle(con);
  given(pmf.getConnectionFactory()).willReturn(ds);
  given(pmf.getPersistenceManager()).willReturn(pm);
  given(pm.currentTransaction()).willReturn(tx);
  TransactionTemplate tt=new TransactionTemplate();
  given(dialect.getJdbcConnection(pm,false)).willReturn(conHandle);
  JdoTransactionManager tm=new JdoTransactionManager();
  tm.setPersistenceManagerFactory(pmf);
  tm.setJdoDialect(dialect);
  tm.afterPropertiesSet();
  tt.setTransactionManager(tm);
  final List l=new ArrayList();
  l.add("test");
  assertTrue("Hasn't thread pm",!TransactionSynchronizationManager.hasResource(pmf));
  Object result=tt.execute(new TransactionCallback(){
    @Override public Object doInTransaction(    TransactionStatus status){
      assertTrue("Has thread pm",TransactionSynchronizationManager.hasResource(pmf));
      assertTrue("Has thread con",TransactionSynchronizationManager.hasResource(ds));
      JdoTemplate jt=new JdoTemplate(pmf);
      return jt.execute(new JdoCallback(){
        @Override public Object doInJdo(        PersistenceManager pm){
          return l;
        }
      }
);
    }
  }
);
  assertTrue("Correct result list",result == l);
  assertTrue("Hasn't thread pm",!TransactionSynchronizationManager.hasResource(pmf));
  assertTrue("Hasn't thread con",!TransactionSynchronizationManager.hasResource(ds));
  verify(pm).close();
  verify(dialect).beginTransaction(tx,tt);
  verify(dialect).releaseJdbcConnection(conHandle,pm);
  verify(dialect).cleanupTransaction(null);
  verify(tx).commit();
}
