{
  given(pmf.getPersistenceManager()).willReturn(pm);
  given(pm.currentTransaction()).willReturn(tx);
  given(tx.isActive()).willReturn(true);
  PlatformTransactionManager tm=new JdoTransactionManager(pmf);
  final TransactionTemplate tt=new TransactionTemplate(tm);
  tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);
  final List l=new ArrayList();
  l.add("test");
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  TransactionSynchronizationManager.bindResource(pmf,new PersistenceManagerHolder(pm));
  assertTrue("Has thread pm",TransactionSynchronizationManager.hasResource(pmf));
  Object result=tt.execute(new TransactionCallback(){
    @Override public Object doInTransaction(    TransactionStatus status){
      PersistenceManagerFactoryUtils.getPersistenceManager(pmf,true);
      return tt.execute(new TransactionCallback(){
        @Override public Object doInTransaction(        TransactionStatus status){
          PersistenceManagerFactoryUtils.getPersistenceManager(pmf,true).flush();
          return l;
        }
      }
);
    }
  }
);
  assertTrue("Correct result list",result == l);
  assertTrue("Has thread pm",TransactionSynchronizationManager.hasResource(pmf));
  TransactionSynchronizationManager.unbindResource(pmf);
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  verify(tx,times(2)).begin();
  verify(tx,times(2)).commit();
  verify(pm).flush();
  verify(pm).close();
}
