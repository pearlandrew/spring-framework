{
  UserTransaction ut=mock(UserTransaction.class);
  given(ut.getStatus()).willReturn(Status.STATUS_NO_TRANSACTION,Status.STATUS_ACTIVE);
  given(pmf.getPersistenceManager()).willReturn(pm);
  JtaTransactionManager ptm=new JtaTransactionManager(ut);
  TransactionTemplate tt=new TransactionTemplate(ptm);
  final List l=new ArrayList();
  l.add("test");
  assertTrue("Hasn't thread pm",!TransactionSynchronizationManager.hasResource(pmf));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  Object result=tt.execute(new TransactionCallback(){
    @Override public Object doInTransaction(    TransactionStatus status){
      assertTrue("JTA synchronizations active",TransactionSynchronizationManager.isSynchronizationActive());
      assertTrue("Hasn't thread pm",!TransactionSynchronizationManager.hasResource(pmf));
      PersistenceManagerFactoryUtils.getPersistenceManager(pmf,true).flush();
      PersistenceManagerFactoryUtils.getPersistenceManager(pmf,true).flush();
      assertTrue("Has thread pm",TransactionSynchronizationManager.hasResource(pmf));
      return l;
    }
  }
);
  assertTrue("Hasn't thread pm",!TransactionSynchronizationManager.hasResource(pmf));
  assertTrue("Correct result list",result == l);
  assertTrue("Hasn't thread pm",!TransactionSynchronizationManager.hasResource(pmf));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  verify(ut).begin();
  verify(ut).commit();
  verify(pm,times(2)).flush();
  verify(pm,times(2)).close();
}
