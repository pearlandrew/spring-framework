{
  Query query=mock(Query.class);
  final JdoDialect dialect=mock(JdoDialect.class);
  TransactionTemplate tt=new TransactionTemplate();
  given(pmf.getPersistenceManager()).willReturn(pm);
  given(pm.currentTransaction()).willReturn(tx);
  if (!exposeNativePm) {
    dialect.applyQueryTimeout(query,10);
  }
  given(pm.newQuery(TestBean.class)).willReturn(query);
  JdoTransactionManager tm=new JdoTransactionManager(pmf);
  tm.setJdoDialect(dialect);
  tt.setTransactionManager(tm);
  tt.setTimeout(10);
  assertTrue("Hasn't thread pm",!TransactionSynchronizationManager.hasResource(pmf));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  tt.execute(new TransactionCallback(){
    @Override public Object doInTransaction(    TransactionStatus status){
      assertTrue("Has thread pm",TransactionSynchronizationManager.hasResource(pmf));
      JdoTemplate jt=new JdoTemplate(pmf);
      jt.setJdoDialect(dialect);
      if (exposeNativePm) {
        jt.setExposeNativePersistenceManager(true);
      }
      return jt.execute(new JdoCallback(){
        @Override public Object doInJdo(        PersistenceManager pm2){
          if (exposeNativePm) {
            assertSame(pm,pm2);
          }
 else {
            assertTrue(Proxy.isProxyClass(pm2.getClass()));
          }
          pm2.newQuery(TestBean.class);
          return null;
        }
      }
);
    }
  }
);
  assertTrue("Hasn't thread pm",!TransactionSynchronizationManager.hasResource(pmf));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  verify(dialect).beginTransaction(tx,tt);
  verify(dialect).cleanupTransaction(null);
  verify(pm).close();
  verify(tx).getRollbackOnly();
  verify(tx).commit();
}
