{
  Assert.notNull(reconnectStrategy,"ReconnectStrategy must not be null");
  Reconnect reconnect=new Reconnect(){
    @Override public Tuple2<InetSocketAddress,Long> reconnect(    InetSocketAddress address,    int attempt){
      return Tuple.of(address,reconnectStrategy.getTimeToNextAttempt(attempt));
    }
  }
;
  Stream<NetChannel<Message<P>,Message<P>>> stream=this.tcpClient.open(reconnect);
  composeConnectionHandling(stream,connectionHandler);
  Promise<Void> promise=Promises.next(stream).map(new Function<NetChannel<Message<P>,Message<P>>,Void>(){
    @Override public Void apply(    NetChannel<Message<P>,Message<P>> ch){
      return null;
    }
  }
);
  return new PassThroughPromiseToListenableFutureAdapter<Void>(promise);
}
