{
  composable.when(Throwable.class,new Consumer<Throwable>(){
    @Override public void accept(    Throwable ex){
      connectionHandler.afterConnectFailure(ex);
    }
  }
);
  composable.consume(new Consumer<TcpConnection<Message<P>,Message<P>>>(){
    @Override public void accept(    TcpConnection<Message<P>,Message<P>> connection){
      connection.on().close(new Runnable(){
        @Override public void run(){
          connectionHandler.afterConnectionClosed();
        }
      }
);
      connection.consume(new Consumer<Message<P>>(){
        @Override public void accept(        Message<P> message){
          connectionHandler.handleMessage(message);
        }
      }
);
      connection.when(Throwable.class,new Consumer<Throwable>(){
        @Override public void accept(        Throwable t){
          logger.error("Exception on connection " + connectionHandler,t);
        }
      }
);
      connectionHandler.afterConnected(new ReactorTcpConnection<P>(connection));
    }
  }
);
}
