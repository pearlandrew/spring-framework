{
  this.aspectName=aspectName;
  this.ajType=AjTypeSystem.getAjType(aspectClass);
  if (!this.ajType.isAspect()) {
    throw new IllegalArgumentException("Class '" + aspectClass.getName() + "' is not an @AspectJ aspect");
  }
  if (this.ajType.getDeclarePrecedence().length > 0) {
    throw new IllegalArgumentException("DeclarePrecendence not presently supported in Spring AOP");
  }
switch (this.ajType.getPerClause().getKind()) {
case SINGLETON:
    this.perClausePointcut=Pointcut.TRUE;
  return;
case PERTARGET:
case PERTHIS:
AspectJExpressionPointcut ajexp=new AspectJExpressionPointcut();
ajexp.setLocation("@Aspect annotation on " + aspectClass.getName());
ajexp.setExpression(findPerClause(aspectClass));
this.perClausePointcut=ajexp;
return;
case PERTYPEWITHIN:
this.perClausePointcut=new ComposablePointcut(new TypePatternClassFilter(findPerClause(aspectClass)));
return;
default :
throw new AopConfigException("PerClause " + ajType.getPerClause().getKind() + " not supported by Spring AOP for "+ aspectClass);
}
}
