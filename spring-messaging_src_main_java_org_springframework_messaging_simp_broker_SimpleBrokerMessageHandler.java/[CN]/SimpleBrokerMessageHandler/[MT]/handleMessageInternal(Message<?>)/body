{
  MessageHeaders headers=message.getHeaders();
  SimpMessageType messageType=SimpMessageHeaderAccessor.getMessageType(headers);
  String destination=SimpMessageHeaderAccessor.getDestination(headers);
  String sessionId=SimpMessageHeaderAccessor.getSessionId(headers);
  if (!checkDestinationPrefix(destination)) {
    if (logger.isTraceEnabled()) {
      logger.trace("Ignoring message to destination=" + destination);
    }
    return;
  }
  if (SimpMessageType.MESSAGE.equals(messageType)) {
    sendMessageToSubscribers(destination,message);
  }
 else   if (SimpMessageType.SUBSCRIBE.equals(messageType)) {
    this.subscriptionRegistry.registerSubscription(message);
  }
 else   if (SimpMessageType.UNSUBSCRIBE.equals(messageType)) {
    this.subscriptionRegistry.unregisterSubscription(message);
  }
 else   if (SimpMessageType.DISCONNECT.equals(messageType)) {
    this.subscriptionRegistry.unregisterAllSubscriptions(sessionId);
  }
 else   if (SimpMessageType.CONNECT.equals(messageType)) {
    SimpMessageHeaderAccessor accessor=SimpMessageHeaderAccessor.create(SimpMessageType.CONNECT_ACK);
    accessor.setSessionId(sessionId);
    accessor.setHeader(SimpMessageHeaderAccessor.CONNECT_MESSAGE_HEADER,message);
    Message<byte[]> connectAck=MessageBuilder.createMessage(EMPTY_PAYLOAD,accessor.getMessageHeaders());
    this.clientOutboundChannel.send(connectAck);
  }
 else {
    if (logger.isTraceEnabled()) {
      logger.trace("Message type not supported. Ignoring: " + message);
    }
  }
}
