{
  MultiValueMap<String,String> subscriptions=this.subscriptionRegistry.findSubscriptions(message);
  if ((subscriptions.size() > 0) && logger.isDebugEnabled()) {
    logger.debug("Broadcasting to " + subscriptions.size() + " sessions.");
  }
  for (  String sessionId : subscriptions.keySet()) {
    for (    String subscriptionId : subscriptions.get(sessionId)) {
      SimpMessageHeaderAccessor headerAccessor=SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE);
      initHeaders(headerAccessor);
      headerAccessor.setSessionId(sessionId);
      headerAccessor.setSubscriptionId(subscriptionId);
      headerAccessor.copyHeadersIfAbsent(message.getHeaders());
      Object payload=message.getPayload();
      Message<?> reply=MessageBuilder.createMessage(payload,headerAccessor.getMessageHeaders());
      try {
        this.clientOutboundChannel.send(reply);
      }
 catch (      Throwable ex) {
        logger.error("Failed to send " + message,ex);
      }
    }
  }
}
