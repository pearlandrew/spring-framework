{
  Object testInstance;
  try {
    testInstance=new ReflectiveCallable(){
      @Override protected Object runReflectiveCall() throws Throwable {
        return createTest();
      }
    }
.run();
  }
 catch (  Throwable e) {
    return new Fail(e);
  }
  Statement statement=methodInvoker(frameworkMethod,testInstance);
  statement=possiblyExpectingExceptions(frameworkMethod,testInstance,statement);
  statement=withBefores(frameworkMethod,testInstance,statement);
  statement=withAfters(frameworkMethod,testInstance,statement);
  statement=withRulesReflectively(frameworkMethod,testInstance,statement);
  statement=withPotentialRepeat(frameworkMethod,testInstance,statement);
  statement=withPotentialTimeout(frameworkMethod,testInstance,statement);
  return statement;
}
