{
  if (this.propertyEditorRegistrars != null) {
    for (    PropertyEditorRegistrar propertyEditorRegistrar : this.propertyEditorRegistrars) {
      beanFactory.addPropertyEditorRegistrar(propertyEditorRegistrar);
    }
  }
  if (this.customEditors != null) {
    for (    Map.Entry<String,?> entry : this.customEditors.entrySet()) {
      String key=entry.getKey();
      Object value=entry.getValue();
      Class requiredType=null;
      try {
        requiredType=ClassUtils.forName(key,this.beanClassLoader);
        if (value instanceof PropertyEditor) {
          if (logger.isWarnEnabled()) {
            logger.warn("Passing PropertyEditor instances into CustomEditorConfigurer is deprecated: " + "use PropertyEditorRegistrars or PropertyEditor class names instead. " + "Offending key [" + key + "; offending editor instance: "+ value);
          }
          beanFactory.addPropertyEditorRegistrar(new SharedPropertyEditorRegistrar(requiredType,(PropertyEditor)value));
        }
 else         if (value instanceof Class) {
          beanFactory.registerCustomEditor(requiredType,(Class)value);
        }
 else         if (value instanceof String) {
          Class editorClass=ClassUtils.forName((String)value,this.beanClassLoader);
          Assert.isAssignable(PropertyEditor.class,editorClass);
          beanFactory.registerCustomEditor(requiredType,editorClass);
        }
 else {
          throw new IllegalArgumentException("Mapped value [" + value + "] for custom editor key ["+ key+ "] is not of required type ["+ PropertyEditor.class.getName()+ "] or a corresponding Class or String value indicating a PropertyEditor implementation");
        }
      }
 catch (      ClassNotFoundException ex) {
        if (this.ignoreUnresolvableEditors) {
          logger.info("Skipping editor [" + value + "] for required type ["+ key+ "]: "+ (requiredType != null ? "editor" : "required type")+ " class not found.");
        }
 else {
          throw new FatalBeanException((requiredType != null ? "Editor" : "Required type") + " class not found",ex);
        }
      }
    }
  }
}
