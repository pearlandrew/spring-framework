{
  Assert.state(this.port != -1,"setup() was never called");
  DispatcherServletInstanceFactory servletFactory=new DispatcherServletInstanceFactory(cxt);
  WebSocketDeploymentInfo info=new WebSocketDeploymentInfo();
  try {
    info.setWorker(Xnio.getInstance().createWorker(OptionMap.EMPTY));
    info.setBuffers(new ByteBufferSlicePool(1024,1024));
  }
 catch (  IOException ex) {
    throw new IllegalStateException(ex);
  }
  DeploymentInfo servletBuilder=deployment().setClassLoader(UndertowTestServer.class.getClassLoader()).setDeploymentName("undertow-websocket-test").setContextPath("/").addServlet(servlet("DispatcherServlet",DispatcherServlet.class,servletFactory).addMapping("/").setAsyncSupported(true)).addServletContextAttribute(WebSocketDeploymentInfo.ATTRIBUTE_NAME,info);
  for (  final Filter filter : filters) {
    String filterName=filter.getClass().getName();
    servletBuilder.addFilter(new FilterInfo(filterName,filter.getClass(),new FilterInstanceFactory(filter)).setAsyncSupported(true));
    for (    DispatcherType type : DispatcherType.values()) {
      servletBuilder.addFilterUrlMapping(filterName,"/*",type);
    }
  }
  try {
    this.manager=defaultContainer().addDeployment(servletBuilder);
    this.manager.deploy();
    HttpHandler httpHandler=this.manager.start();
    this.server=Undertow.builder().addHttpListener(this.port,"localhost").setHandler(httpHandler).build();
  }
 catch (  ServletException ex) {
    throw new IllegalStateException(ex);
  }
}
