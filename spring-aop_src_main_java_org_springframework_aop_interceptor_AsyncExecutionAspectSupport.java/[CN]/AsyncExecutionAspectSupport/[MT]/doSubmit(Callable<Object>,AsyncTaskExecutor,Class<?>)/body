{
  if (CompletableFuture.class.isAssignableFrom(returnType)) {
    return CompletableFuture.supplyAsync(new Supplier<Object>(){
      @Override public Object get(){
        try {
          return task.call();
        }
 catch (        Throwable ex) {
          throw new CompletionException(ex);
        }
      }
    }
,executor);
  }
 else   if (ListenableFuture.class.isAssignableFrom(returnType)) {
    return ((AsyncListenableTaskExecutor)executor).submitListenable(task);
  }
 else   if (Future.class.isAssignableFrom(returnType)) {
    return executor.submit(task);
  }
 else {
    executor.submit(task);
    return null;
  }
}
