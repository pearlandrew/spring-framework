{
  boolean collectionBinding=false;
  String[] props=propertyPath.split("\\.");
  if (props.length == 0) {
    props=new String[]{propertyPath};
  }
  Class<?> modelType=bindingRules.getModelType();
  for (int i=0; i < props.length; i++) {
    String prop=props[i];
    PropertyDescriptor[] propDescs=getBeanInfo(modelType).getPropertyDescriptors();
    boolean found=false;
    for (    PropertyDescriptor propDesc : propDescs) {
      if (prop.equals(propDesc.getName())) {
        found=true;
        Class<?> propertyType=propDesc.getPropertyType();
        if (Collection.class.isAssignableFrom(propertyType)) {
          modelType=GenericCollectionTypeResolver.getCollectionReturnType(propDesc.getReadMethod());
          if (i == (props.length - 1)) {
            collectionBinding=true;
          }
        }
 else         if (Map.class.isAssignableFrom(propertyType)) {
          modelType=GenericCollectionTypeResolver.getMapValueReturnType(propDesc.getReadMethod());
          if (i == (props.length - 1)) {
            collectionBinding=true;
          }
        }
 else {
          modelType=propertyType;
        }
        break;
      }
    }
    if (!found) {
      if (props.length > 1) {
        throw new IllegalArgumentException("No property named '" + prop + "' found on model class ["+ modelType.getName()+ "] as part of property path '"+ propertyPath+ "'");
      }
 else {
        throw new IllegalArgumentException("No property named '" + prop + "' found on model class ["+ modelType.getName()+ "]");
      }
    }
  }
  return collectionBinding;
}
