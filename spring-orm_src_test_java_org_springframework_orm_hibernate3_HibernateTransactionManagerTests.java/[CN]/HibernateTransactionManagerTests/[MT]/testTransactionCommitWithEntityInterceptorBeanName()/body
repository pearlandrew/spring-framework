{
  Interceptor entityInterceptor=mock(Interceptor.class);
  Interceptor entityInterceptor2=mock(Interceptor.class);
  Connection con=mock(Connection.class);
  final SessionFactory sf=mock(SessionFactory.class);
  Session session=mock(Session.class);
  Transaction tx=mock(Transaction.class);
  given(sf.openSession(entityInterceptor)).willReturn(session);
  given(sf.openSession(entityInterceptor2)).willReturn(session);
  given(session.beginTransaction()).willReturn(tx);
  given(session.isOpen()).willReturn(true);
  given(session.isConnected()).willReturn(true);
  given(session.connection()).willReturn(con);
  BeanFactory beanFactory=mock(BeanFactory.class);
  given(beanFactory.getBean("entityInterceptor",Interceptor.class)).willReturn(entityInterceptor,entityInterceptor2);
  HibernateTransactionManager tm=new HibernateTransactionManager(sf);
  tm.setEntityInterceptorBeanName("entityInterceptor");
  tm.setBeanFactory(beanFactory);
  TransactionTemplate tt=new TransactionTemplate(tm);
  tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  for (int i=0; i < 2; i++) {
    tt.execute(new TransactionCallbackWithoutResult(){
      @Override public void doInTransactionWithoutResult(      TransactionStatus status){
        assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
        HibernateTemplate ht=new HibernateTemplate(sf);
        ht.execute(new HibernateCallback(){
          @Override public Object doInHibernate(          org.hibernate.Session session) throws HibernateException {
            return null;
          }
        }
);
      }
    }
);
  }
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  verify(session,times(2)).close();
  verify(tx,times(2)).commit();
}
