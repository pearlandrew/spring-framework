{
  final DataSource ds=mock(DataSource.class);
  Connection con=mock(Connection.class);
  final SessionFactory sf=mock(SessionFactory.class);
  final Session session=mock(Session.class);
  Transaction tx=mock(Transaction.class);
  Query query=mock(Query.class);
  final List list=new ArrayList();
  list.add("test");
  given(con.getTransactionIsolation()).willReturn(Connection.TRANSACTION_READ_COMMITTED);
  given(sf.openSession()).willReturn(session);
  given(session.getTransaction()).willReturn(tx);
  given(session.connection()).willReturn(con);
  given(session.isOpen()).willReturn(true);
  given(session.createQuery("some query string")).willReturn(query);
  given(query.list()).willReturn(list);
  given(session.getFlushMode()).willReturn(FlushMode.AUTO);
  given(session.isConnected()).willReturn(true);
  LocalSessionFactoryBean lsfb=new LocalSessionFactoryBean(){
    @Override protected SessionFactory newSessionFactory(    Configuration config) throws HibernateException {
      return sf;
    }
  }
;
  lsfb.afterPropertiesSet();
  final SessionFactory sfProxy=lsfb.getObject();
  HibernateTransactionManager tm=new HibernateTransactionManager();
  tm.setJdbcExceptionTranslator(new SQLStateSQLExceptionTranslator());
  tm.setSessionFactory(sfProxy);
  tm.setDataSource(ds);
  tm.setEarlyFlushBeforeCommit(true);
  TransactionTemplate tt=new TransactionTemplate(tm);
  tt.setIsolationLevel(TransactionDefinition.ISOLATION_SERIALIZABLE);
  tt.setTimeout(10);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sfProxy));
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(ds));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  Object result=tt.execute(new TransactionCallback(){
    @Override public Object doInTransaction(    TransactionStatus status){
      assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sfProxy));
      assertTrue("Has thread connection",TransactionSynchronizationManager.hasResource(ds));
      assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
      assertTrue(TransactionSynchronizationManager.isActualTransactionActive());
      HibernateTemplate ht=new HibernateTemplate(sfProxy);
      return ht.find("some query string");
    }
  }
);
  assertTrue("Correct result list",result == list);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sfProxy));
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(ds));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  InOrder ordered=inOrder(con);
  ordered.verify(con).setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
  ordered.verify(con).setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
  verify(tx).setTimeout(10);
  verify(tx).begin();
  verify(session).flush();
  verify(session).setFlushMode(FlushMode.MANUAL);
  verify(tx).commit();
  verify(session).close();
}
