{
  final SessionFactory sf=mock(SessionFactory.class);
  final Session session=mock(Session.class);
  given(sf.openSession()).willReturn(session);
  given(session.getSessionFactory()).willReturn(sf);
  given(session.getFlushMode()).willReturn(FlushMode.MANUAL);
  LocalSessionFactoryBean lsfb=new LocalSessionFactoryBean(){
    @Override protected SessionFactory newSessionFactory(    Configuration config) throws HibernateException {
      return sf;
    }
  }
;
  lsfb.afterPropertiesSet();
  final SessionFactory sfProxy=lsfb.getObject();
  PlatformTransactionManager tm=new HibernateTransactionManager(sfProxy);
  TransactionTemplate tt=new TransactionTemplate(tm);
  tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_SUPPORTS);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sfProxy));
  tt.execute(new TransactionCallback(){
    @Override public Object doInTransaction(    TransactionStatus status){
      assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sfProxy));
      assertTrue("Is not new transaction",!status.isNewTransaction());
      assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
      assertFalse(TransactionSynchronizationManager.isActualTransactionActive());
      HibernateTemplate ht=new HibernateTemplate(sfProxy);
      ht.setFlushMode(HibernateTemplate.FLUSH_EAGER);
      ht.execute(new HibernateCallback(){
        @Override public Object doInHibernate(        org.hibernate.Session session){
          return null;
        }
      }
);
      assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sfProxy));
      return null;
    }
  }
);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sfProxy));
  InOrder ordered=inOrder(session);
  ordered.verify(session).setFlushMode(FlushMode.AUTO);
  ordered.verify(session).flush();
  ordered.verify(session).setFlushMode(FlushMode.MANUAL);
  ordered.verify(session).close();
}
