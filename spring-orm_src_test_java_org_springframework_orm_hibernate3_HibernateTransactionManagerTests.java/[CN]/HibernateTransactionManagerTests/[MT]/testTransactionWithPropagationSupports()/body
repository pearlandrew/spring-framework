{
  MockControl sfControl=MockControl.createControl(SessionFactory.class);
  final SessionFactory sf=(SessionFactory)sfControl.getMock();
  MockControl sessionControl=MockControl.createControl(Session.class);
  final Session session=(Session)sessionControl.getMock();
  sf.openSession();
  sfControl.setReturnValue(session,1);
  session.getSessionFactory();
  sessionControl.setReturnValue(sf,1);
  session.getFlushMode();
  sessionControl.setReturnValue(FlushMode.MANUAL,1);
  session.setFlushMode(FlushMode.AUTO);
  sessionControl.setVoidCallable(1);
  session.flush();
  sessionControl.setVoidCallable(1);
  session.setFlushMode(FlushMode.MANUAL);
  sessionControl.setVoidCallable(1);
  session.getFlushMode();
  sessionControl.setReturnValue(FlushMode.MANUAL,1);
  session.close();
  sessionControl.setReturnValue(null,1);
  sfControl.replay();
  sessionControl.replay();
  LocalSessionFactoryBean lsfb=new LocalSessionFactoryBean(){
    protected SessionFactory newSessionFactory(    Configuration config) throws HibernateException {
      return sf;
    }
  }
;
  lsfb.afterPropertiesSet();
  final SessionFactory sfProxy=lsfb.getObject();
  PlatformTransactionManager tm=new HibernateTransactionManager(sfProxy);
  TransactionTemplate tt=new TransactionTemplate(tm);
  tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_SUPPORTS);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sfProxy));
  tt.execute(new TransactionCallback(){
    public Object doInTransaction(    TransactionStatus status){
      assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sfProxy));
      assertTrue("Is not new transaction",!status.isNewTransaction());
      assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
      assertFalse(TransactionSynchronizationManager.isActualTransactionActive());
      HibernateTemplate ht=new HibernateTemplate(sfProxy);
      ht.setFlushMode(HibernateTemplate.FLUSH_EAGER);
      ht.execute(new HibernateCallback(){
        public Object doInHibernate(        org.hibernate.Session session){
          return null;
        }
      }
);
      assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sfProxy));
      return null;
    }
  }
);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sfProxy));
  sfControl.verify();
  sessionControl.verify();
}
