{
  final DataSource ds=mock(DataSource.class);
  Connection con=mock(Connection.class);
  DatabaseMetaData md=mock(DatabaseMetaData.class);
  Savepoint sp=mock(Savepoint.class);
  final SessionFactory sf=mock(SessionFactory.class);
  Session session=mock(Session.class);
  Transaction tx=mock(Transaction.class);
  Query query=mock(Query.class);
  final List list=new ArrayList();
  list.add("test");
  given(sf.openSession()).willReturn(session);
  given(session.beginTransaction()).willReturn(tx);
  given(session.connection()).willReturn(con);
  given(session.isOpen()).willReturn(true);
  given(md.supportsSavepoints()).willReturn(true);
  given(con.getMetaData()).willReturn(md);
  given(con.setSavepoint(ConnectionHolder.SAVEPOINT_NAME_PREFIX + 1)).willReturn(sp);
  given(session.createQuery("some query string")).willReturn(query);
  given(query.list()).willReturn(list);
  given(session.isConnected()).willReturn(true);
  HibernateTransactionManager tm=new HibernateTransactionManager();
  tm.setJdbcExceptionTranslator(new SQLStateSQLExceptionTranslator());
  tm.setNestedTransactionAllowed(true);
  tm.setSessionFactory(sf);
  tm.setDataSource(ds);
  final TransactionTemplate tt=new TransactionTemplate(tm);
  tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_NESTED);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(ds));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  Object result=tt.execute(new TransactionCallback(){
    @Override public Object doInTransaction(    TransactionStatus status){
      assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
      assertTrue("Has thread connection",TransactionSynchronizationManager.hasResource(ds));
      if (manualSavepoint) {
        Object savepoint=status.createSavepoint();
        status.rollbackToSavepoint(savepoint);
      }
 else {
        tt.execute(new TransactionCallbackWithoutResult(){
          @Override protected void doInTransactionWithoutResult(          TransactionStatus status){
            assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
            assertTrue("Has thread connection",TransactionSynchronizationManager.hasResource(ds));
            status.setRollbackOnly();
          }
        }
);
      }
      HibernateTemplate ht=new HibernateTemplate(sf);
      return ht.find("some query string");
    }
  }
);
  assertTrue("Correct result list",result == list);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(ds));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  verify(con).setSavepoint(ConnectionHolder.SAVEPOINT_NAME_PREFIX + 1);
  verify(con).rollback(sp);
  verify(session).close();
  verify(tx).commit();
}
