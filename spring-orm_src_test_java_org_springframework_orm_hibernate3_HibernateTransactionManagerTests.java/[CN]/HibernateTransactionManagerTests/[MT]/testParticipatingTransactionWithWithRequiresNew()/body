{
  MockControl sfControl=MockControl.createControl(SessionFactory.class);
  final SessionFactory sf=(SessionFactory)sfControl.getMock();
  MockControl session1Control=MockControl.createControl(Session.class);
  Session session1=(Session)session1Control.getMock();
  MockControl session2Control=MockControl.createControl(Session.class);
  Session session2=(Session)session2Control.getMock();
  MockControl conControl=MockControl.createControl(Connection.class);
  Connection con=(Connection)conControl.getMock();
  MockControl txControl=MockControl.createControl(Transaction.class);
  Transaction tx=(Transaction)txControl.getMock();
  sf.openSession();
  sfControl.setReturnValue(session1,1);
  sf.openSession();
  sfControl.setReturnValue(session2,1);
  session1.beginTransaction();
  session1Control.setReturnValue(tx,1);
  session1.isOpen();
  session1Control.setReturnValue(true,1);
  session2.beginTransaction();
  session2Control.setReturnValue(tx,1);
  session2.isOpen();
  session2Control.setReturnValue(true,1);
  session2.getFlushMode();
  session2Control.setReturnValue(FlushMode.AUTO,1);
  session2.flush();
  session2Control.setVoidCallable(1);
  session1.close();
  session1Control.setReturnValue(null,1);
  session2.close();
  session2Control.setReturnValue(null,1);
  tx.commit();
  txControl.setVoidCallable(2);
  session1.isConnected();
  session1Control.setReturnValue(true,1);
  session1.connection();
  session1Control.setReturnValue(con,2);
  session2.isConnected();
  session2Control.setReturnValue(true,1);
  session2.connection();
  session2Control.setReturnValue(con,2);
  con.isReadOnly();
  conControl.setReturnValue(false,2);
  sfControl.replay();
  session1Control.replay();
  session2Control.replay();
  conControl.replay();
  txControl.replay();
  PlatformTransactionManager tm=new HibernateTransactionManager(sf);
  final TransactionTemplate tt=new TransactionTemplate(tm);
  tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  tt.execute(new TransactionCallback(){
    public Object doInTransaction(    TransactionStatus status){
      final SessionHolder holder=(SessionHolder)TransactionSynchronizationManager.getResource(sf);
      assertTrue("Has thread session",holder != null);
      assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
      assertTrue(TransactionSynchronizationManager.isActualTransactionActive());
      tt.execute(new TransactionCallback(){
        public Object doInTransaction(        TransactionStatus status){
          HibernateTemplate ht=new HibernateTemplate(sf);
          ht.setFlushMode(HibernateTemplate.FLUSH_EAGER);
          return ht.executeFind(new HibernateCallback(){
            public Object doInHibernate(            org.hibernate.Session session){
              assertTrue("Not enclosing session",session != holder.getSession());
              assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
              assertTrue(TransactionSynchronizationManager.isActualTransactionActive());
              return null;
            }
          }
);
        }
      }
);
      assertTrue("Same thread session as before",holder.getSession() == SessionFactoryUtils.getSession(sf,false));
      assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
      assertTrue(TransactionSynchronizationManager.isActualTransactionActive());
      return null;
    }
  }
);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  sfControl.verify();
  session1Control.verify();
  session2Control.verify();
  conControl.verify();
  txControl.verify();
}
