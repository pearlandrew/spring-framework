{
  final SessionFactory sf=mock(SessionFactory.class);
  final Session session=mock(Session.class);
  Transaction tx=mock(Transaction.class);
  given(sf.openSession()).willReturn(session);
  given(session.beginTransaction()).willReturn(tx);
  HibernateTransactionManager tm=new HibernateTransactionManager(sf);
  tm.setPrepareConnection(false);
  TransactionTemplate tt=new TransactionTemplate(tm);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  tt.execute(new TransactionCallbackWithoutResult(){
    @Override public void doInTransactionWithoutResult(    TransactionStatus status){
      assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
      assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
      assertTrue(TransactionSynchronizationManager.isActualTransactionActive());
      status.flush();
    }
  }
);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  verify(session).flush();
  verify(tx).commit();
  verify(session).close();
}
