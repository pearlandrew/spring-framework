{
  MockControl sfControl=MockControl.createControl(SessionFactory.class);
  final SessionFactory sf=(SessionFactory)sfControl.getMock();
  MockControl sessionControl=MockControl.createControl(Session.class);
  final Session session=(Session)sessionControl.getMock();
  MockControl txControl=MockControl.createControl(Transaction.class);
  Transaction tx=(Transaction)txControl.getMock();
  sf.openSession();
  sfControl.setReturnValue(session,1);
  session.beginTransaction();
  sessionControl.setReturnValue(tx,1);
  session.flush();
  sessionControl.setVoidCallable(1);
  tx.commit();
  txControl.setVoidCallable(1);
  session.close();
  sessionControl.setReturnValue(null,1);
  sfControl.replay();
  sessionControl.replay();
  txControl.replay();
  HibernateTransactionManager tm=new HibernateTransactionManager(sf);
  tm.setPrepareConnection(false);
  TransactionTemplate tt=new TransactionTemplate(tm);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  tt.execute(new TransactionCallbackWithoutResult(){
    public void doInTransactionWithoutResult(    TransactionStatus status){
      assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
      assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
      assertTrue(TransactionSynchronizationManager.isActualTransactionActive());
      status.flush();
    }
  }
);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  sfControl.verify();
  sessionControl.verify();
  txControl.verify();
}
