{
  final SessionFactory sf=mock(SessionFactory.class);
  Session session1=mock(Session.class);
  Session session2=mock(Session.class);
  Connection con=mock(Connection.class);
  Transaction tx=mock(Transaction.class);
  given(sf.openSession()).willReturn(session1,session2);
  given(session1.beginTransaction()).willReturn(tx);
  given(session1.isOpen()).willReturn(true);
  given(session2.beginTransaction()).willReturn(tx);
  given(session2.isOpen()).willReturn(true);
  given(session2.getFlushMode()).willReturn(FlushMode.AUTO);
  given(session1.isConnected()).willReturn(true);
  given(session1.connection()).willReturn(con);
  given(session2.isConnected()).willReturn(true);
  given(session2.connection()).willReturn(con);
  PlatformTransactionManager tm=new HibernateTransactionManager(sf);
  final TransactionTemplate tt=new TransactionTemplate(tm);
  tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  tt.execute(new TransactionCallback(){
    @Override public Object doInTransaction(    TransactionStatus status){
      final SessionHolder holder=(SessionHolder)TransactionSynchronizationManager.getResource(sf);
      assertTrue("Has thread session",holder != null);
      assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
      assertTrue(TransactionSynchronizationManager.isActualTransactionActive());
      tt.execute(new TransactionCallback(){
        @Override public Object doInTransaction(        TransactionStatus status){
          HibernateTemplate ht=new HibernateTemplate(sf);
          ht.setFlushMode(HibernateTemplate.FLUSH_EAGER);
          return ht.executeFind(new HibernateCallback(){
            @Override public Object doInHibernate(            org.hibernate.Session session){
              assertTrue("Not enclosing session",session != holder.getSession());
              assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
              assertTrue(TransactionSynchronizationManager.isActualTransactionActive());
              return null;
            }
          }
);
        }
      }
);
      assertTrue("Same thread session as before",holder.getSession() == SessionFactoryUtils.getSession(sf,false));
      assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
      assertTrue(TransactionSynchronizationManager.isActualTransactionActive());
      return null;
    }
  }
);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  verify(session2).flush();
  verify(session1).close();
  verify(session2).close();
  verify(tx,times(2)).commit();
}
