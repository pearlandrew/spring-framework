{
  Interceptor entityInterceptor=mock(Interceptor.class);
  Connection con=mock(Connection.class);
  final SessionFactory sf=mock(SessionFactory.class);
  Session session=mock(Session.class);
  Transaction tx=mock(Transaction.class);
  given(sf.openSession(entityInterceptor)).willReturn(session);
  given(session.beginTransaction()).willReturn(tx);
  given(session.isOpen()).willReturn(true);
  given(session.isConnected()).willReturn(true);
  given(session.connection()).willReturn(con);
  HibernateTransactionManager tm=new HibernateTransactionManager(sf);
  tm.setEntityInterceptor(entityInterceptor);
  TransactionTemplate tt=new TransactionTemplate(tm);
  tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);
  final List l=new ArrayList();
  l.add("test");
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  Object result=tt.execute(new TransactionCallback(){
    @Override public Object doInTransaction(    TransactionStatus status){
      assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
      HibernateTemplate ht=new HibernateTemplate(sf);
      return ht.executeFind(new HibernateCallback(){
        @Override public Object doInHibernate(        org.hibernate.Session session) throws HibernateException {
          return l;
        }
      }
);
    }
  }
);
  assertTrue("Correct result list",result == l);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  verify(session).close();
  verify(tx).commit();
}
