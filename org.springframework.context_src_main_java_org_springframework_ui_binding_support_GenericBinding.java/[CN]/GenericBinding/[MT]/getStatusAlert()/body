{
  if (status == BindingStatus.INVALID_SOURCE_VALUE) {
    return new AbstractAlert(){
      public String getCode(){
        return "typeMismatch";
      }
      public String getMessage(){
        MessageBuilder builder=new MessageBuilder(bindingContext.getMessageSource());
        builder.code(getCode());
        if (invalidSourceValueCause instanceof ParseException) {
          ParseException e=(ParseException)invalidSourceValueCause;
          builder.arg("label",bindingContext.getLabel());
          builder.arg("value",sourceValue);
          builder.arg("errorOffset",e.getErrorOffset());
          builder.defaultMessage("Failed to bind '" + bindingContext.getLabel() + "'; the source value "+ StylerUtils.style(sourceValue)+ " has an invalid format and could no be parsed");
        }
 else {
          ConversionFailedException e=(ConversionFailedException)invalidSourceValueCause;
          builder.arg("label",new ResolvableArgument(bindingContext.getLabel()));
          builder.arg("value",sourceValue);
          builder.defaultMessage("Failed to bind '" + bindingContext.getLabel() + "'; the source value "+ StylerUtils.style(sourceValue)+ " has could not be converted to "+ e.getTargetType().getName());
        }
        return builder.build();
      }
      public Severity getSeverity(){
        return Severity.ERROR;
      }
    }
;
  }
 else   if (status == BindingStatus.COMMIT_FAILURE) {
    return new AbstractAlert(){
      public String getCode(){
        return "internalError";
      }
      public String getMessage(){
        buffer.getFlushException().printStackTrace();
        return "Internal error occurred; message = [" + buffer.getFlushException().getMessage() + "]";
      }
      public Severity getSeverity(){
        return Severity.FATAL;
      }
    }
;
  }
 else   if (status == BindingStatus.COMMITTED) {
    return new AbstractAlert(){
      public String getCode(){
        return "bindSuccess";
      }
      public String getMessage(){
        return "Binding successful";
      }
      public Severity getSeverity(){
        return Severity.INFO;
      }
    }
;
  }
 else {
    return null;
  }
}
