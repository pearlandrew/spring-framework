{
  MediaType audioBasic=new MediaType("audio","basic");
  MediaType audioWave=new MediaType("audio","wave");
  MediaType audio=new MediaType("audio");
  MediaType audio03=new MediaType("audio","*",0.3);
  MediaType audio07=new MediaType("audio","*",0.7);
  MediaType audioBasicLevel=new MediaType("audio","basic",Collections.singletonMap("level","1"));
  MediaType textHtml=new MediaType("text","html");
  MediaType allXml=new MediaType("application","*+xml");
  MediaType all=MediaType.ALL;
  Comparator<MediaType> comp=MediaType.QUALITY_VALUE_COMPARATOR;
  assertEquals("Invalid comparison result",0,comp.compare(audioBasic,audioBasic));
  assertEquals("Invalid comparison result",0,comp.compare(audio,audio));
  assertEquals("Invalid comparison result",0,comp.compare(audio07,audio07));
  assertEquals("Invalid comparison result",0,comp.compare(audio03,audio03));
  assertEquals("Invalid comparison result",0,comp.compare(audioBasicLevel,audioBasicLevel));
  assertTrue("Invalid comparison result",comp.compare(audioBasic,audio) < 0);
  assertTrue("Invalid comparison result",comp.compare(audioBasic,all) < 0);
  assertTrue("Invalid comparison result",comp.compare(audio,all) < 0);
  assertTrue("Invalid comparison result",comp.compare(MediaType.APPLICATION_XHTML_XML,allXml) < 0);
  assertTrue("Invalid comparison result",comp.compare(audio,audioBasic) > 0);
  assertTrue("Invalid comparison result",comp.compare(all,audioBasic) > 0);
  assertTrue("Invalid comparison result",comp.compare(all,audio) > 0);
  assertTrue("Invalid comparison result",comp.compare(allXml,MediaType.APPLICATION_XHTML_XML) > 0);
  assertTrue("Invalid comparison result",comp.compare(audio,audio07) < 0);
  assertTrue("Invalid comparison result",comp.compare(audio07,audio) > 0);
  assertTrue("Invalid comparison result",comp.compare(audio07,audio03) < 0);
  assertTrue("Invalid comparison result",comp.compare(audio03,audio07) > 0);
  assertTrue("Invalid comparison result",comp.compare(audio03,all) > 0);
  assertTrue("Invalid comparison result",comp.compare(all,audio03) < 0);
  assertTrue("Invalid comparison result",comp.compare(audioBasic,audioBasicLevel) > 0);
  assertTrue("Invalid comparison result",comp.compare(audioBasicLevel,audioBasic) < 0);
  assertEquals("Invalid comparison result",0,comp.compare(audioBasic,textHtml));
  assertEquals("Invalid comparison result",0,comp.compare(textHtml,audioBasic));
  assertEquals("Invalid comparison result",0,comp.compare(audioBasic,audioWave));
  assertEquals("Invalid comparison result",0,comp.compare(audioWave,audioBasic));
}
