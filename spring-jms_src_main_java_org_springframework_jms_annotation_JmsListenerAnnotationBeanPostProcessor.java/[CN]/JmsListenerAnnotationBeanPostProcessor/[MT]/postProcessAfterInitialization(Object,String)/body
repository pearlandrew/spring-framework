{
  if (!this.nonAnnotatedClasses.contains(bean.getClass())) {
    final Set<Method> annotatedMethods=new LinkedHashSet<Method>(1);
    Class<?> targetClass=AopUtils.getTargetClass(bean);
    ReflectionUtils.doWithMethods(targetClass,new ReflectionUtils.MethodCallback(){
      @Override public void doWith(      Method method) throws IllegalArgumentException, IllegalAccessException {
        for (        JmsListener jmsListener : AnnotationUtils.getRepeatableAnnotations(method,JmsListener.class,JmsListeners.class)) {
          processJmsListener(jmsListener,method,bean);
          annotatedMethods.add(method);
        }
      }
    }
);
    if (annotatedMethods.isEmpty()) {
      this.nonAnnotatedClasses.add(bean.getClass());
      if (logger.isTraceEnabled()) {
        logger.trace("No @JmsListener annotations found on bean class: " + bean.getClass());
      }
    }
 else {
      if (logger.isDebugEnabled()) {
        logger.debug(annotatedMethods.size() + " @JmsListener methods processed on bean '" + beanName+ "': "+ annotatedMethods);
      }
    }
  }
  return bean;
}
