{
  if (!this.nonAnnotatedClasses.contains(bean.getClass())) {
    Class<?> targetClass=AopUtils.getTargetClass(bean);
    Map<Method,Set<JmsListener>> annotatedMethods=MethodIntrospector.selectMethods(targetClass,new MethodIntrospector.MetadataLookup<Set<JmsListener>>(){
      @Override public Set<JmsListener> inspect(      Method method){
        Set<JmsListener> listenerMethods=AnnotatedElementUtils.getMergedRepeatableAnnotations(method,JmsListener.class,JmsListeners.class);
        return (!listenerMethods.isEmpty() ? listenerMethods : null);
      }
    }
);
    if (annotatedMethods.isEmpty()) {
      this.nonAnnotatedClasses.add(bean.getClass());
      if (logger.isTraceEnabled()) {
        logger.trace("No @JmsListener annotations found on bean type: " + bean.getClass());
      }
    }
 else {
      for (      Map.Entry<Method,Set<JmsListener>> entry : annotatedMethods.entrySet()) {
        Method method=entry.getKey();
        for (        JmsListener listener : entry.getValue()) {
          processJmsListener(listener,method,bean);
        }
      }
      if (logger.isDebugEnabled()) {
        logger.debug(annotatedMethods.size() + " @JmsListener methods processed on bean '" + beanName+ "': "+ annotatedMethods);
      }
    }
  }
  return bean;
}
