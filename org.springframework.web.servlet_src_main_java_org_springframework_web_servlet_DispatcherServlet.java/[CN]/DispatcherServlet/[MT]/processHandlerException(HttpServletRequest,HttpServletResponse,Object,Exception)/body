{
  ModelAndView exMv=null;
  for (Iterator<HandlerExceptionResolver> it=this.handlerExceptionResolvers.iterator(); exMv == null && it.hasNext(); ) {
    exMv=it.next().resolveException(request,response,handler,ex);
  }
  if (exMv != null) {
    if (exMv.isEmpty()) {
      return null;
    }
    if (logger.isDebugEnabled()) {
      logger.debug("Handler execution resulted in exception - forwarding to resolved error view: " + exMv,ex);
    }
    WebUtils.exposeErrorRequestAttributes(request,ex,getServletName());
    return exMv;
  }
  if (ex instanceof HttpRequestMethodNotSupportedException && !response.isCommitted()) {
    String[] supportedMethods=((HttpRequestMethodNotSupportedException)ex).getSupportedMethods();
    if (supportedMethods != null) {
      response.setHeader("Allow",StringUtils.arrayToDelimitedString(supportedMethods,", "));
    }
    response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED,ex.getMessage());
    return null;
  }
  throw ex;
}
