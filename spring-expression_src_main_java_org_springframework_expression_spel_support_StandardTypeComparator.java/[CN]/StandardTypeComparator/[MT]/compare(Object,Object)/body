{
  if (left == null) {
    return (right == null ? 0 : -1);
  }
 else   if (right == null) {
    return 1;
  }
  if (left instanceof Number && right instanceof Number) {
    Number leftNumber=(Number)left;
    Number rightNumber=(Number)right;
    if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) {
      BigDecimal leftBigDecimal=NumberUtils.convertNumberToTargetClass(leftNumber,BigDecimal.class);
      BigDecimal rightBigDecimal=NumberUtils.convertNumberToTargetClass(rightNumber,BigDecimal.class);
      return leftBigDecimal.compareTo(rightBigDecimal);
    }
 else     if (leftNumber instanceof Double || rightNumber instanceof Double) {
      return Double.compare(leftNumber.doubleValue(),rightNumber.doubleValue());
    }
 else     if (leftNumber instanceof Float || rightNumber instanceof Float) {
      return Float.compare(leftNumber.floatValue(),rightNumber.floatValue());
    }
 else     if (leftNumber instanceof Long || rightNumber instanceof Long) {
      return compare(leftNumber.longValue(),rightNumber.longValue());
    }
 else {
      return compare(leftNumber.intValue(),rightNumber.intValue());
    }
  }
  try {
    if (left instanceof Comparable) {
      return ((Comparable)left).compareTo(right);
    }
  }
 catch (  ClassCastException ex) {
    throw new SpelEvaluationException(ex,SpelMessage.NOT_COMPARABLE,left.getClass(),right.getClass());
  }
  throw new SpelEvaluationException(SpelMessage.NOT_COMPARABLE,left.getClass(),right.getClass());
}
