{
  Map<String,Object> propertySourceAttributes=metadata.getAnnotationAttributes(org.springframework.context.annotation.PropertySource.class.getName());
  if (propertySourceAttributes != null) {
    String name=(String)propertySourceAttributes.get("name");
    String location=(String)propertySourceAttributes.get("value");
    ClassLoader classLoader=this.resourceLoader.getClassLoader();
    ResourcePropertySource ps=StringUtils.hasText(name) ? new ResourcePropertySource(name,location,classLoader) : new ResourcePropertySource(location,classLoader);
    this.propertySources.push(ps);
  }
  Map<String,Object> componentScanAttributes=metadata.getAnnotationAttributes(ComponentScan.class.getName());
  if (componentScanAttributes != null) {
    Set<BeanDefinitionHolder> scannedBeanDefinitions=this.componentScanParser.parse(componentScanAttributes);
    for (    BeanDefinitionHolder holder : scannedBeanDefinitions) {
      if (ConfigurationClassUtils.checkConfigurationClassCandidate(holder.getBeanDefinition(),metadataReaderFactory)) {
        try {
          this.parse(holder.getBeanDefinition().getBeanClassName(),holder.getBeanName());
        }
 catch (        ConflictingBeanDefinitionException ex) {
          throw new CircularComponentScanException("A conflicting bean definition was detected while processing @ComponentScan annotations. " + "This usually indicates a circle between scanned packages.",ex);
        }
      }
    }
  }
  List<Map<String,Object>> allImportAttribs=AnnotationUtils.findAllAnnotationAttributes(Import.class,metadata.getClassName(),true);
  for (  Map<String,Object> importAttribs : allImportAttribs) {
    processImport(configClass,(String[])importAttribs.get("value"),true);
  }
  if (metadata.isAnnotated(ImportResource.class.getName())) {
    String[] resources=(String[])metadata.getAnnotationAttributes(ImportResource.class.getName()).get("value");
    Class<?> readerClass=(Class<?>)metadata.getAnnotationAttributes(ImportResource.class.getName()).get("reader");
    if (readerClass == null) {
      throw new IllegalStateException("No reader class associated with imported resources: " + StringUtils.arrayToCommaDelimitedString(resources));
    }
    for (    String resource : resources) {
      configClass.addImportedResource(resource,readerClass);
    }
  }
  Set<MethodMetadata> beanMethods=metadata.getAnnotatedMethods(Bean.class.getName());
  for (  MethodMetadata methodMetadata : beanMethods) {
    configClass.addBeanMethod(new BeanMethod(methodMetadata,configClass));
  }
}
