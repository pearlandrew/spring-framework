{
  for (  String memberClassName : metadata.getMemberClassNames()) {
    MetadataReader reader=this.metadataReaderFactory.getMetadataReader(memberClassName);
    AnnotationMetadata memberClassMetadata=reader.getAnnotationMetadata();
    if (ConfigurationClassUtils.isConfigurationCandidate(memberClassMetadata)) {
      processConfigurationClass(new ConfigurationClass(reader,true));
    }
  }
  AnnotationAttributes propertySource=attributesFor(metadata,org.springframework.context.annotation.PropertySource.class);
  if (propertySource != null) {
    String name=propertySource.getString("name");
    String[] locations=propertySource.getStringArray("value");
    ClassLoader classLoader=this.resourceLoader.getClassLoader();
    for (    String location : locations) {
      location=this.environment.resolveRequiredPlaceholders(location);
      ResourcePropertySource ps=StringUtils.hasText(name) ? new ResourcePropertySource(name,location,classLoader) : new ResourcePropertySource(location,classLoader);
      this.propertySources.push(ps);
    }
  }
  AnnotationAttributes componentScan=attributesFor(metadata,ComponentScan.class);
  if (componentScan != null) {
    Set<BeanDefinitionHolder> scannedBeanDefinitions=this.componentScanParser.parse(componentScan);
    for (    BeanDefinitionHolder holder : scannedBeanDefinitions) {
      if (ConfigurationClassUtils.checkConfigurationClassCandidate(holder.getBeanDefinition(),this.metadataReaderFactory)) {
        this.parse(holder.getBeanDefinition().getBeanClassName(),holder.getBeanName());
      }
    }
  }
  List<AnnotationAttributes> imports=findAllAnnotationAttributes(Import.class,metadata.getClassName(),true);
  for (  AnnotationAttributes importAnno : imports) {
    processImport(configClass,importAnno.getStringArray("value"),true);
  }
  if (metadata.isAnnotated(ImportResource.class.getName())) {
    AnnotationAttributes importResource=attributesFor(metadata,ImportResource.class);
    String[] resources=importResource.getStringArray("value");
    Class<? extends BeanDefinitionReader> readerClass=importResource.getClass("reader",BeanDefinitionReader.class);
    for (    String resource : resources) {
      configClass.addImportedResource(resource,readerClass);
    }
  }
  Set<MethodMetadata> beanMethods=metadata.getAnnotatedMethods(Bean.class.getName());
  for (  MethodMetadata methodMetadata : beanMethods) {
    configClass.addBeanMethod(new BeanMethod(methodMetadata,configClass));
  }
}
