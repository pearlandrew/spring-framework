{
  ApplicationEventPublisher publisher=new ApplicationEventPublisher(){
    @Override public void publishEvent(    ApplicationEvent event){
      throw new IllegalStateException();
    }
  }
;
  UserSessionRegistry registry=new DefaultUserSessionRegistry();
  this.protocolHandler.setUserSessionRegistry(registry);
  this.protocolHandler.setApplicationEventPublisher(publisher);
  this.protocolHandler.afterSessionStarted(this.session,this.channel);
  StompHeaderAccessor headers=StompHeaderAccessor.create(StompCommand.CONNECT);
  Message<byte[]> message=MessageBuilder.createMessage(EMPTY_PAYLOAD,headers.getMessageHeaders());
  TextMessage textMessage=new TextMessage(new StompEncoder().encode(message));
  this.protocolHandler.handleMessageFromClient(this.session,textMessage,this.channel);
  verify(this.channel).send(this.messageCaptor.capture());
  Message<?> actual=this.messageCaptor.getValue();
  assertNotNull(actual);
  assertEquals(StompCommand.CONNECT,StompHeaderAccessor.wrap(actual).getCommand());
  reset(this.channel);
  headers=StompHeaderAccessor.create(StompCommand.CONNECTED);
  message=MessageBuilder.createMessage(EMPTY_PAYLOAD,headers.getMessageHeaders());
  this.protocolHandler.handleMessageToClient(this.session,message);
  assertEquals(1,this.session.getSentMessages().size());
  textMessage=(TextMessage)this.session.getSentMessages().get(0);
  assertEquals("CONNECTED\n" + "user-name:joe\n" + "\n"+ "\u0000",textMessage.getPayload());
  this.protocolHandler.afterSessionEnded(this.session,CloseStatus.BAD_DATA,this.channel);
  verify(this.channel).send(this.messageCaptor.capture());
  actual=this.messageCaptor.getValue();
  assertNotNull(actual);
  assertEquals(StompCommand.DISCONNECT,StompHeaderAccessor.wrap(actual).getCommand());
}
