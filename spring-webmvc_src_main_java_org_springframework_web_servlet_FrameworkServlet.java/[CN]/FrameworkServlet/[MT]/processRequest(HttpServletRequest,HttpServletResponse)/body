{
  long startTime=System.currentTimeMillis();
  Throwable failureCause=null;
  LocaleContext previousLocaleContext=LocaleContextHolder.getLocaleContext();
  LocaleContext localeContext=buildLocaleContext(request);
  RequestAttributes previousAttributes=RequestContextHolder.getRequestAttributes();
  ServletRequestAttributes requestAttributes=null;
  if (previousAttributes == null || previousAttributes.getClass().equals(ServletRequestAttributes.class)) {
    requestAttributes=new ServletRequestAttributes(request);
  }
  initContextHolders(request,localeContext,requestAttributes);
  WebAsyncManager asyncManager=AsyncWebUtils.getAsyncManager(request);
  asyncManager.registerAsyncThreadInitializer(this.getClass().getName(),createAsyncThreadInitializer(request));
  try {
    doService(request,response);
  }
 catch (  ServletException ex) {
    failureCause=ex;
    throw ex;
  }
catch (  IOException ex) {
    failureCause=ex;
    throw ex;
  }
catch (  Throwable ex) {
    failureCause=ex;
    throw new NestedServletException("Request processing failed",ex);
  }
 finally {
    resetContextHolders(request,previousLocaleContext,previousAttributes);
    if (requestAttributes != null) {
      requestAttributes.requestCompleted();
    }
    if (logger.isDebugEnabled()) {
      if (failureCause != null) {
        this.logger.debug("Could not complete request",failureCause);
      }
 else {
        if (asyncManager.isConcurrentHandlingStarted()) {
          if (logger.isDebugEnabled()) {
            logger.debug("Leaving response open for concurrent processing");
          }
        }
 else {
          this.logger.debug("Successfully completed request");
        }
      }
    }
    if (this.publishEvents) {
      long processingTime=System.currentTimeMillis() - startTime;
      this.webApplicationContext.publishEvent(new ServletRequestHandledEvent(this,request.getRequestURI(),request.getRemoteAddr(),request.getMethod(),getServletConfig().getServletName(),WebUtils.getSessionId(request),getUsernameForRequest(request),processingTime,failureCause));
    }
  }
}
