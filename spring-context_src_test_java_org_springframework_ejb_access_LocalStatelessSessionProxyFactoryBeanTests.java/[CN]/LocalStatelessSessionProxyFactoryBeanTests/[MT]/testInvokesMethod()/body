{
  final int value=11;
  final String jndiName="foo";
  MyEjb myEjb=createMock(MyEjb.class);
  expect(myEjb.getValue()).andReturn(value);
  myEjb.remove();
  replay(myEjb);
  final MyHome home=createMock(MyHome.class);
  expect(home.create()).andReturn(myEjb);
  replay(home);
  JndiTemplate jt=new JndiTemplate(){
    @Override public Object lookup(    String name) throws NamingException {
      assertTrue(name.equals("java:comp/env/" + jndiName));
      return home;
    }
  }
;
  LocalStatelessSessionProxyFactoryBean fb=new LocalStatelessSessionProxyFactoryBean();
  fb.setJndiName(jndiName);
  fb.setResourceRef(true);
  fb.setBusinessInterface(MyBusinessMethods.class);
  fb.setJndiTemplate(jt);
  fb.afterPropertiesSet();
  MyBusinessMethods mbm=(MyBusinessMethods)fb.getObject();
  assertTrue(Proxy.isProxyClass(mbm.getClass()));
  assertTrue(mbm.getValue() == value);
  verify(myEjb);
  verify(home);
}
