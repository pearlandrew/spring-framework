{
  UserTransaction ut=mock(UserTransaction.class);
  given(ut.getStatus()).willReturn(Status.STATUS_NO_TRANSACTION,Status.STATUS_MARKED_ROLLBACK,Status.STATUS_MARKED_ROLLBACK,Status.STATUS_MARKED_ROLLBACK);
  JtaTransactionManager tm=newJtaTransactionManager(ut);
  if (failEarly) {
    tm.setFailEarlyOnGlobalRollbackOnly(true);
  }
  TransactionStatus ts=tm.getTransaction(new DefaultTransactionDefinition());
  boolean outerTransactionBoundaryReached=false;
  try {
    assertTrue("Is new transaction",ts.isNewTransaction());
    TransactionTemplate tt=new TransactionTemplate(tm);
    tt.execute(new TransactionCallbackWithoutResult(){
      @Override protected void doInTransactionWithoutResult(      TransactionStatus status){
        TransactionSynchronizationManager.registerSynchronization(new TransactionSynchronizationAdapter(){
          @Override public void afterCompletion(          int status){
            assertTrue("Correct completion status",status == TransactionSynchronization.STATUS_ROLLED_BACK);
          }
        }
);
      }
    }
);
    outerTransactionBoundaryReached=true;
    tm.commit(ts);
    fail("Should have thrown UnexpectedRollbackException");
  }
 catch (  UnexpectedRollbackException ex) {
    if (!outerTransactionBoundaryReached) {
      tm.rollback(ts);
    }
    if (failEarly) {
      assertFalse(outerTransactionBoundaryReached);
    }
 else {
      assertTrue(outerTransactionBoundaryReached);
    }
  }
  verify(ut).begin();
  if (failEarly) {
    verify(ut).rollback();
  }
 else {
    verify(ut).commit();
  }
}
