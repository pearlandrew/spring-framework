{
  MockControl utControl=MockControl.createControl(UserTransaction.class);
  UserTransaction ut=(UserTransaction)utControl.getMock();
  MockControl tmControl=MockControl.createControl(TransactionManager.class);
  TransactionManager tm=(TransactionManager)tmControl.getMock();
  MockControl txControl=MockControl.createControl(Transaction.class);
  Transaction tx=(Transaction)txControl.getMock();
  ut.getStatus();
  utControl.setReturnValue(Status.STATUS_ACTIVE,1);
  tm.suspend();
  tmControl.setReturnValue(tx,1);
  tm.resume(tx);
  tmControl.setVoidCallable(1);
  utControl.replay();
  tmControl.replay();
  JtaTransactionManager ptm=newJtaTransactionManager(ut,tm);
  TransactionTemplate tt=new TransactionTemplate(ptm);
  tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_NOT_SUPPORTED);
  assertFalse(TransactionSynchronizationManager.isSynchronizationActive());
  tt.execute(new TransactionCallbackWithoutResult(){
    @Override protected void doInTransactionWithoutResult(    TransactionStatus status){
      assertTrue(TransactionSynchronizationManager.isSynchronizationActive());
      status.setRollbackOnly();
    }
  }
);
  assertFalse(TransactionSynchronizationManager.isSynchronizationActive());
  utControl.verify();
  tmControl.verify();
}
