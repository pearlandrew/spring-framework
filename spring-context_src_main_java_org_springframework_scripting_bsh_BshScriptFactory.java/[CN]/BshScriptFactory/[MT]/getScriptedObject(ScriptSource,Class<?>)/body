{
  Class<?> clazz;
  try {
synchronized (this.scriptClassMonitor) {
      boolean requiresScriptEvaluation=(this.wasModifiedForTypeCheck && this.scriptClass == null);
      this.wasModifiedForTypeCheck=false;
      if (scriptSource.isModified() || requiresScriptEvaluation) {
        Object result=BshScriptUtils.evaluateBshScript(scriptSource.getScriptAsString(),actualInterfaces,this.beanClassLoader);
        if (result instanceof Class) {
          this.scriptClass=(Class<?>)result;
        }
 else {
          return result;
        }
      }
      clazz=this.scriptClass;
    }
  }
 catch (  EvalError ex) {
    this.scriptClass=null;
    throw new ScriptCompilationException(scriptSource,ex);
  }
  if (clazz != null) {
    try {
      return ReflectionUtils.accessibleConstructor(clazz).newInstance();
    }
 catch (    Throwable ex) {
      throw new ScriptCompilationException(scriptSource,"Could not instantiate script class: " + clazz.getName(),ex);
    }
  }
 else {
    try {
      return BshScriptUtils.createBshObject(scriptSource.getScriptAsString(),actualInterfaces,this.beanClassLoader);
    }
 catch (    EvalError ex) {
      throw new ScriptCompilationException(scriptSource,ex);
    }
  }
}
