{
  try {
    TypeConverter typeConverter=context.getTypeConverter();
    Class<?> type=context.getTypeLocator().findType(typeName);
    Constructor<?>[] ctors=type.getConstructors();
    Arrays.sort(ctors,new Comparator<Constructor<?>>(){
      @Override public int compare(      Constructor<?> c1,      Constructor<?> c2){
        int c1pl=c1.getParameterTypes().length;
        int c2pl=c2.getParameterTypes().length;
        return (c1pl < c2pl ? -1 : (c1pl > c2pl ? 1 : 0));
      }
    }
);
    Constructor<?> closeMatch=null;
    Constructor<?> matchRequiringConversion=null;
    for (    Constructor<?> ctor : ctors) {
      Class<?>[] paramTypes=ctor.getParameterTypes();
      List<TypeDescriptor> paramDescriptors=new ArrayList<TypeDescriptor>(paramTypes.length);
      for (int i=0; i < paramTypes.length; i++) {
        paramDescriptors.add(new TypeDescriptor(new MethodParameter(ctor,i)));
      }
      ReflectionHelper.ArgumentsMatchInfo matchInfo=null;
      if (ctor.isVarArgs() && argumentTypes.size() >= paramTypes.length - 1) {
        matchInfo=ReflectionHelper.compareArgumentsVarargs(paramDescriptors,argumentTypes,typeConverter);
      }
 else       if (paramTypes.length == argumentTypes.size()) {
        matchInfo=ReflectionHelper.compareArguments(paramDescriptors,argumentTypes,typeConverter);
      }
      if (matchInfo != null) {
        if (matchInfo.isExactMatch()) {
          return new ReflectiveConstructorExecutor(ctor);
        }
 else         if (matchInfo.isCloseMatch()) {
          closeMatch=ctor;
        }
 else         if (matchInfo.isMatchRequiringConversion()) {
          matchRequiringConversion=ctor;
        }
      }
    }
    if (closeMatch != null) {
      return new ReflectiveConstructorExecutor(closeMatch);
    }
 else     if (matchRequiringConversion != null) {
      return new ReflectiveConstructorExecutor(matchRequiringConversion);
    }
 else {
      return null;
    }
  }
 catch (  EvaluationException ex) {
    throw new AccessException("Failed to resolve constructor",ex);
  }
}
