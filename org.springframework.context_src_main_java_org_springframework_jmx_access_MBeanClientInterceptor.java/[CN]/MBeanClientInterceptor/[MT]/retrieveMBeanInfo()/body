{
  try {
    MBeanInfo info=this.serverToUse.getMBeanInfo(this.objectName);
    MBeanAttributeInfo[] attributeInfo=info.getAttributes();
    this.allowedAttributes=new HashMap<String,MBeanAttributeInfo>(attributeInfo.length);
    for (    MBeanAttributeInfo infoEle : attributeInfo) {
      this.allowedAttributes.put(infoEle.getName(),infoEle);
    }
    MBeanOperationInfo[] operationInfo=info.getOperations();
    this.allowedOperations=new HashMap<MethodCacheKey,MBeanOperationInfo>(operationInfo.length);
    for (    MBeanOperationInfo infoEle : operationInfo) {
      Class[] paramTypes=JmxUtils.parameterInfoToTypes(infoEle.getSignature(),this.beanClassLoader);
      this.allowedOperations.put(new MethodCacheKey(infoEle.getName(),paramTypes),infoEle);
    }
  }
 catch (  ClassNotFoundException ex) {
    throw new MBeanInfoRetrievalException("Unable to locate class specified in method signature",ex);
  }
catch (  IntrospectionException ex) {
    throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName + "]",ex);
  }
catch (  InstanceNotFoundException ex) {
    throw new MBeanInfoRetrievalException("Unable to obtain MBean info for bean [" + this.objectName + "]: it is likely that this bean was unregistered during the proxy creation process",ex);
  }
catch (  ReflectionException ex) {
    throw new MBeanInfoRetrievalException("Unable to read MBean info for bean [ " + this.objectName + "]",ex);
  }
catch (  IOException ex) {
    throw new MBeanInfoRetrievalException("An IOException occurred when communicating with the " + "MBeanServer. It is likely that you are communicating with a remote MBeanServer. " + "Check the inner exception for exact details.",ex);
  }
}
