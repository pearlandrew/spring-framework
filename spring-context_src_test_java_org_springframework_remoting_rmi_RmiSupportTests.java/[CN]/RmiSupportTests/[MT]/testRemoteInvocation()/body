{
  final RemoteBean rb=new RemoteBean();
  final Method setNameMethod=rb.getClass().getDeclaredMethod("setName",new Class<?>[]{String.class});
  MethodInvocation mi=new MethodInvocation(){
    public Method getMethod(){
      return setNameMethod;
    }
    public Object[] getArguments(){
      return new Object[]{"bla"};
    }
    public Object proceed() throws Throwable {
      throw new UnsupportedOperationException();
    }
    public Object getThis(){
      return rb;
    }
    public AccessibleObject getStaticPart(){
      return setNameMethod;
    }
  }
;
  RemoteInvocation inv=new RemoteInvocation(mi);
  assertEquals("setName",inv.getMethodName());
  assertEquals("bla",inv.getArguments()[0]);
  assertEquals(String.class,inv.getParameterTypes()[0]);
  inv=new RemoteInvocation();
  inv.setArguments(new Object[]{"bla"});
  assertEquals("bla",inv.getArguments()[0]);
  inv.setMethodName("setName");
  assertEquals("setName",inv.getMethodName());
  inv.setParameterTypes(new Class<?>[]{String.class});
  assertEquals(String.class,inv.getParameterTypes()[0]);
  inv=new RemoteInvocation("setName",new Class<?>[]{String.class},new Object[]{"bla"});
  assertEquals("bla",inv.getArguments()[0]);
  assertEquals("setName",inv.getMethodName());
  assertEquals(String.class,inv.getParameterTypes()[0]);
}
