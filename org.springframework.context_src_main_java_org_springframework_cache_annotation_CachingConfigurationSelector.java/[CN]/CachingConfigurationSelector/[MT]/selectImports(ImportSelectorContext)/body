{
  AnnotationMetadata importingClassMetadata=context.getImportingClassMetadata();
  BeanDefinitionRegistry registry=context.getBeanDefinitionRegistry();
  Map<String,Object> enableCaching=importingClassMetadata.getAnnotationAttributes(EnableCaching.class.getName());
  Assert.notNull(enableCaching,"@EnableCaching is not present on importing class " + importingClassMetadata.getClassName());
switch ((AdviceMode)enableCaching.get("mode")) {
case PROXY:
    AopConfigUtils.registerAutoProxyCreatorIfNecessary(registry);
  if ((Boolean)enableCaching.get("proxyTargetClass")) {
    AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry);
  }
return new String[]{ProxyCachingConfiguration.class.getName()};
case ASPECTJ:
return new String[]{"org.springframework.cache.aspectj.AspectJCachingConfiguration"};
default :
throw new IllegalArgumentException("Unknown AdviceMode " + enableCaching.get("mode"));
}
}
