{
  BindingRulesBuilder builder=new BindingRulesBuilder(TestBean.class);
  builder.bind("string");
  builder.bind("integer").required();
  builder.bind("currency").formatWith(new CurrencyFormatter()).required();
  builder.bind("addresses").formatWith(new AddressListFormatter()).formatElementsWith(new AddressFormatter()).required();
  builder.bind("addresses.street");
  builder.bind("addresses.city");
  builder.bind("addresses.state");
  builder.bind("addresses.zip");
  builder.bind("favoriteFoodsByGroup").formatWith(new FavoriteFoodGroupMapFormatter()).formatElementsWith(new FoodEntryFormatter());
  builder.bind("favoriteFoodsByGroup.name");
  List<BindingRule> rules=builder.getBindingRules();
  assertEquals(10,rules.size());
  assertEquals("string",rules.get(0).getPropertyPath());
  assertNull(rules.get(0).getFormatter());
  assertFalse(rules.get(0).isRequired());
  assertFalse(rules.get(0).isCollectionBinding());
  assertNull(rules.get(0).getValueFormatter());
  assertEquals("integer",rules.get(1).getPropertyPath());
  assertNull(rules.get(1).getFormatter());
  assertTrue(rules.get(1).isRequired());
  assertFalse(rules.get(1).isCollectionBinding());
  assertNull(rules.get(1).getValueFormatter());
  assertEquals("currency",rules.get(2).getPropertyPath());
  assertTrue(rules.get(2).getFormatter() instanceof CurrencyFormatter);
  assertFalse(rules.get(2).isRequired());
  assertFalse(rules.get(2).isCollectionBinding());
  assertNull(rules.get(2).getValueFormatter());
  assertEquals("addresses",rules.get(3).getPropertyPath());
  assertTrue(rules.get(3).getFormatter() instanceof AddressListFormatter);
  assertFalse(rules.get(3).isRequired());
  assertTrue(rules.get(3).isCollectionBinding());
  assertTrue(rules.get(3).getValueFormatter() instanceof AddressFormatter);
  assertTrue(rules.get(8).getFormatter() instanceof FavoriteFoodGroupMapFormatter);
  assertFalse(rules.get(8).isRequired());
  assertTrue(rules.get(8).isCollectionBinding());
  assertTrue(rules.get(8).getValueFormatter() instanceof FoodEntryFormatter);
}
