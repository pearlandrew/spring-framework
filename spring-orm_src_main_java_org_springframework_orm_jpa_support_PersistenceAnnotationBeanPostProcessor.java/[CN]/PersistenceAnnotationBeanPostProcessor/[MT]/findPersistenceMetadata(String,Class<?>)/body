{
  String cacheKey=(StringUtils.hasLength(beanName) ? beanName : clazz.getName());
  InjectionMetadata metadata=this.injectionMetadataCache.get(cacheKey);
  if (InjectionMetadata.needsRefresh(metadata,clazz)) {
synchronized (this.injectionMetadataCache) {
      metadata=this.injectionMetadataCache.get(cacheKey);
      if (InjectionMetadata.needsRefresh(metadata,clazz)) {
        LinkedList<InjectionMetadata.InjectedElement> elements=new LinkedList<InjectionMetadata.InjectedElement>();
        Class<?> targetClass=clazz;
        do {
          LinkedList<InjectionMetadata.InjectedElement> currElements=new LinkedList<InjectionMetadata.InjectedElement>();
          for (          Field field : targetClass.getDeclaredFields()) {
            PersistenceContext pc=field.getAnnotation(PersistenceContext.class);
            PersistenceUnit pu=field.getAnnotation(PersistenceUnit.class);
            if (pc != null || pu != null) {
              if (Modifier.isStatic(field.getModifiers())) {
                throw new IllegalStateException("Persistence annotations are not supported on static fields");
              }
              currElements.add(new PersistenceElement(field,null));
            }
          }
          for (          Method method : targetClass.getDeclaredMethods()) {
            PersistenceContext pc=method.getAnnotation(PersistenceContext.class);
            PersistenceUnit pu=method.getAnnotation(PersistenceUnit.class);
            if ((pc != null || pu != null) && !method.isBridge() && method.equals(ClassUtils.getMostSpecificMethod(method,clazz))) {
              if (Modifier.isStatic(method.getModifiers())) {
                throw new IllegalStateException("Persistence annotations are not supported on static methods");
              }
              if (method.getParameterTypes().length != 1) {
                throw new IllegalStateException("Persistence annotation requires a single-arg method: " + method);
              }
              PropertyDescriptor pd=BeanUtils.findPropertyForMethod(method);
              currElements.add(new PersistenceElement(method,pd));
            }
          }
          elements.addAll(0,currElements);
          targetClass=targetClass.getSuperclass();
        }
 while (targetClass != null && targetClass != Object.class);
        metadata=new InjectionMetadata(clazz,elements);
        this.injectionMetadataCache.put(cacheKey,metadata);
      }
    }
  }
  return metadata;
}
