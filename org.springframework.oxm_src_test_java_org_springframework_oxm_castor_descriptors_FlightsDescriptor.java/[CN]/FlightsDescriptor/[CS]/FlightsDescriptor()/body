{
  super();
  _nsURI="http://samples.springframework.org/flight";
  _xmlName="flights";
  _elementDefinition=true;
  setCompositorAsSequence();
  org.exolab.castor.xml.util.XMLFieldDescriptorImpl desc=null;
  org.exolab.castor.mapping.FieldHandler handler=null;
  org.exolab.castor.xml.FieldValidator fieldValidator=null;
  desc=new org.exolab.castor.xml.util.XMLFieldDescriptorImpl(org.springframework.oxm.castor.Flight.class,"_flightList","flight",org.exolab.castor.xml.NodeType.Element);
  handler=new org.exolab.castor.xml.XMLFieldHandler(){
    public java.lang.Object getValue(    java.lang.Object object) throws IllegalStateException {
      Flights target=(Flights)object;
      return target.getFlight();
    }
    public void setValue(    java.lang.Object object,    java.lang.Object value) throws IllegalStateException, IllegalArgumentException {
      try {
        Flights target=(Flights)object;
        target.addFlight((org.springframework.oxm.castor.Flight)value);
      }
 catch (      java.lang.Exception ex) {
        throw new IllegalStateException(ex.toString());
      }
    }
    public void resetValue(    Object object) throws IllegalStateException, IllegalArgumentException {
      try {
        Flights target=(Flights)object;
        target.removeAllFlight();
      }
 catch (      java.lang.Exception ex) {
        throw new IllegalStateException(ex.toString());
      }
    }
    public java.lang.Object newInstance(    java.lang.Object parent){
      return new org.springframework.oxm.castor.Flight();
    }
  }
;
  desc.setHandler(handler);
  desc.setNameSpaceURI("http://samples.springframework.org/flight");
  desc.setRequired(true);
  desc.setMultivalued(true);
  addFieldDescriptor(desc);
  fieldValidator=new org.exolab.castor.xml.FieldValidator();
  fieldValidator.setMinOccurs(1);
{
  }
  desc.setValidator(fieldValidator);
}
