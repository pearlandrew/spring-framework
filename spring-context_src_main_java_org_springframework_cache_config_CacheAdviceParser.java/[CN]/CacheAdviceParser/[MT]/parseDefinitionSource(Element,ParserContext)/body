{
  Props prop=new Props(definition);
  ManagedMap<TypedStringValue,Collection<CacheOperation>> cacheOpMap=new ManagedMap<>();
  cacheOpMap.setSource(parserContext.extractSource(definition));
  List<Element> cacheableCacheMethods=DomUtils.getChildElementsByTagName(definition,CACHEABLE_ELEMENT);
  for (  Element opElement : cacheableCacheMethods) {
    String name=prop.merge(opElement,parserContext.getReaderContext());
    TypedStringValue nameHolder=new TypedStringValue(name);
    nameHolder.setSource(parserContext.extractSource(opElement));
    CacheableOperation.Builder builder=prop.merge(opElement,parserContext.getReaderContext(),new CacheableOperation.Builder());
    builder.setUnless(getAttributeValue(opElement,"unless",""));
    builder.setSync(Boolean.valueOf(getAttributeValue(opElement,"sync","false")));
    Collection<CacheOperation> col=cacheOpMap.get(nameHolder);
    if (col == null) {
      col=new ArrayList<>(2);
      cacheOpMap.put(nameHolder,col);
    }
    col.add(builder.build());
  }
  List<Element> evictCacheMethods=DomUtils.getChildElementsByTagName(definition,CACHE_EVICT_ELEMENT);
  for (  Element opElement : evictCacheMethods) {
    String name=prop.merge(opElement,parserContext.getReaderContext());
    TypedStringValue nameHolder=new TypedStringValue(name);
    nameHolder.setSource(parserContext.extractSource(opElement));
    CacheEvictOperation.Builder builder=prop.merge(opElement,parserContext.getReaderContext(),new CacheEvictOperation.Builder());
    String wide=opElement.getAttribute("all-entries");
    if (StringUtils.hasText(wide)) {
      builder.setCacheWide(Boolean.valueOf(wide.trim()));
    }
    String after=opElement.getAttribute("before-invocation");
    if (StringUtils.hasText(after)) {
      builder.setBeforeInvocation(Boolean.valueOf(after.trim()));
    }
    Collection<CacheOperation> col=cacheOpMap.get(nameHolder);
    if (col == null) {
      col=new ArrayList<>(2);
      cacheOpMap.put(nameHolder,col);
    }
    col.add(builder.build());
  }
  List<Element> putCacheMethods=DomUtils.getChildElementsByTagName(definition,CACHE_PUT_ELEMENT);
  for (  Element opElement : putCacheMethods) {
    String name=prop.merge(opElement,parserContext.getReaderContext());
    TypedStringValue nameHolder=new TypedStringValue(name);
    nameHolder.setSource(parserContext.extractSource(opElement));
    CachePutOperation.Builder builder=prop.merge(opElement,parserContext.getReaderContext(),new CachePutOperation.Builder());
    builder.setUnless(getAttributeValue(opElement,"unless",""));
    Collection<CacheOperation> col=cacheOpMap.get(nameHolder);
    if (col == null) {
      col=new ArrayList<>(2);
      cacheOpMap.put(nameHolder,col);
    }
    col.add(builder.build());
  }
  RootBeanDefinition attributeSourceDefinition=new RootBeanDefinition(NameMatchCacheOperationSource.class);
  attributeSourceDefinition.setSource(parserContext.extractSource(definition));
  attributeSourceDefinition.getPropertyValues().add("nameMap",cacheOpMap);
  return attributeSourceDefinition;
}
