{
class TestRedirectView extends RedirectView {
    public boolean queryPropertiesCalled=false;
    /** 
 * Test whether this callback method is called with correct args
 */
    @Override protected Map<String,Object> queryProperties(    Map<String,Object> model){
      assertTrue("Map and model must be equal.",map.equals(model));
      this.queryPropertiesCalled=true;
      return super.queryProperties(model);
    }
  }
  TestRedirectView rv=new TestRedirectView();
  rv.setUrl(url);
  rv.setContextRelative(contextRelative);
  rv.setExposeModelAttributes(exposeModelAttributes);
  HttpServletRequest request=createNiceMock("request",HttpServletRequest.class);
  if (exposeModelAttributes) {
    expect(request.getCharacterEncoding()).andReturn(WebUtils.DEFAULT_CHARACTER_ENCODING);
  }
  if (contextRelative) {
    expectedUrlForEncoding="/context" + expectedUrlForEncoding;
    expect(request.getContextPath()).andReturn("/context");
  }
  expect(request.getAttribute(DispatcherServlet.OUTPUT_FLASH_MAP_ATTRIBUTE)).andReturn(new FlashMap());
  FlashMapManager flashMapManager=new SessionFlashMapManager();
  expect(request.getAttribute(DispatcherServlet.FLASH_MAP_MANAGER_ATTRIBUTE)).andReturn(flashMapManager);
  HttpServletResponse response=createMock("response",HttpServletResponse.class);
  expect(response.encodeRedirectURL(expectedUrlForEncoding)).andReturn(expectedUrlForEncoding);
  response.sendRedirect(expectedUrlForEncoding);
  replay(request,response);
  rv.render(map,request,response);
  if (exposeModelAttributes) {
    assertTrue("queryProperties() should have been called.",rv.queryPropertiesCalled);
  }
  verify(request,response);
}
