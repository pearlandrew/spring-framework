{
  if (logger.isDebugEnabled()) {
    logger.debug("Initiating handshake for " + request.getURI() + ", headers="+ request.getHeaders());
  }
  if (!HttpMethod.GET.equals(request.getMethod())) {
    response.setStatusCode(HttpStatus.METHOD_NOT_ALLOWED);
    response.getHeaders().setAllow(Collections.singleton(HttpMethod.GET));
    logger.debug("Only HTTP GET is allowed, current method is " + request.getMethod());
    return false;
  }
  if (!"WebSocket".equalsIgnoreCase(request.getHeaders().getUpgrade())) {
    handleInvalidUpgradeHeader(request,response);
    return false;
  }
  if (!request.getHeaders().getConnection().contains("Upgrade") && !request.getHeaders().getConnection().contains("upgrade")) {
    handleInvalidConnectHeader(request,response);
    return false;
  }
  if (!isWebSocketVersionSupported(request)) {
    handleWebSocketVersionNotSupported(request,response);
    return false;
  }
  if (!isValidOrigin(request)) {
    response.setStatusCode(HttpStatus.FORBIDDEN);
    return false;
  }
  String wsKey=request.getHeaders().getSecWebSocketKey();
  if (wsKey == null) {
    logger.debug("Missing \"Sec-WebSocket-Key\" header");
    response.setStatusCode(HttpStatus.BAD_REQUEST);
    return false;
  }
  String selectedProtocol=selectProtocol(request.getHeaders().getSecWebSocketProtocol());
  if (logger.isDebugEnabled()) {
    logger.debug("Upgrading request");
  }
  this.requestUpgradeStrategy.upgrade(request,response,selectedProtocol,webSocketHandler,attributes);
  return true;
}
