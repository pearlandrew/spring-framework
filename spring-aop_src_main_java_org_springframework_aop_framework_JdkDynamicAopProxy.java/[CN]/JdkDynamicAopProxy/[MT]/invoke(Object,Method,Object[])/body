{
  MethodInvocation invocation;
  Object oldProxy=null;
  boolean setProxyContext=false;
  TargetSource targetSource=this.advised.targetSource;
  Class targetClass=null;
  Object target=null;
  try {
    if (!this.equalsDefined && AopUtils.isEqualsMethod(method)) {
      return equals(args[0]);
    }
    if (!this.hashCodeDefined && AopUtils.isHashCodeMethod(method)) {
      return hashCode();
    }
    if (!this.advised.opaque && method.getDeclaringClass().isInterface() && method.getDeclaringClass().isAssignableFrom(Advised.class)) {
      return AopUtils.invokeJoinpointUsingReflection(this.advised,method,args);
    }
    Object retVal;
    if (this.advised.exposeProxy) {
      oldProxy=AopContext.setCurrentProxy(proxy);
      setProxyContext=true;
    }
    target=targetSource.getTarget();
    if (target != null) {
      targetClass=target.getClass();
    }
    List<Object> chain=this.advised.getInterceptorsAndDynamicInterceptionAdvice(method,targetClass);
    if (chain.isEmpty()) {
      retVal=AopUtils.invokeJoinpointUsingReflection(target,method,args);
    }
 else {
      invocation=new ReflectiveMethodInvocation(proxy,target,method,args,targetClass,chain);
      retVal=invocation.proceed();
    }
    Class<?> returnType=method.getReturnType();
    if (retVal != null && retVal == target && returnType.isInstance(proxy) && !RawTargetAccess.class.isAssignableFrom(method.getDeclaringClass())) {
      retVal=proxy;
    }
 else     if (retVal == null && returnType != Void.TYPE && returnType.isPrimitive()) {
      throw new AopInvocationException("Null return value from advice does not match primitive return type for: " + method);
    }
    return retVal;
  }
  finally {
    if (target != null && !targetSource.isStatic()) {
      targetSource.releaseTarget(target);
    }
    if (setProxyContext) {
      AopContext.setCurrentProxy(oldProxy);
    }
  }
}
