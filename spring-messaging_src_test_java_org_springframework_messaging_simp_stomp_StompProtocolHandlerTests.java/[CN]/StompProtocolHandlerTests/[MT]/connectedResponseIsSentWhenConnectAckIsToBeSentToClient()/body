{
  StompHeaderAccessor connectHeaders=StompHeaderAccessor.create(StompCommand.CONNECT);
  connectHeaders.setHeartbeat(10000,10000);
  connectHeaders.setNativeHeader(StompHeaderAccessor.STOMP_ACCEPT_VERSION_HEADER,"1.0,1.1");
  Message<?> connectMessage=MessageBuilder.withPayloadAndHeaders(new byte[0],connectHeaders).build();
  SimpMessageHeaderAccessor connectAckHeaders=SimpMessageHeaderAccessor.create(SimpMessageType.CONNECT_ACK);
  connectAckHeaders.setHeader(SimpMessageHeaderAccessor.CONNECT_MESSAGE_HEADER,connectMessage);
  Message<byte[]> connectAck=MessageBuilder.withPayloadAndHeaders(new byte[0],connectAckHeaders).build();
  this.stompHandler.handleMessageToClient(this.session,connectAck);
  verifyNoMoreInteractions(this.channel);
  assertEquals(1,this.session.getSentMessages().size());
  TextMessage textMessage=(TextMessage)this.session.getSentMessages().get(0);
  Message<?> message=new StompDecoder().decode(ByteBuffer.wrap(textMessage.getPayload().getBytes()));
  StompHeaderAccessor replyHeaders=StompHeaderAccessor.wrap(message);
  assertEquals(StompCommand.CONNECTED,replyHeaders.getCommand());
  assertEquals("1.1",replyHeaders.getVersion());
  assertArrayEquals(new long[]{0,0},replyHeaders.getHeartbeat());
  assertEquals("joe",replyHeaders.getNativeHeader("user-name").get(0));
  assertEquals("s1",replyHeaders.getNativeHeader("queue-suffix").get(0));
}
