{
  Set<BeanDefinitionHolder> factoryBeanDefinitions=new LinkedHashSet<BeanDefinitionHolder>();
  for (  BeanDefinitionHolder beanDefinitionHolder : beanDefinitions) {
    Set<BeanDefinition> candidates=findCandidateFactoryMethods(beanDefinitionHolder);
    for (    BeanDefinition candidate : candidates) {
      BeanDefinitionHolder definitionHolder;
      if (candidate.getBeanClassName().equals("org.springframework.aop.scope.ScopedProxyFactoryBean")) {
        String scopedFactoryBeanName="scopedTarget." + candidate.getPropertyValues().getPropertyValue("targetBeanName").getValue();
        definitionHolder=new BeanDefinitionHolder(candidate,scopedFactoryBeanName);
      }
 else {
        String configurationComponentBeanName=beanDefinitionHolder.getBeanName();
        String factoryMethodName=candidate.getFactoryMethodName();
        String beanName=createFactoryBeanName(configurationComponentBeanName,factoryMethodName);
        definitionHolder=new BeanDefinitionHolder(candidate,beanName);
      }
      factoryBeanDefinitions.add(definitionHolder);
      registerBeanDefinition(definitionHolder,this.registry);
    }
  }
  beanDefinitions.addAll(factoryBeanDefinitions);
}
