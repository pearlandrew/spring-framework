{
  if (!this.nonAnnotatedClasses.contains(targetType)) {
    final Set<Method> annotatedMethods=new LinkedHashSet<Method>(1);
    Method[] methods=ReflectionUtils.getUniqueDeclaredMethods(targetType);
    for (    Method method : methods) {
      EventListener eventListener=AnnotationUtils.findAnnotation(method,EventListener.class);
      if (eventListener == null) {
        continue;
      }
      for (      EventListenerFactory factory : factories) {
        if (factory.supportsMethod(method)) {
          ApplicationListener<?> applicationListener=factory.createApplicationListener(beanName,targetType,method);
          if (applicationListener instanceof ApplicationListenerMethodAdapter) {
            ((ApplicationListenerMethodAdapter)applicationListener).init(this.applicationContext,this.evaluator);
          }
          this.applicationContext.addApplicationListener(applicationListener);
          annotatedMethods.add(method);
          break;
        }
      }
    }
    if (annotatedMethods.isEmpty()) {
      this.nonAnnotatedClasses.add(targetType);
      if (logger.isTraceEnabled()) {
        logger.trace("No @EventListener annotations found on bean class: " + targetType);
      }
    }
 else {
      if (logger.isDebugEnabled()) {
        logger.debug(annotatedMethods.size() + " @EventListener methods processed on bean '" + beanName+ "': "+ annotatedMethods);
      }
    }
  }
}
