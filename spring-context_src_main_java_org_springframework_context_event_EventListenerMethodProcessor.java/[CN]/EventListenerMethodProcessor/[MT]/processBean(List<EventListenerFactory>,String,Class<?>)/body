{
  if (!this.nonAnnotatedClasses.contains(targetType)) {
    Map<Method,EventListener> annotatedMethods=MethodIntrospector.selectMethods(targetType,new MethodIntrospector.MetadataLookup<EventListener>(){
      @Override public EventListener inspect(      Method method){
        return AnnotationUtils.findAnnotation(method,EventListener.class);
      }
    }
);
    if (annotatedMethods.isEmpty()) {
      this.nonAnnotatedClasses.add(targetType);
      if (logger.isTraceEnabled()) {
        logger.trace("No @EventListener annotations found on bean class: " + targetType);
      }
    }
 else {
      for (      Method method : annotatedMethods.keySet()) {
        for (        EventListenerFactory factory : factories) {
          if (factory.supportsMethod(method)) {
            Method methodToUse=AopUtils.selectInvocableMethod(method,this.applicationContext.getType(beanName));
            ApplicationListener<?> applicationListener=factory.createApplicationListener(beanName,targetType,methodToUse);
            if (applicationListener instanceof ApplicationListenerMethodAdapter) {
              ((ApplicationListenerMethodAdapter)applicationListener).init(this.applicationContext,this.evaluator);
            }
            this.applicationContext.addApplicationListener(applicationListener);
            break;
          }
        }
      }
      if (logger.isDebugEnabled()) {
        logger.debug(annotatedMethods.size() + " @EventListener methods processed on bean '" + beanName+ "': "+ annotatedMethods);
      }
    }
  }
}
