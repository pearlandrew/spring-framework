{
  InjectionMetadata metadata=this.injectionMetadataCache.get(clazz);
  if (metadata == null) {
synchronized (this.injectionMetadataCache) {
      metadata=this.injectionMetadataCache.get(clazz);
      if (metadata == null) {
        final InjectionMetadata newMetadata=new InjectionMetadata(clazz);
        ReflectionUtils.doWithFields(clazz,new ReflectionUtils.FieldCallback(){
          public void doWith(          Field field){
            if (webServiceRefClass != null && field.isAnnotationPresent(webServiceRefClass)) {
              if (Modifier.isStatic(field.getModifiers())) {
                throw new IllegalStateException("@WebServiceRef annotation is not supported on static fields");
              }
              newMetadata.addInjectedField(new WebServiceRefElement(field,null));
            }
 else             if (ejbRefClass != null && field.isAnnotationPresent(ejbRefClass)) {
              if (Modifier.isStatic(field.getModifiers())) {
                throw new IllegalStateException("@EJB annotation is not supported on static fields");
              }
              newMetadata.addInjectedField(new EjbRefElement(field,null));
            }
 else             if (field.isAnnotationPresent(Resource.class)) {
              if (Modifier.isStatic(field.getModifiers())) {
                throw new IllegalStateException("@Resource annotation is not supported on static fields");
              }
              if (!ignoredResourceTypes.contains(field.getType().getName())) {
                newMetadata.addInjectedField(new ResourceElement(field,null));
              }
            }
          }
        }
);
        ReflectionUtils.doWithMethods(clazz,new ReflectionUtils.MethodCallback(){
          public void doWith(          Method method){
            if (webServiceRefClass != null && method.isAnnotationPresent(webServiceRefClass) && method.equals(ClassUtils.getMostSpecificMethod(method,clazz))) {
              if (Modifier.isStatic(method.getModifiers())) {
                throw new IllegalStateException("@WebServiceRef annotation is not supported on static methods");
              }
              if (method.getParameterTypes().length != 1) {
                throw new IllegalStateException("@WebServiceRef annotation requires a single-arg method: " + method);
              }
              PropertyDescriptor pd=BeanUtils.findPropertyForMethod(method);
              newMetadata.addInjectedMethod(new WebServiceRefElement(method,pd));
            }
 else             if (ejbRefClass != null && method.isAnnotationPresent(ejbRefClass) && method.equals(ClassUtils.getMostSpecificMethod(method,clazz))) {
              if (Modifier.isStatic(method.getModifiers())) {
                throw new IllegalStateException("@EJB annotation is not supported on static methods");
              }
              if (method.getParameterTypes().length != 1) {
                throw new IllegalStateException("@EJB annotation requires a single-arg method: " + method);
              }
              PropertyDescriptor pd=BeanUtils.findPropertyForMethod(method);
              newMetadata.addInjectedMethod(new EjbRefElement(method,pd));
            }
 else             if (method.isAnnotationPresent(Resource.class) && method.equals(ClassUtils.getMostSpecificMethod(method,clazz))) {
              if (Modifier.isStatic(method.getModifiers())) {
                throw new IllegalStateException("@Resource annotation is not supported on static methods");
              }
              Class[] paramTypes=method.getParameterTypes();
              if (paramTypes.length != 1) {
                throw new IllegalStateException("@Resource annotation requires a single-arg method: " + method);
              }
              if (!ignoredResourceTypes.contains(paramTypes[0].getName())) {
                PropertyDescriptor pd=BeanUtils.findPropertyForMethod(method);
                newMetadata.addInjectedMethod(new ResourceElement(method,pd));
              }
            }
          }
        }
);
        metadata=newMetadata;
        this.injectionMetadataCache.put(clazz,metadata);
      }
    }
  }
  return metadata;
}
