{
  JmsTemplate template=createTemplate();
  template.setConnectionFactory(connectionFactory);
  String destinationName="testDestination";
  if (useDefaultDestination) {
    if (explicitDestination) {
      template.setDefaultDestination(queue);
    }
 else {
      template.setDefaultDestinationName(destinationName);
    }
  }
  if (disableIdAndTimestamp) {
    template.setMessageIdEnabled(false);
    template.setMessageTimestampEnabled(false);
  }
  MessageProducer messageProducer=mock(MessageProducer.class);
  TextMessage textMessage=mock(TextMessage.class);
  given(session.createProducer(queue)).willReturn(messageProducer);
  given(session.createTextMessage("just testing")).willReturn(textMessage);
  if (!ignoreQOS) {
    template.setExplicitQosEnabled(true);
    template.setDeliveryMode(deliveryMode);
    template.setPriority(priority);
    template.setTimeToLive(timeToLive);
  }
  if (useDefaultDestination) {
    template.send(new MessageCreator(){
      @Override public Message createMessage(      Session session) throws JMSException {
        return session.createTextMessage("just testing");
      }
    }
);
  }
 else {
    if (explicitDestination) {
      template.send(queue,new MessageCreator(){
        @Override public Message createMessage(        Session session) throws JMSException {
          return session.createTextMessage("just testing");
        }
      }
);
    }
 else {
      template.send(destinationName,new MessageCreator(){
        @Override public Message createMessage(        Session session) throws JMSException {
          return session.createTextMessage("just testing");
        }
      }
);
    }
  }
  if (useTransactedTemplate()) {
    verify(session).commit();
  }
  if (disableIdAndTimestamp) {
    verify(messageProducer).setDisableMessageID(true);
    verify(messageProducer).setDisableMessageTimestamp(true);
  }
  if (ignoreQOS) {
    verify(messageProducer).send(textMessage);
  }
 else {
    verify(messageProducer).send(textMessage,deliveryMode,priority,timeToLive);
  }
  verify(messageProducer).close();
  verify(session).close();
  verify(connection).close();
}
