{
  Object source=parserContext.extractSource(element);
  registerUrlProvider(parserContext,source);
  String resourceHandlerName=registerResourceHandler(parserContext,element,source);
  if (resourceHandlerName == null) {
    return null;
  }
  Map<String,String> urlMap=new ManagedMap<>();
  String resourceRequestPath=element.getAttribute("mapping");
  if (!StringUtils.hasText(resourceRequestPath)) {
    parserContext.getReaderContext().error("The 'mapping' attribute is required.",parserContext.extractSource(element));
    return null;
  }
  urlMap.put(resourceRequestPath,resourceHandlerName);
  RuntimeBeanReference pathMatcherRef=MvcNamespaceUtils.registerPathMatcher(null,parserContext,source);
  RuntimeBeanReference pathHelperRef=MvcNamespaceUtils.registerUrlPathHelper(null,parserContext,source);
  RootBeanDefinition handlerMappingDef=new RootBeanDefinition(SimpleUrlHandlerMapping.class);
  handlerMappingDef.setSource(source);
  handlerMappingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
  handlerMappingDef.getPropertyValues().add("urlMap",urlMap);
  handlerMappingDef.getPropertyValues().add("pathMatcher",pathMatcherRef).add("urlPathHelper",pathHelperRef);
  String order=element.getAttribute("order");
  handlerMappingDef.getPropertyValues().add("order",StringUtils.hasText(order) ? order : Ordered.LOWEST_PRECEDENCE - 1);
  RuntimeBeanReference corsConfigurationsRef=MvcNamespaceUtils.registerCorsConfigurations(null,parserContext,source);
  handlerMappingDef.getPropertyValues().add("corsConfigurations",corsConfigurationsRef);
  String beanName=parserContext.getReaderContext().generateBeanName(handlerMappingDef);
  parserContext.getRegistry().registerBeanDefinition(beanName,handlerMappingDef);
  parserContext.registerComponent(new BeanComponentDefinition(handlerMappingDef,beanName));
  MvcNamespaceUtils.registerDefaultComponents(parserContext,source);
  return null;
}
