{
  String locationAttr=element.getAttribute("location");
  if (!StringUtils.hasText(locationAttr)) {
    parserContext.getReaderContext().error("The 'location' attribute is required.",parserContext.extractSource(element));
    return null;
  }
  ManagedList<String> locations=new ManagedList<String>();
  locations.addAll(Arrays.asList(StringUtils.commaDelimitedListToStringArray(locationAttr)));
  RootBeanDefinition resourceHandlerDef=new RootBeanDefinition(ResourceHttpRequestHandler.class);
  resourceHandlerDef.setSource(source);
  resourceHandlerDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
  resourceHandlerDef.getPropertyValues().add("locations",locations);
  String cacheSeconds=element.getAttribute("cache-period");
  if (StringUtils.hasText(cacheSeconds)) {
    resourceHandlerDef.getPropertyValues().add("cacheSeconds",cacheSeconds);
  }
  ManagedList<? super Object> resourceResolvers=parseResourceResolvers(parserContext,element,source);
  if (!resourceResolvers.isEmpty()) {
    resourceHandlerDef.getPropertyValues().add("resourceResolvers",resourceResolvers);
  }
  ManagedList<? super Object> resourceTransformers=parseResourceTransformers(parserContext,element,source);
  if (!resourceTransformers.isEmpty()) {
    resourceHandlerDef.getPropertyValues().add("resourceTransformers",resourceTransformers);
  }
  String beanName=parserContext.getReaderContext().generateBeanName(resourceHandlerDef);
  parserContext.getRegistry().registerBeanDefinition(beanName,resourceHandlerDef);
  parserContext.registerComponent(new BeanComponentDefinition(resourceHandlerDef,beanName));
  return beanName;
}
