{
  String aspectId=aspectElement.getAttribute(ID);
  String aspectName=aspectElement.getAttribute(REF);
  try {
    this.parseState.push(new AspectEntry(aspectId,aspectName));
    List beanDefinitions=new ArrayList();
    List beanReferences=new ArrayList();
    List declareParents=DomUtils.getChildElementsByTagName(aspectElement,DECLARE_PARENTS);
    for (int i=METHOD_INDEX; i < declareParents.size(); i++) {
      Element declareParentsElement=(Element)declareParents.get(i);
      beanDefinitions.add(parseDeclareParents(declareParentsElement,parserContext));
    }
    NodeList nodeList=aspectElement.getChildNodes();
    boolean adviceFoundAlready=false;
    for (int i=0; i < nodeList.getLength(); i++) {
      Node node=nodeList.item(i);
      if (isAdviceNode(node)) {
        if (!adviceFoundAlready) {
          adviceFoundAlready=true;
          if (!StringUtils.hasText(aspectName)) {
            parserContext.getReaderContext().error("<aspect> tag needs aspect bean reference via 'ref' attribute when declaring advices.",aspectElement,this.parseState.snapshot());
            return;
          }
          beanReferences.add(new RuntimeBeanReference(aspectName));
        }
        AbstractBeanDefinition advisorDefinition=parseAdvice(aspectName,i,aspectElement,(Element)node,parserContext,beanDefinitions,beanReferences);
        beanDefinitions.add(advisorDefinition);
      }
    }
    AspectComponentDefinition aspectComponentDefinition=createAspectComponentDefinition(aspectElement,aspectId,beanDefinitions,beanReferences,parserContext);
    parserContext.pushContainingComponent(aspectComponentDefinition);
    List pointcuts=DomUtils.getChildElementsByTagName(aspectElement,POINTCUT);
    for (int i=0; i < pointcuts.size(); i++) {
      Element pointcutElement=(Element)pointcuts.get(i);
      parsePointcut(pointcutElement,parserContext);
    }
    parserContext.popAndRegisterContainingComponent();
  }
  finally {
    this.parseState.pop();
  }
}
