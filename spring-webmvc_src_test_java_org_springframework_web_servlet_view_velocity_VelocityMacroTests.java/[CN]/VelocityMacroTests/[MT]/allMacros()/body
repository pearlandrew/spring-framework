{
  DummyMacroRequestContext rc=new DummyMacroRequestContext(request);
  Map<String,String> msgMap=new HashMap<String,String>();
  msgMap.put("hello","Howdy");
  msgMap.put("world","Mundo");
  rc.setMessageMap(msgMap);
  Map<String,String> themeMsgMap=new HashMap<String,String>();
  themeMsgMap.put("hello","Howdy!");
  themeMsgMap.put("world","Mundo!");
  rc.setThemeMessageMap(themeMsgMap);
  rc.setContextPath("/springtest");
  TestBean tb=new TestBean("Darren",99);
  tb.setJedi(true);
  tb.setStringArray(new String[]{"John","Fred"});
  request.setAttribute("command",tb);
  Map<String,String> names=new HashMap<String,String>();
  names.put("Darren","Darren Davison");
  names.put("John","John Doe");
  names.put("Fred","Fred Bloggs");
  VelocityConfigurer vc=new VelocityConfigurer();
  vc.setPreferFileSystemAccess(false);
  VelocityEngine ve=vc.createVelocityEngine();
  Map<String,Object> model=new HashMap<String,Object>();
  model.put("command",tb);
  model.put("springMacroRequestContext",rc);
  model.put("nameOptionMap",names);
  VelocityView view=new VelocityView();
  view.setBeanName("myView");
  view.setUrl("org/springframework/web/servlet/view/velocity/test.vm");
  view.setEncoding("UTF-8");
  view.setExposeSpringMacroHelpers(false);
  view.setVelocityEngine(ve);
  view.render(model,request,response);
  String output=response.getContentAsString();
  System.out.println(output);
  String[] tokens=StringUtils.tokenizeToStringArray(output,"\t\n");
  for (int i=0; i < tokens.length; i++) {
    if (tokens[i].equals("NAME"))     assertEquals("Darren",tokens[i + 1]);
    if (tokens[i].equals("AGE"))     assertEquals("99",tokens[i + 1]);
    if (tokens[i].equals("MESSAGE"))     assertEquals("Howdy Mundo",tokens[i + 1]);
    if (tokens[i].equals("DEFAULTMESSAGE"))     assertEquals("hi planet",tokens[i + 1]);
    if (tokens[i].equals("THEME"))     assertEquals("Howdy! Mundo!",tokens[i + 1]);
    if (tokens[i].equals("DEFAULTTHEME"))     assertEquals("hi! planet!",tokens[i + 1]);
    if (tokens[i].equals("URL"))     assertEquals("/springtest/aftercontext.html",tokens[i + 1]);
    if (tokens[i].equals("FORM1"))     assertEquals("<input type=\"text\" id=\"name\" name=\"name\" value=\"Darren\" >",tokens[i + 1]);
    if (tokens[i].equals("FORM2"))     assertEquals("<input type=\"text\" id=\"name\" name=\"name\" value=\"Darren\" class=\"myCssClass\">",tokens[i + 1]);
    if (tokens[i].equals("FORM3"))     assertEquals("<textarea id=\"name\" name=\"name\" >",tokens[i + 1]);
    if (tokens[i].equals("FORM3"))     assertEquals("Darren</textarea>",tokens[i + 2]);
    if (tokens[i].equals("FORM4"))     assertEquals("<textarea id=\"name\" name=\"name\" rows=10 cols=30>",tokens[i + 1]);
    if (tokens[i].equals("FORM4"))     assertEquals("Darren</textarea>",tokens[i + 2]);
    if (tokens[i].equals("FORM9"))     assertEquals("<input type=\"password\" id=\"name\" name=\"name\" value=\"\" >",tokens[i + 1]);
    if (tokens[i].equals("FORM10"))     assertEquals("<input type=\"hidden\" id=\"name\" name=\"name\" value=\"Darren\" >",tokens[i + 1]);
    if (tokens[i].equals("FORM15"))     assertEquals("<input type=\"hidden\" name=\"_name\" value=\"on\"/>",tokens[i + 1]);
    if (tokens[i].equals("FORM15"))     assertEquals("<input type=\"checkbox\" id=\"name\" name=\"name\" />",tokens[i + 2]);
    if (tokens[i].equals("FORM16"))     assertEquals("<input type=\"hidden\" name=\"_jedi\" value=\"on\"/>",tokens[i + 1]);
    if (tokens[i].equals("FORM16"))     assertEquals("<input type=\"checkbox\" id=\"jedi\" name=\"jedi\" checked=\"checked\" />",tokens[i + 2]);
  }
}
