{
  HibernateTransactionObject txObject=(HibernateTransactionObject)transaction;
  if (txObject.hasConnectionHolder() && !txObject.getConnectionHolder().isSynchronizedWithTransaction()) {
    throw new IllegalTransactionStateException("Pre-bound JDBC Connection found! HibernateTransactionManager does not support " + "running within DataSourceTransactionManager if told to manage the DataSource itself. " + "It is recommended to use a single HibernateTransactionManager for all transactions "+ "on a single DataSource, no matter whether Hibernate or JDBC access.");
  }
  Session session=null;
  try {
    if (txObject.getSessionHolder() == null || txObject.getSessionHolder().isSynchronizedWithTransaction()) {
      Interceptor entityInterceptor=getEntityInterceptor();
      Session newSession=(entityInterceptor != null ? getSessionFactory().openSession(entityInterceptor) : getSessionFactory().openSession());
      if (logger.isDebugEnabled()) {
        logger.debug("Opened new Session [" + SessionFactoryUtils.toString(newSession) + "] for Hibernate transaction");
      }
      txObject.setSession(newSession);
    }
    session=txObject.getSessionHolder().getSession();
    if (this.prepareConnection && isSameConnectionForEntireSession(session)) {
      if (logger.isDebugEnabled()) {
        logger.debug("Preparing JDBC Connection of Hibernate Session [" + SessionFactoryUtils.toString(session) + "]");
      }
      Connection con=session.connection();
      Integer previousIsolationLevel=DataSourceUtils.prepareConnectionForTransaction(con,definition);
      txObject.setPreviousIsolationLevel(previousIsolationLevel);
    }
 else {
      if (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) {
        throw new InvalidIsolationLevelException("HibernateTransactionManager is not allowed to support custom isolation levels: " + "make sure that its 'prepareConnection' flag is on (the default) and that the " + "Hibernate connection release mode is set to 'on_close' (SpringTransactionFactory's default). "+ "Make sure that your LocalSessionFactoryBean actually uses SpringTransactionFactory: Your "+ "Hibernate properties should *not* include a 'hibernate.transaction.factory_class' property!");
      }
      if (logger.isDebugEnabled()) {
        logger.debug("Not preparing JDBC Connection of Hibernate Session [" + SessionFactoryUtils.toString(session) + "]");
      }
    }
    if (definition.isReadOnly() && txObject.isNewSession()) {
      session.setFlushMode(FlushMode.MANUAL);
    }
    if (!definition.isReadOnly() && !txObject.isNewSession()) {
      FlushMode flushMode=session.getFlushMode();
      if (flushMode.lessThan(FlushMode.COMMIT)) {
        session.setFlushMode(FlushMode.AUTO);
        txObject.getSessionHolder().setPreviousFlushMode(flushMode);
      }
    }
    Transaction hibTx;
    int timeout=determineTimeout(definition);
    if (timeout != TransactionDefinition.TIMEOUT_DEFAULT) {
      hibTx=session.getTransaction();
      hibTx.setTimeout(timeout);
      hibTx.begin();
    }
 else {
      hibTx=session.beginTransaction();
    }
    txObject.getSessionHolder().setTransaction(hibTx);
    if (getDataSource() != null) {
      Connection con=session.connection();
      ConnectionHolder conHolder=new ConnectionHolder(con);
      if (timeout != TransactionDefinition.TIMEOUT_DEFAULT) {
        conHolder.setTimeoutInSeconds(timeout);
      }
      if (logger.isDebugEnabled()) {
        logger.debug("Exposing Hibernate transaction as JDBC transaction [" + con + "]");
      }
      TransactionSynchronizationManager.bindResource(getDataSource(),conHolder);
      txObject.setConnectionHolder(conHolder);
    }
    if (txObject.isNewSessionHolder()) {
      TransactionSynchronizationManager.bindResource(getSessionFactory(),txObject.getSessionHolder());
    }
    txObject.getSessionHolder().setSynchronizedWithTransaction(true);
  }
 catch (  Throwable ex) {
    if (txObject.isNewSession()) {
      try {
        if (session.getTransaction().isActive()) {
          session.getTransaction().rollback();
        }
      }
 catch (      Throwable ex2) {
        logger.debug("Could not rollback Session after failed transaction begin",ex);
      }
 finally {
        SessionFactoryUtils.closeSession(session);
      }
    }
    throw new CannotCreateTransactionException("Could not open Hibernate Session for transaction",ex);
  }
}
