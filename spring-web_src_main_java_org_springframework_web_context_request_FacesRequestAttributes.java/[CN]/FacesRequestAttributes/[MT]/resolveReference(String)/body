{
  if (REFERENCE_REQUEST.equals(key)) {
    return getExternalContext().getRequest();
  }
 else   if (REFERENCE_SESSION.equals(key)) {
    return getExternalContext().getSession(true);
  }
 else   if ("application".equals(key)) {
    return getExternalContext().getContext();
  }
 else   if ("requestScope".equals(key)) {
    return getExternalContext().getRequestMap();
  }
 else   if ("sessionScope".equals(key)) {
    return getExternalContext().getSessionMap();
  }
 else   if ("applicationScope".equals(key)) {
    return getExternalContext().getApplicationMap();
  }
 else   if ("facesContext".equals(key)) {
    return getFacesContext();
  }
 else   if ("cookie".equals(key)) {
    return getExternalContext().getRequestCookieMap();
  }
 else   if ("header".equals(key)) {
    return getExternalContext().getRequestHeaderMap();
  }
 else   if ("headerValues".equals(key)) {
    return getExternalContext().getRequestHeaderValuesMap();
  }
 else   if ("param".equals(key)) {
    return getExternalContext().getRequestParameterMap();
  }
 else   if ("paramValues".equals(key)) {
    return getExternalContext().getRequestParameterValuesMap();
  }
 else   if ("initParam".equals(key)) {
    return getExternalContext().getInitParameterMap();
  }
 else   if ("view".equals(key)) {
    return getFacesContext().getViewRoot();
  }
 else   if ("viewScope".equals(key)) {
    try {
      return ReflectionUtils.invokeMethod(UIViewRoot.class.getMethod("getViewMap"),getFacesContext().getViewRoot());
    }
 catch (    NoSuchMethodException ex) {
      throw new IllegalStateException("JSF 2.0 API not available",ex);
    }
  }
 else   if ("flash".equals(key)) {
    try {
      return ReflectionUtils.invokeMethod(ExternalContext.class.getMethod("getFlash"),getExternalContext());
    }
 catch (    NoSuchMethodException ex) {
      throw new IllegalStateException("JSF 2.0 API not available",ex);
    }
  }
 else   if ("resource".equals(key)) {
    try {
      return ReflectionUtils.invokeMethod(Application.class.getMethod("getResourceHandler"),getFacesContext().getApplication());
    }
 catch (    NoSuchMethodException ex) {
      throw new IllegalStateException("JSF 2.0 API not available",ex);
    }
  }
 else {
    return null;
  }
}
