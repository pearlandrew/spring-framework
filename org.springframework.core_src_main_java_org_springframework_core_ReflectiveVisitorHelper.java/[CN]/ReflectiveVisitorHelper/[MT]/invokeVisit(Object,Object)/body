{
  Assert.notNull(visitor,"The visitor to visit is required");
  Method method=getMethod(visitor.getClass(),argument);
  if (method == null) {
    if (logger.isWarnEnabled()) {
      logger.warn("No method found by reflection for visitor class [" + visitor.getClass().getName() + "] and argument of type ["+ (argument != null ? argument.getClass().getName() : "")+ "]");
    }
    return null;
  }
  try {
    Object[] args=null;
    if (argument != null) {
      args=new Object[]{argument};
    }
    if (!Modifier.isPublic(method.getModifiers())) {
      method.setAccessible(true);
    }
    return method.invoke(visitor,args);
  }
 catch (  Exception ex) {
    ReflectionUtils.handleReflectionException(ex);
    throw new IllegalStateException("Should never get here");
  }
}
