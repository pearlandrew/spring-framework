{
  Object outputValue;
  Class<?> valueType;
  Type declaredType;
  if (value instanceof CharSequence) {
    outputValue=value.toString();
    valueType=String.class;
    declaredType=String.class;
  }
 else {
    outputValue=value;
    valueType=getReturnValueType(outputValue,returnType);
    declaredType=getGenericType(returnType);
  }
  HttpServletRequest request=inputMessage.getServletRequest();
  List<MediaType> requestedMediaTypes=getAcceptableMediaTypes(request);
  List<MediaType> producibleMediaTypes=getProducibleMediaTypes(request,valueType,declaredType);
  if (outputValue != null && producibleMediaTypes.isEmpty()) {
    throw new IllegalArgumentException("No converter found for return value of type: " + valueType);
  }
  Set<MediaType> compatibleMediaTypes=new LinkedHashSet<>();
  for (  MediaType requestedType : requestedMediaTypes) {
    for (    MediaType producibleType : producibleMediaTypes) {
      if (requestedType.isCompatibleWith(producibleType)) {
        compatibleMediaTypes.add(getMostSpecificMediaType(requestedType,producibleType));
      }
    }
  }
  if (compatibleMediaTypes.isEmpty()) {
    if (outputValue != null) {
      throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes);
    }
    return;
  }
  List<MediaType> mediaTypes=new ArrayList<>(compatibleMediaTypes);
  MediaType.sortBySpecificityAndQuality(mediaTypes);
  MediaType selectedMediaType=null;
  for (  MediaType mediaType : mediaTypes) {
    if (mediaType.isConcrete()) {
      selectedMediaType=mediaType;
      break;
    }
 else     if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {
      selectedMediaType=MediaType.APPLICATION_OCTET_STREAM;
      break;
    }
  }
  if (selectedMediaType != null) {
    selectedMediaType=selectedMediaType.removeQualityValue();
    for (    HttpMessageConverter<?> messageConverter : this.messageConverters) {
      if (messageConverter instanceof GenericHttpMessageConverter) {
        if (((GenericHttpMessageConverter)messageConverter).canWrite(declaredType,valueType,selectedMediaType)) {
          outputValue=(T)getAdvice().beforeBodyWrite(outputValue,returnType,selectedMediaType,(Class<? extends HttpMessageConverter<?>>)messageConverter.getClass(),inputMessage,outputMessage);
          if (outputValue != null) {
            addContentDispositionHeader(inputMessage,outputMessage);
            ((GenericHttpMessageConverter)messageConverter).write(outputValue,declaredType,selectedMediaType,outputMessage);
            if (logger.isDebugEnabled()) {
              logger.debug("Written [" + outputValue + "] as \""+ selectedMediaType+ "\" using ["+ messageConverter+ "]");
            }
          }
          return;
        }
      }
 else       if (messageConverter.canWrite(valueType,selectedMediaType)) {
        outputValue=(T)getAdvice().beforeBodyWrite(outputValue,returnType,selectedMediaType,(Class<? extends HttpMessageConverter<?>>)messageConverter.getClass(),inputMessage,outputMessage);
        if (outputValue != null) {
          addContentDispositionHeader(inputMessage,outputMessage);
          ((HttpMessageConverter)messageConverter).write(outputValue,selectedMediaType,outputMessage);
          if (logger.isDebugEnabled()) {
            logger.debug("Written [" + outputValue + "] as \""+ selectedMediaType+ "\" using ["+ messageConverter+ "]");
          }
        }
        return;
      }
    }
  }
  if (outputValue != null) {
    throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes);
  }
}
