{
  Class<?> clazz=getReturnValueType(value,returnType);
  Type type=getGenericType(returnType);
  if (value != null && value instanceof CharSequence) {
    clazz=String.class;
    type=String.class;
    value=(T)value.toString();
  }
  HttpServletRequest servletRequest=inputMessage.getServletRequest();
  List<MediaType> requestedMediaTypes=getAcceptableMediaTypes(servletRequest);
  List<MediaType> producibleMediaTypes=getProducibleMediaTypes(servletRequest,clazz,type);
  if (value != null && producibleMediaTypes.isEmpty()) {
    throw new IllegalArgumentException("No converter found for return value of type: " + clazz);
  }
  Set<MediaType> compatibleMediaTypes=new LinkedHashSet<MediaType>();
  for (  MediaType requestedType : requestedMediaTypes) {
    for (    MediaType producibleType : producibleMediaTypes) {
      if (requestedType.isCompatibleWith(producibleType)) {
        compatibleMediaTypes.add(getMostSpecificMediaType(requestedType,producibleType));
      }
    }
  }
  if (compatibleMediaTypes.isEmpty()) {
    if (value != null) {
      throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes);
    }
    return;
  }
  List<MediaType> mediaTypes=new ArrayList<MediaType>(compatibleMediaTypes);
  MediaType.sortBySpecificityAndQuality(mediaTypes);
  MediaType selectedMediaType=null;
  for (  MediaType mediaType : mediaTypes) {
    if (mediaType.isConcrete()) {
      selectedMediaType=mediaType;
      break;
    }
 else     if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {
      selectedMediaType=MediaType.APPLICATION_OCTET_STREAM;
      break;
    }
  }
  if (selectedMediaType != null) {
    selectedMediaType=selectedMediaType.removeQualityValue();
    for (    HttpMessageConverter<?> messageConverter : this.messageConverters) {
      if (messageConverter instanceof GenericHttpMessageConverter) {
        if (((GenericHttpMessageConverter<T>)messageConverter).canWrite(type,clazz,selectedMediaType)) {
          value=(T)getAdvice().beforeBodyWrite(value,returnType,selectedMediaType,(Class<? extends HttpMessageConverter<?>>)messageConverter.getClass(),inputMessage,outputMessage);
          if (value != null) {
            addContentDispositionHeader(inputMessage,outputMessage);
            ((GenericHttpMessageConverter<T>)messageConverter).write(value,type,selectedMediaType,outputMessage);
            if (logger.isDebugEnabled()) {
              logger.debug("Written [" + value + "] as \""+ selectedMediaType+ "\" using ["+ messageConverter+ "]");
            }
          }
          return;
        }
      }
 else       if (messageConverter.canWrite(clazz,selectedMediaType)) {
        value=(T)getAdvice().beforeBodyWrite(value,returnType,selectedMediaType,(Class<? extends HttpMessageConverter<?>>)messageConverter.getClass(),inputMessage,outputMessage);
        if (value != null) {
          addContentDispositionHeader(inputMessage,outputMessage);
          ((HttpMessageConverter<T>)messageConverter).write(value,selectedMediaType,outputMessage);
          if (logger.isDebugEnabled()) {
            logger.debug("Written [" + value + "] as \""+ selectedMediaType+ "\" using ["+ messageConverter+ "]");
          }
        }
        return;
      }
    }
  }
  if (value != null) {
    throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes);
  }
}
