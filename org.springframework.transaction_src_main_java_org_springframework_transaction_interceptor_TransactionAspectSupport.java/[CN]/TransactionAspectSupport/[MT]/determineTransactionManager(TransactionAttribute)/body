{
  if (this.transactionManager != null || this.beanFactory == null) {
    return this.transactionManager;
  }
  String qualifier=txAttr.getQualifier();
  if (StringUtils.hasLength(qualifier)) {
    if (!(this.beanFactory instanceof ConfigurableListableBeanFactory)) {
      throw new IllegalStateException("BeanFactory required to be a ConfigurableListableBeanFactory " + "for resolution of qualifier '" + qualifier + "': "+ this.beanFactory.getClass());
    }
    ConfigurableListableBeanFactory bf=(ConfigurableListableBeanFactory)this.beanFactory;
    Map<String,PlatformTransactionManager> tms=BeanFactoryUtils.beansOfTypeIncludingAncestors(bf,PlatformTransactionManager.class);
    PlatformTransactionManager chosen=null;
    for (    String beanName : tms.keySet()) {
      if (bf.containsBeanDefinition(beanName)) {
        BeanDefinition bd=bf.getBeanDefinition(beanName);
        if (bd instanceof AbstractBeanDefinition) {
          AbstractBeanDefinition abd=(AbstractBeanDefinition)bd;
          AutowireCandidateQualifier candidate=abd.getQualifier(Qualifier.class.getName());
          if ((candidate != null && qualifier.equals(candidate.getAttribute(AutowireCandidateQualifier.VALUE_KEY))) || qualifier.equals(beanName) || ObjectUtils.containsElement(bf.getAliases(beanName),qualifier)) {
            if (chosen != null) {
              throw new IllegalStateException("No unique PlatformTransactionManager bean found " + "for qualifier '" + qualifier + "'");
            }
            chosen=tms.get(beanName);
          }
        }
      }
    }
    if (chosen != null) {
      return chosen;
    }
 else {
      throw new IllegalStateException("No matching PlatformTransactionManager bean found for qualifier '" + qualifier + "'");
    }
  }
 else   if (this.transactionManagerBeanName != null) {
    return this.beanFactory.getBean(this.transactionManagerBeanName,PlatformTransactionManager.class);
  }
 else   if (this.beanFactory instanceof ListableBeanFactory) {
    return BeanFactoryUtils.beanOfTypeIncludingAncestors(((ListableBeanFactory)this.beanFactory),PlatformTransactionManager.class);
  }
 else {
    throw new IllegalStateException("Cannot retrieve PlatformTransactionManager beans from non-listable BeanFactory: " + this.beanFactory);
  }
}
