{
  mockResultSet.next();
  ctrlResultSet.setReturnValue(true);
  mockResultSet.getInt("id");
  ctrlResultSet.setReturnValue(1);
  mockResultSet.getString("forename");
  ctrlResultSet.setReturnValue("rod");
  mockResultSet.next();
  ctrlResultSet.setReturnValue(false);
  mockResultSet.close();
  ctrlResultSet.setVoidCallable();
  mockPreparedStatement.setObject(1,new Integer(1),Types.DECIMAL);
  ctrlPreparedStatement.setVoidCallable();
  mockPreparedStatement.setString(2,"UK");
  ctrlPreparedStatement.setVoidCallable();
  mockPreparedStatement.executeQuery();
  ctrlPreparedStatement.setReturnValue(mockResultSet);
  if (debugEnabled) {
    mockPreparedStatement.getWarnings();
    ctrlPreparedStatement.setReturnValue(null);
  }
  mockPreparedStatement.close();
  ctrlPreparedStatement.setVoidCallable();
  mockConnection.prepareStatement(SELECT_NAMED_PARAMETERS_PARSED);
  ctrlConnection.setReturnValue(mockPreparedStatement);
  replay();
  NamedParameterJdbcTemplate jt=new NamedParameterJdbcTemplate(mockDataSource);
  Map params=new HashMap();
  params.put("id",new SqlParameterValue(Types.DECIMAL,new Integer(1)));
  params.put("country","UK");
  final List customers=new LinkedList();
  jt.query(SELECT_NAMED_PARAMETERS,params,new RowCallbackHandler(){
    public void processRow(    ResultSet rs) throws SQLException {
      Customer cust=new Customer();
      cust.setId(rs.getInt(COLUMN_NAMES[0]));
      cust.setForename(rs.getString(COLUMN_NAMES[1]));
      customers.add(cust);
    }
  }
);
  assertEquals(1,customers.size());
  Customer cust=(Customer)customers.get(0);
  assertTrue("Customer id was assigned correctly",cust.getId() == 1);
  assertTrue("Customer forename was assigned correctly",cust.getForename().equals("rod"));
}
