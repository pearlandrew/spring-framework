{
  mockPreparedStatement.setObject(1,new Integer(1));
  ctrlPreparedStatement.setVoidCallable();
  mockPreparedStatement.setObject(2,new Integer(1));
  ctrlPreparedStatement.setVoidCallable();
  mockPreparedStatement.executeUpdate();
  ctrlPreparedStatement.setReturnValue(1);
  if (debugEnabled) {
    mockPreparedStatement.getWarnings();
    ctrlPreparedStatement.setReturnValue(null);
  }
  mockPreparedStatement.close();
  ctrlPreparedStatement.setVoidCallable();
  mockConnection.prepareStatement(UPDATE_NAMED_PARAMETERS_PARSED);
  ctrlConnection.setReturnValue(mockPreparedStatement);
  replay();
  NamedParameterJdbcTemplate jt=new NamedParameterJdbcTemplate(mockDataSource);
  Map params=new HashMap();
  params.put("perfId",new Integer(1));
  params.put("priceId",new Integer(1));
  assertEquals("result",jt.execute(UPDATE_NAMED_PARAMETERS,params,new PreparedStatementCallback(){
    @Override public Object doInPreparedStatement(    PreparedStatement ps) throws SQLException {
      assertEquals(mockPreparedStatement,ps);
      ps.executeUpdate();
      return "result";
    }
  }
));
}
