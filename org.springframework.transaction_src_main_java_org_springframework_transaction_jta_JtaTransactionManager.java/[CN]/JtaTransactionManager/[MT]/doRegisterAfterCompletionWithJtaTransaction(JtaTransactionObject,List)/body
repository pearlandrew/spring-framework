{
  int jtaStatus=txObject.getUserTransaction().getStatus();
  if (jtaStatus == Status.STATUS_NO_TRANSACTION) {
    throw new RollbackException("JTA transaction already completed - probably rolled back");
  }
  if (jtaStatus == Status.STATUS_ROLLEDBACK) {
    throw new RollbackException("JTA transaction already rolled back (probably due to a timeout)");
  }
  if (this.transactionSynchronizationRegistry != null) {
    new InterposedSynchronizationDelegate().registerInterposedSynchronization(new JtaAfterCompletionSynchronization(synchronizations));
  }
 else   if (getTransactionManager() != null) {
    Transaction transaction=getTransactionManager().getTransaction();
    if (transaction == null) {
      throw new IllegalStateException("No JTA Transaction available");
    }
    transaction.registerSynchronization(new JtaAfterCompletionSynchronization(synchronizations));
  }
 else {
    logger.warn("Participating in existing JTA transaction, but no JTA TransactionManager available: " + "cannot register Spring after-completion callbacks with outer JTA transaction - " + "processing Spring after-completion callbacks with outcome status 'unknown'");
    invokeAfterCompletion(synchronizations,TransactionSynchronization.STATUS_UNKNOWN);
  }
}
