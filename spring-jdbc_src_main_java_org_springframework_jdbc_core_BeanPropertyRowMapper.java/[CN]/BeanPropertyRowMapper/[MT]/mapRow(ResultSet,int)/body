{
  Assert.state(this.mappedClass != null,"Mapped class was not specified");
  T mappedObject=BeanUtils.instantiate(this.mappedClass);
  BeanWrapper bw=PropertyAccessorFactory.forBeanPropertyAccess(mappedObject);
  initBeanWrapper(bw);
  ResultSetMetaData rsmd=rs.getMetaData();
  int columnCount=rsmd.getColumnCount();
  Set<String> populatedProperties=(isCheckFullyPopulated() ? new HashSet<String>() : null);
  for (int index=1; index <= columnCount; index++) {
    String column=JdbcUtils.lookupColumnName(rsmd,index);
    String field=lowerCaseName(column.replaceAll(" ",""));
    PropertyDescriptor pd=this.mappedFields.get(field);
    if (pd != null) {
      try {
        Object value=getColumnValue(rs,index,pd);
        if (rowNumber == 0 && logger.isDebugEnabled()) {
          logger.debug("Mapping column '" + column + "' to property '"+ pd.getName()+ "' of type ["+ ClassUtils.getQualifiedName(pd.getPropertyType())+ "]");
        }
        try {
          bw.setPropertyValue(pd.getName(),value);
        }
 catch (        TypeMismatchException ex) {
          if (value == null && this.primitivesDefaultedForNullValue) {
            if (logger.isDebugEnabled()) {
              logger.debug("Intercepted TypeMismatchException for row " + rowNumber + " and column '"+ column+ "' with null value when setting property '"+ pd.getName()+ "' of type ["+ ClassUtils.getQualifiedName(pd.getPropertyType())+ "] on object: "+ mappedObject,ex);
            }
          }
 else {
            throw ex;
          }
        }
        if (populatedProperties != null) {
          populatedProperties.add(pd.getName());
        }
      }
 catch (      NotWritablePropertyException ex) {
        throw new DataRetrievalFailureException("Unable to map column '" + column + "' to property '"+ pd.getName()+ "'",ex);
      }
    }
 else {
      if (rowNumber == 0 && logger.isDebugEnabled()) {
        logger.debug("No property found for column '" + column + "' mapped to field '"+ field+ "'");
      }
    }
  }
  if (populatedProperties != null && !populatedProperties.equals(this.mappedProperties)) {
    throw new InvalidDataAccessApiUsageException("Given ResultSet does not contain all fields " + "necessary to populate object of class [" + this.mappedClass.getName() + "]: "+ this.mappedProperties);
  }
  return mappedObject;
}
