{
  List<Class<? extends Annotation>> candidates=Arrays.<Class<? extends Annotation>>asList(Transactional.class,Order.class);
  assertNull(findAnnotationDeclaringClassForTypes(candidates,NonAnnotatedInterface.class));
  assertNull(findAnnotationDeclaringClassForTypes(candidates,NonAnnotatedClass.class));
  assertEquals(InheritedAnnotationInterface.class,findAnnotationDeclaringClassForTypes(candidates,InheritedAnnotationInterface.class));
  assertNull(findAnnotationDeclaringClassForTypes(candidates,SubInheritedAnnotationInterface.class));
  assertEquals(InheritedAnnotationClass.class,findAnnotationDeclaringClassForTypes(candidates,InheritedAnnotationClass.class));
  assertEquals(InheritedAnnotationClass.class,findAnnotationDeclaringClassForTypes(candidates,SubInheritedAnnotationClass.class));
  assertEquals(NonInheritedAnnotationInterface.class,findAnnotationDeclaringClassForTypes(candidates,NonInheritedAnnotationInterface.class));
  assertNull(findAnnotationDeclaringClassForTypes(candidates,SubNonInheritedAnnotationInterface.class));
  assertEquals(NonInheritedAnnotationClass.class,findAnnotationDeclaringClassForTypes(candidates,NonInheritedAnnotationClass.class));
  assertEquals(NonInheritedAnnotationClass.class,findAnnotationDeclaringClassForTypes(candidates,SubNonInheritedAnnotationClass.class));
  assertEquals(TransactionalClass.class,findAnnotationDeclaringClassForTypes(candidates,TransactionalClass.class));
  assertEquals(TransactionalAndOrderedClass.class,findAnnotationDeclaringClassForTypes(candidates,TransactionalAndOrderedClass.class));
  assertEquals(TransactionalAndOrderedClass.class,findAnnotationDeclaringClassForTypes(candidates,SubTransactionalAndOrderedClass.class));
}
