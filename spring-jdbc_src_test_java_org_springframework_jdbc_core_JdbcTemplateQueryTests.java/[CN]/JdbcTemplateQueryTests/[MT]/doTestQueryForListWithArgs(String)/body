{
  mockResultSetMetaData.getColumnCount();
  ctrlResultSetMetaData.setReturnValue(1,2);
  mockResultSetMetaData.getColumnLabel(1);
  ctrlResultSetMetaData.setReturnValue("age",2);
  mockResultSet.getMetaData();
  ctrlResultSet.setReturnValue(mockResultSetMetaData,2);
  mockResultSet.next();
  ctrlResultSet.setReturnValue(true);
  mockResultSet.getObject(1);
  ctrlResultSet.setReturnValue(new Integer(11));
  mockResultSet.next();
  ctrlResultSet.setReturnValue(true);
  mockResultSet.getObject(1);
  ctrlResultSet.setReturnValue(new Integer(12));
  mockResultSet.next();
  ctrlResultSet.setReturnValue(false);
  mockResultSet.close();
  ctrlResultSet.setVoidCallable();
  mockPreparedStatement.setObject(1,new Integer(3));
  ctrlPreparedStatement.setVoidCallable();
  mockPreparedStatement.executeQuery();
  ctrlPreparedStatement.setReturnValue(mockResultSet);
  if (debugEnabled) {
    mockPreparedStatement.getWarnings();
    ctrlPreparedStatement.setReturnValue(null);
  }
  mockPreparedStatement.close();
  ctrlPreparedStatement.setVoidCallable();
  mockConnection.prepareStatement(sql);
  ctrlConnection.setReturnValue(mockPreparedStatement);
  replay();
  JdbcTemplate template=new JdbcTemplate(mockDataSource);
  List li=template.queryForList(sql,new Object[]{new Integer(3)});
  assertEquals("All rows returned",2,li.size());
  assertEquals("First row is Integer",11,((Integer)((Map)li.get(0)).get("age")).intValue());
  assertEquals("Second row is Integer",12,((Integer)((Map)li.get(1)).get("age")).intValue());
}
