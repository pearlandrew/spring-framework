{
  String rootDirPath=determineRootDir(locationPattern);
  String subPattern=locationPattern.substring(rootDirPath.length());
  Resource[] rootDirResources=getResources(rootDirPath);
  Set<Resource> result=new LinkedHashSet<Resource>(16);
  for (  Resource rootDirResource : rootDirResources) {
    rootDirResource=resolveRootDirResource(rootDirResource);
    URL rootDirURL=rootDirResource.getURL();
    if (equinoxResolveMethod != null) {
      if (rootDirURL.getProtocol().startsWith("bundle")) {
        rootDirURL=(URL)ReflectionUtils.invokeMethod(equinoxResolveMethod,null,rootDirURL);
        rootDirResource=new UrlResource(rootDirURL);
      }
    }
    if (rootDirURL.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {
      result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirURL,subPattern,getPathMatcher()));
    }
 else     if (ResourceUtils.isJarURL(rootDirURL) || isJarResource(rootDirResource)) {
      result.addAll(doFindPathMatchingJarResources(rootDirResource,rootDirURL,subPattern));
    }
 else {
      result.addAll(doFindPathMatchingFileResources(rootDirResource,subPattern));
    }
  }
  if (logger.isDebugEnabled()) {
    logger.debug("Resolved location pattern [" + locationPattern + "] to resources "+ result);
  }
  return result.toArray(new Resource[result.size()]);
}
