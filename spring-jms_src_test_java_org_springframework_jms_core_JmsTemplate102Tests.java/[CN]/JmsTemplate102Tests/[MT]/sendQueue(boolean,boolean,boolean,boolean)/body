{
  JmsTemplate102 template=createTemplate();
  template.setConnectionFactory(mockQueueConnectionFactory);
  template.afterPropertiesSet();
  if (useDefaultDestination) {
    template.setDefaultDestination(mockQueue);
  }
  if (disableIdAndTimestamp) {
    template.setMessageIdEnabled(false);
    template.setMessageTimestampEnabled(false);
  }
  MockControl queueSenderControl=MockControl.createControl(QueueSender.class);
  QueueSender mockQueueSender=(QueueSender)queueSenderControl.getMock();
  MockControl messageControl=MockControl.createControl(TextMessage.class);
  TextMessage mockMessage=(TextMessage)messageControl.getMock();
  if (disableIdAndTimestamp) {
    mockQueueSender.setDisableMessageID(true);
    queueSenderControl.setVoidCallable(1);
    mockQueueSender.setDisableMessageTimestamp(true);
    queueSenderControl.setVoidCallable(1);
  }
  mockQueueSession.createSender(this.mockQueue);
  queueSessionControl.setReturnValue(mockQueueSender);
  mockQueueSession.createTextMessage("just testing");
  queueSessionControl.setReturnValue(mockMessage);
  if (useTransactedTemplate()) {
    mockQueueSession.commit();
    queueSessionControl.setVoidCallable(1);
  }
  if (ignoreQOS) {
    mockQueueSender.send(mockMessage);
  }
 else {
    template.setExplicitQosEnabled(true);
    template.setDeliveryMode(deliveryMode);
    template.setPriority(priority);
    template.setTimeToLive(timeToLive);
    mockQueueSender.send(mockMessage,deliveryMode,priority,timeToLive);
  }
  queueSenderControl.setVoidCallable(1);
  mockQueueSender.close();
  queueSenderControl.setVoidCallable(1);
  mockQueueSession.close();
  queueSessionControl.setVoidCallable(1);
  mockQueueConnection.close();
  queueConnectionControl.setVoidCallable(1);
  queueSenderControl.replay();
  queueSessionControl.replay();
  queueConnectionControl.replay();
  if (useDefaultDestination) {
    template.send(new MessageCreator(){
      @Override public Message createMessage(      Session session) throws JMSException {
        return session.createTextMessage("just testing");
      }
    }
);
  }
 else {
    if (explicitQueue) {
      template.send(mockQueue,new MessageCreator(){
        @Override public Message createMessage(        Session session) throws JMSException {
          return session.createTextMessage("just testing");
        }
      }
);
    }
 else {
      template.send("testQueue",new MessageCreator(){
        @Override public Message createMessage(        Session session) throws JMSException {
          return session.createTextMessage("just testing");
        }
      }
);
    }
  }
  queueConnectionFactoryControl.verify();
  queueConnectionControl.verify();
  queueSessionControl.verify();
  queueSenderControl.verify();
}
