{
  JmsTemplate102 template=createTemplate();
  template.setConnectionFactory(queueConnectionFactory);
  template.afterPropertiesSet();
  if (useDefaultDestination) {
    template.setDefaultDestination(queue);
  }
  if (disableIdAndTimestamp) {
    template.setMessageIdEnabled(false);
    template.setMessageTimestampEnabled(false);
  }
  QueueSender queueSender=mock(QueueSender.class);
  TextMessage message=mock(TextMessage.class);
  given(queueSession.createSender(this.queue)).willReturn(queueSender);
  given(queueSession.createTextMessage("just testing")).willReturn(message);
  if (!ignoreQOS) {
    template.setExplicitQosEnabled(true);
    template.setDeliveryMode(deliveryMode);
    template.setPriority(priority);
    template.setTimeToLive(timeToLive);
  }
  if (useDefaultDestination) {
    template.send(new MessageCreator(){
      @Override public Message createMessage(      Session session) throws JMSException {
        return session.createTextMessage("just testing");
      }
    }
);
  }
 else {
    if (explicitQueue) {
      template.send(queue,new MessageCreator(){
        @Override public Message createMessage(        Session session) throws JMSException {
          return session.createTextMessage("just testing");
        }
      }
);
    }
 else {
      template.send("testQueue",new MessageCreator(){
        @Override public Message createMessage(        Session session) throws JMSException {
          return session.createTextMessage("just testing");
        }
      }
);
    }
  }
  if (disableIdAndTimestamp) {
    verify(queueSender).setDisableMessageID(true);
    verify(queueSender).setDisableMessageTimestamp(true);
  }
  if (useTransactedTemplate()) {
    verify(queueSession).commit();
  }
  if (ignoreQOS) {
    verify(queueSender).send(message);
  }
 else {
    verify(queueSender).send(message,deliveryMode,priority,timeToLive);
  }
  verify(queueSender).close();
  verify(queueSession).close();
  verify(queueConnection).close();
}
