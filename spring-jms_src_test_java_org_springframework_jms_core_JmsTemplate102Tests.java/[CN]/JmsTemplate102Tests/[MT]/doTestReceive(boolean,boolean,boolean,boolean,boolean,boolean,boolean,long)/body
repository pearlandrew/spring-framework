{
  JmsTemplate102 template=createTemplate();
  template.setPubSubDomain(pubSub);
  template.setConnectionFactory(pubSub ? topicConnectionFactory : queueConnectionFactory);
  if (pubSub) {
    reset(topicConnection);
    if (clientAcknowledge) {
      template.setSessionAcknowledgeMode(Session.CLIENT_ACKNOWLEDGE);
      given(topicConnection.createTopicSession(useTransactedTemplate(),Session.CLIENT_ACKNOWLEDGE)).willReturn(topicSession);
    }
 else {
      template.setSessionAcknowledgeMode(Session.AUTO_ACKNOWLEDGE);
      given(topicConnection.createTopicSession(useTransactedTemplate(),Session.AUTO_ACKNOWLEDGE)).willReturn(topicSession);
    }
  }
 else {
    reset(queueConnection);
    if (clientAcknowledge) {
      template.setSessionAcknowledgeMode(Session.CLIENT_ACKNOWLEDGE);
      given(queueConnection.createQueueSession(useTransactedTemplate(),Session.CLIENT_ACKNOWLEDGE)).willReturn(queueSession);
    }
 else {
      template.setSessionAcknowledgeMode(Session.AUTO_ACKNOWLEDGE);
      given(queueConnection.createQueueSession(useTransactedTemplate(),Session.AUTO_ACKNOWLEDGE)).willReturn(queueSession);
    }
  }
  Destination dest=pubSub ? (Destination)topic : (Destination)queue;
  if (useDefaultDestination) {
    template.setDefaultDestination(dest);
  }
  if (noLocal) {
    template.setPubSubNoLocal(true);
  }
  template.setReceiveTimeout(timeout);
  String selectorString="selector";
  MessageConsumer messageConsumer=null;
  if (pubSub) {
    TopicSubscriber topicSubscriber=mock(TopicSubscriber.class);
    messageConsumer=topicSubscriber;
    given(topicSession.createSubscriber(topic,messageSelector ? selectorString : null,noLocal)).willReturn(topicSubscriber);
  }
 else {
    QueueReceiver queueReceiver=mock(QueueReceiver.class);
    messageConsumer=queueReceiver;
    given(queueSession.createReceiver(queue,messageSelector ? selectorString : null)).willReturn(queueReceiver);
  }
  TextMessage textMessage=mock(TextMessage.class);
  if (testConverter) {
    given(textMessage.getText()).willReturn("Hello World!");
  }
  if (timeout == JmsTemplate.RECEIVE_TIMEOUT_NO_WAIT) {
    given(messageConsumer.receiveNoWait()).willReturn(textMessage);
  }
 else   if (timeout == JmsTemplate.RECEIVE_TIMEOUT_INDEFINITE_WAIT) {
    given(messageConsumer.receive()).willReturn(textMessage);
  }
 else {
    given(messageConsumer.receive(timeout)).willReturn(textMessage);
  }
  Message message=null;
  String textFromMessage=null;
  if (useDefaultDestination) {
    if (testConverter) {
      textFromMessage=(String)(messageSelector ? template.receiveSelectedAndConvert(selectorString) : template.receiveAndConvert());
    }
 else {
      message=(messageSelector ? template.receiveSelected(selectorString) : template.receive());
    }
  }
 else   if (explicitDestination) {
    if (testConverter) {
      textFromMessage=(String)(messageSelector ? template.receiveSelectedAndConvert(dest,selectorString) : template.receiveAndConvert(dest));
    }
 else {
      message=(messageSelector ? template.receiveSelected(dest,selectorString) : template.receive(dest));
    }
  }
 else {
    String destinationName=(pubSub ? "testTopic" : "testQueue");
    if (testConverter) {
      textFromMessage=(String)(messageSelector ? template.receiveSelectedAndConvert(destinationName,selectorString) : template.receiveAndConvert(destinationName));
    }
 else {
      message=(messageSelector ? template.receiveSelected(destinationName,selectorString) : template.receive(destinationName));
    }
  }
  if (testConverter) {
    assertEquals("Message text should be equal","Hello World!",textFromMessage);
  }
 else {
    assertEquals("Messages should refer to the same object",message,textMessage);
  }
  if (pubSub) {
    verify(topicConnection).start();
    verify(topicConnection).close();
    verify(topicSession).close();
  }
 else {
    verify(queueConnection).start();
    verify(queueConnection).close();
    verify(queueSession).close();
  }
  if (useTransactedTemplate()) {
    if (pubSub) {
      verify(topicSession).commit();
    }
 else {
      verify(queueSession).commit();
    }
  }
  if (!useTransactedSession() && clientAcknowledge) {
    verify(textMessage).acknowledge();
  }
  verify(messageConsumer).close();
}
