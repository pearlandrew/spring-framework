{
  SpelExpressionParser parser=new SpelExpressionParser();
  Expression expr=parser.parseExpression("new org.springframework.expression.spel.ConstructorInvocationTests$Tester(#bar).i");
  StandardEvaluationContext eContext=TestScenarioCreator.getTestEvaluationContext();
  eContext.setRootObject(new Tester());
  eContext.setVariable("bar",3);
  Object o=expr.getValue(eContext);
  assertEquals(o,3);
  assertEquals(1,parser.parseExpression("counter").getValue(eContext));
  eContext.setVariable("bar",new PlaceOfBirth("London"));
  o=expr.getValue(eContext);
  assertEquals(0,o);
  eContext.setVariable("bar",3);
  o=expr.getValue(eContext);
  assertEquals(3,o);
  assertEquals(2,parser.parseExpression("counter").getValue(eContext));
  eContext.setVariable("bar",4);
  try {
    o=expr.getValue(eContext);
    fail("Should have failed");
  }
 catch (  Exception e) {
    int idx=e.getMessage().indexOf("Tester");
    if (idx == -1) {
      fail("Expected reference to Tester in :" + e.getMessage());
    }
  }
  assertEquals(3,parser.parseExpression("counter").getValue(eContext));
  eContext.setVariable("bar",1);
  try {
    o=expr.getValue(eContext);
    fail("Should have failed");
  }
 catch (  Exception e) {
    if (e instanceof SpelEvaluationException) {
      e.printStackTrace();
      fail("Should not have been wrapped");
    }
  }
  assertEquals(4,parser.parseExpression("counter").getValue(eContext));
}
