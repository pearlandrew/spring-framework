{
  Class<?> paramType=parameter.getParameterType();
  if (!paramType.isAssignableFrom(message.getClass())) {
    throw new MethodArgumentTypeMismatchException(message,parameter,"The actual message type [" + ClassUtils.getQualifiedName(message.getClass()) + "] "+ "does not match the expected type ["+ ClassUtils.getQualifiedName(paramType)+ "]");
  }
  Class<?> expectedPayloadType=getPayloadType(parameter);
  Object payload=message.getPayload();
  if (payload != null && expectedPayloadType != null && !expectedPayloadType.isInstance(payload)) {
    throw new MethodArgumentTypeMismatchException(message,parameter,"The expected Message<?> payload type [" + ClassUtils.getQualifiedName(expectedPayloadType) + "] does not match the actual payload type ["+ ClassUtils.getQualifiedName(payload.getClass())+ "]");
  }
  return message;
}
