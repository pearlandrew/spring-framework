{
  if (this.hessianProxy == null) {
    throw new IllegalStateException("HessianClientInterceptor is not properly initialized - " + "invoke 'prepare' before attempting any operations");
  }
  ClassLoader originalClassLoader=overrideThreadContextClassLoader();
  try {
    return invocation.getMethod().invoke(this.hessianProxy,invocation.getArguments());
  }
 catch (  InvocationTargetException ex) {
    Throwable targetEx=ex.getTargetException();
    if (targetEx instanceof HessianConnectionException) {
      throw convertHessianAccessException(targetEx);
    }
 else     if (targetEx instanceof HessianException || targetEx instanceof HessianRuntimeException) {
      Throwable cause=targetEx.getCause();
      throw convertHessianAccessException(cause != null ? cause : targetEx);
    }
 else     if (targetEx instanceof UndeclaredThrowableException) {
      UndeclaredThrowableException utex=(UndeclaredThrowableException)targetEx;
      throw convertHessianAccessException(utex.getUndeclaredThrowable());
    }
 else {
      throw targetEx;
    }
  }
catch (  Throwable ex) {
    throw new RemoteProxyFailureException("Failed to invoke Hessian proxy for remote service [" + getServiceUrl() + "]",ex);
  }
 finally {
    resetThreadContextClassLoader(originalClassLoader);
  }
}
