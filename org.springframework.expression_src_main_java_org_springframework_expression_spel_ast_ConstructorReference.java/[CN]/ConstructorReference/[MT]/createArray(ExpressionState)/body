{
  TypedValue intendedArrayType=getChild(0).getValueInternal(state);
  if (!(intendedArrayType.getValue() instanceof String)) {
    throw new SpelException(getChild(0).getCharPositionInLine(),SpelMessages.TYPE_NAME_EXPECTED_FOR_ARRAY_CONSTRUCTION,FormatHelper.formatClassNameForMessage(intendedArrayType.getClass()));
  }
  String type=(String)intendedArrayType.getValue();
  Class<?> componentType=null;
  TypeCode arrayTypeCode=TypeCode.forName(type);
  if (arrayTypeCode == TypeCode.OBJECT) {
    componentType=state.findType(type);
  }
 else {
    componentType=arrayTypeCode.getType();
  }
  Object newArray=null;
  TypeDescriptor newArrayTypeDescriptor=null;
  if (getChild(1).getChildCount() == 0) {
    if (getChildCount() < 3) {
      throw new SpelException(getCharPositionInLine(),SpelMessages.NO_SIZE_OR_INITIALIZER_FOR_ARRAY_CONSTRUCTION);
    }
    int arraySize=getChild(2).getChildCount();
    newArray=Array.newInstance(componentType,arraySize);
    newArrayTypeDescriptor=TypeDescriptor.valueOf(newArray.getClass());
  }
 else {
    int dimensions=getChild(1).getChildCount();
    if (dimensions == 1) {
      Object o=getChild(1).getValueInternal(state);
      int arraySize=state.convertValue(o,INTEGER_TYPE_DESCRIPTOR);
      if (getChildCount() == 3) {
        int initializerLength=getChild(2).getChildCount();
        if (initializerLength != arraySize) {
          throw new SpelException(getChild(2).getCharPositionInLine(),SpelMessages.INITIALIZER_LENGTH_INCORRECT,initializerLength,arraySize);
        }
      }
      newArray=Array.newInstance(componentType,arraySize);
      newArrayTypeDescriptor=TypeDescriptor.valueOf(newArray.getClass());
    }
 else {
      int[] dims=new int[dimensions];
      for (int d=0; d < dimensions; d++) {
        dims[d]=state.convertValue(getChild(1).getChild(d).getValueInternal(state),INTEGER_TYPE_DESCRIPTOR);
      }
      newArray=Array.newInstance(componentType,dims);
      newArrayTypeDescriptor=TypeDescriptor.valueOf(newArray.getClass());
    }
  }
  if (getChildCount() == 3) {
    SpelNodeImpl initializer=getChild(2);
    if (arrayTypeCode == TypeCode.OBJECT) {
      Object[] newObjectArray=(Object[])newArray;
      for (int i=0; i < newObjectArray.length; i++) {
        SpelNodeImpl elementNode=initializer.getChild(i);
        Object arrayEntry=elementNode.getValueInternal(state);
        if (!componentType.isAssignableFrom(arrayEntry.getClass())) {
          throw new SpelException(elementNode.getCharPositionInLine(),SpelMessages.INCORRECT_ELEMENT_TYPE_FOR_ARRAY,componentType.getName(),arrayEntry.getClass().getName());
        }
        newObjectArray[i]=arrayEntry;
      }
    }
 else     if (arrayTypeCode == TypeCode.INT) {
      int[] newIntArray=(int[])newArray;
      for (int i=0; i < newIntArray.length; i++) {
        newIntArray[i]=state.convertValue(initializer.getChild(i).getValueInternal(state),INTEGER_TYPE_DESCRIPTOR);
      }
    }
 else     if (arrayTypeCode == TypeCode.BOOLEAN) {
      boolean[] newBooleanArray=(boolean[])newArray;
      for (int i=0; i < newBooleanArray.length; i++) {
        newBooleanArray[i]=state.convertValue(initializer.getChild(i).getValueInternal(state),BOOLEAN_TYPE_DESCRIPTOR);
      }
    }
 else     if (arrayTypeCode == TypeCode.CHAR) {
      char[] newCharArray=(char[])newArray;
      for (int i=0; i < newCharArray.length; i++) {
        newCharArray[i]=state.convertValue(initializer.getChild(i).getValueInternal(state),CHARACTER_TYPE_DESCRIPTOR);
      }
    }
 else     if (arrayTypeCode == TypeCode.SHORT) {
      short[] newShortArray=(short[])newArray;
      for (int i=0; i < newShortArray.length; i++) {
        newShortArray[i]=state.convertValue(initializer.getChild(i).getValueInternal(state),SHORT_TYPE_DESCRIPTOR);
      }
    }
 else     if (arrayTypeCode == TypeCode.LONG) {
      long[] newLongArray=(long[])newArray;
      for (int i=0; i < newLongArray.length; i++) {
        newLongArray[i]=state.convertValue(initializer.getChild(i).getValueInternal(state),LONG_TYPE_DESCRIPTOR);
      }
    }
 else     if (arrayTypeCode == TypeCode.FLOAT) {
      float[] newFloatArray=(float[])newArray;
      for (int i=0; i < newFloatArray.length; i++) {
        newFloatArray[i]=state.convertValue(initializer.getChild(i).getValueInternal(state),FLOAT_TYPE_DESCRIPTOR);
      }
    }
 else     if (arrayTypeCode == TypeCode.DOUBLE) {
      double[] newDoubleArray=(double[])newArray;
      for (int i=0; i < newDoubleArray.length; i++) {
        newDoubleArray[i]=state.convertValue(initializer.getChild(i).getValueInternal(state),DOUBLE_TYPE_DESCRIPTOR);
      }
    }
 else     if (arrayTypeCode == TypeCode.BYTE) {
      byte[] newByteArray=(byte[])newArray;
      for (int i=0; i < newByteArray.length; i++) {
        newByteArray[i]=state.convertValue(initializer.getChild(i).getValueInternal(state),BYTE_TYPE_DESCRIPTOR);
      }
    }
  }
  return new TypedValue(newArray,newArrayTypeDescriptor);
}
