{
  Object[] arguments=new Object[getChildCount() - 1];
  Class<?>[] argumentTypes=new Class[getChildCount() - 1];
  for (int i=0; i < arguments.length; i++) {
    TypedValue childValue=getChild(i + 1).getValueInternal(state);
    arguments[i]=childValue.getValue();
    argumentTypes[i]=childValue.getValue().getClass();
  }
  ConstructorExecutor executorToUse=this.cachedExecutor;
  if (executorToUse != null) {
    try {
      return executorToUse.execute(state.getEvaluationContext(),arguments);
    }
 catch (    AccessException ae) {
      this.cachedExecutor=null;
    }
  }
  String typename=(String)getChild(0).getValueInternal(state).getValue();
  executorToUse=findExecutorForConstructor(typename,argumentTypes,state);
  try {
    return executorToUse.execute(state.getEvaluationContext(),arguments);
  }
 catch (  AccessException ae) {
    throw new SpelException(ae,SpelMessages.EXCEPTION_DURING_CONSTRUCTOR_INVOCATION,typename,ae.getMessage());
  }
}
