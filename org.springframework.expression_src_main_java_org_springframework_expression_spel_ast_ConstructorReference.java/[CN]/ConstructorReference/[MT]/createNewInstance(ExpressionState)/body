{
  Object[] arguments=new Object[getChildCount() - 1];
  List<TypeDescriptor> argumentTypes=new ArrayList<TypeDescriptor>(getChildCount() - 1);
  for (int i=0; i < arguments.length; i++) {
    TypedValue childValue=this.children[i + 1].getValueInternal(state);
    Object value=childValue.getValue();
    arguments[i]=value;
    argumentTypes.add(TypeDescriptor.forObject(value));
  }
  ConstructorExecutor executorToUse=this.cachedExecutor;
  if (executorToUse != null) {
    try {
      return executorToUse.execute(state.getEvaluationContext(),arguments);
    }
 catch (    AccessException ae) {
      Throwable causeOfAccessException=ae.getCause();
      Throwable rootCause=(causeOfAccessException == null ? null : causeOfAccessException.getCause());
      if (rootCause != null) {
        if (rootCause instanceof RuntimeException) {
          throw (RuntimeException)rootCause;
        }
 else {
          String typename=(String)this.children[0].getValueInternal(state).getValue();
          throw new SpelEvaluationException(getStartPosition(),rootCause,SpelMessage.CONSTRUCTOR_INVOCATION_PROBLEM,typename,FormatHelper.formatMethodForMessage("",argumentTypes));
        }
      }
      this.cachedExecutor=null;
    }
  }
  String typename=(String)this.children[0].getValueInternal(state).getValue();
  executorToUse=findExecutorForConstructor(typename,argumentTypes,state);
  try {
    this.cachedExecutor=executorToUse;
    return executorToUse.execute(state.getEvaluationContext(),arguments);
  }
 catch (  AccessException ae) {
    throw new SpelEvaluationException(getStartPosition(),ae,SpelMessage.CONSTRUCTOR_INVOCATION_PROBLEM,typename,FormatHelper.formatMethodForMessage("",argumentTypes));
  }
}
