{
  boolean isConstant=true;
  for (int c=0, max=getChildCount(); c < max; c++) {
    SpelNode child=getChild(c);
    if (!(child instanceof Literal)) {
      if (child instanceof InlineList) {
        InlineList inlineList=(InlineList)child;
        if (!inlineList.isConstant()) {
          isConstant=false;
          break;
        }
      }
 else       if (child instanceof InlineMap) {
        InlineMap inlineMap=(InlineMap)child;
        if (!inlineMap.isConstant()) {
          isConstant=false;
          break;
        }
      }
 else       if (!((c % 2) == 0 && (child instanceof PropertyOrFieldReference))) {
        isConstant=false;
        break;
      }
    }
  }
  if (isConstant) {
    Map<Object,Object> constantMap=new LinkedHashMap<Object,Object>();
    int childCount=getChildCount();
    for (int c=0; c < childCount; c++) {
      SpelNode keyChild=getChild(c++);
      SpelNode valueChild=getChild(c);
      Object key=null;
      Object value=null;
      if (keyChild instanceof Literal) {
        key=((Literal)keyChild).getLiteralValue().getValue();
      }
 else       if (keyChild instanceof PropertyOrFieldReference) {
        key=((PropertyOrFieldReference)keyChild).getName();
      }
 else {
        return;
      }
      if (valueChild instanceof Literal) {
        value=((Literal)valueChild).getLiteralValue().getValue();
      }
 else       if (valueChild instanceof InlineList) {
        value=((InlineList)valueChild).getConstantValue();
      }
 else       if (valueChild instanceof InlineMap) {
        value=((InlineMap)valueChild).getConstantValue();
      }
      constantMap.put(key,value);
    }
    this.constant=new TypedValue(Collections.unmodifiableMap(constantMap));
  }
}
