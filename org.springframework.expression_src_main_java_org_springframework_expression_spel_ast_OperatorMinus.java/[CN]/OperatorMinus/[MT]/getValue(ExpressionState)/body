{
  SpelNode leftOp=getLeftOperand();
  SpelNode rightOp=getRightOperand();
  if (rightOp == null) {
    Object left=leftOp.getValue(state);
    if (left instanceof Number) {
      Number n=(Number)left;
      if (left instanceof Double) {
        Double result=0 - n.doubleValue();
        return result;
      }
 else       if (left instanceof Float) {
        Float result=0 - n.floatValue();
        return result;
      }
 else       if (left instanceof Long) {
        Long result=0 - n.longValue();
        return result;
      }
 else {
        Integer result=0 - n.intValue();
        return result;
      }
    }
    throw new SpelException(SpelMessages.CANNOT_NEGATE_TYPE,left.getClass().getName());
  }
 else {
    Object left=leftOp.getValue(state);
    Object right=rightOp.getValue(state);
    if (left instanceof Number && right instanceof Number) {
      Number op1=(Number)left;
      Number op2=(Number)right;
      if (op1 instanceof Double || op2 instanceof Double) {
        Double result=op1.doubleValue() - op2.doubleValue();
        return result;
      }
 else       if (op1 instanceof Float || op2 instanceof Float) {
        Float result=op1.floatValue() - op2.floatValue();
        return result;
      }
 else       if (op1 instanceof Long || op2 instanceof Long) {
        Long result=op1.longValue() - op2.longValue();
        return result;
      }
 else {
        Integer result=op1.intValue() - op2.intValue();
        return result;
      }
    }
    return state.operate(Operation.SUBTRACT,left,right);
  }
}
