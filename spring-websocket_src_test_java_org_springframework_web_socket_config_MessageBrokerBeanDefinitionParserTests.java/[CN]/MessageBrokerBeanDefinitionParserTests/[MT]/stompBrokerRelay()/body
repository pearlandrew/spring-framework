{
  loadBeanDefinitions("websocket-config-broker-relay.xml");
  HandlerMapping hm=this.appContext.getBean(HandlerMapping.class);
  assertNotNull(hm);
  assertThat(hm,Matchers.instanceOf(SimpleUrlHandlerMapping.class));
  SimpleUrlHandlerMapping suhm=(SimpleUrlHandlerMapping)hm;
  assertThat(suhm.getUrlMap().keySet(),Matchers.hasSize(1));
  assertThat(suhm.getUrlMap().values(),Matchers.hasSize(1));
  assertEquals(2,suhm.getOrder());
  HttpRequestHandler httpRequestHandler=(HttpRequestHandler)suhm.getUrlMap().get("/foo/**");
  assertNotNull(httpRequestHandler);
  assertThat(httpRequestHandler,Matchers.instanceOf(SockJsHttpRequestHandler.class));
  SockJsHttpRequestHandler sockJsHttpRequestHandler=(SockJsHttpRequestHandler)httpRequestHandler;
  WebSocketHandler wsHandler=unwrapWebSocketHandler(sockJsHttpRequestHandler.getWebSocketHandler());
  assertNotNull(wsHandler);
  assertThat(wsHandler,Matchers.instanceOf(SubProtocolWebSocketHandler.class));
  assertNotNull(sockJsHttpRequestHandler.getSockJsService());
  UserDestinationResolver userDestResolver=this.appContext.getBean(UserDestinationResolver.class);
  assertNotNull(userDestResolver);
  assertThat(userDestResolver,Matchers.instanceOf(DefaultUserDestinationResolver.class));
  DefaultUserDestinationResolver defaultUserDestResolver=(DefaultUserDestinationResolver)userDestResolver;
  assertEquals("/user/",defaultUserDestResolver.getDestinationPrefix());
  StompBrokerRelayMessageHandler messageBroker=this.appContext.getBean(StompBrokerRelayMessageHandler.class);
  assertNotNull(messageBroker);
  assertEquals("clientlogin",messageBroker.getClientLogin());
  assertEquals("clientpass",messageBroker.getClientPasscode());
  assertEquals("syslogin",messageBroker.getSystemLogin());
  assertEquals("syspass",messageBroker.getSystemPasscode());
  assertEquals("relayhost",messageBroker.getRelayHost());
  assertEquals(1234,messageBroker.getRelayPort());
  assertEquals("spring.io",messageBroker.getVirtualHost());
  assertEquals(5000,messageBroker.getSystemHeartbeatReceiveInterval());
  assertEquals(5000,messageBroker.getSystemHeartbeatSendInterval());
  assertThat(messageBroker.getDestinationPrefixes(),Matchers.containsInAnyOrder("/topic","/queue"));
  List<Class<? extends MessageHandler>> subscriberTypes=Arrays.<Class<? extends MessageHandler>>asList(SimpAnnotationMethodMessageHandler.class,UserDestinationMessageHandler.class,StompBrokerRelayMessageHandler.class);
  testChannel("clientInboundChannel",subscriberTypes,1);
  testExecutor("clientInboundChannel",Runtime.getRuntime().availableProcessors() * 2,Integer.MAX_VALUE,60);
  subscriberTypes=Arrays.<Class<? extends MessageHandler>>asList(SubProtocolWebSocketHandler.class);
  testChannel("clientOutboundChannel",subscriberTypes,0);
  testExecutor("clientOutboundChannel",Runtime.getRuntime().availableProcessors() * 2,Integer.MAX_VALUE,60);
  subscriberTypes=Arrays.<Class<? extends MessageHandler>>asList(StompBrokerRelayMessageHandler.class,UserDestinationMessageHandler.class);
  testChannel("brokerChannel",subscriberTypes,0);
  try {
    this.appContext.getBean("brokerChannelExecutor",ThreadPoolTaskExecutor.class);
    fail("expected exception");
  }
 catch (  NoSuchBeanDefinitionException ex) {
  }
  String name="webSocketMessageBrokerStats";
  WebSocketMessageBrokerStats stats=this.appContext.getBean(name,WebSocketMessageBrokerStats.class);
  String actual=stats.toString();
  String expected="WebSocketSession\\[0 current WS\\(0\\)-HttpStream\\(0\\)-HttpPoll\\(0\\), " + "0 total, 0 closed abnormally \\(0 connect failure, 0 send limit, 0 transport error\\)\\], " + "stompSubProtocol\\[processed CONNECT\\(0\\)-CONNECTED\\(0\\)-DISCONNECT\\(0\\)\\], "+ "stompBrokerRelay\\[0 sessions, relayhost:1234 \\(not available\\), processed CONNECT\\(0\\)-CONNECTED\\(0\\)-DISCONNECT\\(0\\)\\], "+ "inboundChannel\\[pool size = \\d, active threads = \\d, queued tasks = \\d, completed tasks = \\d\\], "+ "outboundChannelpool size = \\d, active threads = \\d, queued tasks = \\d, completed tasks = \\d\\], "+ "sockJsScheduler\\[pool size = \\d, active threads = \\d, queued tasks = \\d, completed tasks = \\d\\]";
  assertTrue("\nExpected: " + expected.replace("\\","") + "\n  Actual: "+ actual,actual.matches(expected));
}
