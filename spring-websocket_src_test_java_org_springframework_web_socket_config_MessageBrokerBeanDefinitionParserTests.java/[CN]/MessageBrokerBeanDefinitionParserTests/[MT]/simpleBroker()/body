{
  loadBeanDefinitions("websocket-config-broker-simple.xml");
  HandlerMapping hm=this.appContext.getBean(HandlerMapping.class);
  assertThat(hm,Matchers.instanceOf(SimpleUrlHandlerMapping.class));
  SimpleUrlHandlerMapping suhm=(SimpleUrlHandlerMapping)hm;
  assertThat(suhm.getUrlMap().keySet(),Matchers.hasSize(4));
  assertThat(suhm.getUrlMap().values(),Matchers.hasSize(4));
  HttpRequestHandler httpRequestHandler=(HttpRequestHandler)suhm.getUrlMap().get("/foo");
  assertNotNull(httpRequestHandler);
  assertThat(httpRequestHandler,Matchers.instanceOf(WebSocketHttpRequestHandler.class));
  WebSocketHttpRequestHandler wsHttpRequestHandler=(WebSocketHttpRequestHandler)httpRequestHandler;
  HandshakeHandler handshakeHandler=wsHttpRequestHandler.getHandshakeHandler();
  assertNotNull(handshakeHandler);
  assertTrue(handshakeHandler instanceof TestHandshakeHandler);
  List<HandshakeInterceptor> interceptors=wsHttpRequestHandler.getHandshakeInterceptors();
  assertThat(interceptors,contains(instanceOf(FooTestInterceptor.class),instanceOf(BarTestInterceptor.class),instanceOf(OriginHandshakeInterceptor.class)));
  WebSocketSession session=new TestWebSocketSession("id");
  wsHttpRequestHandler.getWebSocketHandler().afterConnectionEstablished(session);
  assertEquals(true,session.getAttributes().get("decorated"));
  WebSocketHandler wsHandler=unwrapWebSocketHandler(wsHttpRequestHandler.getWebSocketHandler());
  assertNotNull(wsHandler);
  assertThat(wsHandler,Matchers.instanceOf(SubProtocolWebSocketHandler.class));
  SubProtocolWebSocketHandler subProtocolWsHandler=(SubProtocolWebSocketHandler)wsHandler;
  assertEquals(Arrays.asList("v10.stomp","v11.stomp","v12.stomp"),subProtocolWsHandler.getSubProtocols());
  assertEquals(25 * 1000,subProtocolWsHandler.getSendTimeLimit());
  assertEquals(1024 * 1024,subProtocolWsHandler.getSendBufferSizeLimit());
  Map<String,SubProtocolHandler> handlerMap=subProtocolWsHandler.getProtocolHandlerMap();
  StompSubProtocolHandler stompHandler=(StompSubProtocolHandler)handlerMap.get("v12.stomp");
  assertNotNull(stompHandler);
  assertEquals(128 * 1024,stompHandler.getMessageSizeLimit());
  assertNotNull(stompHandler.getErrorHandler());
  assertEquals(TestStompErrorHandler.class,stompHandler.getErrorHandler().getClass());
  assertNotNull(new DirectFieldAccessor(stompHandler).getPropertyValue("eventPublisher"));
  httpRequestHandler=(HttpRequestHandler)suhm.getUrlMap().get("/test/**");
  assertNotNull(httpRequestHandler);
  assertThat(httpRequestHandler,Matchers.instanceOf(SockJsHttpRequestHandler.class));
  SockJsHttpRequestHandler sockJsHttpRequestHandler=(SockJsHttpRequestHandler)httpRequestHandler;
  wsHandler=unwrapWebSocketHandler(sockJsHttpRequestHandler.getWebSocketHandler());
  assertNotNull(wsHandler);
  assertThat(wsHandler,Matchers.instanceOf(SubProtocolWebSocketHandler.class));
  assertNotNull(sockJsHttpRequestHandler.getSockJsService());
  assertThat(sockJsHttpRequestHandler.getSockJsService(),Matchers.instanceOf(DefaultSockJsService.class));
  DefaultSockJsService defaultSockJsService=(DefaultSockJsService)sockJsHttpRequestHandler.getSockJsService();
  WebSocketTransportHandler wsTransportHandler=(WebSocketTransportHandler)defaultSockJsService.getTransportHandlers().get(TransportType.WEBSOCKET);
  assertNotNull(wsTransportHandler.getHandshakeHandler());
  assertThat(wsTransportHandler.getHandshakeHandler(),Matchers.instanceOf(TestHandshakeHandler.class));
  assertFalse(defaultSockJsService.shouldSuppressCors());
  ThreadPoolTaskScheduler scheduler=(ThreadPoolTaskScheduler)defaultSockJsService.getTaskScheduler();
  assertEquals(Runtime.getRuntime().availableProcessors(),scheduler.getScheduledThreadPoolExecutor().getCorePoolSize());
  assertTrue(scheduler.getScheduledThreadPoolExecutor().getRemoveOnCancelPolicy());
  interceptors=defaultSockJsService.getHandshakeInterceptors();
  assertThat(interceptors,contains(instanceOf(FooTestInterceptor.class),instanceOf(BarTestInterceptor.class),instanceOf(OriginHandshakeInterceptor.class)));
  assertEquals(Arrays.asList("http://mydomain3.com","http://mydomain4.com"),defaultSockJsService.getAllowedOrigins());
  SimpUserRegistry userRegistry=this.appContext.getBean(SimpUserRegistry.class);
  assertNotNull(userRegistry);
  assertEquals(DefaultSimpUserRegistry.class,userRegistry.getClass());
  UserDestinationResolver userDestResolver=this.appContext.getBean(UserDestinationResolver.class);
  assertNotNull(userDestResolver);
  assertThat(userDestResolver,Matchers.instanceOf(DefaultUserDestinationResolver.class));
  DefaultUserDestinationResolver defaultUserDestResolver=(DefaultUserDestinationResolver)userDestResolver;
  assertEquals("/personal/",defaultUserDestResolver.getDestinationPrefix());
  UserDestinationMessageHandler userDestHandler=this.appContext.getBean(UserDestinationMessageHandler.class);
  assertNotNull(userDestHandler);
  SimpleBrokerMessageHandler brokerMessageHandler=this.appContext.getBean(SimpleBrokerMessageHandler.class);
  assertNotNull(brokerMessageHandler);
  Collection<String> prefixes=brokerMessageHandler.getDestinationPrefixes();
  assertEquals(Arrays.asList("/topic","/queue"),new ArrayList<String>(prefixes));
  assertNotNull(brokerMessageHandler.getTaskScheduler());
  assertArrayEquals(new long[]{15000,15000},brokerMessageHandler.getHeartbeatValue());
  List<Class<? extends MessageHandler>> subscriberTypes=Arrays.<Class<? extends MessageHandler>>asList(SimpAnnotationMethodMessageHandler.class,UserDestinationMessageHandler.class,SimpleBrokerMessageHandler.class);
  testChannel("clientInboundChannel",subscriberTypes,2);
  testExecutor("clientInboundChannel",Runtime.getRuntime().availableProcessors() * 2,Integer.MAX_VALUE,60);
  subscriberTypes=Collections.singletonList(SubProtocolWebSocketHandler.class);
  testChannel("clientOutboundChannel",subscriberTypes,1);
  testExecutor("clientOutboundChannel",Runtime.getRuntime().availableProcessors() * 2,Integer.MAX_VALUE,60);
  subscriberTypes=Arrays.<Class<? extends MessageHandler>>asList(SimpleBrokerMessageHandler.class,UserDestinationMessageHandler.class);
  testChannel("brokerChannel",subscriberTypes,1);
  try {
    this.appContext.getBean("brokerChannelExecutor",ThreadPoolTaskExecutor.class);
    fail("expected exception");
  }
 catch (  NoSuchBeanDefinitionException ex) {
  }
  assertNotNull(this.appContext.getBean("webSocketScopeConfigurer",CustomScopeConfigurer.class));
  DirectFieldAccessor subscriptionRegistryAccessor=new DirectFieldAccessor(brokerMessageHandler.getSubscriptionRegistry());
  String pathSeparator=(String)new DirectFieldAccessor(subscriptionRegistryAccessor.getPropertyValue("pathMatcher")).getPropertyValue("pathSeparator");
  assertEquals(".",pathSeparator);
}
