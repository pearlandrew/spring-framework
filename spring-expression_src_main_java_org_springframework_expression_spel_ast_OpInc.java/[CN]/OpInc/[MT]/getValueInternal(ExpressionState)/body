{
  SpelNodeImpl operand=getLeftOperand();
  ValueRef valueRef=operand.getValueRef(state);
  final TypedValue typedValue=valueRef.getValue();
  final Object value=typedValue.getValue();
  TypedValue returnValue=typedValue;
  TypedValue newValue=null;
  if (value instanceof Number) {
    Number op1=(Number)value;
    if (op1 instanceof BigDecimal) {
      newValue=new TypedValue(((BigDecimal)op1).add(BigDecimal.ONE),typedValue.getTypeDescriptor());
    }
 else     if (op1 instanceof Double) {
      newValue=new TypedValue(op1.doubleValue() + 1.0d,typedValue.getTypeDescriptor());
    }
 else     if (op1 instanceof Float) {
      newValue=new TypedValue(op1.floatValue() + 1.0f,typedValue.getTypeDescriptor());
    }
 else     if (op1 instanceof Long) {
      newValue=new TypedValue(op1.longValue() + 1L,typedValue.getTypeDescriptor());
    }
 else     if (op1 instanceof Short) {
      newValue=new TypedValue(op1.shortValue() + (short)1,typedValue.getTypeDescriptor());
    }
 else {
      newValue=new TypedValue(op1.intValue() + 1,typedValue.getTypeDescriptor());
    }
  }
  if (newValue == null) {
    try {
      newValue=state.operate(Operation.ADD,returnValue.getValue(),1);
    }
 catch (    SpelEvaluationException ex) {
      if (ex.getMessageCode() == SpelMessage.OPERATOR_NOT_SUPPORTED_BETWEEN_TYPES) {
        throw new SpelEvaluationException(operand.getStartPosition(),SpelMessage.OPERAND_NOT_INCREMENTABLE,operand.toStringAST());
      }
      throw ex;
    }
  }
  try {
    valueRef.setValue(newValue.getValue());
  }
 catch (  SpelEvaluationException see) {
    if (see.getMessageCode() == SpelMessage.SETVALUE_NOT_SUPPORTED) {
      throw new SpelEvaluationException(operand.getStartPosition(),SpelMessage.OPERAND_NOT_INCREMENTABLE);
    }
 else {
      throw see;
    }
  }
  if (!this.postfix) {
    returnValue=newValue;
  }
  return returnValue;
}
