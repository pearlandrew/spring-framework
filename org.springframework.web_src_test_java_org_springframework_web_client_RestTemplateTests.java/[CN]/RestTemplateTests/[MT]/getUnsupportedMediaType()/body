{
  expect(converter.supports(String.class)).andReturn(true).times(3);
  MediaType supportedMediaType=new MediaType("foo","bar");
  expect(converter.getSupportedMediaTypes()).andReturn(Collections.singletonList(supportedMediaType)).times(2);
  expect(requestFactory.createRequest(new URI("http://example.com/resource"),HttpMethod.GET)).andReturn(request);
  HttpHeaders requestHeaders=new HttpHeaders();
  expect(request.getHeaders()).andReturn(requestHeaders);
  expect(request.execute()).andReturn(response);
  expect(errorHandler.hasError(response)).andReturn(false);
  HttpHeaders responseHeaders=new HttpHeaders();
  MediaType contentType=new MediaType("bar","baz");
  responseHeaders.setContentType(contentType);
  expect(response.getHeaders()).andReturn(responseHeaders);
  response.close();
  replayMocks();
  try {
    template.getForObject("http://example.com/{p}",String.class,"resource");
    fail("UnsupportedMediaTypeException expected");
  }
 catch (  RestClientException ex) {
  }
  verifyMocks();
}
