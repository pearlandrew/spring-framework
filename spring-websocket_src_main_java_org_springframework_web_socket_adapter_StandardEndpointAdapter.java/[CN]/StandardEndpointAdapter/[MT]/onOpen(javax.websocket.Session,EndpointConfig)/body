{
  this.wsSession.initSession(session);
  if (this.handler.supportsPartialMessages()) {
    session.addMessageHandler(new MessageHandler.Partial<String>(){
      @Override public void onMessage(      String message,      boolean isLast){
        handleTextMessage(session,message,isLast);
      }
    }
);
    session.addMessageHandler(new MessageHandler.Partial<ByteBuffer>(){
      @Override public void onMessage(      ByteBuffer message,      boolean isLast){
        handleBinaryMessage(session,message,isLast);
      }
    }
);
  }
 else {
    session.addMessageHandler(new MessageHandler.Whole<String>(){
      @Override public void onMessage(      String message){
        handleTextMessage(session,message,true);
      }
    }
);
    session.addMessageHandler(new MessageHandler.Whole<ByteBuffer>(){
      @Override public void onMessage(      ByteBuffer message){
        handleBinaryMessage(session,message,true);
      }
    }
);
  }
  try {
    this.handler.afterConnectionEstablished(this.wsSession);
  }
 catch (  Throwable t) {
    ExceptionWebSocketHandlerDecorator.tryCloseWithError(this.wsSession,t,logger);
    return;
  }
}
