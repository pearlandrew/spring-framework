{
  ManagedMap<String,Object> urlMap=new ManagedMap<String,Object>();
  Object source=parserContext.extractSource(mappingElement);
  List<String> mappings=Arrays.asList(mappingElement.getAttribute("path").split(","));
  RuntimeBeanReference webSocketHandlerReference=new RuntimeBeanReference(mappingElement.getAttribute("handler"));
  ConstructorArgumentValues cavs=new ConstructorArgumentValues();
  cavs.addIndexedArgumentValue(0,this.sockJsServiceRef,"SockJsService");
  cavs.addIndexedArgumentValue(1,webSocketHandlerReference,"WebSocketHandler");
  RootBeanDefinition requestHandlerDef=new RootBeanDefinition(SockJsHttpRequestHandler.class,cavs,null);
  requestHandlerDef.setSource(source);
  requestHandlerDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
  String requestHandlerName=parserContext.getReaderContext().registerWithGeneratedName(requestHandlerDef);
  RuntimeBeanReference requestHandlerRef=new RuntimeBeanReference(requestHandlerName);
  for (  String path : mappings) {
    String pathPattern=path.endsWith("/") ? path + "**" : path + "/**";
    urlMap.put(pathPattern,requestHandlerRef);
  }
  return urlMap;
}
