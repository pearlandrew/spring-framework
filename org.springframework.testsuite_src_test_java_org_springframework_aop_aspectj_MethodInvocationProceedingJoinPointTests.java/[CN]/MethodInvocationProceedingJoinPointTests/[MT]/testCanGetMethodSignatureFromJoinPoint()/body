{
  final Object raw=new TestBean();
  final int newAge=23;
  ProxyFactory pf=new ProxyFactory(raw);
  pf.setExposeProxy(true);
  pf.addAdvisor(ExposeInvocationInterceptor.ADVISOR);
  pf.addAdvice(new MethodBeforeAdvice(){
    private int depth;
    public void before(    Method method,    Object[] args,    Object target) throws Throwable {
      JoinPoint jp=AbstractAspectJAdvice.currentJoinPoint();
      assertTrue("Method named in toString",jp.toString().indexOf(method.getName()) != -1);
      jp.toShortString();
      jp.toLongString();
      assertSame(target,AbstractAspectJAdvice.currentJoinPoint().getTarget());
      assertFalse(AopUtils.isAopProxy(AbstractAspectJAdvice.currentJoinPoint().getTarget()));
      ITestBean thisProxy=(ITestBean)AbstractAspectJAdvice.currentJoinPoint().getThis();
      assertTrue(AopUtils.isAopProxy(AbstractAspectJAdvice.currentJoinPoint().getThis()));
      assertNotSame(target,thisProxy);
      assertSame(thisProxy,AbstractAspectJAdvice.currentJoinPoint().getThis());
      if (depth++ == 0) {
        thisProxy.toString();
        thisProxy.setAge(newAge);
        assertEquals(newAge,thisProxy.getAge());
      }
      assertSame(AopContext.currentProxy(),thisProxy);
      assertSame(target,raw);
      assertSame(method.getName(),AbstractAspectJAdvice.currentJoinPoint().getSignature().getName());
      assertEquals(method.getModifiers(),AbstractAspectJAdvice.currentJoinPoint().getSignature().getModifiers());
      MethodSignature msig=(MethodSignature)AbstractAspectJAdvice.currentJoinPoint().getSignature();
      assertSame("Return same MethodSignature repeatedly",msig,AbstractAspectJAdvice.currentJoinPoint().getSignature());
      assertSame("Return same JoinPoint repeatedly",AbstractAspectJAdvice.currentJoinPoint(),AbstractAspectJAdvice.currentJoinPoint());
      assertEquals(method.getDeclaringClass(),msig.getDeclaringType());
      assertTrue(Arrays.equals(method.getParameterTypes(),msig.getParameterTypes()));
      assertEquals(method.getReturnType(),msig.getReturnType());
      assertTrue(Arrays.equals(method.getExceptionTypes(),msig.getExceptionTypes()));
      try {
        msig.getParameterNames();
        fail("Can't determine parameter names");
      }
 catch (      UnsupportedOperationException ex) {
      }
      msig.toLongString();
      msig.toShortString();
    }
  }
);
  ITestBean itb=(ITestBean)pf.getProxy();
  assertEquals("Advice reentrantly set age",newAge,itb.getAge());
}
