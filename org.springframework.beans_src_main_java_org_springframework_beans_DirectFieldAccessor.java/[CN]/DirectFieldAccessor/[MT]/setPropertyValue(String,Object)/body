{
  Field field=this.fieldMap.get(propertyName);
  if (field == null) {
    throw new NotWritablePropertyException(this.target.getClass(),propertyName,"Field '" + propertyName + "' does not exist");
  }
  Object oldValue=null;
  try {
    ReflectionUtils.makeAccessible(field);
    oldValue=field.get(this.target);
    Object convertedValue=this.typeConverterDelegate.convertIfNecessary(propertyName,oldValue,newValue,field.getType());
    field.set(this.target,convertedValue);
  }
 catch (  IllegalAccessException ex) {
    throw new InvalidPropertyException(this.target.getClass(),propertyName,"Field is not accessible",ex);
  }
catch (  IllegalArgumentException ex) {
    PropertyChangeEvent pce=new PropertyChangeEvent(this.target,propertyName,oldValue,newValue);
    throw new TypeMismatchException(pce,field.getType(),ex);
  }
}
