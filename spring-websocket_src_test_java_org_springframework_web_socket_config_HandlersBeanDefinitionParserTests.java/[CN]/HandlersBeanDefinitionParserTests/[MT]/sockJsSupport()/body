{
  loadBeanDefinitions("websocket-config-handlers-sockjs.xml");
  SimpleUrlHandlerMapping handlerMapping=appContext.getBean(SimpleUrlHandlerMapping.class);
  assertNotNull(handlerMapping);
  SockJsHttpRequestHandler testHandler=(SockJsHttpRequestHandler)handlerMapping.getUrlMap().get("/test/**");
  assertNotNull(testHandler);
  checkDelegateHandlerType(testHandler.getWebSocketHandler(),TestWebSocketHandler.class);
  SockJsService testSockJsService=testHandler.getSockJsService();
  SockJsHttpRequestHandler fooHandler=(SockJsHttpRequestHandler)handlerMapping.getUrlMap().get("/foo/**");
  assertNotNull(fooHandler);
  checkDelegateHandlerType(fooHandler.getWebSocketHandler(),FooWebSocketHandler.class);
  SockJsService sockJsService=fooHandler.getSockJsService();
  assertNotNull(sockJsService);
  assertEquals(testSockJsService,sockJsService);
  assertThat(sockJsService,Matchers.instanceOf(DefaultSockJsService.class));
  DefaultSockJsService defaultSockJsService=(DefaultSockJsService)sockJsService;
  assertThat(defaultSockJsService.getTaskScheduler(),Matchers.instanceOf(ThreadPoolTaskScheduler.class));
  assertThat(defaultSockJsService.getTransportHandlers().values(),Matchers.containsInAnyOrder(Matchers.instanceOf(XhrPollingTransportHandler.class),Matchers.instanceOf(XhrReceivingTransportHandler.class),Matchers.instanceOf(JsonpPollingTransportHandler.class),Matchers.instanceOf(JsonpReceivingTransportHandler.class),Matchers.instanceOf(XhrStreamingTransportHandler.class),Matchers.instanceOf(EventSourceTransportHandler.class),Matchers.instanceOf(HtmlFileTransportHandler.class),Matchers.instanceOf(WebSocketTransportHandler.class)));
}
