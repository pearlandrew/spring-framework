{
  int varType=getVarType((ReflectionVar)i.getVar());
  if (varType != this.matchVarType) {
    return;
  }
  Class<?> typeClass=null;
  ResolvedType type=(ResolvedType)i.getType();
  if (type instanceof ReferenceType) {
    ReferenceTypeDelegate delegate=((ReferenceType)type).getDelegate();
    if (delegate instanceof ReflectionBasedReferenceTypeDelegate) {
      try {
        ReflectionUtils.makeAccessible(myClassField);
        typeClass=(Class<?>)myClassField.get(delegate);
      }
 catch (      IllegalAccessException ex) {
        throw new IllegalStateException(ex);
      }
    }
  }
  try {
    if (typeClass == null) {
      typeClass=ClassUtils.forName(type.getName(),this.matchClass.getClassLoader());
    }
    this.matches=typeClass.isAssignableFrom(this.matchClass);
  }
 catch (  ClassNotFoundException ex) {
    this.matches=false;
  }
}
