{
  if (this.scopes != null) {
    for (Iterator it=this.scopes.entrySet().iterator(); it.hasNext(); ) {
      Map.Entry entry=(Map.Entry)it.next();
      Object key=entry.getKey();
      if (!(key instanceof String)) {
        throw new IllegalArgumentException("Invalid scope key [" + key + "]: only Strings allowed");
      }
      String scopeName=(String)key;
      Object value=entry.getValue();
      if (value instanceof Scope) {
        beanFactory.registerScope(scopeName,(Scope)value);
      }
 else       if (value instanceof Class) {
        Class scopeClass=(Class)value;
        Assert.isAssignable(Scope.class,scopeClass);
        beanFactory.registerScope(scopeName,(Scope)BeanUtils.instantiateClass(scopeClass));
      }
 else       if (value instanceof String) {
        Class scopeClass=ClassUtils.resolveClassName((String)value,this.beanClassLoader);
        Assert.isAssignable(Scope.class,scopeClass);
        beanFactory.registerScope(scopeName,(Scope)BeanUtils.instantiateClass(scopeClass));
      }
 else {
        throw new IllegalArgumentException("Mapped value [" + value + "] for scope key ["+ key+ "] is not an instance of required type ["+ Scope.class.getName()+ "] or a corresponding Class or String value indicating a Scope implementation");
      }
    }
  }
}
