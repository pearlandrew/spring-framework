{
  final Map<Method,T> methodMap=new LinkedHashMap<Method,T>();
  Set<Class<?>> handlerTypes=new LinkedHashSet<Class<?>>();
  Class<?> specificHandlerType=null;
  if (!Proxy.isProxyClass(targetType)) {
    handlerTypes.add(targetType);
    specificHandlerType=targetType;
  }
  handlerTypes.addAll(Arrays.asList(targetType.getInterfaces()));
  for (  Class<?> currentHandlerType : handlerTypes) {
    final Class<?> targetClass=(specificHandlerType != null ? specificHandlerType : currentHandlerType);
    ReflectionUtils.doWithMethods(currentHandlerType,new ReflectionUtils.MethodCallback(){
      @Override public void doWith(      Method method){
        Method specificMethod=ClassUtils.getMostSpecificMethod(method,targetClass);
        T result=metadataLookup.inspect(specificMethod);
        if (result != null) {
          Method bridgedMethod=BridgeMethodResolver.findBridgedMethod(specificMethod);
          if (bridgedMethod == specificMethod || metadataLookup.inspect(bridgedMethod) == null) {
            methodMap.put(specificMethod,result);
          }
        }
      }
    }
,ReflectionUtils.USER_DECLARED_METHODS);
  }
  return methodMap;
}
