{
  TypedValue op=state.getActiveContextObject();
  Object operand=op.getValue();
  boolean operandIsArray=ObjectUtils.isArray(operand);
  if (operand instanceof Map) {
    Map<?,?> mapdata=(Map<?,?>)operand;
    List<Object> result=new ArrayList<Object>();
    for (    Map.Entry entry : mapdata.entrySet()) {
      try {
        state.pushActiveContextObject(new TypedValue(entry,TypeDescriptor.valueOf(Map.Entry.class)));
        result.add(children[0].getValueInternal(state).getValue());
      }
  finally {
        state.popActiveContextObject();
      }
    }
    return new TypedValue(result,TypeDescriptor.valueOf(List.class));
  }
 else   if (operand instanceof List || operandIsArray) {
    List<Object> data=new ArrayList<Object>();
    Collection<?> c=(operand instanceof List) ? (Collection<?>)operand : Arrays.asList(ObjectUtils.toObjectArray(operand));
    data.addAll(c);
    List<Object> result=new ArrayList<Object>();
    int idx=0;
    Class<?> arrayElementType=null;
    for (    Object element : data) {
      try {
        state.pushActiveContextObject(new TypedValue(element,TypeDescriptor.valueOf(op.getTypeDescriptor().getType())));
        state.enterScope("index",idx);
        Object value=children[0].getValueInternal(state).getValue();
        if (value != null && operandIsArray) {
          arrayElementType=this.determineCommonType(arrayElementType,value.getClass());
        }
        result.add(value);
      }
  finally {
        state.exitScope();
        state.popActiveContextObject();
      }
      idx++;
    }
    if (operandIsArray) {
      if (arrayElementType == null) {
        arrayElementType=Object.class;
      }
      Object resultArray=Array.newInstance(arrayElementType,result.size());
      System.arraycopy(result.toArray(),0,resultArray,0,result.size());
      return new TypedValue(resultArray,op.getTypeDescriptor());
    }
    return new TypedValue(result,op.getTypeDescriptor());
  }
 else {
    if (operand == null) {
      if (nullSafe) {
        return TypedValue.NULL;
      }
 else {
        throw new SpelEvaluationException(getStartPosition(),SpelMessage.PROJECTION_NOT_SUPPORTED_ON_TYPE,"null");
      }
    }
 else {
      throw new SpelEvaluationException(getStartPosition(),SpelMessage.PROJECTION_NOT_SUPPORTED_ON_TYPE,operand.getClass().getName());
    }
  }
}
