{
  StaticApplicationContext ac=new StaticApplicationContext();
  if (parentChildSeparation) {
    MutablePropertyValues pvs1=new MutablePropertyValues();
    pvs1.addPropertyValue("age","${age}");
    MutablePropertyValues pvs2=new MutablePropertyValues();
    pvs2.addPropertyValue("name","name${var}${var}${");
    pvs2.addPropertyValue("spouse",new RuntimeBeanReference("${ref}"));
    RootBeanDefinition parent=new RootBeanDefinition(TestBean.class,pvs1);
    ChildBeanDefinition bd=new ChildBeanDefinition("${parent}",pvs2);
    ac.getDefaultListableBeanFactory().registerBeanDefinition("parent1",parent);
    ac.getDefaultListableBeanFactory().registerBeanDefinition("tb1",bd);
  }
 else {
    MutablePropertyValues pvs=new MutablePropertyValues();
    pvs.addPropertyValue("age","${age}");
    pvs.addPropertyValue("name","name${var}${var}${");
    pvs.addPropertyValue("spouse",new RuntimeBeanReference("${ref}"));
    RootBeanDefinition bd=new RootBeanDefinition(TestBean.class,pvs);
    ac.getDefaultListableBeanFactory().registerBeanDefinition("tb1",bd);
  }
  ConstructorArgumentValues cas=new ConstructorArgumentValues();
  cas.addIndexedArgumentValue(1,"${age}");
  cas.addGenericArgumentValue("${var}name${age}");
  MutablePropertyValues pvs=new MutablePropertyValues();
  List friends=new ManagedList();
  friends.add("na${age}me");
  friends.add(new RuntimeBeanReference("${ref}"));
  pvs.addPropertyValue("friends",friends);
  Set someSet=new ManagedSet();
  someSet.add("na${age}me");
  someSet.add(new RuntimeBeanReference("${ref}"));
  someSet.add(new TypedStringValue("${age}",Integer.class));
  pvs.addPropertyValue("someSet",someSet);
  Map someMap=new ManagedMap();
  someMap.put(new TypedStringValue("key${age}"),new TypedStringValue("${age}"));
  someMap.put(new TypedStringValue("key${age}ref"),new RuntimeBeanReference("${ref}"));
  someMap.put("key1",new RuntimeBeanReference("${ref}"));
  someMap.put("key2","${age}name");
  MutablePropertyValues innerPvs=new MutablePropertyValues();
  innerPvs.addPropertyValue("touchy","${os.name}");
  someMap.put("key3",new RootBeanDefinition(TestBean.class,innerPvs));
  MutablePropertyValues innerPvs2=new MutablePropertyValues(innerPvs);
  someMap.put("${key4}",new BeanDefinitionHolder(new ChildBeanDefinition("tb1",innerPvs2),"child"));
  pvs.addPropertyValue("someMap",someMap);
  RootBeanDefinition bd=new RootBeanDefinition(TestBean.class,cas,pvs);
  ac.getDefaultListableBeanFactory().registerBeanDefinition("tb2",bd);
  pvs=new MutablePropertyValues();
  pvs.addPropertyValue("properties","age=98\nvar=${m}var\nref=tb2\nm=my\nkey4=mykey4\nparent=parent1");
  ac.registerSingleton("configurer",PropertyPlaceholderConfigurer.class,pvs);
  ac.refresh();
  TestBean tb1=(TestBean)ac.getBean("tb1");
  TestBean tb2=(TestBean)ac.getBean("tb2");
  assertEquals(98,tb1.getAge());
  assertEquals(98,tb2.getAge());
  assertEquals("namemyvarmyvar${",tb1.getName());
  assertEquals("myvarname98",tb2.getName());
  assertEquals(tb2,tb1.getSpouse());
  assertEquals(2,tb2.getFriends().size());
  assertEquals("na98me",tb2.getFriends().iterator().next());
  assertEquals(tb2,tb2.getFriends().toArray()[1]);
  assertEquals(3,tb2.getSomeSet().size());
  assertTrue(tb2.getSomeSet().contains("na98me"));
  assertTrue(tb2.getSomeSet().contains(tb2));
  assertTrue(tb2.getSomeSet().contains(new Integer(98)));
  assertEquals(6,tb2.getSomeMap().size());
  assertEquals("98",tb2.getSomeMap().get("key98"));
  assertEquals(tb2,tb2.getSomeMap().get("key98ref"));
  assertEquals(tb2,tb2.getSomeMap().get("key1"));
  assertEquals("98name",tb2.getSomeMap().get("key2"));
  TestBean inner1=(TestBean)tb2.getSomeMap().get("key3");
  TestBean inner2=(TestBean)tb2.getSomeMap().get("mykey4");
  assertEquals(0,inner1.getAge());
  assertEquals(null,inner1.getName());
  assertEquals(System.getProperty("os.name"),inner1.getTouchy());
  assertEquals(98,inner2.getAge());
  assertEquals("namemyvarmyvar${",inner2.getName());
  assertEquals(System.getProperty("os.name"),inner2.getTouchy());
}
