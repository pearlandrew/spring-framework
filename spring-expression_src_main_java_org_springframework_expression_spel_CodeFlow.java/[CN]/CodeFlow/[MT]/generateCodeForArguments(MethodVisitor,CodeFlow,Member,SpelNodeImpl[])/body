{
  String[] paramDescriptors=null;
  boolean isVarargs=false;
  if (member instanceof Constructor) {
    Constructor<?> ctor=(Constructor<?>)member;
    paramDescriptors=toDescriptors(ctor.getParameterTypes());
    isVarargs=ctor.isVarArgs();
  }
 else {
    Method method=(Method)member;
    paramDescriptors=toDescriptors(method.getParameterTypes());
    isVarargs=method.isVarArgs();
  }
  if (isVarargs) {
    int p=0;
    int childcount=arguments.length;
    for (p=0; p < paramDescriptors.length - 1; p++) {
      generateCodeForArgument(mv,cf,arguments[p],paramDescriptors[p]);
    }
    SpelNodeImpl lastchild=(childcount == 0 ? null : arguments[childcount - 1]);
    String arraytype=paramDescriptors[paramDescriptors.length - 1];
    if (lastchild != null && lastchild.getExitDescriptor().equals(arraytype)) {
      generateCodeForArgument(mv,cf,lastchild,paramDescriptors[p]);
    }
 else {
      arraytype=arraytype.substring(1);
      CodeFlow.insertNewArrayCode(mv,childcount - p,arraytype);
      int arrayindex=0;
      while (p < childcount) {
        SpelNodeImpl child=arguments[p];
        mv.visitInsn(DUP);
        CodeFlow.insertOptimalLoad(mv,arrayindex++);
        generateCodeForArgument(mv,cf,child,arraytype);
        CodeFlow.insertArrayStore(mv,arraytype);
        p++;
      }
    }
  }
 else {
    for (int i=0; i < paramDescriptors.length; i++) {
      generateCodeForArgument(mv,cf,arguments[i],paramDescriptors[i]);
    }
  }
}
