{
  Set<String> beanNames=new LinkedHashSet<String>(this.beanFactory.getBeanDefinitionCount());
  beanNames.addAll(Arrays.asList(this.beanFactory.getBeanDefinitionNames()));
  if (this.beanFactory instanceof ConfigurableBeanFactory) {
    beanNames.addAll(Arrays.asList(((ConfigurableBeanFactory)this.beanFactory).getSingletonNames()));
  }
  for (  String beanName : beanNames) {
    if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory,beanName)) {
      try {
        Class beanClass=this.beanFactory.getType(beanName);
        if (beanClass != null && callback.include(beanClass,beanName)) {
          boolean lazyInit=isBeanDefinitionLazyInit(this.beanFactory,beanName);
          Object beanInstance=(!lazyInit ? this.beanFactory.getBean(beanName) : null);
          if (!this.beans.containsValue(beanName) && (beanInstance == null || !CollectionUtils.containsInstance(this.beans.values(),beanInstance))) {
            this.beans.put(beanName,(beanInstance != null ? beanInstance : beanName));
            if (logger.isInfoEnabled()) {
              logger.info("Bean with name '" + beanName + "' has been autodetected for JMX exposure");
            }
          }
 else {
            if (logger.isDebugEnabled()) {
              logger.debug("Bean with name '" + beanName + "' is already registered for JMX exposure");
            }
          }
        }
      }
 catch (      CannotLoadBeanClassException ex) {
        if (this.allowEagerInit) {
          throw ex;
        }
      }
    }
  }
}
