{
  ProxyFactory proxyFactory=new ProxyFactory();
  proxyFactory.setProxyTargetClass(true);
  proxyFactory.setFrozen(true);
  if (isMBean(this.beanFactory.getType(beanName))) {
    LazyInitTargetSource targetSource=new LazyInitTargetSource();
    targetSource.setTargetBeanName(beanName);
    targetSource.setBeanFactory(this.beanFactory);
    proxyFactory.setTargetSource(targetSource);
    Object proxy=proxyFactory.getProxy(this.beanClassLoader);
    ObjectName objectName=getObjectName(proxy,beanKey);
    if (logger.isDebugEnabled()) {
      logger.debug("Located MBean '" + beanKey + "': registering with JMX server as lazy-init MBean ["+ objectName+ "]");
    }
    doRegister(proxy,objectName);
    return objectName;
  }
 else {
    NotificationPublisherAwareLazyTargetSource targetSource=new NotificationPublisherAwareLazyTargetSource();
    targetSource.setTargetBeanName(beanName);
    targetSource.setBeanFactory(this.beanFactory);
    proxyFactory.setTargetSource(targetSource);
    Object proxy=proxyFactory.getProxy(this.beanClassLoader);
    ObjectName objectName=getObjectName(proxy,beanKey);
    if (logger.isDebugEnabled()) {
      logger.debug("Located simple bean '" + beanKey + "': registering with JMX server as lazy-init MBean ["+ objectName+ "]");
    }
    ModelMBean mbean=createAndConfigureMBean(proxy,beanKey);
    targetSource.setModelMBean(mbean);
    targetSource.setObjectName(objectName);
    doRegister(mbean,objectName);
    return objectName;
  }
}
