{
  ComponentRegistrar registrar=specContext.getRegistrar();
  Object source=spec.source();
  RootBeanDefinition methodMappingDef=new RootBeanDefinition(RequestMappingHandlerMethodMapping.class);
  methodMappingDef.setSource(source);
  methodMappingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
  methodMappingDef.getPropertyValues().add("order",0);
  String methodMappingName=registrar.registerWithGeneratedName(methodMappingDef);
  Object conversionService=getConversionService(spec,registrar);
  Object validator=getValidator(spec,registrar);
  Object messageCodesResolver=getMessageCodesResolver(spec,registrar);
  RootBeanDefinition bindingDef=new RootBeanDefinition(ConfigurableWebBindingInitializer.class);
  bindingDef.setSource(source);
  bindingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
  bindingDef.getPropertyValues().add("conversionService",conversionService);
  bindingDef.getPropertyValues().add("validator",validator);
  bindingDef.getPropertyValues().add("messageCodesResolver",messageCodesResolver);
  ManagedList<? super Object> messageConverters=getMessageConverters(spec,registrar);
  RootBeanDefinition methodAdapterDef=new RootBeanDefinition(RequestMappingHandlerMethodAdapter.class);
  methodAdapterDef.setSource(source);
  methodAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
  methodAdapterDef.getPropertyValues().add("webBindingInitializer",bindingDef);
  methodAdapterDef.getPropertyValues().add("messageConverters",messageConverters);
  if (!spec.argumentResolvers().isEmpty()) {
    methodAdapterDef.getPropertyValues().add("customArgumentResolvers",spec.argumentResolvers());
  }
  String methodAdapterName=registrar.registerWithGeneratedName(methodAdapterDef);
  RootBeanDefinition csInterceptorDef=new RootBeanDefinition(ConversionServiceExposingInterceptor.class);
  csInterceptorDef.setSource(source);
  csInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(0,conversionService);
  RootBeanDefinition mappedCsInterceptorDef=new RootBeanDefinition(MappedInterceptor.class);
  mappedCsInterceptorDef.setSource(source);
  mappedCsInterceptorDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
  mappedCsInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(0,(Object)null);
  mappedCsInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(1,csInterceptorDef);
  String mappedInterceptorName=registrar.registerWithGeneratedName(mappedCsInterceptorDef);
  RootBeanDefinition methodExceptionResolver=new RootBeanDefinition(ExceptionHandlerExceptionResolver.class);
  methodExceptionResolver.setSource(source);
  methodExceptionResolver.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
  methodExceptionResolver.getPropertyValues().add("messageConverters",messageConverters);
  methodExceptionResolver.getPropertyValues().add("order",0);
  String methodExceptionResolverName=registrar.registerWithGeneratedName(methodExceptionResolver);
  RootBeanDefinition responseStatusExceptionResolver=new RootBeanDefinition(ResponseStatusExceptionResolver.class);
  responseStatusExceptionResolver.setSource(source);
  responseStatusExceptionResolver.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
  responseStatusExceptionResolver.getPropertyValues().add("order",1);
  String responseStatusExceptionResolverName=registrar.registerWithGeneratedName(responseStatusExceptionResolver);
  RootBeanDefinition defaultExceptionResolver=new RootBeanDefinition(DefaultHandlerExceptionResolver.class);
  defaultExceptionResolver.setSource(source);
  defaultExceptionResolver.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
  defaultExceptionResolver.getPropertyValues().add("order",2);
  String defaultExceptionResolverName=registrar.registerWithGeneratedName(defaultExceptionResolver);
  CompositeComponentDefinition compDefinition=new CompositeComponentDefinition(spec.sourceName(),source);
  compDefinition.addNestedComponent(new BeanComponentDefinition(methodMappingDef,methodMappingName));
  compDefinition.addNestedComponent(new BeanComponentDefinition(methodAdapterDef,methodAdapterName));
  compDefinition.addNestedComponent(new BeanComponentDefinition(methodExceptionResolver,methodExceptionResolverName));
  compDefinition.addNestedComponent(new BeanComponentDefinition(responseStatusExceptionResolver,responseStatusExceptionResolverName));
  compDefinition.addNestedComponent(new BeanComponentDefinition(defaultExceptionResolver,defaultExceptionResolverName));
  compDefinition.addNestedComponent(new BeanComponentDefinition(mappedCsInterceptorDef,mappedInterceptorName));
  registrar.registerComponent(compDefinition);
}
