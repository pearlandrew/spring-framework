{
  ComponentRegistrar registrar=executorContext.getRegistrar();
  Object source=spec.source();
  RootBeanDefinition annMappingDef=new RootBeanDefinition(DefaultAnnotationHandlerMapping.class);
  annMappingDef.setSource(source);
  annMappingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
  annMappingDef.getPropertyValues().add("order",0);
  String annMappingName=registrar.registerWithGeneratedName(annMappingDef);
  Object conversionService=getConversionService(spec,registrar);
  Object validator=getValidator(spec,registrar);
  Object messageCodesResolver=getMessageCodesResolver(spec,registrar);
  RootBeanDefinition bindingDef=new RootBeanDefinition(ConfigurableWebBindingInitializer.class);
  bindingDef.setSource(source);
  bindingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
  bindingDef.getPropertyValues().add("conversionService",conversionService);
  bindingDef.getPropertyValues().add("validator",validator);
  bindingDef.getPropertyValues().add("messageCodesResolver",messageCodesResolver);
  ManagedList<? super Object> messageConverters=getMessageConverters(spec,registrar);
  RootBeanDefinition annAdapterDef=new RootBeanDefinition(AnnotationMethodHandlerAdapter.class);
  annAdapterDef.setSource(source);
  annAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
  annAdapterDef.getPropertyValues().add("webBindingInitializer",bindingDef);
  annAdapterDef.getPropertyValues().add("messageConverters",messageConverters);
  if (!spec.argumentResolvers().isEmpty()) {
    annAdapterDef.getPropertyValues().add("customArgumentResolvers",spec.argumentResolvers());
  }
  String annAdapterName=registrar.registerWithGeneratedName(annAdapterDef);
  RootBeanDefinition csInterceptorDef=new RootBeanDefinition(ConversionServiceExposingInterceptor.class);
  csInterceptorDef.setSource(source);
  csInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(0,conversionService);
  RootBeanDefinition mappedCsInterceptorDef=new RootBeanDefinition(MappedInterceptor.class);
  mappedCsInterceptorDef.setSource(source);
  mappedCsInterceptorDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
  mappedCsInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(0,(Object)null);
  mappedCsInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(1,csInterceptorDef);
  String mappedInterceptorName=registrar.registerWithGeneratedName(mappedCsInterceptorDef);
  RootBeanDefinition annExceptionResolver=new RootBeanDefinition(AnnotationMethodHandlerExceptionResolver.class);
  annExceptionResolver.setSource(source);
  annExceptionResolver.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
  annExceptionResolver.getPropertyValues().add("messageConverters",messageConverters);
  annExceptionResolver.getPropertyValues().add("order",0);
  String annExceptionResolverName=registrar.registerWithGeneratedName(annExceptionResolver);
  RootBeanDefinition responseStatusExceptionResolver=new RootBeanDefinition(ResponseStatusExceptionResolver.class);
  responseStatusExceptionResolver.setSource(source);
  responseStatusExceptionResolver.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
  responseStatusExceptionResolver.getPropertyValues().add("order",1);
  String responseStatusExceptionResolverName=registrar.registerWithGeneratedName(responseStatusExceptionResolver);
  RootBeanDefinition defaultExceptionResolver=new RootBeanDefinition(DefaultHandlerExceptionResolver.class);
  defaultExceptionResolver.setSource(source);
  defaultExceptionResolver.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
  defaultExceptionResolver.getPropertyValues().add("order",2);
  String defaultExceptionResolverName=registrar.registerWithGeneratedName(defaultExceptionResolver);
  CompositeComponentDefinition compDefinition=new CompositeComponentDefinition(spec.sourceName(),source);
  compDefinition.addNestedComponent(new BeanComponentDefinition(annMappingDef,annMappingName));
  compDefinition.addNestedComponent(new BeanComponentDefinition(annAdapterDef,annAdapterName));
  compDefinition.addNestedComponent(new BeanComponentDefinition(annExceptionResolver,annExceptionResolverName));
  compDefinition.addNestedComponent(new BeanComponentDefinition(responseStatusExceptionResolver,responseStatusExceptionResolverName));
  compDefinition.addNestedComponent(new BeanComponentDefinition(defaultExceptionResolver,defaultExceptionResolverName));
  compDefinition.addNestedComponent(new BeanComponentDefinition(mappedCsInterceptorDef,mappedInterceptorName));
  registrar.registerComponent(compDefinition);
}
