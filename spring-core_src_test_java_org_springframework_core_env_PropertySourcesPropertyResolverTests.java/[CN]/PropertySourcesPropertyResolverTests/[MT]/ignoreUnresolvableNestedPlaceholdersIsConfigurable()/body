{
  MutablePropertySources ps=new MutablePropertySources();
  ps.addFirst(new MockPropertySource().withProperty("p1","v1").withProperty("p2","v2").withProperty("p3","${p1}:${p2}:${bogus:def}").withProperty("p4","${p1}:${p2}:${bogus}"));
  ConfigurablePropertyResolver pr=new PropertySourcesPropertyResolver(ps);
  assertThat(pr.getProperty("p1"),equalTo("v1"));
  assertThat(pr.getProperty("p2"),equalTo("v2"));
  assertThat(pr.getProperty("p3"),equalTo("v1:v2:def"));
  try {
    pr.getProperty("p4");
  }
 catch (  IllegalArgumentException ex) {
    assertThat(ex.getMessage(),containsString("Could not resolve placeholder 'bogus' in string value \"${p1}:${p2}:${bogus}\""));
  }
  pr.setIgnoreUnresolvableNestedPlaceholders(true);
  assertThat(pr.getProperty("p4"),equalTo("v1:v2:${bogus}"));
  assertThat(pr.resolvePlaceholders("${p1}:${p2}:${bogus}"),equalTo("v1:v2:${bogus}"));
  try {
    pr.resolveRequiredPlaceholders("${p1}:${p2}:${bogus}");
  }
 catch (  IllegalArgumentException ex) {
    assertThat(ex.getMessage(),containsString("Could not resolve placeholder 'bogus' in string value \"${p1}:${p2}:${bogus}\""));
  }
}
