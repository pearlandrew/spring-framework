{
  if (checkForCircularImports && this.importStack.contains(configClass)) {
    this.problemReporter.error(new CircularImportProblem(configClass,this.importStack,configClass.getMetadata()));
  }
 else {
    this.importStack.push(configClass);
    AnnotationMetadata importingClassMetadata=configClass.getMetadata();
    try {
      for (      Object candidate : classesToImport) {
        Object candidateToCheck=(candidate instanceof Class ? (Class)candidate : this.metadataReaderFactory.getMetadataReader((String)candidate));
        if (checkAssignability(ImportSelector.class,candidateToCheck)) {
          Class<?> candidateClass=(candidate instanceof Class ? (Class)candidate : this.resourceLoader.getClassLoader().loadClass((String)candidate));
          ImportSelector selector=BeanUtils.instantiateClass(candidateClass,ImportSelector.class);
          invokeAwareMethods(selector);
          processImport(configClass,Arrays.asList(selector.selectImports(importingClassMetadata)),false);
        }
 else         if (checkAssignability(ImportBeanDefinitionRegistrar.class,candidateToCheck)) {
          Class<?> candidateClass=(candidate instanceof Class ? (Class)candidate : this.resourceLoader.getClassLoader().loadClass((String)candidate));
          ImportBeanDefinitionRegistrar registrar=BeanUtils.instantiateClass(candidateClass,ImportBeanDefinitionRegistrar.class);
          invokeAwareMethods(registrar);
          registrar.registerBeanDefinitions(importingClassMetadata,this.registry);
        }
 else {
          this.importStack.registerImport(importingClassMetadata.getClassName(),(candidate instanceof Class ? ((Class)candidate).getName() : (String)candidate));
          processConfigurationClass((candidateToCheck instanceof Class ? new ConfigurationClass((Class)candidateToCheck,configClass) : new ConfigurationClass((MetadataReader)candidateToCheck,configClass)));
        }
      }
    }
 catch (    ClassNotFoundException ex) {
      throw new NestedIOException("Failed to load import candidate class",ex);
    }
 finally {
      this.importStack.pop();
    }
  }
}
