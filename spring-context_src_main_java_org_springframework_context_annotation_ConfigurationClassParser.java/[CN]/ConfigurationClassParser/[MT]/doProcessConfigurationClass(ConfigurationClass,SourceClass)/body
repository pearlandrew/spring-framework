{
  processMemberClasses(configClass,sourceClass);
  for (  AnnotationAttributes propertySource : AnnotationConfigUtils.attributesForRepeatable(sourceClass.getMetadata(),PropertySources.class,org.springframework.context.annotation.PropertySource.class)) {
    if (!(this.environment instanceof ConfigurableEnvironment)) {
      logger.warn("Ignoring @PropertySource annotation on " + sourceClass.getMetadata().getClassName() + "Reason: Environment must implement ConfigurableEnvironment");
    }
 else {
      processPropertySource(propertySource);
    }
  }
  AnnotationAttributes componentScan=AnnotationConfigUtils.attributesFor(sourceClass.getMetadata(),ComponentScan.class);
  if (componentScan != null) {
    if (!this.conditionEvaluator.shouldSkip(sourceClass.getMetadata(),ConfigurationPhase.REGISTER_BEAN)) {
      Set<BeanDefinitionHolder> scannedBeanDefinitions=this.componentScanParser.parse(componentScan,sourceClass.getMetadata().getClassName());
      for (      BeanDefinitionHolder holder : scannedBeanDefinitions) {
        if (ConfigurationClassUtils.checkConfigurationClassCandidate(holder.getBeanDefinition(),this.metadataReaderFactory)) {
          parse(holder.getBeanDefinition().getBeanClassName(),holder.getBeanName());
        }
      }
    }
  }
  processImports(configClass,sourceClass,getImports(sourceClass),true,false);
  if (sourceClass.getMetadata().isAnnotated(ImportResource.class.getName())) {
    AnnotationAttributes importResource=AnnotationConfigUtils.attributesFor(sourceClass.getMetadata(),ImportResource.class);
    String[] resources=importResource.getStringArray("value");
    Class<? extends BeanDefinitionReader> readerClass=importResource.getClass("reader");
    for (    String resource : resources) {
      String resolvedResource=this.environment.resolveRequiredPlaceholders(resource);
      configClass.addImportedResource(resolvedResource,readerClass);
    }
  }
  Set<MethodMetadata> beanMethods=sourceClass.getMetadata().getAnnotatedMethods(Bean.class.getName());
  for (  MethodMetadata methodMetadata : beanMethods) {
    configClass.addBeanMethod(new BeanMethod(methodMetadata,configClass));
  }
  if (sourceClass.getMetadata().hasSuperClass()) {
    String superclass=sourceClass.getMetadata().getSuperClassName();
    if (!superclass.startsWith("java") && !this.knownSuperclasses.containsKey(superclass)) {
      this.knownSuperclasses.put(superclass,configClass);
      return sourceClass.getSuperClass();
    }
  }
  return null;
}
