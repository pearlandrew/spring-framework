{
  String className=metadata.getClassName();
  if (visited.add(className)) {
    if (metadata instanceof StandardAnnotationMetadata) {
      StandardAnnotationMetadata stdMetadata=(StandardAnnotationMetadata)metadata;
      for (      Annotation ann : stdMetadata.getIntrospectedClass().getAnnotations()) {
        if (!ann.annotationType().getName().startsWith("java") && !(ann instanceof Import)) {
          collectImports(new StandardAnnotationMetadata(ann.annotationType()),imports,visited);
        }
      }
      Map<String,Object> attributes=stdMetadata.getAnnotationAttributes(Import.class.getName(),false);
      if (attributes != null) {
        Class[] value=(Class[])attributes.get("value");
        if (!ObjectUtils.isEmpty(value)) {
          imports.addAll(Arrays.asList(value));
        }
      }
    }
 else {
      for (      String annotationType : metadata.getAnnotationTypes()) {
        if (!className.startsWith("java") && !className.equals(Import.class.getName())) {
          try {
            collectImports(new StandardAnnotationMetadata(this.resourceLoader.getClassLoader().loadClass(annotationType)),imports,visited);
          }
 catch (          ClassNotFoundException ex) {
          }
        }
      }
      Map<String,Object> attributes=metadata.getAnnotationAttributes(Import.class.getName(),true);
      if (attributes != null) {
        String[] value=(String[])attributes.get("value");
        if (!ObjectUtils.isEmpty(value)) {
          imports.addAll(Arrays.asList(value));
        }
      }
    }
  }
}
