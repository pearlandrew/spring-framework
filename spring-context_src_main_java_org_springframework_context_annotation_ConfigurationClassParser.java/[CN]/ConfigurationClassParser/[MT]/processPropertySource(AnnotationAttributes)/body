{
  String name=propertySource.getString("name");
  if (!StringUtils.hasLength(name)) {
    name=null;
  }
  String encoding=propertySource.getString("encoding");
  if (!StringUtils.hasLength(encoding)) {
    encoding=null;
  }
  String[] locations=propertySource.getStringArray("value");
  Assert.isTrue(locations.length > 0,"At least one @PropertySource(value) location is required");
  boolean ignoreResourceNotFound=propertySource.getBoolean("ignoreResourceNotFound");
  Class<? extends PropertySourceFactory> factoryClass=propertySource.getClass("factory");
  PropertySourceFactory factory=(factoryClass == PropertySourceFactory.class ? DEFAULT_PROPERTY_SOURCE_FACTORY : BeanUtils.instantiate(factoryClass));
  for (  String location : locations) {
    try {
      String resolvedLocation=this.environment.resolveRequiredPlaceholders(location);
      Resource resource=this.resourceLoader.getResource(resolvedLocation);
      addPropertySource(factory.createPropertySource(name,new EncodedResource(resource,encoding)));
    }
 catch (    IllegalArgumentException ex) {
      if (!ignoreResourceNotFound) {
        throw ex;
      }
    }
catch (    FileNotFoundException ex) {
      if (!ignoreResourceNotFound) {
        throw ex;
      }
    }
  }
}
