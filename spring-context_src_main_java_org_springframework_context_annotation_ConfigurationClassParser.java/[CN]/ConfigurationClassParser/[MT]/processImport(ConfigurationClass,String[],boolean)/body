{
  if (checkForCircularImports && this.importStack.contains(configClass)) {
    this.problemReporter.error(new CircularImportProblem(configClass,this.importStack,configClass.getMetadata()));
  }
 else {
    this.importStack.push(configClass);
    AnnotationMetadata importingClassMetadata=configClass.getMetadata();
    for (    String candidate : classesToImport) {
      MetadataReader reader=this.metadataReaderFactory.getMetadataReader(candidate);
      if (new AssignableTypeFilter(ImportSelector.class).match(reader,this.metadataReaderFactory)) {
        try {
          ImportSelector selector=BeanUtils.instantiateClass(this.resourceLoader.getClassLoader().loadClass(candidate),ImportSelector.class);
          processImport(configClass,selector.selectImports(importingClassMetadata),false);
        }
 catch (        ClassNotFoundException ex) {
          throw new IllegalStateException(ex);
        }
      }
 else       if (new AssignableTypeFilter(ImportBeanDefinitionRegistrar.class).match(reader,metadataReaderFactory)) {
        try {
          ImportBeanDefinitionRegistrar registrar=BeanUtils.instantiateClass(this.resourceLoader.getClassLoader().loadClass(candidate),ImportBeanDefinitionRegistrar.class);
          invokeAwareMethods(registrar);
          registrar.registerBeanDefinitions(importingClassMetadata,registry);
        }
 catch (        ClassNotFoundException ex) {
          throw new IllegalStateException(ex);
        }
      }
 else {
        this.importStack.registerImport(importingClassMetadata.getClassName(),candidate);
        processConfigurationClass(new ConfigurationClass(reader,true));
      }
    }
    this.importStack.pop();
  }
}
