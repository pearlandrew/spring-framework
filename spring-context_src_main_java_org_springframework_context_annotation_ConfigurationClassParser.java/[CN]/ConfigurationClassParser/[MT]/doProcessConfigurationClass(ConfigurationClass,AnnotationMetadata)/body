{
  processMemberClasses(configClass,metadata);
  AnnotationAttributes propertySource=attributesFor(metadata,org.springframework.context.annotation.PropertySource.class);
  if (propertySource != null) {
    processPropertySource(propertySource);
  }
  AnnotationAttributes componentScan=attributesFor(metadata,ComponentScan.class);
  if (componentScan != null) {
    Set<BeanDefinitionHolder> scannedBeanDefinitions=this.componentScanParser.parse(componentScan,metadata.getClassName());
    for (    BeanDefinitionHolder holder : scannedBeanDefinitions) {
      if (ConfigurationClassUtils.checkConfigurationClassCandidate(holder.getBeanDefinition(),this.metadataReaderFactory)) {
        this.parse(holder.getBeanDefinition().getBeanClassName(),holder.getBeanName());
      }
    }
  }
  Set<Object> imports=new LinkedHashSet<Object>();
  Set<Object> visited=new LinkedHashSet<Object>();
  collectImports(metadata,imports,visited);
  if (!imports.isEmpty()) {
    processImport(configClass,imports,true);
  }
  if (metadata.isAnnotated(ImportResource.class.getName())) {
    AnnotationAttributes importResource=attributesFor(metadata,ImportResource.class);
    String[] resources=importResource.getStringArray("value");
    Class<? extends BeanDefinitionReader> readerClass=importResource.getClass("reader");
    for (    String resource : resources) {
      configClass.addImportedResource(resource,readerClass);
    }
  }
  Set<MethodMetadata> beanMethods=metadata.getAnnotatedMethods(Bean.class.getName());
  for (  MethodMetadata methodMetadata : beanMethods) {
    configClass.addBeanMethod(new BeanMethod(methodMetadata,configClass));
  }
  if (metadata.hasSuperClass()) {
    String superclass=metadata.getSuperClassName();
    if (this.knownSuperclasses.add(superclass)) {
      if (metadata instanceof StandardAnnotationMetadata) {
        Class<?> clazz=((StandardAnnotationMetadata)metadata).getIntrospectedClass();
        return new StandardAnnotationMetadata(clazz.getSuperclass(),true);
      }
 else       if (superclass.startsWith("java")) {
        try {
          return new StandardAnnotationMetadata(this.resourceLoader.getClassLoader().loadClass(superclass),true);
        }
 catch (        ClassNotFoundException ex) {
          throw new IllegalStateException(ex);
        }
      }
 else {
        MetadataReader reader=this.metadataReaderFactory.getMetadataReader(superclass);
        return reader.getAnnotationMetadata();
      }
    }
  }
  return null;
}
