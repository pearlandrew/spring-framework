{
  for (  String memberClassName : metadata.getMemberClassNames()) {
    MetadataReader reader=this.metadataReaderFactory.getMetadataReader(memberClassName);
    AnnotationMetadata memberClassMetadata=reader.getAnnotationMetadata();
    if (ConfigurationClassUtils.isConfigurationCandidate(memberClassMetadata)) {
      processConfigurationClass(new ConfigurationClass(reader,true));
    }
  }
  AnnotationAttributes propertySource=attributesFor(metadata,org.springframework.context.annotation.PropertySource.class);
  if (propertySource != null) {
    String name=propertySource.getString("name");
    String[] locations=propertySource.getStringArray("value");
    int nLocations=locations.length;
    if (nLocations == 0) {
      throw new IllegalArgumentException("At least one @PropertySource(value) location is required");
    }
    for (int i=0; i < nLocations; i++) {
      locations[i]=this.environment.resolveRequiredPlaceholders(locations[i]);
    }
    ClassLoader classLoader=this.resourceLoader.getClassLoader();
    if (!StringUtils.hasText(name)) {
      for (      String location : locations) {
        this.propertySources.push(new ResourcePropertySource(location,classLoader));
      }
    }
 else {
      if (nLocations == 1) {
        this.propertySources.push(new ResourcePropertySource(name,locations[0],classLoader));
      }
 else {
        CompositePropertySource ps=new CompositePropertySource(name);
        for (        String location : locations) {
          ps.addPropertySource(new ResourcePropertySource(location,classLoader));
        }
        this.propertySources.push(ps);
      }
    }
  }
  AnnotationAttributes componentScan=attributesFor(metadata,ComponentScan.class);
  if (componentScan != null) {
    Set<BeanDefinitionHolder> scannedBeanDefinitions=this.componentScanParser.parse(componentScan,metadata.getClassName());
    for (    BeanDefinitionHolder holder : scannedBeanDefinitions) {
      if (ConfigurationClassUtils.checkConfigurationClassCandidate(holder.getBeanDefinition(),this.metadataReaderFactory)) {
        this.parse(holder.getBeanDefinition().getBeanClassName(),holder.getBeanName());
      }
    }
  }
  processImport(configClass,getImports(metadata.getClassName()),true);
  if (metadata.isAnnotated(ImportResource.class.getName())) {
    AnnotationAttributes importResource=attributesFor(metadata,ImportResource.class);
    String[] resources=importResource.getStringArray("value");
    Class<? extends BeanDefinitionReader> readerClass=importResource.getClass("reader");
    for (    String resource : resources) {
      configClass.addImportedResource(resource,readerClass);
    }
  }
  Set<MethodMetadata> beanMethods=metadata.getAnnotatedMethods(Bean.class.getName());
  for (  MethodMetadata methodMetadata : beanMethods) {
    configClass.addBeanMethod(new BeanMethod(methodMetadata,configClass));
  }
  if (metadata.hasSuperClass()) {
    String superclass=metadata.getSuperClassName();
    if (this.knownSuperclasses.add(superclass)) {
      if (metadata instanceof StandardAnnotationMetadata) {
        Class<?> clazz=((StandardAnnotationMetadata)metadata).getIntrospectedClass();
        return new StandardAnnotationMetadata(clazz.getSuperclass(),true);
      }
 else {
        MetadataReader reader=this.metadataReaderFactory.getMetadataReader(superclass);
        return reader.getAnnotationMetadata();
      }
    }
  }
  return null;
}
