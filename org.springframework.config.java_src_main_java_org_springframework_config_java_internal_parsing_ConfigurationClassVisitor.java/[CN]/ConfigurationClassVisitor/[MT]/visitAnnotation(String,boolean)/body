{
  String annoTypeName=AsmUtils.convertTypeDescriptorToClassName(annoTypeDesc);
  if (Configuration.class.getName().equals(annoTypeName)) {
    Configuration mutableConfiguration=createMutableAnnotation(Configuration.class);
    configClass.setMetadata(mutableConfiguration);
    return new MutableAnnotationVisitor(mutableConfiguration,classLoader);
  }
  PluginAnnotationDetectingClassVisitor classVisitor=new PluginAnnotationDetectingClassVisitor(classLoader);
  String className=AsmUtils.convertTypeDescriptorToClassName(annoTypeDesc);
  String resourcePath=ClassUtils.convertClassNameToResourcePath(className);
  ClassReader reader=AsmUtils.newClassReader(resourcePath,classLoader);
  reader.accept(classVisitor,false);
  if (!classVisitor.hasPluginAnnotation())   return super.visitAnnotation(annoTypeDesc,visible);
  Class<? extends Annotation> annoType=loadToolingSafeClass(annoTypeName,classLoader);
  if (annoType == null)   return super.visitAnnotation(annoTypeDesc,visible);
  Annotation pluginAnno=createMutableAnnotation(annoType);
  configClass.addPluginAnnotation(pluginAnno);
  return new MutableAnnotationVisitor(pluginAnno,classLoader);
}
