{
  if (this.headers == null) {
    this.headers=new HttpHeaders();
    for (Enumeration<?> headerNames=this.servletRequest.getHeaderNames(); headerNames.hasMoreElements(); ) {
      String headerName=(String)headerNames.nextElement();
      for (Enumeration<?> headerValues=this.servletRequest.getHeaders(headerName); headerValues.hasMoreElements(); ) {
        String headerValue=(String)headerValues.nextElement();
        this.headers.add(headerName,headerValue);
      }
    }
    try {
      MediaType contentType=this.headers.getContentType();
      if (contentType == null) {
        String requestContentType=this.servletRequest.getContentType();
        if (StringUtils.hasLength(requestContentType)) {
          contentType=MediaType.parseMediaType(requestContentType);
          this.headers.setContentType(contentType);
        }
      }
      if (contentType != null && contentType.getCharset() == null) {
        String requestEncoding=this.servletRequest.getCharacterEncoding();
        if (StringUtils.hasLength(requestEncoding)) {
          Charset charSet=Charset.forName(requestEncoding);
          Map<String,String> params=new LinkedCaseInsensitiveMap<>();
          params.putAll(contentType.getParameters());
          params.put("charset",charSet.toString());
          MediaType newContentType=new MediaType(contentType.getType(),contentType.getSubtype(),params);
          this.headers.setContentType(newContentType);
        }
      }
    }
 catch (    InvalidMediaTypeException ex) {
    }
    if (this.headers.getContentLength() < 0) {
      int requestContentLength=this.servletRequest.getContentLength();
      if (requestContentLength != -1) {
        this.headers.setContentLength(requestContentLength);
      }
    }
  }
  return this.headers;
}
