{
  Map<String,Lifecycle> lifecycleBeans=getLifecycleBeans();
  Map<Integer,LifecycleGroup> phases=new HashMap<>();
  for (  Map.Entry<String,? extends Lifecycle> entry : lifecycleBeans.entrySet()) {
    Lifecycle bean=entry.getValue();
    if (!autoStartupOnly || (bean instanceof SmartLifecycle && ((SmartLifecycle)bean).isAutoStartup())) {
      int phase=getPhase(bean);
      LifecycleGroup group=phases.get(phase);
      if (group == null) {
        group=new LifecycleGroup(phase,this.timeoutPerShutdownPhase,lifecycleBeans,autoStartupOnly);
        phases.put(phase,group);
      }
      group.add(entry.getKey(),bean);
    }
  }
  if (phases.size() > 0) {
    List<Integer> keys=new ArrayList<>(phases.keySet());
    Collections.sort(keys);
    for (    Integer key : keys) {
      phases.get(key).start();
    }
  }
}
