{
  Lifecycle bean=lifecycleBeans.remove(beanName);
  if (bean != null) {
    String[] dependentBeans=this.beanFactory.getDependentBeans(beanName);
    for (    String dependentBean : dependentBeans) {
      doStop(lifecycleBeans,dependentBean,latch,countDownBeanNames);
    }
    try {
      if (bean.isRunning()) {
        if (bean instanceof SmartLifecycle) {
          if (logger.isDebugEnabled()) {
            logger.debug("Asking bean '" + beanName + "' of type ["+ bean.getClass()+ "] to stop");
          }
          countDownBeanNames.add(beanName);
          ((SmartLifecycle)bean).stop(new Runnable(){
            @Override public void run(){
              latch.countDown();
              countDownBeanNames.remove(beanName);
              if (logger.isDebugEnabled()) {
                logger.debug("Bean '" + beanName + "' completed its stop procedure");
              }
            }
          }
);
        }
 else {
          if (logger.isDebugEnabled()) {
            logger.debug("Stopping bean '" + beanName + "' of type ["+ bean.getClass()+ "]");
          }
          bean.stop();
          if (logger.isDebugEnabled()) {
            logger.debug("Successfully stopped bean '" + beanName + "'");
          }
        }
      }
 else       if (bean instanceof SmartLifecycle) {
        latch.countDown();
      }
    }
 catch (    Throwable ex) {
      if (logger.isWarnEnabled()) {
        logger.warn("Failed to stop bean '" + beanName + "'",ex);
      }
    }
  }
}
