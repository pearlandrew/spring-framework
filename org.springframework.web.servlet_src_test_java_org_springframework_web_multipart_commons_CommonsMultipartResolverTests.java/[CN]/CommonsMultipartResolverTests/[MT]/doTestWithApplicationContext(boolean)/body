{
  StaticWebApplicationContext wac=new StaticWebApplicationContext();
  wac.setServletContext(new MockServletContext());
  wac.getServletContext().setAttribute(WebUtils.TEMP_DIR_CONTEXT_ATTRIBUTE,new File("mytemp"));
  wac.refresh();
  MockCommonsMultipartResolver resolver=new MockCommonsMultipartResolver();
  resolver.setMaxUploadSize(1000);
  resolver.setMaxInMemorySize(100);
  resolver.setDefaultEncoding("enc");
  if (lazy) {
    resolver.setResolveLazily(false);
  }
  resolver.setServletContext(wac.getServletContext());
  assertEquals(1000,resolver.getFileUpload().getSizeMax());
  assertEquals(100,resolver.getFileItemFactory().getSizeThreshold());
  assertEquals("enc",resolver.getFileUpload().getHeaderEncoding());
  assertTrue(resolver.getFileItemFactory().getRepository().getAbsolutePath().endsWith("mytemp"));
  MockHttpServletRequest originalRequest=new MockHttpServletRequest();
  originalRequest.setMethod("POST");
  originalRequest.setContentType("multipart/form-data");
  originalRequest.addHeader("Content-type","multipart/form-data");
  originalRequest.addParameter("getField","getValue");
  assertTrue(resolver.isMultipart(originalRequest));
  MultipartHttpServletRequest request=resolver.resolveMultipart(originalRequest);
  Set parameterNames=new HashSet();
  Enumeration parameterEnum=request.getParameterNames();
  while (parameterEnum.hasMoreElements()) {
    parameterNames.add(parameterEnum.nextElement());
  }
  assertEquals(3,parameterNames.size());
  assertTrue(parameterNames.contains("field3"));
  assertTrue(parameterNames.contains("field4"));
  assertTrue(parameterNames.contains("getField"));
  assertEquals("value3",request.getParameter("field3"));
  List parameterValues=Arrays.asList(request.getParameterValues("field3"));
  assertEquals(1,parameterValues.size());
  assertTrue(parameterValues.contains("value3"));
  assertEquals("value4",request.getParameter("field4"));
  parameterValues=Arrays.asList(request.getParameterValues("field4"));
  assertEquals(2,parameterValues.size());
  assertTrue(parameterValues.contains("value4"));
  assertTrue(parameterValues.contains("value5"));
  assertEquals("value4",request.getParameter("field4"));
  assertEquals("getValue",request.getParameter("getField"));
  List parameterMapKeys=new ArrayList();
  List parameterMapValues=new ArrayList();
  for (Iterator parameterMapIter=request.getParameterMap().keySet().iterator(); parameterMapIter.hasNext(); ) {
    String key=(String)parameterMapIter.next();
    parameterMapKeys.add(key);
    parameterMapValues.add(request.getParameterMap().get(key));
  }
  assertEquals(3,parameterMapKeys.size());
  assertEquals(3,parameterMapValues.size());
  int field3Index=parameterMapKeys.indexOf("field3");
  int field4Index=parameterMapKeys.indexOf("field4");
  int getFieldIndex=parameterMapKeys.indexOf("getField");
  assertTrue(field3Index != -1);
  assertTrue(field4Index != -1);
  assertTrue(getFieldIndex != -1);
  parameterValues=Arrays.asList((String[])parameterMapValues.get(field3Index));
  assertEquals(1,parameterValues.size());
  assertTrue(parameterValues.contains("value3"));
  parameterValues=Arrays.asList((String[])parameterMapValues.get(field4Index));
  assertEquals(2,parameterValues.size());
  assertTrue(parameterValues.contains("value4"));
  assertTrue(parameterValues.contains("value5"));
  parameterValues=Arrays.asList((String[])parameterMapValues.get(getFieldIndex));
  assertEquals(1,parameterValues.size());
  assertTrue(parameterValues.contains("getValue"));
  Set fileNames=new HashSet();
  Iterator fileIter=request.getFileNames();
  while (fileIter.hasNext()) {
    fileNames.add(fileIter.next());
  }
  assertEquals(3,fileNames.size());
  assertTrue(fileNames.contains("field1"));
  assertTrue(fileNames.contains("field2"));
  assertTrue(fileNames.contains("field2x"));
  CommonsMultipartFile file1=(CommonsMultipartFile)request.getFile("field1");
  CommonsMultipartFile file2=(CommonsMultipartFile)request.getFile("field2");
  CommonsMultipartFile file2x=(CommonsMultipartFile)request.getFile("field2x");
  Map fileMap=request.getFileMap();
  assertEquals(3,fileMap.size());
  assertTrue(fileMap.containsKey("field1"));
  assertTrue(fileMap.containsKey("field2"));
  assertTrue(fileMap.containsKey("field2x"));
  assertEquals(file1,fileMap.get("field1"));
  assertEquals(file2,fileMap.get("field2"));
  assertEquals(file2x,fileMap.get("field2x"));
  assertEquals("type1",file1.getContentType());
  assertEquals("type2",file2.getContentType());
  assertEquals("type2",file2x.getContentType());
  assertEquals("field1.txt",file1.getOriginalFilename());
  assertEquals("field2.txt",file2.getOriginalFilename());
  assertEquals("field2x.txt",file2x.getOriginalFilename());
  assertEquals("text1",new String(file1.getBytes()));
  assertEquals("text2",new String(file2.getBytes()));
  assertEquals(5,file1.getSize());
  assertEquals(5,file2.getSize());
  assertTrue(file1.getInputStream() instanceof ByteArrayInputStream);
  assertTrue(file2.getInputStream() instanceof ByteArrayInputStream);
  File transfer1=new File("C:/transfer1");
  File transfer2=new File("C:/transfer2");
  file1.transferTo(transfer1);
  file2.transferTo(transfer2);
  assertEquals(transfer1,((MockFileItem)file1.getFileItem()).writtenFile);
  assertEquals(transfer2,((MockFileItem)file2.getFileItem()).writtenFile);
  MultipartTestBean1 mtb1=new MultipartTestBean1();
  assertEquals(null,mtb1.getField1());
  assertEquals(null,mtb1.getField2());
  ServletRequestDataBinder binder=new ServletRequestDataBinder(mtb1,"mybean");
  binder.registerCustomEditor(byte[].class,new ByteArrayMultipartFileEditor());
  binder.bind(request);
  assertEquals(file1,mtb1.getField1());
  assertEquals(new String(file2.getBytes()),new String(mtb1.getField2()));
  MultipartTestBean2 mtb2=new MultipartTestBean2();
  assertEquals(null,mtb2.getField1());
  assertEquals(null,mtb2.getField2());
  binder=new ServletRequestDataBinder(mtb2,"mybean");
  binder.registerCustomEditor(String.class,"field1",new StringMultipartFileEditor());
  binder.registerCustomEditor(String.class,"field2",new StringMultipartFileEditor("UTF-16"));
  binder.bind(request);
  assertEquals(new String(file1.getBytes()),mtb2.getField1());
  assertEquals(new String(file2.getBytes(),"UTF-16"),mtb2.getField2());
  resolver.cleanupMultipart(request);
  assertTrue(((MockFileItem)file1.getFileItem()).deleted);
  assertTrue(((MockFileItem)file2.getFileItem()).deleted);
  resolver.setEmpty(true);
  request=resolver.resolveMultipart(originalRequest);
  binder.setBindEmptyMultipartFiles(false);
  String firstBound=mtb2.getField1();
  binder.bind(request);
  assertTrue(mtb2.getField1().length() > 0);
  assertEquals(firstBound,mtb2.getField1());
  request=resolver.resolveMultipart(originalRequest);
  binder.setBindEmptyMultipartFiles(true);
  binder.bind(request);
  assertTrue(mtb2.getField1().length() == 0);
}
