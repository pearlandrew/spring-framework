{
synchronized (this.mergedBeanDefinitions) {
    RootBeanDefinition mbd=null;
    if (containingBd == null) {
      mbd=this.mergedBeanDefinitions.get(beanName);
    }
    if (mbd == null) {
      if (bd.getParentName() == null) {
        if (bd instanceof RootBeanDefinition) {
          mbd=((RootBeanDefinition)bd).cloneBeanDefinition();
        }
 else {
          mbd=new RootBeanDefinition(bd);
        }
      }
 else {
        BeanDefinition pbd;
        try {
          String parentBeanName=transformedBeanName(bd.getParentName());
          if (!beanName.equals(parentBeanName)) {
            pbd=getMergedBeanDefinition(parentBeanName);
          }
 else {
            if (getParentBeanFactory() instanceof ConfigurableBeanFactory) {
              pbd=((ConfigurableBeanFactory)getParentBeanFactory()).getMergedBeanDefinition(parentBeanName);
            }
 else {
              throw new NoSuchBeanDefinitionException(bd.getParentName(),"Parent name '" + bd.getParentName() + "' is equal to bean name '"+ beanName+ "': cannot be resolved without an AbstractBeanFactory parent");
            }
          }
        }
 catch (        NoSuchBeanDefinitionException ex) {
          throw new BeanDefinitionStoreException(bd.getResourceDescription(),beanName,"Could not resolve parent bean definition '" + bd.getParentName() + "'",ex);
        }
        mbd=new RootBeanDefinition(pbd);
        mbd.overrideFrom(bd);
      }
      if (!StringUtils.hasLength(mbd.getScope())) {
        mbd.setScope(BeanDefinition.SCOPE_SINGLETON);
      }
      if (containingBd != null && !mbd.isPrototype() && !mbd.getScope().equals(containingBd.getScope())) {
        mbd.setScope(containingBd.isSingleton() ? BeanDefinition.SCOPE_PROTOTYPE : containingBd.getScope());
      }
      if (containingBd == null && isCacheBeanMetadata()) {
        this.mergedBeanDefinitions.put(beanName,mbd);
      }
    }
    return mbd;
  }
}
