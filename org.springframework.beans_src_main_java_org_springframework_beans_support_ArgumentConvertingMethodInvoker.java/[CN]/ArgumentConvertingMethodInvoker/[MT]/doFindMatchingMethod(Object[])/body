{
  TypeConverter converter=getTypeConverter();
  if (converter != null) {
    String targetMethod=getTargetMethod();
    Method matchingMethod=null;
    int argCount=arguments.length;
    Method[] candidates=ReflectionUtils.getAllDeclaredMethods(getTargetClass());
    int minTypeDiffWeight=Integer.MAX_VALUE;
    Object[] argumentsToUse=null;
    for (    Method candidate : candidates) {
      if (candidate.getName().equals(targetMethod)) {
        Class[] paramTypes=candidate.getParameterTypes();
        if (paramTypes.length == argCount) {
          Object[] convertedArguments=new Object[argCount];
          boolean match=true;
          for (int j=0; j < argCount && match; j++) {
            try {
              convertedArguments[j]=converter.convertIfNecessary(arguments[j],paramTypes[j]);
            }
 catch (            TypeMismatchException ex) {
              match=false;
            }
          }
          if (match) {
            int typeDiffWeight=getTypeDifferenceWeight(paramTypes,convertedArguments);
            if (typeDiffWeight < minTypeDiffWeight) {
              minTypeDiffWeight=typeDiffWeight;
              matchingMethod=candidate;
              argumentsToUse=convertedArguments;
            }
          }
        }
      }
    }
    if (matchingMethod != null) {
      setArguments(argumentsToUse);
      return matchingMethod;
    }
  }
  return null;
}
