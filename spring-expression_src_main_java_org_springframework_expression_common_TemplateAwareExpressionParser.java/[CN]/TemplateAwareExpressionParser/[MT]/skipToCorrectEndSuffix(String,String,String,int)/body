{
  int pos=afterPrefixIndex;
  int maxlen=expressionString.length();
  int nextSuffix=expressionString.indexOf(suffix,afterPrefixIndex);
  if (nextSuffix == -1) {
    return -1;
  }
  Stack<Bracket> stack=new Stack<>();
  while (pos < maxlen) {
    if (isSuffixHere(expressionString,pos,suffix) && stack.isEmpty()) {
      break;
    }
    char ch=expressionString.charAt(pos);
switch (ch) {
case '{':
case '[':
case '(':
      stack.push(new Bracket(ch,pos));
    break;
case '}':
case ']':
case ')':
  if (stack.isEmpty()) {
    throw new ParseException(expressionString,pos,"Found closing '" + ch + "' at position "+ pos+ " without an opening '"+ Bracket.theOpenBracketFor(ch)+ "'");
  }
Bracket p=stack.pop();
if (!p.compatibleWithCloseBracket(ch)) {
throw new ParseException(expressionString,pos,"Found closing '" + ch + "' at position "+ pos+ " but most recent opening is '"+ p.bracket+ "' at position "+ p.pos);
}
break;
case '\'':
case '"':
int endLiteral=expressionString.indexOf(ch,pos + 1);
if (endLiteral == -1) {
throw new ParseException(expressionString,pos,"Found non terminating string literal starting at position " + pos);
}
pos=endLiteral;
break;
}
pos++;
}
if (!stack.isEmpty()) {
Bracket p=stack.pop();
throw new ParseException(expressionString,p.pos,"Missing closing '" + Bracket.theCloseBracketFor(p.bracket) + "' for '"+ p.bracket+ "' at position "+ p.pos);
}
if (!isSuffixHere(expressionString,pos,suffix)) {
return -1;
}
return pos;
}
