{
  Payload ann=parameter.getParameterAnnotation(Payload.class);
  if (ann != null && StringUtils.hasText(ann.expression())) {
    throw new IllegalStateException("@Payload SpEL expressions not supported by this resolver");
  }
  Object payload=message.getPayload();
  if (isEmptyPayload(payload)) {
    if (ann == null || ann.required()) {
      String paramName=getParameterName(parameter);
      BindingResult bindingResult=new BeanPropertyBindingResult(payload,paramName);
      bindingResult.addError(new ObjectError(paramName,"Payload value must not be empty"));
      throw new MethodArgumentNotValidException(message,parameter,bindingResult);
    }
 else {
      return null;
    }
  }
  Class<?> targetClass=parameter.getParameterType();
  if (ClassUtils.isAssignable(targetClass,payload.getClass())) {
    validate(message,parameter,payload);
    return payload;
  }
 else {
    if (this.converter instanceof SmartMessageConverter) {
      SmartMessageConverter smartConverter=(SmartMessageConverter)this.converter;
      payload=smartConverter.fromMessage(message,targetClass,parameter);
    }
 else {
      payload=this.converter.fromMessage(message,targetClass);
    }
    if (payload == null) {
      throw new MessageConversionException(message,"No converter found to convert to " + targetClass + ", message="+ message);
    }
    validate(message,parameter,payload);
    return payload;
  }
}
