{
  NopAnnotationIntrospector annotationIntrospector=NopAnnotationIntrospector.instance;
  Jackson2ObjectMapperBuilder builder=Jackson2ObjectMapperBuilder.instance(new ObjectMapper());
  Map<Class<?>,JsonDeserializer<?>> deserializers=new HashMap<Class<?>,JsonDeserializer<?>>();
  deserializers.put(Date.class,new DateDeserializers.DateDeserializer());
  JsonSerializer<Class<?>> serializer1=new ClassSerializer();
  JsonSerializer<Number> serializer2=new NumberSerializer();
  builder.serializers(serializer1);
  builder.serializersByType(Collections.<Class<?>,JsonSerializer<?>>singletonMap(Boolean.class,serializer2));
  builder.deserializersByType(deserializers);
  builder.annotationIntrospector(annotationIntrospector);
  builder.featuresToEnable(SerializationFeature.FAIL_ON_EMPTY_BEANS,DeserializationFeature.UNWRAP_ROOT_VALUE,JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER,JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS);
  builder.featuresToDisable(MapperFeature.AUTO_DETECT_GETTERS,MapperFeature.AUTO_DETECT_FIELDS,JsonParser.Feature.AUTO_CLOSE_SOURCE,JsonGenerator.Feature.QUOTE_FIELD_NAMES);
  builder.serializationInclusion(JsonInclude.Include.NON_NULL);
  ObjectMapper objectMapper=builder.build();
  assertTrue(getSerializerFactoryConfig(objectMapper).hasSerializers());
  assertTrue(getDeserializerFactoryConfig(objectMapper).hasDeserializers());
  Serializers serializers=getSerializerFactoryConfig(objectMapper).serializers().iterator().next();
  assertTrue(serializers.findSerializer(null,SimpleType.construct(Class.class),null) == serializer1);
  assertTrue(serializers.findSerializer(null,SimpleType.construct(Boolean.class),null) == serializer2);
  assertNull(serializers.findSerializer(null,SimpleType.construct(Number.class),null));
  assertTrue(annotationIntrospector == objectMapper.getSerializationConfig().getAnnotationIntrospector());
  assertTrue(annotationIntrospector == objectMapper.getDeserializationConfig().getAnnotationIntrospector());
  assertTrue(objectMapper.getSerializationConfig().isEnabled(SerializationFeature.FAIL_ON_EMPTY_BEANS));
  assertTrue(objectMapper.getDeserializationConfig().isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE));
  assertTrue(objectMapper.getFactory().isEnabled(JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER));
  assertTrue(objectMapper.getFactory().isEnabled(JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS));
  assertFalse(objectMapper.getSerializationConfig().isEnabled(MapperFeature.AUTO_DETECT_GETTERS));
  assertFalse(objectMapper.getDeserializationConfig().isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION));
  assertFalse(objectMapper.getDeserializationConfig().isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES));
  assertFalse(objectMapper.getDeserializationConfig().isEnabled(MapperFeature.AUTO_DETECT_FIELDS));
  assertFalse(objectMapper.getFactory().isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE));
  assertFalse(objectMapper.getFactory().isEnabled(JsonGenerator.Feature.QUOTE_FIELD_NAMES));
  assertTrue(objectMapper.getSerializationConfig().getSerializationInclusion() == JsonInclude.Include.NON_NULL);
}
