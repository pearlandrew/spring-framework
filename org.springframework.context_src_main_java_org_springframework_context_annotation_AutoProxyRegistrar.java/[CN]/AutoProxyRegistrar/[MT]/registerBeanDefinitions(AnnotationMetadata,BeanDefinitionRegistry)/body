{
  boolean candidateFound=false;
  Set<String> annoTypes=importingClassMetadata.getAnnotationTypes();
  for (  String annoType : annoTypes) {
    Map<String,Object> candidate=importingClassMetadata.getAnnotationAttributes(annoType);
    Object mode=candidate.get("mode");
    Object proxyTargetClass=candidate.get("proxyTargetClass");
    if (mode != null && proxyTargetClass != null && mode.getClass().equals(AdviceMode.class) && proxyTargetClass.getClass().equals(Boolean.class)) {
      candidateFound=true;
      if (mode == AdviceMode.PROXY) {
        AopConfigUtils.registerAutoProxyCreatorIfNecessary(registry);
        if ((Boolean)proxyTargetClass) {
          AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry);
        }
      }
    }
  }
  if (!candidateFound) {
    String name=getClass().getSimpleName();
    logger.warn(String.format("%s was imported but no annotations were found " + "having both 'mode' and 'proxyTargetClass' attributes of type " + "AdviceMode and boolean respectively. This means that auto proxy "+ "creator registration and configuration may not have occured as "+ "intended, and components may not be proxied as expected. Check to "+ "ensure that %s has been @Import'ed on the same class where these "+ "annotations are declared; otherwise remove the import of %s "+ "altogether.",name,name,name));
  }
}
