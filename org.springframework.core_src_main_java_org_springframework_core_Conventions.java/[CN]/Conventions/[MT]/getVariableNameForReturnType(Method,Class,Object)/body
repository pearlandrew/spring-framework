{
  Assert.notNull(method,"Method must not be null");
  if (Object.class.equals(resolvedType)) {
    if (value == null) {
      throw new IllegalArgumentException("Cannot generate variable name for an Object return type with null value");
    }
    return getVariableName(value);
  }
  Class valueClass;
  boolean pluralize=false;
  if (resolvedType.isArray()) {
    valueClass=resolvedType.getComponentType();
    pluralize=true;
  }
 else   if (Collection.class.isAssignableFrom(resolvedType)) {
    valueClass=GenericCollectionTypeResolver.getCollectionReturnType(method);
    if (valueClass == null) {
      if (!(value instanceof Collection)) {
        throw new IllegalArgumentException("Cannot generate variable name for non-typed Collection return type and a non-Collection value");
      }
      Collection collection=(Collection)value;
      if (collection.isEmpty()) {
        throw new IllegalArgumentException("Cannot generate variable name for non-typed Collection return type and an empty Collection value");
      }
      Object valueToCheck=peekAhead(collection);
      valueClass=getClassForValue(valueToCheck);
    }
    pluralize=true;
  }
 else {
    valueClass=resolvedType;
  }
  String name=ClassUtils.getShortNameAsProperty(valueClass);
  return (pluralize ? pluralize(name) : name);
}
