{
  Class classToIntrospect=factoryClass;
  while (classToIntrospect != null) {
    Type[] ifcs=classToIntrospect.getGenericInterfaces();
    for (    Type ifc : ifcs) {
      if (ifc instanceof ParameterizedType) {
        ParameterizedType paramIfc=(ParameterizedType)ifc;
        Type rawType=paramIfc.getRawType();
        if (AnnotationFormatterFactory.class.equals(rawType)) {
          Type arg=paramIfc.getActualTypeArguments()[0];
          if (arg instanceof TypeVariable) {
            arg=GenericTypeResolver.resolveTypeVariable((TypeVariable)arg,factoryClass);
          }
          if (arg instanceof Class) {
            return (Class)arg;
          }
        }
 else         if (AnnotationFormatterFactory.class.isAssignableFrom((Class)rawType)) {
          return getAnnotationType((Class)rawType);
        }
      }
 else       if (AnnotationFormatterFactory.class.isAssignableFrom((Class)ifc)) {
        return getAnnotationType((Class)ifc);
      }
    }
    classToIntrospect=classToIntrospect.getSuperclass();
  }
  throw new IllegalArgumentException("Unable to extract Annotation type A argument from AnnotationFormatterFactory [" + factoryClass.getName() + "]; does the factory parameterize the <A> generic type?");
}
