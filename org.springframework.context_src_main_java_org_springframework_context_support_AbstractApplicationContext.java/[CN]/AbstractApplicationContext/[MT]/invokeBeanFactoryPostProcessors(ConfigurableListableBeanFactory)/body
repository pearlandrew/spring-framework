{
  for (  BeanFactoryPostProcessor factoryProcessor : getBeanFactoryPostProcessors()) {
    factoryProcessor.postProcessBeanFactory(beanFactory);
  }
  String[] postProcessorNames=beanFactory.getBeanNamesForType(BeanFactoryPostProcessor.class,true,false);
  List<BeanFactoryPostProcessor> priorityOrderedPostProcessors=new ArrayList<BeanFactoryPostProcessor>();
  List<String> orderedPostProcessorNames=new ArrayList<String>();
  List<String> nonOrderedPostProcessorNames=new ArrayList<String>();
  for (  String ppName : postProcessorNames) {
    if (isTypeMatch(ppName,PriorityOrdered.class)) {
      priorityOrderedPostProcessors.add(beanFactory.getBean(ppName,BeanFactoryPostProcessor.class));
    }
 else     if (isTypeMatch(ppName,Ordered.class)) {
      orderedPostProcessorNames.add(ppName);
    }
 else {
      nonOrderedPostProcessorNames.add(ppName);
    }
  }
  OrderComparator.sort(priorityOrderedPostProcessors);
  invokeBeanFactoryPostProcessors(beanFactory,priorityOrderedPostProcessors);
  List<BeanFactoryPostProcessor> orderedPostProcessors=new ArrayList<BeanFactoryPostProcessor>();
  for (  String postProcessorName : orderedPostProcessorNames) {
    orderedPostProcessors.add(getBean(postProcessorName,BeanFactoryPostProcessor.class));
  }
  OrderComparator.sort(orderedPostProcessors);
  invokeBeanFactoryPostProcessors(beanFactory,orderedPostProcessors);
  List<BeanFactoryPostProcessor> nonOrderedPostProcessors=new ArrayList<BeanFactoryPostProcessor>();
  for (  String postProcessorName : nonOrderedPostProcessorNames) {
    nonOrderedPostProcessors.add(getBean(postProcessorName,BeanFactoryPostProcessor.class));
  }
  invokeBeanFactoryPostProcessors(beanFactory,nonOrderedPostProcessors);
}
