{
  if (beanFactory instanceof BeanDefinitionRegistry) {
    BeanDefinitionRegistry registry=(BeanDefinitionRegistry)beanFactory;
    for (    BeanFactoryPostProcessor postProcessor : getBeanFactoryPostProcessors()) {
      if (postProcessor instanceof BeanDefinitionRegistryPostProcessor) {
        ((BeanDefinitionRegistryPostProcessor)postProcessor).postProcessBeanDefinitionRegistry(registry);
      }
    }
    Collection<BeanDefinitionRegistryPostProcessor> registryPostProcessors=beanFactory.getBeansOfType(BeanDefinitionRegistryPostProcessor.class,true,false).values();
    for (    BeanDefinitionRegistryPostProcessor postProcessor : registryPostProcessors) {
      postProcessor.postProcessBeanDefinitionRegistry(registry);
    }
  }
  invokeBeanFactoryPostProcessors(getBeanFactoryPostProcessors(),beanFactory);
  String[] postProcessorNames=beanFactory.getBeanNamesForType(BeanFactoryPostProcessor.class,true,false);
  List<BeanFactoryPostProcessor> priorityOrderedPostProcessors=new ArrayList<BeanFactoryPostProcessor>();
  List<String> orderedPostProcessorNames=new ArrayList<String>();
  List<String> nonOrderedPostProcessorNames=new ArrayList<String>();
  for (  String ppName : postProcessorNames) {
    if (isTypeMatch(ppName,PriorityOrdered.class)) {
      priorityOrderedPostProcessors.add(beanFactory.getBean(ppName,BeanFactoryPostProcessor.class));
    }
 else     if (isTypeMatch(ppName,Ordered.class)) {
      orderedPostProcessorNames.add(ppName);
    }
 else {
      nonOrderedPostProcessorNames.add(ppName);
    }
  }
  OrderComparator.sort(priorityOrderedPostProcessors);
  invokeBeanFactoryPostProcessors(priorityOrderedPostProcessors,beanFactory);
  List<BeanFactoryPostProcessor> orderedPostProcessors=new ArrayList<BeanFactoryPostProcessor>();
  for (  String postProcessorName : orderedPostProcessorNames) {
    orderedPostProcessors.add(getBean(postProcessorName,BeanFactoryPostProcessor.class));
  }
  OrderComparator.sort(orderedPostProcessors);
  invokeBeanFactoryPostProcessors(orderedPostProcessors,beanFactory);
  List<BeanFactoryPostProcessor> nonOrderedPostProcessors=new ArrayList<BeanFactoryPostProcessor>();
  for (  String postProcessorName : nonOrderedPostProcessorNames) {
    nonOrderedPostProcessors.add(getBean(postProcessorName,BeanFactoryPostProcessor.class));
  }
  invokeBeanFactoryPostProcessors(nonOrderedPostProcessors,beanFactory);
}
