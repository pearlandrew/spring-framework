{
  String[] postProcessorNames=beanFactory.getBeanNamesForType(BeanPostProcessor.class,true,false);
  int beanProcessorTargetCount=beanFactory.getBeanPostProcessorCount() + 1 + postProcessorNames.length;
  beanFactory.addBeanPostProcessor(new BeanPostProcessorChecker(beanFactory,beanProcessorTargetCount));
  List<BeanPostProcessor> priorityOrderedPostProcessors=new ArrayList<BeanPostProcessor>();
  List<String> orderedPostProcessorNames=new ArrayList<String>();
  List<String> nonOrderedPostProcessorNames=new ArrayList<String>();
  for (  String ppName : postProcessorNames) {
    if (isTypeMatch(ppName,PriorityOrdered.class)) {
      priorityOrderedPostProcessors.add(beanFactory.getBean(ppName,BeanPostProcessor.class));
    }
 else     if (isTypeMatch(ppName,Ordered.class)) {
      orderedPostProcessorNames.add(ppName);
    }
 else {
      nonOrderedPostProcessorNames.add(ppName);
    }
  }
  OrderComparator.sort(priorityOrderedPostProcessors);
  registerBeanPostProcessors(beanFactory,priorityOrderedPostProcessors);
  List<BeanPostProcessor> orderedPostProcessors=new ArrayList<BeanPostProcessor>();
  for (  String postProcessorName : orderedPostProcessorNames) {
    orderedPostProcessors.add(getBean(postProcessorName,BeanPostProcessor.class));
  }
  OrderComparator.sort(orderedPostProcessors);
  registerBeanPostProcessors(beanFactory,orderedPostProcessors);
  List<BeanPostProcessor> nonOrderedPostProcessors=new ArrayList<BeanPostProcessor>();
  for (  String postProcessorName : nonOrderedPostProcessorNames) {
    nonOrderedPostProcessors.add(getBean(postProcessorName,BeanPostProcessor.class));
  }
  registerBeanPostProcessors(beanFactory,nonOrderedPostProcessors);
}
