{
  try {
    TypeConverter typeConverter=context.getTypeConverter();
    Class<?> type=(targetObject instanceof Class ? (Class<?>)targetObject : targetObject.getClass());
    List<Method> methods=new ArrayList<>(getMethods(type,targetObject));
    MethodFilter filter=(this.filters != null ? this.filters.get(type) : null);
    if (filter != null) {
      List<Method> filtered=filter.filter(methods);
      methods=(filtered instanceof ArrayList ? filtered : new ArrayList<>(filtered));
    }
    if (methods.size() > 1) {
      Collections.sort(methods,new Comparator<Method>(){
        @Override public int compare(        Method m1,        Method m2){
          int m1pl=m1.getParameterCount();
          int m2pl=m2.getParameterCount();
          if (m1pl == m2pl) {
            if (!m1.isVarArgs() && m2.isVarArgs()) {
              return -1;
            }
 else             if (m1.isVarArgs() && !m2.isVarArgs()) {
              return 1;
            }
 else {
              return 0;
            }
          }
          return (m1pl < m2pl ? -1 : (m1pl > m2pl ? 1 : 0));
        }
      }
);
    }
    for (int i=0; i < methods.size(); i++) {
      methods.set(i,BridgeMethodResolver.findBridgedMethod(methods.get(i)));
    }
    Set<Method> methodsToIterate=new LinkedHashSet<>(methods);
    Method closeMatch=null;
    int closeMatchDistance=Integer.MAX_VALUE;
    Method matchRequiringConversion=null;
    boolean multipleOptions=false;
    for (    Method method : methodsToIterate) {
      if (method.getName().equals(name)) {
        Class<?>[] paramTypes=method.getParameterTypes();
        List<TypeDescriptor> paramDescriptors=new ArrayList<>(paramTypes.length);
        for (int i=0; i < paramTypes.length; i++) {
          paramDescriptors.add(new TypeDescriptor(new MethodParameter(method,i)));
        }
        ReflectionHelper.ArgumentsMatchInfo matchInfo=null;
        if (method.isVarArgs() && argumentTypes.size() >= (paramTypes.length - 1)) {
          matchInfo=ReflectionHelper.compareArgumentsVarargs(paramDescriptors,argumentTypes,typeConverter);
        }
 else         if (paramTypes.length == argumentTypes.size()) {
          matchInfo=ReflectionHelper.compareArguments(paramDescriptors,argumentTypes,typeConverter);
        }
        if (matchInfo != null) {
          if (matchInfo.isExactMatch()) {
            return new ReflectiveMethodExecutor(method);
          }
 else           if (matchInfo.isCloseMatch()) {
            if (this.useDistance) {
              int matchDistance=ReflectionHelper.getTypeDifferenceWeight(paramDescriptors,argumentTypes);
              if (closeMatch == null || matchDistance < closeMatchDistance) {
                closeMatch=method;
                closeMatchDistance=matchDistance;
              }
            }
 else {
              if (closeMatch == null) {
                closeMatch=method;
              }
            }
          }
 else           if (matchInfo.isMatchRequiringConversion()) {
            if (matchRequiringConversion != null) {
              multipleOptions=true;
            }
            matchRequiringConversion=method;
          }
        }
      }
    }
    if (closeMatch != null) {
      return new ReflectiveMethodExecutor(closeMatch);
    }
 else     if (matchRequiringConversion != null) {
      if (multipleOptions) {
        throw new SpelEvaluationException(SpelMessage.MULTIPLE_POSSIBLE_METHODS,name);
      }
      return new ReflectiveMethodExecutor(matchRequiringConversion);
    }
 else {
      return null;
    }
  }
 catch (  EvaluationException ex) {
    throw new AccessException("Failed to resolve method",ex);
  }
}
