{
  MethodMetadata metadata=method.getMetadata();
  RootBeanDefinition beanDef=new ConfigurationClassBeanDefinition();
  ConfigurationClass configClass=method.getDeclaringClass();
  beanDef.setSource(this.sourceExtractor.extractSource(metadata,configClass.getResource()));
  beanDef.setFactoryBeanName(configClass.getBeanName());
  beanDef.setUniqueFactoryMethodName(metadata.getMethodName());
  beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);
  Map<String,Object> beanAttributes=metadata.getAnnotationAttributes(Bean.class.getName());
  List<String> names=new ArrayList<String>(Arrays.asList((String[])beanAttributes.get("name")));
  String beanName=(names.size() > 0 ? names.remove(0) : method.getMetadata().getMethodName());
  for (  String alias : names) {
    registry.registerAlias(beanName,alias);
  }
  if (registry.containsBeanDefinition(beanName)) {
    BeanDefinition existingBeanDef=registry.getBeanDefinition(beanName);
    if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {
      if (logger.isDebugEnabled()) {
        logger.debug(String.format("Skipping loading bean definition for %s: a definition for bean " + "'%s' already exists. This is likely due to an override in XML.",method,beanName));
      }
      return;
    }
  }
  if (metadata.hasAnnotation(Primary.class.getName())) {
    beanDef.setPrimary(true);
  }
  if (metadata.hasAnnotation(Lazy.class.getName())) {
    beanDef.setLazyInit((Boolean)metadata.getAnnotationAttributes(Lazy.class.getName()).get("value"));
  }
 else   if (configClass.getMetadata().hasAnnotation(Lazy.class.getName())) {
    beanDef.setLazyInit((Boolean)configClass.getMetadata().getAnnotationAttributes(Lazy.class.getName()).get("value"));
  }
  if (metadata.hasAnnotation(DependsOn.class.getName())) {
    String[] dependsOn=(String[])metadata.getAnnotationAttributes(DependsOn.class.getName()).get("value");
    if (dependsOn.length > 0) {
      beanDef.setDependsOn(dependsOn);
    }
  }
  Autowire autowire=(Autowire)beanAttributes.get("autowire");
  if (autowire.isAutowire()) {
    beanDef.setAutowireMode(autowire.value());
  }
  String initMethodName=(String)beanAttributes.get("initMethod");
  if (StringUtils.hasText(initMethodName)) {
    beanDef.setInitMethodName(initMethodName);
  }
  String destroyMethodName=(String)beanAttributes.get("destroyMethod");
  if (StringUtils.hasText(destroyMethodName)) {
    beanDef.setDestroyMethodName(destroyMethodName);
  }
  ScopedProxyMode proxyMode=ScopedProxyMode.NO;
  if (metadata.hasAnnotation(Scope.class.getName())) {
    Map<String,Object> scopeAttributes=metadata.getAnnotationAttributes(Scope.class.getName());
    beanDef.setScope((String)scopeAttributes.get("value"));
    proxyMode=(ScopedProxyMode)scopeAttributes.get("proxyMode");
    if (proxyMode == ScopedProxyMode.DEFAULT) {
      proxyMode=ScopedProxyMode.NO;
    }
  }
  BeanDefinition beanDefToRegister=beanDef;
  if (proxyMode != ScopedProxyMode.NO) {
    BeanDefinitionHolder proxyDef=ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef,beanName),registry,proxyMode == ScopedProxyMode.TARGET_CLASS);
    beanDefToRegister=proxyDef.getBeanDefinition();
  }
  if (logger.isDebugEnabled()) {
    logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",configClass.getMetadata().getClassName(),beanName));
  }
  registry.registerBeanDefinition(beanName,beanDefToRegister);
}
