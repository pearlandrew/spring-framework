{
  OpenEntityManagerInViewInterceptor interceptor=new OpenEntityManagerInViewInterceptor();
  interceptor.setEntityManagerFactory(factory);
  MockServletContext sc=new MockServletContext();
  MockHttpServletRequest request=new MockHttpServletRequest(sc);
  ServletWebRequest webRequest=new ServletWebRequest(request);
  interceptor.preHandle(webRequest);
  assertTrue(TransactionSynchronizationManager.hasResource(factory));
  AsyncWebRequest asyncWebRequest=mock(AsyncWebRequest.class);
  WebAsyncManager asyncManager=WebAsyncUtils.getAsyncManager(webRequest);
  asyncManager.setTaskExecutor(new SyncTaskExecutor());
  asyncManager.setAsyncWebRequest(asyncWebRequest);
  asyncManager.startCallableProcessing(new Callable<String>(){
    @Override public String call() throws Exception {
      return "anything";
    }
  }
);
  verify(asyncWebRequest,times(2)).addCompletionHandler(any(Runnable.class));
  verify(asyncWebRequest).addTimeoutHandler(any(Runnable.class));
  verify(asyncWebRequest,times(2)).addCompletionHandler(any(Runnable.class));
  verify(asyncWebRequest).startAsync();
  interceptor.afterConcurrentHandlingStarted(webRequest);
  assertFalse(TransactionSynchronizationManager.hasResource(factory));
  interceptor.preHandle(webRequest);
  assertTrue(TransactionSynchronizationManager.hasResource(factory));
  asyncManager.clearConcurrentResult();
  interceptor.preHandle(new ServletWebRequest(request));
  interceptor.preHandle(new ServletWebRequest(request));
  interceptor.postHandle(new ServletWebRequest(request),null);
  interceptor.afterCompletion(new ServletWebRequest(request),null);
  interceptor.postHandle(new ServletWebRequest(request),null);
  interceptor.afterCompletion(new ServletWebRequest(request),null);
  interceptor.preHandle(new ServletWebRequest(request));
  interceptor.postHandle(new ServletWebRequest(request),null);
  interceptor.afterCompletion(new ServletWebRequest(request),null);
  interceptor.postHandle(webRequest,null);
  assertTrue(TransactionSynchronizationManager.hasResource(factory));
  given(manager.isOpen()).willReturn(true);
  interceptor.afterCompletion(webRequest,null);
  assertFalse(TransactionSynchronizationManager.hasResource(factory));
  verify(manager).close();
}
