{
  OpenEntityManagerInViewInterceptor interceptor=new OpenEntityManagerInViewInterceptor();
  interceptor.setEntityManagerFactory(factory);
  given(factory.createEntityManager()).willReturn(this.manager);
  interceptor.preHandle(this.webRequest);
  assertTrue(TransactionSynchronizationManager.hasResource(factory));
  AsyncWebRequest asyncWebRequest=new StandardServletAsyncWebRequest(this.request,this.response);
  WebAsyncManager asyncManager=WebAsyncUtils.getAsyncManager(this.webRequest);
  asyncManager.setTaskExecutor(new SyncTaskExecutor());
  asyncManager.setAsyncWebRequest(asyncWebRequest);
  asyncManager.startCallableProcessing(new Callable<String>(){
    @Override public String call() throws Exception {
      return "anything";
    }
  }
);
  interceptor.afterConcurrentHandlingStarted(this.webRequest);
  assertFalse(TransactionSynchronizationManager.hasResource(factory));
  interceptor.preHandle(this.webRequest);
  assertTrue(TransactionSynchronizationManager.hasResource(factory));
  asyncManager.clearConcurrentResult();
  interceptor.preHandle(new ServletWebRequest(request));
  interceptor.preHandle(new ServletWebRequest(request));
  interceptor.postHandle(new ServletWebRequest(request),null);
  interceptor.afterCompletion(new ServletWebRequest(request),null);
  interceptor.postHandle(new ServletWebRequest(request),null);
  interceptor.afterCompletion(new ServletWebRequest(request),null);
  interceptor.preHandle(new ServletWebRequest(request));
  interceptor.postHandle(new ServletWebRequest(request),null);
  interceptor.afterCompletion(new ServletWebRequest(request),null);
  interceptor.postHandle(this.webRequest,null);
  assertTrue(TransactionSynchronizationManager.hasResource(factory));
  given(this.manager.isOpen()).willReturn(true);
  interceptor.afterCompletion(this.webRequest,null);
  assertFalse(TransactionSynchronizationManager.hasResource(factory));
  verify(this.manager).close();
}
