{
  given(manager.isOpen()).willReturn(true);
  final EntityManagerFactory factory2=mock(EntityManagerFactory.class);
  final EntityManager manager2=mock(EntityManager.class);
  given(factory2.createEntityManager()).willReturn(manager2);
  given(manager2.isOpen()).willReturn(true);
  MockServletContext sc=new MockServletContext();
  StaticWebApplicationContext wac=new StaticWebApplicationContext();
  wac.setServletContext(sc);
  wac.getDefaultListableBeanFactory().registerSingleton("entityManagerFactory",factory);
  wac.getDefaultListableBeanFactory().registerSingleton("myEntityManagerFactory",factory2);
  wac.refresh();
  sc.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE,wac);
  MockFilterConfig filterConfig=new MockFilterConfig(wac.getServletContext(),"filter");
  MockFilterConfig filterConfig2=new MockFilterConfig(wac.getServletContext(),"filter2");
  filterConfig2.addInitParameter("entityManagerFactoryBeanName","myEntityManagerFactory");
  final OpenEntityManagerInViewFilter filter=new OpenEntityManagerInViewFilter();
  filter.init(filterConfig);
  final OpenEntityManagerInViewFilter filter2=new OpenEntityManagerInViewFilter();
  filter2.init(filterConfig2);
  final AtomicInteger count=new AtomicInteger(0);
  final FilterChain filterChain=new FilterChain(){
    @Override public void doFilter(    ServletRequest servletRequest,    ServletResponse servletResponse){
      assertTrue(TransactionSynchronizationManager.hasResource(factory));
      servletRequest.setAttribute("invoked",Boolean.TRUE);
      count.incrementAndGet();
    }
  }
;
  final AtomicInteger count2=new AtomicInteger(0);
  final FilterChain filterChain2=new FilterChain(){
    @Override public void doFilter(    ServletRequest servletRequest,    ServletResponse servletResponse) throws IOException, ServletException {
      assertTrue(TransactionSynchronizationManager.hasResource(factory2));
      filter.doFilter(servletRequest,servletResponse,filterChain);
      count2.incrementAndGet();
    }
  }
;
  FilterChain filterChain3=new PassThroughFilterChain(filter2,filterChain2);
  AsyncWebRequest asyncWebRequest=mock(AsyncWebRequest.class);
  given(asyncWebRequest.isAsyncStarted()).willReturn(true);
  WebAsyncManager asyncManager=WebAsyncUtils.getAsyncManager(this.request);
  asyncManager.setTaskExecutor(new SyncTaskExecutor());
  asyncManager.setAsyncWebRequest(asyncWebRequest);
  asyncManager.startCallableProcessing(new Callable<String>(){
    @Override public String call() throws Exception {
      return "anything";
    }
  }
);
  assertFalse(TransactionSynchronizationManager.hasResource(factory));
  assertFalse(TransactionSynchronizationManager.hasResource(factory2));
  filter2.doFilter(this.request,this.response,filterChain3);
  assertFalse(TransactionSynchronizationManager.hasResource(factory));
  assertFalse(TransactionSynchronizationManager.hasResource(factory2));
  assertEquals(1,count.get());
  assertEquals(1,count2.get());
  assertNotNull(request.getAttribute("invoked"));
  verify(asyncWebRequest,times(2)).addCompletionHandler(any(Runnable.class));
  verify(asyncWebRequest).addTimeoutHandler(any(Runnable.class));
  verify(asyncWebRequest,times(2)).addCompletionHandler(any(Runnable.class));
  verify(asyncWebRequest).startAsync();
  reset(asyncWebRequest);
  given(asyncWebRequest.isAsyncStarted()).willReturn(false);
  assertFalse(TransactionSynchronizationManager.hasResource(factory));
  assertFalse(TransactionSynchronizationManager.hasResource(factory2));
  filter.doFilter(this.request,this.response,filterChain3);
  assertFalse(TransactionSynchronizationManager.hasResource(factory));
  assertFalse(TransactionSynchronizationManager.hasResource(factory2));
  assertEquals(2,count.get());
  assertEquals(2,count2.get());
  verify(this.manager).close();
  verify(manager2).close();
  wac.close();
}
