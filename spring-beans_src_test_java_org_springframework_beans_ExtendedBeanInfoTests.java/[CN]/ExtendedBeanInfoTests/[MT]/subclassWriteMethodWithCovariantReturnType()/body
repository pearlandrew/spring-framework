{
@SuppressWarnings("unused") class B {
    public String getFoo(){
      return null;
    }
    public Number setFoo(    String foo){
      return null;
    }
  }
class C extends B {
    public String getFoo(){
      return null;
    }
    public Integer setFoo(    String foo){
      return null;
    }
  }
  BeanInfo bi=Introspector.getBeanInfo(C.class);
  assertThat(hasReadMethodForProperty(bi,"foo"),is(true));
  assertThat(hasWriteMethodForProperty(bi,"foo"),is(false));
  ExtendedBeanInfo ebi=new ExtendedBeanInfo(bi);
  assertThat(hasReadMethodForProperty(bi,"foo"),is(true));
  assertThat(hasWriteMethodForProperty(bi,"foo"),is(true));
  assertThat(hasReadMethodForProperty(ebi,"foo"),is(true));
  assertThat(hasWriteMethodForProperty(ebi,"foo"),is(true));
  assertThat(ebi.getPropertyDescriptors().length,equalTo(bi.getPropertyDescriptors().length));
}
