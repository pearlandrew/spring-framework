{
@SuppressWarnings("unused") class A {
    public void setAddress(    String addr){
    }
    public void setAddress(    int index,    String addr){
    }
    public String getAddress(    int index){
      return null;
    }
  }
{
    BeanInfo bi=Introspector.getBeanInfo(A.class);
    assertThat(hasReadMethodForProperty(bi,"address"),is(false));
    assertThat(hasWriteMethodForProperty(bi,"address"),is(false));
    assertThat(hasIndexedReadMethodForProperty(bi,"address"),is(true));
    assertThat(hasIndexedWriteMethodForProperty(bi,"address"),is(true));
  }
{
    BeanInfo bi=new ExtendedBeanInfo(Introspector.getBeanInfo(A.class));
    assertThat(hasReadMethodForProperty(bi,"address"),is(false));
    assertThat(hasWriteMethodForProperty(bi,"address"),is(false));
    assertThat(hasIndexedReadMethodForProperty(bi,"address"),is(true));
    assertThat(hasIndexedWriteMethodForProperty(bi,"address"),is(true));
  }
}
