{
@SuppressWarnings("unused") class A {
    public void setAddress(    String addr){
    }
    public void setAddress(    int index,    String addr){
    }
    public String getAddress(    int index){
      return null;
    }
  }
  boolean hasReadMethod;
  boolean hasWriteMethod;
  boolean hasIndexedReadMethod;
  boolean hasIndexedWriteMethod;
{
    BeanInfo bi=Introspector.getBeanInfo(A.class);
    hasReadMethod=hasReadMethodForProperty(bi,"address");
    hasWriteMethod=hasWriteMethodForProperty(bi,"address");
    hasIndexedReadMethod=hasIndexedReadMethodForProperty(bi,"address");
    hasIndexedWriteMethod=hasIndexedWriteMethodForProperty(bi,"address");
  }
{
    BeanInfo bi=new ExtendedBeanInfo(Introspector.getBeanInfo(A.class));
    assertEquals(hasReadMethodForProperty(bi,"address"),hasReadMethod);
    assertEquals(hasWriteMethodForProperty(bi,"address"),hasWriteMethod);
    assertEquals(hasIndexedReadMethodForProperty(bi,"address"),hasIndexedReadMethod);
    assertEquals(hasIndexedWriteMethodForProperty(bi,"address"),hasIndexedWriteMethod);
  }
}
