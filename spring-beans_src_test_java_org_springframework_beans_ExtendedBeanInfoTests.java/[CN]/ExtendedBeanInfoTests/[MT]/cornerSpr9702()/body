{
{
@SuppressWarnings("unused") class C {
      public void setFoos(      String[] foos){
      }
      public String getFoos(      int i){
        return null;
      }
    }
    BeanInfo bi=Introspector.getBeanInfo(C.class);
    assertThat(hasReadMethodForProperty(bi,"foos"),is(false));
    assertThat(hasIndexedReadMethodForProperty(bi,"foos"),is(true));
    assertThat(hasWriteMethodForProperty(bi,"foos"),is(true));
    assertThat(hasIndexedWriteMethodForProperty(bi,"foos"),is(false));
    BeanInfo ebi=Introspector.getBeanInfo(C.class);
    assertThat(hasReadMethodForProperty(ebi,"foos"),is(false));
    assertThat(hasIndexedReadMethodForProperty(ebi,"foos"),is(true));
    assertThat(hasWriteMethodForProperty(ebi,"foos"),is(true));
    assertThat(hasIndexedWriteMethodForProperty(ebi,"foos"),is(false));
  }
{
@SuppressWarnings("unused") class C {
      public C setFoos(      String[] foos){
        return this;
      }
      public String getFoos(      int i){
        return null;
      }
    }
    BeanInfo bi=Introspector.getBeanInfo(C.class);
    assertThat(hasReadMethodForProperty(bi,"foos"),is(false));
    assertThat(hasIndexedReadMethodForProperty(bi,"foos"),is(true));
    assertThat(hasWriteMethodForProperty(bi,"foos"),is(false));
    assertThat(hasIndexedWriteMethodForProperty(bi,"foos"),is(false));
    BeanInfo ebi=new ExtendedBeanInfo(Introspector.getBeanInfo(C.class));
    assertThat(hasReadMethodForProperty(ebi,"foos"),is(false));
    assertThat(hasIndexedReadMethodForProperty(ebi,"foos"),is(true));
    assertThat(hasWriteMethodForProperty(ebi,"foos"),is(true));
    assertThat(hasIndexedWriteMethodForProperty(ebi,"foos"),is(false));
  }
}
