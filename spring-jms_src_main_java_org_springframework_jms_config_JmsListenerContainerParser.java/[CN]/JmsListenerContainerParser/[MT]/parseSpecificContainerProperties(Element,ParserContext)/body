{
  MutablePropertyValues properties=new MutablePropertyValues();
  boolean isSimpleContainer=containerEle.getAttribute(CONTAINER_TYPE_ATTRIBUTE).startsWith("simple");
  String connectionFactoryBeanName="connectionFactory";
  if (containerEle.hasAttribute(CONNECTION_FACTORY_ATTRIBUTE)) {
    connectionFactoryBeanName=containerEle.getAttribute(CONNECTION_FACTORY_ATTRIBUTE);
    if (!StringUtils.hasText(connectionFactoryBeanName)) {
      parserContext.getReaderContext().error("Listener container 'connection-factory' attribute contains empty value.",containerEle);
    }
  }
  if (StringUtils.hasText(connectionFactoryBeanName)) {
    properties.add("connectionFactory",new RuntimeBeanReference(connectionFactoryBeanName));
  }
  String taskExecutorBeanName=containerEle.getAttribute(TASK_EXECUTOR_ATTRIBUTE);
  if (StringUtils.hasText(taskExecutorBeanName)) {
    properties.add("taskExecutor",new RuntimeBeanReference(taskExecutorBeanName));
  }
  String errorHandlerBeanName=containerEle.getAttribute(ERROR_HANDLER_ATTRIBUTE);
  if (StringUtils.hasText(errorHandlerBeanName)) {
    properties.add("errorHandler",new RuntimeBeanReference(errorHandlerBeanName));
  }
  String destinationResolverBeanName=containerEle.getAttribute(DESTINATION_RESOLVER_ATTRIBUTE);
  if (StringUtils.hasText(destinationResolverBeanName)) {
    properties.add("destinationResolver",new RuntimeBeanReference(destinationResolverBeanName));
  }
  String cache=containerEle.getAttribute(CACHE_ATTRIBUTE);
  if (StringUtils.hasText(cache)) {
    if (isSimpleContainer) {
      if (!("auto".equals(cache) || "consumer".equals(cache))) {
        parserContext.getReaderContext().warning("'cache' attribute not actively supported for listener container of type \"simple\". " + "Effective runtime behavior will be equivalent to \"consumer\" / \"auto\".",containerEle);
      }
    }
 else {
      properties.add("cacheLevelName","CACHE_" + cache.toUpperCase());
    }
  }
  Integer acknowledgeMode=parseAcknowledgeMode(containerEle,parserContext);
  if (acknowledgeMode != null) {
    if (acknowledgeMode == Session.SESSION_TRANSACTED) {
      properties.add("sessionTransacted",Boolean.TRUE);
    }
 else {
      properties.add("sessionAcknowledgeMode",acknowledgeMode);
    }
  }
  String transactionManagerBeanName=containerEle.getAttribute(TRANSACTION_MANAGER_ATTRIBUTE);
  if (StringUtils.hasText(transactionManagerBeanName)) {
    if (isSimpleContainer) {
      parserContext.getReaderContext().error("'transaction-manager' attribute not supported for listener container of type \"simple\".",containerEle);
    }
 else {
      properties.add("transactionManager",new RuntimeBeanReference(transactionManagerBeanName));
    }
  }
  String concurrency=containerEle.getAttribute(CONCURRENCY_ATTRIBUTE);
  if (StringUtils.hasText(concurrency)) {
    properties.add("concurrency",concurrency);
  }
  String prefetch=containerEle.getAttribute(PREFETCH_ATTRIBUTE);
  if (StringUtils.hasText(prefetch)) {
    if (!isSimpleContainer) {
      properties.add("maxMessagesPerTask",prefetch);
    }
  }
  String phase=containerEle.getAttribute(PHASE_ATTRIBUTE);
  if (StringUtils.hasText(phase)) {
    properties.add("phase",phase);
  }
  String receiveTimeout=containerEle.getAttribute(RECEIVE_TIMEOUT_ATTRIBUTE);
  if (StringUtils.hasText(receiveTimeout)) {
    if (!isSimpleContainer) {
      properties.add("receiveTimeout",receiveTimeout);
    }
  }
  String backOffBeanName=containerEle.getAttribute(BACK_OFF_ATTRIBUTE);
  if (StringUtils.hasText(backOffBeanName)) {
    if (!isSimpleContainer) {
      properties.add("backOff",new RuntimeBeanReference(backOffBeanName));
    }
  }
 else {
    String recoveryInterval=containerEle.getAttribute(RECOVERY_INTERVAL_ATTRIBUTE);
    if (StringUtils.hasText(recoveryInterval)) {
      if (!isSimpleContainer) {
        properties.add("recoveryInterval",recoveryInterval);
      }
    }
  }
  return properties;
}
