{
  if (b == null) {
    throw new NullPointerException();
  }
 else   if (off < 0 || len < 0 || len > b.length - off) {
    throw new IndexOutOfBoundsException();
  }
 else   if (len == 0) {
    return 0;
  }
 else   if (len < 0) {
    throw new IllegalArgumentException("len must be 0 or greater: " + len);
  }
 else   if (off < 0) {
    throw new IllegalArgumentException("off must be 0 or greater: " + off);
  }
 else {
    if (this.currentBuffer == null) {
      return -1;
    }
 else {
      if (this.nextIndexInCurrentBuffer < this.currentBufferLength) {
        int bytesToCopy=Math.min(len,this.currentBufferLength - this.nextIndexInCurrentBuffer);
        System.arraycopy(this.currentBuffer,this.nextIndexInCurrentBuffer,b,off,bytesToCopy);
        this.totalBytesRead+=bytesToCopy;
        this.nextIndexInCurrentBuffer+=bytesToCopy;
        int remaining=read(b,off + bytesToCopy,len - bytesToCopy);
        return bytesToCopy + Math.max(remaining,0);
      }
 else {
        if (this.buffersIterator.hasNext()) {
          this.currentBuffer=this.buffersIterator.next();
          if (this.currentBuffer == this.fastByteArrayOutputStream.buffers.getLast()) {
            this.currentBufferLength=this.fastByteArrayOutputStream.index;
          }
 else {
            this.currentBufferLength=this.currentBuffer.length;
          }
          this.nextIndexInCurrentBuffer=0;
        }
 else {
          this.currentBuffer=null;
        }
        return read(b,off,len);
      }
    }
  }
}
