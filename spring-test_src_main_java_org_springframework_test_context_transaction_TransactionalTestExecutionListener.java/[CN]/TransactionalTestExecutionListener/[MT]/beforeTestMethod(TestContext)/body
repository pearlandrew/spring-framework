{
  final Method testMethod=testContext.getTestMethod();
  Assert.notNull(testMethod,"The test method of the supplied TestContext must not be null");
  if (this.transactionContextCache.remove(testMethod) != null) {
    throw new IllegalStateException("Cannot start new transaction without ending existing transaction: " + "Invoke endTransaction() before startNewTransaction().");
  }
  if (testMethod.isAnnotationPresent(NotTransactional.class)) {
    return;
  }
  TransactionAttribute transactionAttribute=this.attributeSource.getTransactionAttribute(testMethod,testContext.getTestClass());
  TransactionDefinition transactionDefinition=null;
  if (transactionAttribute != null) {
    transactionDefinition=new DelegatingTransactionAttribute(transactionAttribute){
      public String getName(){
        return testMethod.getName();
      }
    }
;
  }
  if (transactionDefinition != null) {
    if (logger.isDebugEnabled()) {
      logger.debug("Explicit transaction definition [" + transactionDefinition + "] found for test context ["+ testContext+ "]");
    }
    String qualifier=transactionAttribute.getQualifier();
    PlatformTransactionManager tm;
    if (StringUtils.hasLength(qualifier)) {
      BeanFactory bf=testContext.getApplicationContext().getAutowireCapableBeanFactory();
      tm=BeanFactoryAnnotationUtils.qualifiedBeanOfType(bf,PlatformTransactionManager.class,qualifier);
    }
 else {
      tm=getTransactionManager(testContext);
    }
    TransactionContext txContext=new TransactionContext(tm,transactionDefinition);
    runBeforeTransactionMethods(testContext);
    startNewTransaction(testContext,txContext);
    this.transactionContextCache.put(testMethod,txContext);
  }
}
