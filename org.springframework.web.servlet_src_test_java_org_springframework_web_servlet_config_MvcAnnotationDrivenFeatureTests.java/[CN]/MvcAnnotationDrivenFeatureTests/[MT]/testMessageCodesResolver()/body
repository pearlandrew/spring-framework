{
  AnnotationConfigApplicationContext ctx=new AnnotationConfigApplicationContext();
  ctx.register(MvcFeature.class,MvcBeans.class);
  ctx.refresh();
  RequestMappingHandlerMethodAdapter adapter=ctx.getBean(RequestMappingHandlerMethodAdapter.class);
  assertNotNull(adapter);
  Object initializer=new DirectFieldAccessor(adapter).getPropertyValue("webBindingInitializer");
  assertNotNull(initializer);
  MessageCodesResolver resolver=((ConfigurableWebBindingInitializer)initializer).getMessageCodesResolver();
  assertNotNull(resolver);
  assertEquals("test.foo.bar",resolver.resolveMessageCodes("foo","bar")[0]);
  Object value=new DirectFieldAccessor(adapter).getPropertyValue("customArgumentResolvers");
  assertNotNull(value);
  List<HandlerMethodArgumentResolver> resolvers=(List<HandlerMethodArgumentResolver>)value;
  assertEquals(2,resolvers.size());
  assertTrue(resolvers.get(0) instanceof ServletWebArgumentResolverAdapter);
  assertTrue(resolvers.get(1) instanceof TestHandlerMethodArgumentResolver);
  Object converters=new DirectFieldAccessor(adapter).getPropertyValue("messageConverters");
  assertNotNull(converters);
  List<HttpMessageConverter<?>> convertersArray=(List<HttpMessageConverter<?>>)converters;
  assertTrue("Default converters are registered in addition to the custom one",convertersArray.size() > 1);
  assertTrue(convertersArray.get(0) instanceof StringHttpMessageConverter);
}
