{
  Object left=getLeftOperand().getValueInternal(state).getValue();
  Object right=getRightOperand().getValueInternal(state).getValue();
  if (left instanceof Number && right instanceof Number) {
    Number leftNumber=(Number)left;
    Number rightNumber=(Number)right;
    if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) {
      BigDecimal leftBigDecimal=NumberUtils.convertNumberToTargetClass(leftNumber,BigDecimal.class);
      BigDecimal rightBigDecimal=NumberUtils.convertNumberToTargetClass(rightNumber,BigDecimal.class);
      return BooleanTypedValue.forValue(leftBigDecimal.compareTo(rightBigDecimal) <= 0);
    }
    if (leftNumber instanceof Double || rightNumber instanceof Double) {
      return BooleanTypedValue.forValue(leftNumber.doubleValue() <= rightNumber.doubleValue());
    }
    if (leftNumber instanceof Float || rightNumber instanceof Float) {
      return BooleanTypedValue.forValue(leftNumber.floatValue() <= rightNumber.floatValue());
    }
    if (leftNumber instanceof Long || rightNumber instanceof Long) {
      return BooleanTypedValue.forValue(leftNumber.longValue() <= rightNumber.longValue());
    }
    return BooleanTypedValue.forValue(leftNumber.intValue() <= rightNumber.intValue());
  }
  return BooleanTypedValue.forValue(state.getTypeComparator().compare(left,right) <= 0);
}
