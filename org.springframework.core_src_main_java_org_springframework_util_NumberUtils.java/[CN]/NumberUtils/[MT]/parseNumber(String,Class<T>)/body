{
  Assert.notNull(text,"Text must not be null");
  Assert.notNull(targetClass,"Target class must not be null");
  String trimmed=StringUtils.trimAllWhitespace(text);
  if (targetClass.equals(Byte.class)) {
    return (T)(isHexNumber(trimmed) ? Byte.decode(trimmed) : Byte.valueOf(trimmed));
  }
 else   if (targetClass.equals(Short.class)) {
    return (T)(isHexNumber(trimmed) ? Short.decode(trimmed) : Short.valueOf(trimmed));
  }
 else   if (targetClass.equals(Integer.class)) {
    return (T)(isHexNumber(trimmed) ? Integer.decode(trimmed) : Integer.valueOf(trimmed));
  }
 else   if (targetClass.equals(Long.class)) {
    return (T)(isHexNumber(trimmed) ? Long.decode(trimmed) : Long.valueOf(trimmed));
  }
 else   if (targetClass.equals(BigInteger.class)) {
    return (T)(isHexNumber(trimmed) ? decodeBigInteger(trimmed) : new BigInteger(trimmed));
  }
 else   if (targetClass.equals(Float.class)) {
    return (T)Float.valueOf(trimmed);
  }
 else   if (targetClass.equals(Double.class)) {
    return (T)Double.valueOf(trimmed);
  }
 else   if (targetClass.equals(BigDecimal.class) || targetClass.equals(Number.class)) {
    return (T)new BigDecimal(trimmed);
  }
 else {
    throw new IllegalArgumentException("Cannot convert String [" + text + "] to target class ["+ targetClass.getName()+ "]");
  }
}
