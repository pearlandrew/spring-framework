{
  BeanDefinitionRegistry registry=specificationContext.getRegistry();
  ResourceLoader resourceLoader=specificationContext.getResourceLoader();
  Environment environment=specificationContext.getEnvironment();
  ClassPathBeanDefinitionScanner scanner=spec.useDefaultFilters() == null ? new ClassPathBeanDefinitionScanner(registry) : new ClassPathBeanDefinitionScanner(registry,spec.useDefaultFilters());
  scanner.setResourceLoader(resourceLoader);
  scanner.setEnvironment(environment);
  if (spec.beanDefinitionDefaults() != null) {
    scanner.setBeanDefinitionDefaults(spec.beanDefinitionDefaults());
  }
  if (spec.autowireCandidatePatterns() != null) {
    scanner.setAutowireCandidatePatterns(spec.autowireCandidatePatterns());
  }
  if (spec.resourcePattern() != null) {
    scanner.setResourcePattern(spec.resourcePattern());
  }
  if (spec.beanNameGenerator() != null) {
    scanner.setBeanNameGenerator(spec.beanNameGenerator());
  }
  if (spec.includeAnnotationConfig() != null) {
    scanner.setIncludeAnnotationConfig(spec.includeAnnotationConfig());
  }
  if (spec.scopeMetadataResolver() != null) {
    scanner.setScopeMetadataResolver(spec.scopeMetadataResolver());
  }
  if (spec.scopedProxyMode() != null) {
    scanner.setScopedProxyMode(spec.scopedProxyMode());
  }
  for (  TypeFilter filter : spec.includeFilters()) {
    scanner.addIncludeFilter(filter);
  }
  for (  TypeFilter filter : spec.excludeFilters()) {
    scanner.addExcludeFilter(filter);
  }
  Set<BeanDefinitionHolder> scannedBeans=scanner.doScan(spec.basePackages());
  Object source=spec.source();
  String sourceName=spec.sourceName();
  CompositeComponentDefinition compositeDef=new CompositeComponentDefinition(sourceName,source);
  for (  BeanDefinitionHolder beanDefHolder : scannedBeans) {
    compositeDef.addNestedComponent(new BeanComponentDefinition(beanDefHolder));
  }
  if ((spec.includeAnnotationConfig() != null) && spec.includeAnnotationConfig()) {
    Set<BeanDefinitionHolder> processorDefinitions=AnnotationConfigUtils.registerAnnotationConfigProcessors(registry,source);
    for (    BeanDefinitionHolder processorDefinition : processorDefinitions) {
      compositeDef.addNestedComponent(new BeanComponentDefinition(processorDefinition));
    }
  }
  specificationContext.getRegistrar().registerComponent(compositeDef);
}
