{
  Object testEntity=new Object();
  MockControl tmMc=MockControl.createControl(EntityTransaction.class);
  EntityTransaction mockTx=(EntityTransaction)tmMc.getMock();
  mockTx.isActive();
  tmMc.setReturnValue(false);
  mockTx.begin();
  tmMc.setVoidCallable();
  mockTx.commit();
  tmMc.setThrowable(new OptimisticLockException());
  tmMc.replay();
  MockControl sharedEmMc=MockControl.createControl(EntityManager.class);
  EntityManager sharedEm=(EntityManager)sharedEmMc.getMock();
  sharedEm.getTransaction();
  sharedEmMc.setReturnValue(new NoOpEntityTransaction(),3);
  sharedEm.close();
  sharedEmMc.setVoidCallable();
  sharedEmMc.replay();
  mockEmf.createEntityManager();
  emfMc.setReturnValue(sharedEm);
  MockControl emMc=MockControl.createControl(EntityManager.class);
  EntityManager mockEm=(EntityManager)emMc.getMock();
  mockEm.getTransaction();
  emMc.setReturnValue(mockTx,3);
  mockEm.contains(testEntity);
  emMc.setReturnValue(false);
  emMc.replay();
  mockEmf.createEntityManager();
  emfMc.setReturnValue(mockEm);
  mockEmf.close();
  emfMc.setVoidCallable();
  emfMc.replay();
  LocalContainerEntityManagerFactoryBean cefb=parseValidPersistenceUnit();
  JpaTransactionManager jpatm=new JpaTransactionManager();
  jpatm.setEntityManagerFactory(cefb.getObject());
  TransactionStatus txStatus=jpatm.getTransaction(new DefaultTransactionAttribute());
  EntityManagerFactory emf=cefb.getObject();
  assertSame("EntityManagerFactory reference must be cached after init",emf,cefb.getObject());
  assertNotSame("EMF must be proxied",mockEmf,emf);
  EntityManager em=emf.createEntityManager();
  em.joinTransaction();
  assertFalse(em.contains(testEntity));
  try {
    jpatm.commit(txStatus);
    fail("Should have thrown OptimisticLockingFailureException");
  }
 catch (  OptimisticLockingFailureException ex) {
  }
  cefb.destroy();
  emfMc.verify();
  emMc.verify();
  tmMc.verify();
}
