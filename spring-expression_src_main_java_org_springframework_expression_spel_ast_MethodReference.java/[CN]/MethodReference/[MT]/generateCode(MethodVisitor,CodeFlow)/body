{
  CachedMethodExecutor executorToCheck=this.cachedExecutor;
  if (executorToCheck == null || !(executorToCheck.get() instanceof ReflectiveMethodExecutor)) {
    throw new IllegalStateException("No applicable cached executor found: " + executorToCheck);
  }
  ReflectiveMethodExecutor methodExecutor=(ReflectiveMethodExecutor)executorToCheck.get();
  Method method=methodExecutor.getMethod();
  boolean isStaticMethod=Modifier.isStatic(method.getModifiers());
  String descriptor=cf.lastDescriptor();
  if (descriptor == null) {
    if (!isStaticMethod) {
      cf.loadTarget(mv);
    }
  }
 else {
    if (isStaticMethod) {
      mv.visitInsn(POP);
    }
  }
  if (CodeFlow.isPrimitive(descriptor)) {
    CodeFlow.insertBoxIfNecessary(mv,descriptor.charAt(0));
  }
  String classDesc=(Modifier.isPublic(method.getDeclaringClass().getModifiers()) ? method.getDeclaringClass().getName().replace('.','/') : methodExecutor.getPublicDeclaringClass().getName().replace('.','/'));
  if (!isStaticMethod) {
    if (descriptor == null || !descriptor.substring(1).equals(classDesc)) {
      CodeFlow.insertCheckCast(mv,"L" + classDesc);
    }
  }
  generateCodeForArguments(mv,cf,method,this.children);
  mv.visitMethodInsn((isStaticMethod ? INVOKESTATIC : INVOKEVIRTUAL),classDesc,method.getName(),CodeFlow.createSignatureDescriptor(method),method.getDeclaringClass().isInterface());
  cf.pushDescriptor(this.exitTypeDescriptor);
}
