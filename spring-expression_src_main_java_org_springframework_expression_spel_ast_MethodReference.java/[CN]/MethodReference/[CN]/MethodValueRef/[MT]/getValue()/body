{
  MethodExecutor executorToUse=getCachedExecutor(this.targetType,this.argumentTypes);
  if (executorToUse != null) {
    try {
      return executorToUse.execute(this.evaluationContext,this.target,this.arguments);
    }
 catch (    AccessException ae) {
      throwSimpleExceptionIfPossible(this.state,ae);
      MethodReference.this.cachedExecutor=null;
    }
  }
  executorToUse=findAccessorForMethod(MethodReference.this.name,argumentTypes,this.target,this.evaluationContext);
  MethodReference.this.cachedExecutor=new CachedMethodExecutor(executorToUse,this.targetType,this.argumentTypes);
  try {
    return executorToUse.execute(this.evaluationContext,this.target,this.arguments);
  }
 catch (  AccessException ex) {
    throwSimpleExceptionIfPossible(this.state,ex);
    throw new SpelEvaluationException(getStartPosition(),ex,SpelMessage.EXCEPTION_DURING_METHOD_INVOCATION,MethodReference.this.name,this.state.getActiveContextObject().getValue().getClass().getName(),ex.getMessage());
  }
}
