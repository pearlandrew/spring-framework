{
  StringHttpMessageConverter stringConverter=new StringHttpMessageConverter();
  stringConverter.setWriteAcceptCharset(false);
  messageConverters.add(new ByteArrayHttpMessageConverter());
  messageConverters.add(stringConverter);
  messageConverters.add(new ResourceHttpMessageConverter());
  messageConverters.add(new SourceHttpMessageConverter<>());
  messageConverters.add(new AllEncompassingFormHttpMessageConverter());
  if (romePresent) {
    messageConverters.add(new AtomFeedHttpMessageConverter());
    messageConverters.add(new RssChannelHttpMessageConverter());
  }
  if (jackson2XmlPresent) {
    ObjectMapper objectMapper=Jackson2ObjectMapperBuilder.xml().applicationContext(this.applicationContext).build();
    messageConverters.add(new MappingJackson2XmlHttpMessageConverter(objectMapper));
  }
 else   if (jaxb2Present) {
    messageConverters.add(new Jaxb2RootElementHttpMessageConverter());
  }
  if (jackson2Present) {
    ObjectMapper objectMapper=Jackson2ObjectMapperBuilder.json().applicationContext(this.applicationContext).build();
    messageConverters.add(new MappingJackson2HttpMessageConverter(objectMapper));
  }
 else   if (gsonPresent) {
    messageConverters.add(new GsonHttpMessageConverter());
  }
  if (jackson2SmilePresent) {
    ObjectMapper objectMapper=Jackson2ObjectMapperBuilder.smile().applicationContext(this.applicationContext).build();
    messageConverters.add(new MappingJackson2SmileHttpMessageConverter(objectMapper));
  }
  if (jackson2CborPresent) {
    ObjectMapper objectMapper=Jackson2ObjectMapperBuilder.cbor().applicationContext(this.applicationContext).build();
    messageConverters.add(new MappingJackson2CborHttpMessageConverter(objectMapper));
  }
}
