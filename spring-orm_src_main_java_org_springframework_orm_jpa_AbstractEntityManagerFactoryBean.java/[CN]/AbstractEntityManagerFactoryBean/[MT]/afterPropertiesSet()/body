{
  if (this.jpaVendorAdapter != null) {
    if (this.persistenceProvider == null) {
      this.persistenceProvider=this.jpaVendorAdapter.getPersistenceProvider();
    }
    Map<String,?> vendorPropertyMap=this.jpaVendorAdapter.getJpaPropertyMap();
    if (vendorPropertyMap != null) {
      for (      Map.Entry<String,?> entry : vendorPropertyMap.entrySet()) {
        if (!this.jpaPropertyMap.containsKey(entry.getKey())) {
          this.jpaPropertyMap.put(entry.getKey(),entry.getValue());
        }
      }
    }
    if (this.entityManagerFactoryInterface == null) {
      this.entityManagerFactoryInterface=this.jpaVendorAdapter.getEntityManagerFactoryInterface();
      if (!ClassUtils.isVisible(this.entityManagerFactoryInterface,this.beanClassLoader)) {
        this.entityManagerFactoryInterface=EntityManagerFactory.class;
      }
    }
    if (this.entityManagerInterface == null) {
      this.entityManagerInterface=this.jpaVendorAdapter.getEntityManagerInterface();
      if (!ClassUtils.isVisible(this.entityManagerInterface,this.beanClassLoader)) {
        this.entityManagerInterface=EntityManager.class;
      }
    }
    if (this.jpaDialect == null) {
      this.jpaDialect=this.jpaVendorAdapter.getJpaDialect();
    }
  }
  if (this.bootstrapExecutor != null) {
    this.nativeEntityManagerFactoryFuture=this.bootstrapExecutor.submit(new Callable<EntityManagerFactory>(){
      @Override public EntityManagerFactory call(){
        return buildNativeEntityManagerFactory();
      }
    }
);
  }
 else {
    this.nativeEntityManagerFactory=buildNativeEntityManagerFactory();
  }
  this.entityManagerFactory=createEntityManagerFactoryProxy(this.nativeEntityManagerFactory);
  System.out.println("Returning: " + System.currentTimeMillis());
}
