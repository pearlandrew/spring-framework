{
  String accept="accept-version:1.1";
  String host="host:github.org";
  TextMessage textMessage=StompTextMessageBuilder.create(StompCommand.CONNECT).headers(accept,host).build();
  @SuppressWarnings("unchecked") Message<byte[]> message=(Message<byte[]>)this.converter.toMessage(textMessage.getPayload());
  assertEquals(0,message.getPayload().length);
  MessageHeaders headers=message.getHeaders();
  StompHeaderAccessor stompHeaders=StompHeaderAccessor.wrap(message);
  Map<String,Object> map=stompHeaders.toMap();
  assertEquals(5,map.size());
  assertNotNull(stompHeaders.getId());
  assertNotNull(stompHeaders.getTimestamp());
  assertEquals(SimpMessageType.CONNECT,stompHeaders.getMessageType());
  assertEquals(StompCommand.CONNECT,stompHeaders.getCommand());
  assertNotNull(map.get(SimpMessageHeaderAccessor.NATIVE_HEADERS));
  assertEquals(Collections.singleton("1.1"),stompHeaders.getAcceptVersion());
  assertEquals("github.org",stompHeaders.getHost());
  assertEquals(SimpMessageType.CONNECT,stompHeaders.getMessageType());
  assertEquals(StompCommand.CONNECT,stompHeaders.getCommand());
  assertNotNull(headers.get(MessageHeaders.ID));
  assertNotNull(headers.get(MessageHeaders.TIMESTAMP));
  String convertedBack=new String(this.converter.fromMessage(message),"UTF-8");
  assertEquals("CONNECT\n",convertedBack.substring(0,8));
  assertTrue(convertedBack.contains(accept));
  assertTrue(convertedBack.contains(host));
}
