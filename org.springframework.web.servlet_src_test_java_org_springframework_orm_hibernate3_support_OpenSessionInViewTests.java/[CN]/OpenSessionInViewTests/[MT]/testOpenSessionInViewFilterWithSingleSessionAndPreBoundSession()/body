{
  MockControl sfControl=MockControl.createControl(SessionFactory.class);
  final SessionFactory sf=(SessionFactory)sfControl.getMock();
  MockControl sessionControl=MockControl.createControl(Session.class);
  Session session=(Session)sessionControl.getMock();
  sf.openSession();
  sfControl.setReturnValue(session,1);
  session.getSessionFactory();
  sessionControl.setReturnValue(sf);
  session.setFlushMode(FlushMode.MANUAL);
  sessionControl.setVoidCallable(1);
  session.close();
  sessionControl.setReturnValue(null,1);
  sfControl.replay();
  sessionControl.replay();
  MockServletContext sc=new MockServletContext();
  StaticWebApplicationContext wac=new StaticWebApplicationContext();
  wac.setServletContext(sc);
  wac.getDefaultListableBeanFactory().registerSingleton("sessionFactory",sf);
  wac.refresh();
  sc.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE,wac);
  MockHttpServletRequest request=new MockHttpServletRequest(sc);
  MockHttpServletResponse response=new MockHttpServletResponse();
  MockFilterConfig filterConfig=new MockFilterConfig(wac.getServletContext(),"filter");
  MockFilterConfig filterConfig2=new MockFilterConfig(wac.getServletContext(),"filter2");
  filterConfig2.addInitParameter("sessionFactoryBeanName","mySessionFactory");
  OpenSessionInViewInterceptor rawInterceptor=new OpenSessionInViewInterceptor();
  rawInterceptor.setSessionFactory(sf);
  HandlerInterceptor interceptor=new WebRequestHandlerInterceptorAdapter(rawInterceptor);
  interceptor.preHandle(request,response,"handler");
  final OpenSessionInViewFilter filter=new OpenSessionInViewFilter();
  filter.init(filterConfig);
  final FilterChain filterChain=new FilterChain(){
    public void doFilter(    ServletRequest servletRequest,    ServletResponse servletResponse){
      assertTrue(TransactionSynchronizationManager.hasResource(sf));
      servletRequest.setAttribute("invoked",Boolean.TRUE);
    }
  }
;
  assertTrue(TransactionSynchronizationManager.hasResource(sf));
  filter.doFilter(request,response,filterChain);
  assertTrue(TransactionSynchronizationManager.hasResource(sf));
  assertNotNull(request.getAttribute("invoked"));
  interceptor.postHandle(request,response,"handler",null);
  interceptor.afterCompletion(request,response,"handler",null);
  sfControl.verify();
  sessionControl.verify();
  wac.close();
}
