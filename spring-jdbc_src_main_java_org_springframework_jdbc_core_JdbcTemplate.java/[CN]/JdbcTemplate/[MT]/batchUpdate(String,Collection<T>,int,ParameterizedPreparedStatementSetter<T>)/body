{
  if (logger.isDebugEnabled()) {
    logger.debug("Executing SQL batch update [" + sql + "] with a batch size of "+ batchSize);
  }
  return execute(sql,new PreparedStatementCallback<int[][]>(){
    @Override public int[][] doInPreparedStatement(    PreparedStatement ps) throws SQLException {
      List<int[]> rowsAffected=new ArrayList<int[]>();
      try {
        boolean batchSupported=true;
        if (!JdbcUtils.supportsBatchUpdates(ps.getConnection())) {
          batchSupported=false;
          logger.warn("JDBC Driver does not support Batch updates; resorting to single statement execution");
        }
        int n=0;
        for (        T obj : batchArgs) {
          pss.setValues(ps,obj);
          n++;
          if (batchSupported) {
            ps.addBatch();
            if (n % batchSize == 0 || n == batchArgs.size()) {
              if (logger.isDebugEnabled()) {
                int batchIdx=(n % batchSize == 0) ? n / batchSize : (n / batchSize) + 1;
                int items=n - ((n % batchSize == 0) ? n / batchSize - 1 : (n / batchSize)) * batchSize;
                logger.debug("Sending SQL batch update #" + batchIdx + " with "+ items+ " items");
              }
              rowsAffected.add(ps.executeBatch());
            }
          }
 else {
            int i=ps.executeUpdate();
            rowsAffected.add(new int[]{i});
          }
        }
        int[][] result=new int[rowsAffected.size()][];
        for (int i=0; i < result.length; i++) {
          result[i]=rowsAffected.get(i);
        }
        return result;
      }
  finally {
        if (pss instanceof ParameterDisposer) {
          ((ParameterDisposer)pss).cleanupParameters();
        }
      }
    }
  }
);
}
