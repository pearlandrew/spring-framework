{
  Assert.notEmpty(sql,"SQL array must not be empty");
  if (logger.isDebugEnabled()) {
    logger.debug("Executing SQL batch update of " + sql.length + " statements");
  }
class BatchUpdateStatementCallback implements StatementCallback<int[]>, SqlProvider {
    private String currSql;
    @Override public int[] doInStatement(    Statement stmt) throws SQLException, DataAccessException {
      int[] rowsAffected=new int[sql.length];
      if (JdbcUtils.supportsBatchUpdates(stmt.getConnection())) {
        for (        String sqlStmt : sql) {
          this.currSql=appendSql(this.currSql,sqlStmt);
          stmt.addBatch(sqlStmt);
        }
        try {
          rowsAffected=stmt.executeBatch();
        }
 catch (        BatchUpdateException ex) {
          String batchExceptionSql=null;
          for (int i=0; i < ex.getUpdateCounts().length; i++) {
            if (ex.getUpdateCounts()[i] == Statement.EXECUTE_FAILED) {
              batchExceptionSql=appendSql(batchExceptionSql,sql[i]);
            }
          }
          if (StringUtils.hasLength(batchExceptionSql)) {
            this.currSql=batchExceptionSql;
          }
          throw ex;
        }
      }
 else {
        for (int i=0; i < sql.length; i++) {
          this.currSql=sql[i];
          if (!stmt.execute(sql[i])) {
            rowsAffected[i]=stmt.getUpdateCount();
          }
 else {
            throw new InvalidDataAccessApiUsageException("Invalid batch SQL statement: " + sql[i]);
          }
        }
      }
      return rowsAffected;
    }
    private String appendSql(    String sql,    String statement){
      return (StringUtils.isEmpty(sql) ? statement : sql + "; " + statement);
    }
    @Override public String getSql(){
      return this.currSql;
    }
  }
  return execute(new BatchUpdateStatementCallback());
}
