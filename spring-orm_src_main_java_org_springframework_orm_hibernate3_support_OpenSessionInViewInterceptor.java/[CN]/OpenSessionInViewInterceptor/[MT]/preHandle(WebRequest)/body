{
  String participateAttributeName=getParticipateAttributeName();
  WebAsyncManager asyncManager=WebAsyncUtils.getAsyncManager(request);
  if (asyncManager.hasConcurrentResult()) {
    if (applySessionBindingInterceptor(asyncManager,participateAttributeName)) {
      return;
    }
  }
  if ((isSingleSession() && TransactionSynchronizationManager.hasResource(getSessionFactory())) || org.springframework.orm.hibernate3.SessionFactoryUtils.isDeferredCloseActive(getSessionFactory())) {
    Integer count=(Integer)request.getAttribute(participateAttributeName,WebRequest.SCOPE_REQUEST);
    int newCount=(count != null ? count + 1 : 1);
    request.setAttribute(getParticipateAttributeName(),newCount,WebRequest.SCOPE_REQUEST);
  }
 else {
    if (isSingleSession()) {
      logger.debug("Opening single Hibernate Session in OpenSessionInViewInterceptor");
      Session session=org.springframework.orm.hibernate3.SessionFactoryUtils.getSession(getSessionFactory(),getEntityInterceptor(),getJdbcExceptionTranslator());
      applyFlushMode(session,false);
      org.springframework.orm.hibernate3.SessionHolder sessionHolder=new org.springframework.orm.hibernate3.SessionHolder(session);
      TransactionSynchronizationManager.bindResource(getSessionFactory(),sessionHolder);
      AsyncRequestInterceptor asyncRequestInterceptor=new AsyncRequestInterceptor(getSessionFactory(),sessionHolder);
      asyncManager.registerCallableInterceptor(participateAttributeName,asyncRequestInterceptor);
      asyncManager.registerDeferredResultInterceptor(participateAttributeName,asyncRequestInterceptor);
    }
 else {
      org.springframework.orm.hibernate3.SessionFactoryUtils.initDeferredClose(getSessionFactory());
    }
  }
}
