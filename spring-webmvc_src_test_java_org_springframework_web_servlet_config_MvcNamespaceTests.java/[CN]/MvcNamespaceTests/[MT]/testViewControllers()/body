{
  loadBeanDefinitions("mvc-config-view-controllers.xml",19);
  RequestMappingHandlerMapping mapping=appContext.getBean(RequestMappingHandlerMapping.class);
  assertNotNull(mapping);
  mapping.setDefaultHandler(handlerMethod);
  BeanNameUrlHandlerMapping beanNameMapping=appContext.getBean(BeanNameUrlHandlerMapping.class);
  assertNotNull(beanNameMapping);
  assertEquals(2,beanNameMapping.getOrder());
  MockHttpServletRequest request=new MockHttpServletRequest();
  request.setMethod("GET");
  HandlerExecutionChain chain=mapping.getHandler(request);
  assertEquals(3,chain.getInterceptors().length);
  assertTrue(chain.getInterceptors()[0] instanceof ConversionServiceExposingInterceptor);
  assertTrue(chain.getInterceptors()[1] instanceof LocaleChangeInterceptor);
  assertTrue(chain.getInterceptors()[2] instanceof ThemeChangeInterceptor);
  SimpleUrlHandlerMapping mapping2=appContext.getBean(SimpleUrlHandlerMapping.class);
  assertNotNull(mapping2);
  SimpleControllerHandlerAdapter adapter=appContext.getBean(SimpleControllerHandlerAdapter.class);
  assertNotNull(adapter);
  request=new MockHttpServletRequest("GET","/foo");
  chain=mapping2.getHandler(request);
  assertEquals(4,chain.getInterceptors().length);
  assertTrue(chain.getInterceptors()[1] instanceof ConversionServiceExposingInterceptor);
  assertTrue(chain.getInterceptors()[2] instanceof LocaleChangeInterceptor);
  assertTrue(chain.getInterceptors()[3] instanceof ThemeChangeInterceptor);
  ModelAndView mv=adapter.handle(request,new MockHttpServletResponse(),chain.getHandler());
  assertNull(mv.getViewName());
  request=new MockHttpServletRequest("GET","/myapp/app/bar");
  request.setContextPath("/myapp");
  request.setServletPath("/app");
  chain=mapping2.getHandler(request);
  assertEquals(4,chain.getInterceptors().length);
  assertTrue(chain.getInterceptors()[1] instanceof ConversionServiceExposingInterceptor);
  assertTrue(chain.getInterceptors()[2] instanceof LocaleChangeInterceptor);
  assertTrue(chain.getInterceptors()[3] instanceof ThemeChangeInterceptor);
  mv=adapter.handle(request,new MockHttpServletResponse(),chain.getHandler());
  assertEquals("baz",mv.getViewName());
  request=new MockHttpServletRequest("GET","/myapp/app/");
  request.setContextPath("/myapp");
  request.setServletPath("/app");
  chain=mapping2.getHandler(request);
  assertEquals(4,chain.getInterceptors().length);
  assertTrue(chain.getInterceptors()[1] instanceof ConversionServiceExposingInterceptor);
  assertTrue(chain.getInterceptors()[2] instanceof LocaleChangeInterceptor);
  assertTrue(chain.getInterceptors()[3] instanceof ThemeChangeInterceptor);
  mv=adapter.handle(request,new MockHttpServletResponse(),chain.getHandler());
  assertEquals("root",mv.getViewName());
  request=new MockHttpServletRequest("GET","/myapp/app/old");
  request.setContextPath("/myapp");
  request.setServletPath("/app");
  request.setQueryString("a=b");
  chain=mapping2.getHandler(request);
  mv=adapter.handle(request,new MockHttpServletResponse(),chain.getHandler());
  assertNotNull(mv.getView());
  assertEquals(RedirectView.class,mv.getView().getClass());
  RedirectView redirectView=(RedirectView)mv.getView();
  MockHttpServletResponse response=new MockHttpServletResponse();
  redirectView.render(Collections.emptyMap(),request,response);
  assertEquals("/new?a=b",response.getRedirectedUrl());
  assertEquals(308,response.getStatus());
  request=new MockHttpServletRequest("GET","/bad");
  chain=mapping2.getHandler(request);
  response=new MockHttpServletResponse();
  mv=adapter.handle(request,response,chain.getHandler());
  assertNull(mv);
  assertEquals(404,response.getStatus());
}
