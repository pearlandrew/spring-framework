{
  loadBeanDefinitions("mvc-config-view-resolution.xml",8);
  InternalResourceViewResolver internalResourceViewResolver=appContext.getBean(InternalResourceViewResolver.class);
  assertNotNull(internalResourceViewResolver);
  assertEquals(0,internalResourceViewResolver.getOrder());
  DirectFieldAccessor internalResourceViewResolverFieldAccessor=new DirectFieldAccessor(internalResourceViewResolver);
  assertEquals("/WEB-INF/",internalResourceViewResolverFieldAccessor.getPropertyValue("prefix"));
  assertEquals(".jsp",internalResourceViewResolverFieldAccessor.getPropertyValue("suffix"));
  BeanNameViewResolver beanNameViewResolver=appContext.getBean(BeanNameViewResolver.class);
  assertNotNull(beanNameViewResolver);
  assertEquals(1,beanNameViewResolver.getOrder());
  TilesConfigurer tilesConfigurer=appContext.getBean(TilesConfigurer.class);
  assertNotNull(tilesConfigurer);
  DirectFieldAccessor tilesConfigurerFieldAccessor=new DirectFieldAccessor(tilesConfigurer);
  assertArrayEquals(new String[]{"/org/springframework/web/servlet/resource/tiles/tiles1.xml","/org/springframework/web/servlet/resource/tiles/tiles2.xml"},(String[])tilesConfigurerFieldAccessor.getPropertyValue("definitions"));
  assertTrue((boolean)tilesConfigurerFieldAccessor.getPropertyValue("checkRefresh"));
  TilesViewResolver tilesViewResolver=appContext.getBean(TilesViewResolver.class);
  assertNotNull(tilesViewResolver);
  assertEquals(2,tilesViewResolver.getOrder());
  FreeMarkerConfigurer freeMarkerConfigurer=appContext.getBean(FreeMarkerConfigurer.class);
  assertNotNull(freeMarkerConfigurer);
  DirectFieldAccessor freeMarkerConfigurerFieldAccessor=new DirectFieldAccessor(freeMarkerConfigurer);
  assertArrayEquals(new String[]{"/","/test"},(String[])freeMarkerConfigurerFieldAccessor.getPropertyValue("templateLoaderPaths"));
  FreeMarkerViewResolver freeMarkerViewResolver=appContext.getBean(FreeMarkerViewResolver.class);
  assertNotNull(freeMarkerViewResolver);
  assertEquals(3,freeMarkerViewResolver.getOrder());
  DirectFieldAccessor freeMarkerViewResolverFieldAccessor=new DirectFieldAccessor(freeMarkerViewResolver);
  assertEquals("",freeMarkerViewResolverFieldAccessor.getPropertyValue("prefix"));
  assertEquals(".ftl",freeMarkerViewResolverFieldAccessor.getPropertyValue("suffix"));
  assertEquals(0,freeMarkerViewResolverFieldAccessor.getPropertyValue("cacheLimit"));
  VelocityConfigurer velocityConfigurer=appContext.getBean(VelocityConfigurer.class);
  assertNotNull(velocityConfigurer);
  DirectFieldAccessor velocityConfigurerFieldAccessor=new DirectFieldAccessor(velocityConfigurer);
  assertEquals("/",velocityConfigurerFieldAccessor.getPropertyValue("resourceLoaderPath"));
  VelocityViewResolver velocityViewResolver=appContext.getBean(VelocityViewResolver.class);
  assertNotNull(velocityViewResolver);
  assertEquals(4,velocityViewResolver.getOrder());
  DirectFieldAccessor velocityViewResolverFieldAccessor=new DirectFieldAccessor(velocityViewResolver);
  assertEquals("",velocityViewResolverFieldAccessor.getPropertyValue("prefix"));
  assertEquals(".vm",velocityViewResolverFieldAccessor.getPropertyValue("suffix"));
  assertEquals(0,velocityViewResolverFieldAccessor.getPropertyValue("cacheLimit"));
}
