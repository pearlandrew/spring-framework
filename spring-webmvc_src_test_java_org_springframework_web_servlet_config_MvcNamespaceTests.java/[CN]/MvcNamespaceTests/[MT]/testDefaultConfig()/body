{
  loadBeanDefinitions("mvc-config.xml",13);
  RequestMappingHandlerMapping mapping=appContext.getBean(RequestMappingHandlerMapping.class);
  assertNotNull(mapping);
  assertEquals(0,mapping.getOrder());
  assertTrue(mapping.getUrlPathHelper().shouldRemoveSemicolonContent());
  mapping.setDefaultHandler(handlerMethod);
  MockHttpServletRequest request=new MockHttpServletRequest("GET","/foo.json");
  NativeWebRequest webRequest=new ServletWebRequest(request);
  ContentNegotiationManager manager=mapping.getContentNegotiationManager();
  assertEquals(Arrays.asList(MediaType.APPLICATION_JSON),manager.resolveMediaTypes(webRequest));
  RequestMappingHandlerAdapter adapter=appContext.getBean(RequestMappingHandlerAdapter.class);
  assertNotNull(adapter);
  assertEquals(false,new DirectFieldAccessor(adapter).getPropertyValue("ignoreDefaultModelOnRedirect"));
  List<HttpMessageConverter<?>> converters=adapter.getMessageConverters();
  assertTrue(converters.size() > 0);
  for (  HttpMessageConverter<?> converter : converters) {
    if (converter instanceof AbstractJackson2HttpMessageConverter) {
      ObjectMapper objectMapper=((AbstractJackson2HttpMessageConverter)converter).getObjectMapper();
      assertTrue(objectMapper.getDeserializationConfig().isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION));
      assertTrue(objectMapper.getSerializationConfig().isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION));
      assertTrue(objectMapper.getDeserializationConfig().isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES));
      if (converter instanceof MappingJackson2XmlHttpMessageConverter) {
        assertEquals(XmlMapper.class,objectMapper.getClass());
      }
    }
  }
  assertNotNull(appContext.getBean(FormattingConversionServiceFactoryBean.class));
  assertNotNull(appContext.getBean(ConversionService.class));
  assertNotNull(appContext.getBean(LocalValidatorFactoryBean.class));
  assertNotNull(appContext.getBean(Validator.class));
  request=new MockHttpServletRequest("GET","/");
  request.addParameter("date","2009-10-31");
  MockHttpServletResponse response=new MockHttpServletResponse();
  HandlerExecutionChain chain=mapping.getHandler(request);
  assertEquals(1,chain.getInterceptors().length);
  assertTrue(chain.getInterceptors()[0] instanceof ConversionServiceExposingInterceptor);
  ConversionServiceExposingInterceptor interceptor=(ConversionServiceExposingInterceptor)chain.getInterceptors()[0];
  interceptor.preHandle(request,response,handlerMethod);
  assertSame(appContext.getBean(ConversionService.class),request.getAttribute(ConversionService.class.getName()));
  adapter.handle(request,response,handlerMethod);
  assertTrue(handler.recordedValidationError);
  CompositeUriComponentsContributor uriComponentsContributor=this.appContext.getBean(MvcUriComponentsBuilder.MVC_URI_COMPONENTS_CONTRIBUTOR_BEAN_NAME,CompositeUriComponentsContributor.class);
  assertNotNull(uriComponentsContributor);
}
