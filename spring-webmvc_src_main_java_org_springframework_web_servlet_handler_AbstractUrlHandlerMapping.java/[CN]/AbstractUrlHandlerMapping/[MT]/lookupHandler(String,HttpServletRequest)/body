{
  Object handler=this.handlerMap.get(urlPath);
  if (handler != null) {
    if (handler instanceof String) {
      String handlerName=(String)handler;
      handler=getApplicationContext().getBean(handlerName);
    }
    validateHandler(handler,request);
    return buildPathExposingHandler(handler,urlPath,urlPath,null);
  }
  List<String> matchingPatterns=new ArrayList<>();
  for (  String registeredPattern : this.handlerMap.keySet()) {
    if (getPathMatcher().match(registeredPattern,urlPath)) {
      matchingPatterns.add(registeredPattern);
    }
 else     if (useTrailingSlashMatch()) {
      if (!registeredPattern.endsWith("/") && getPathMatcher().match(registeredPattern + "/",urlPath)) {
        matchingPatterns.add(registeredPattern + "/");
      }
    }
  }
  String bestPatternMatch=null;
  Comparator<String> patternComparator=getPathMatcher().getPatternComparator(urlPath);
  if (!matchingPatterns.isEmpty()) {
    Collections.sort(matchingPatterns,patternComparator);
    if (logger.isDebugEnabled()) {
      logger.debug("Matching patterns for request [" + urlPath + "] are "+ matchingPatterns);
    }
    bestPatternMatch=matchingPatterns.get(0);
  }
  if (bestPatternMatch != null) {
    handler=this.handlerMap.get(bestPatternMatch);
    if (handler == null) {
      Assert.isTrue(bestPatternMatch.endsWith("/"));
      handler=this.handlerMap.get(bestPatternMatch.substring(0,bestPatternMatch.length() - 1));
    }
    if (handler instanceof String) {
      String handlerName=(String)handler;
      handler=getApplicationContext().getBean(handlerName);
    }
    validateHandler(handler,request);
    String pathWithinMapping=getPathMatcher().extractPathWithinPattern(bestPatternMatch,urlPath);
    Map<String,String> uriTemplateVariables=new LinkedHashMap<>();
    for (    String matchingPattern : matchingPatterns) {
      if (patternComparator.compare(bestPatternMatch,matchingPattern) == 0) {
        Map<String,String> vars=getPathMatcher().extractUriTemplateVariables(matchingPattern,urlPath);
        Map<String,String> decodedVars=getUrlPathHelper().decodePathVariables(request,vars);
        uriTemplateVariables.putAll(decodedVars);
      }
    }
    if (logger.isDebugEnabled()) {
      logger.debug("URI Template variables for request [" + urlPath + "] are "+ uriTemplateVariables);
    }
    return buildPathExposingHandler(handler,bestPatternMatch,pathWithinMapping,uriTemplateVariables);
  }
  return null;
}
