{
  boolean pattern1NullCaptureAll=isNullOrCaptureAllPattern(pattern1);
  boolean pattern2NullCaptureAll=isNullOrCaptureAllPattern(pattern2);
  if (pattern1NullCaptureAll && pattern2NullCaptureAll) {
    return 0;
  }
 else   if (pattern1NullCaptureAll) {
    return 1;
  }
 else   if (pattern2NullCaptureAll) {
    return -1;
  }
  boolean pattern1EqualsPath=pattern1.equals(path);
  boolean pattern2EqualsPath=pattern2.equals(path);
  if (pattern1EqualsPath && pattern2EqualsPath) {
    return 0;
  }
 else   if (pattern1EqualsPath) {
    return -1;
  }
 else   if (pattern2EqualsPath) {
    return 1;
  }
  PatternElements pattern1Elements=new PatternElements(pattern1);
  PatternElements pattern2Elements=new PatternElements(pattern2);
  if (pattern1Elements.endsWithCatchAll && pattern2Elements.catchAllCount == 0) {
    return 1;
  }
 else   if (pattern2Elements.endsWithCatchAll && pattern1Elements.catchAllCount == 0) {
    return -1;
  }
  int totalCount1=pattern1Elements.bracketCount + pattern1Elements.wildcardsCount;
  int totalCount2=pattern2Elements.bracketCount + pattern2Elements.wildcardsCount;
  if (totalCount1 != totalCount2) {
    return totalCount1 - totalCount2;
  }
  int pattern1Length=getPatternLength(pattern1);
  int pattern2Length=getPatternLength(pattern2);
  if (pattern1Length != pattern2Length) {
    return pattern2Length - pattern1Length;
  }
  if (pattern1Elements.wildcardsCount < pattern2Elements.wildcardsCount) {
    return -1;
  }
 else   if (pattern2Elements.wildcardsCount < pattern1Elements.wildcardsCount) {
    return 1;
  }
  if (pattern1Elements.bracketCount < pattern2Elements.bracketCount) {
    return -1;
  }
 else   if (pattern2Elements.bracketCount < pattern1Elements.bracketCount) {
    return 1;
  }
  return 0;
}
