{
  functionOrVar_return retval=new functionOrVar_return();
  retval.start=input.LT(1);
  Object root_0=null;
  function_return function75=null;
  var_return var76=null;
  try {
    int alt17=2;
    int LA17_0=input.LA(1);
    if ((LA17_0 == POUND)) {
      int LA17_1=input.LA(2);
      if ((LA17_1 == ID)) {
        int LA17_2=input.LA(3);
        if ((synpred2())) {
          alt17=1;
        }
 else         if ((true)) {
          alt17=2;
        }
 else {
          if (backtracking > 0) {
            failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("148:1: functionOrVar : ( ( POUND ID LPAREN )=> function | var );",17,2,input);
          throw nvae;
        }
      }
 else {
        if (backtracking > 0) {
          failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("148:1: functionOrVar : ( ( POUND ID LPAREN )=> function | var );",17,1,input);
        throw nvae;
      }
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("148:1: functionOrVar : ( ( POUND ID LPAREN )=> function | var );",17,0,input);
      throw nvae;
    }
switch (alt17) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_function_in_functionOrVar820);
        function75=function();
        _fsp--;
        if (failed)         return retval;
        if (backtracking == 0)         adaptor.addChild(root_0,function75.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    pushFollow(FOLLOW_var_in_functionOrVar828);
    var76=var();
    _fsp--;
    if (failed)     return retval;
    if (backtracking == 0)     adaptor.addChild(root_0,var76.getTree());
  }
break;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
throw e;
}
 finally {
}
return retval;
}
