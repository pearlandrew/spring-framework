{
  sumExpression_return retval=new sumExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token PLUS31=null;
  Token MINUS32=null;
  productExpression_return productExpression30=null;
  productExpression_return productExpression33=null;
  Object PLUS31_tree=null;
  Object MINUS32_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_productExpression_in_sumExpression403);
      productExpression30=productExpression();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       adaptor.addChild(root_0,productExpression30.getTree());
      loop8:       do {
        int alt8=2;
        int LA8_0=input.LA(1);
        if (((LA8_0 >= PLUS && LA8_0 <= MINUS))) {
          alt8=1;
        }
switch (alt8) {
case 1:
{
            int alt7=2;
            int LA7_0=input.LA(1);
            if ((LA7_0 == PLUS)) {
              alt7=1;
            }
 else             if ((LA7_0 == MINUS)) {
              alt7=2;
            }
 else {
              if (backtracking > 0) {
                failed=true;
                return retval;
              }
              NoViableAltException nvae=new NoViableAltException("88:24: ( PLUS | MINUS )",7,0,input);
              throw nvae;
            }
switch (alt7) {
case 1:
{
                PLUS31=(Token)input.LT(1);
                match(input,PLUS,FOLLOW_PLUS_in_sumExpression408);
                if (failed)                 return retval;
                if (backtracking == 0) {
                  PLUS31_tree=(Object)adaptor.create(PLUS31);
                  root_0=(Object)adaptor.becomeRoot(PLUS31_tree,root_0);
                }
              }
            break;
case 2:
{
            MINUS32=(Token)input.LT(1);
            match(input,MINUS,FOLLOW_MINUS_in_sumExpression413);
            if (failed)             return retval;
            if (backtracking == 0) {
              MINUS32_tree=(Object)adaptor.create(MINUS32);
              root_0=(Object)adaptor.becomeRoot(MINUS32_tree,root_0);
            }
          }
        break;
    }
    pushFollow(FOLLOW_productExpression_in_sumExpression417);
    productExpression33=productExpression();
    _fsp--;
    if (failed)     return retval;
    if (backtracking == 0)     adaptor.addChild(root_0,productExpression33.getTree());
  }
break;
default :
break loop8;
}
}
 while (true);
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
reportError(e);
throw e;
}
 finally {
}
return retval;
}
