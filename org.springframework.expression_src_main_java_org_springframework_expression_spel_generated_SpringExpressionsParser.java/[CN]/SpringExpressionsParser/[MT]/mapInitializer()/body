{
  mapInitializer_return retval=new mapInitializer_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token POUND115=null;
  Token LCURLY116=null;
  Token COMMA118=null;
  Token RCURLY120=null;
  mapEntry_return mapEntry117=null;
  mapEntry_return mapEntry119=null;
  Object POUND115_tree=null;
  Object LCURLY116_tree=null;
  Object COMMA118_tree=null;
  Object RCURLY120_tree=null;
  RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
  RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
  RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
  RewriteRuleTokenStream stream_POUND=new RewriteRuleTokenStream(adaptor,"token POUND");
  RewriteRuleSubtreeStream stream_mapEntry=new RewriteRuleSubtreeStream(adaptor,"rule mapEntry");
  try {
{
      POUND115=(Token)input.LT(1);
      match(input,POUND,FOLLOW_POUND_in_mapInitializer1139);
      if (failed)       return retval;
      if (backtracking == 0)       stream_POUND.add(POUND115);
      LCURLY116=(Token)input.LT(1);
      match(input,LCURLY,FOLLOW_LCURLY_in_mapInitializer1141);
      if (failed)       return retval;
      if (backtracking == 0)       stream_LCURLY.add(LCURLY116);
      pushFollow(FOLLOW_mapEntry_in_mapInitializer1143);
      mapEntry117=mapEntry();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_mapEntry.add(mapEntry117.getTree());
      loop27:       do {
        int alt27=2;
        int LA27_0=input.LA(1);
        if ((LA27_0 == COMMA)) {
          alt27=1;
        }
switch (alt27) {
case 1:
{
            COMMA118=(Token)input.LT(1);
            match(input,COMMA,FOLLOW_COMMA_in_mapInitializer1146);
            if (failed)             return retval;
            if (backtracking == 0)             stream_COMMA.add(COMMA118);
            pushFollow(FOLLOW_mapEntry_in_mapInitializer1148);
            mapEntry119=mapEntry();
            _fsp--;
            if (failed)             return retval;
            if (backtracking == 0)             stream_mapEntry.add(mapEntry119.getTree());
          }
        break;
default :
      break loop27;
  }
}
 while (true);
RCURLY120=(Token)input.LT(1);
match(input,RCURLY,FOLLOW_RCURLY_in_mapInitializer1152);
if (failed) return retval;
if (backtracking == 0) stream_RCURLY.add(RCURLY120);
if (backtracking == 0) {
  retval.tree=root_0;
  RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
  root_0=(Object)adaptor.nil();
{
{
      Object root_1=(Object)adaptor.nil();
      root_1=(Object)adaptor.becomeRoot(adaptor.create(MAP_INITIALIZER,"MAP_INITIALIZER"),root_1);
      while (stream_mapEntry.hasNext()) {
        adaptor.addChild(root_1,stream_mapEntry.next());
      }
      stream_mapEntry.reset();
      adaptor.addChild(root_0,root_1);
    }
  }
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
reportError(e);
throw e;
}
 finally {
}
return retval;
}
