{
  methodOrProperty_return retval=new methodOrProperty_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token id=null;
  methodArgs_return methodArgs87=null;
  property_return property88=null;
  Object id_tree=null;
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_methodArgs=new RewriteRuleSubtreeStream(adaptor,"rule methodArgs");
  try {
    int alt20=2;
    int LA20_0=input.LA(1);
    if ((LA20_0 == ID)) {
      int LA20_1=input.LA(2);
      if ((LA20_1 == LPAREN) && (synpred4())) {
        alt20=1;
      }
 else       if ((LA20_1 == EOF || (LA20_1 >= SEMI && LA20_1 <= POWER) || LA20_1 == DOT || LA20_1 == COMMA || (LA20_1 >= LBRACKET && LA20_1 <= RBRACKET) || LA20_1 == RCURLY || (LA20_1 >= EQUAL && LA20_1 <= MATCHES))) {
        alt20=2;
      }
 else {
        if (backtracking > 0) {
          failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("167:1: methodOrProperty : ( ( ID LPAREN )=>id= ID methodArgs -> ^( METHOD[$id] methodArgs ) | property );",20,1,input);
        throw nvae;
      }
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("167:1: methodOrProperty : ( ( ID LPAREN )=>id= ID methodArgs -> ^( METHOD[$id] methodArgs ) | property );",20,0,input);
      throw nvae;
    }
switch (alt20) {
case 1:
{
        id=(Token)input.LT(1);
        match(input,ID,FOLLOW_ID_in_methodOrProperty982);
        if (failed)         return retval;
        if (backtracking == 0)         stream_ID.add(id);
        pushFollow(FOLLOW_methodArgs_in_methodOrProperty984);
        methodArgs87=methodArgs();
        _fsp--;
        if (failed)         return retval;
        if (backtracking == 0)         stream_methodArgs.add(methodArgs87.getTree());
        if (backtracking == 0) {
          retval.tree=root_0;
          RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
          root_0=(Object)adaptor.nil();
{
{
              Object root_1=(Object)adaptor.nil();
              root_1=(Object)adaptor.becomeRoot(adaptor.create(METHOD,id),root_1);
              adaptor.addChild(root_1,stream_methodArgs.next());
              adaptor.addChild(root_0,root_1);
            }
          }
        }
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    pushFollow(FOLLOW_property_in_methodOrProperty998);
    property88=property();
    _fsp--;
    if (failed)     return retval;
    if (backtracking == 0)     adaptor.addChild(root_0,property88.getTree());
  }
break;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
reportError(e);
throw e;
}
 finally {
}
return retval;
}
