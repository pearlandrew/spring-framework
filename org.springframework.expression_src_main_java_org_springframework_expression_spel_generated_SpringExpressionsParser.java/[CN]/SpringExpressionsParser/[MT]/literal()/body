{
  literal_return retval=new literal_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token INTEGER_LITERAL139=null;
  Token STRING_LITERAL140=null;
  Token DQ_STRING_LITERAL141=null;
  Token NULL_LITERAL143=null;
  Token HEXADECIMAL_INTEGER_LITERAL144=null;
  Token REAL_LITERAL145=null;
  boolLiteral_return boolLiteral142=null;
  Object INTEGER_LITERAL139_tree=null;
  Object STRING_LITERAL140_tree=null;
  Object DQ_STRING_LITERAL141_tree=null;
  Object NULL_LITERAL143_tree=null;
  Object HEXADECIMAL_INTEGER_LITERAL144_tree=null;
  Object REAL_LITERAL145_tree=null;
  try {
    int alt33=7;
switch (input.LA(1)) {
case INTEGER_LITERAL:
{
        alt33=1;
      }
    break;
case STRING_LITERAL:
{
    alt33=2;
  }
break;
case DQ_STRING_LITERAL:
{
alt33=3;
}
break;
case TRUE:
case FALSE:
{
alt33=4;
}
break;
case NULL_LITERAL:
{
alt33=5;
}
break;
case HEXADECIMAL_INTEGER_LITERAL:
{
alt33=6;
}
break;
case REAL_LITERAL:
{
alt33=7;
}
break;
default :
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("202:1: literal : ( INTEGER_LITERAL | STRING_LITERAL | DQ_STRING_LITERAL | boolLiteral | NULL_LITERAL | HEXADECIMAL_INTEGER_LITERAL | REAL_LITERAL );",33,0,input);
throw nvae;
}
switch (alt33) {
case 1:
{
root_0=(Object)adaptor.nil();
INTEGER_LITERAL139=(Token)input.LT(1);
match(input,INTEGER_LITERAL,FOLLOW_INTEGER_LITERAL_in_literal1345);
if (failed) return retval;
if (backtracking == 0) {
INTEGER_LITERAL139_tree=(Object)adaptor.create(INTEGER_LITERAL139);
adaptor.addChild(root_0,INTEGER_LITERAL139_tree);
}
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
STRING_LITERAL140=(Token)input.LT(1);
match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_literal1351);
if (failed) return retval;
if (backtracking == 0) {
STRING_LITERAL140_tree=(Object)adaptor.create(STRING_LITERAL140);
adaptor.addChild(root_0,STRING_LITERAL140_tree);
}
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
DQ_STRING_LITERAL141=(Token)input.LT(1);
match(input,DQ_STRING_LITERAL,FOLLOW_DQ_STRING_LITERAL_in_literal1356);
if (failed) return retval;
if (backtracking == 0) {
DQ_STRING_LITERAL141_tree=(Object)adaptor.create(DQ_STRING_LITERAL141);
adaptor.addChild(root_0,DQ_STRING_LITERAL141_tree);
}
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_boolLiteral_in_literal1361);
boolLiteral142=boolLiteral();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,boolLiteral142.getTree());
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
NULL_LITERAL143=(Token)input.LT(1);
match(input,NULL_LITERAL,FOLLOW_NULL_LITERAL_in_literal1366);
if (failed) return retval;
if (backtracking == 0) {
NULL_LITERAL143_tree=(Object)adaptor.create(NULL_LITERAL143);
adaptor.addChild(root_0,NULL_LITERAL143_tree);
}
}
break;
case 6:
{
root_0=(Object)adaptor.nil();
HEXADECIMAL_INTEGER_LITERAL144=(Token)input.LT(1);
match(input,HEXADECIMAL_INTEGER_LITERAL,FOLLOW_HEXADECIMAL_INTEGER_LITERAL_in_literal1371);
if (failed) return retval;
if (backtracking == 0) {
HEXADECIMAL_INTEGER_LITERAL144_tree=(Object)adaptor.create(HEXADECIMAL_INTEGER_LITERAL144);
adaptor.addChild(root_0,HEXADECIMAL_INTEGER_LITERAL144_tree);
}
}
break;
case 7:
{
root_0=(Object)adaptor.nil();
REAL_LITERAL145=(Token)input.LT(1);
match(input,REAL_LITERAL,FOLLOW_REAL_LITERAL_in_literal1377);
if (failed) return retval;
if (backtracking == 0) {
REAL_LITERAL145_tree=(Object)adaptor.create(REAL_LITERAL145);
adaptor.addChild(root_0,REAL_LITERAL145_tree);
}
}
break;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
reportError(e);
throw e;
}
 finally {
}
return retval;
}
