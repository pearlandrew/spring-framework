{
  literal_return retval=new literal_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token INTEGER_LITERAL162=null;
  Token STRING_LITERAL163=null;
  Token DQ_STRING_LITERAL164=null;
  Token NULL_LITERAL166=null;
  Token HEXADECIMAL_INTEGER_LITERAL167=null;
  Token REAL_LITERAL168=null;
  boolLiteral_return boolLiteral165=null;
  dateLiteral_return dateLiteral169=null;
  Object INTEGER_LITERAL162_tree=null;
  Object STRING_LITERAL163_tree=null;
  Object DQ_STRING_LITERAL164_tree=null;
  Object NULL_LITERAL166_tree=null;
  Object HEXADECIMAL_INTEGER_LITERAL167_tree=null;
  Object REAL_LITERAL168_tree=null;
  try {
    int alt39=8;
switch (input.LA(1)) {
case INTEGER_LITERAL:
{
        alt39=1;
      }
    break;
case STRING_LITERAL:
{
    alt39=2;
  }
break;
case DQ_STRING_LITERAL:
{
alt39=3;
}
break;
case TRUE:
case FALSE:
{
alt39=4;
}
break;
case NULL_LITERAL:
{
alt39=5;
}
break;
case HEXADECIMAL_INTEGER_LITERAL:
{
alt39=6;
}
break;
case REAL_LITERAL:
{
alt39=7;
}
break;
case 95:
{
alt39=8;
}
break;
default :
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("248:1: literal : ( INTEGER_LITERAL | STRING_LITERAL | DQ_STRING_LITERAL | boolLiteral | NULL_LITERAL | HEXADECIMAL_INTEGER_LITERAL | REAL_LITERAL | dateLiteral );",39,0,input);
throw nvae;
}
switch (alt39) {
case 1:
{
root_0=(Object)adaptor.nil();
INTEGER_LITERAL162=(Token)input.LT(1);
match(input,INTEGER_LITERAL,FOLLOW_INTEGER_LITERAL_in_literal1662);
if (failed) return retval;
if (backtracking == 0) {
INTEGER_LITERAL162_tree=(Object)adaptor.create(INTEGER_LITERAL162);
adaptor.addChild(root_0,INTEGER_LITERAL162_tree);
}
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
STRING_LITERAL163=(Token)input.LT(1);
match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_literal1668);
if (failed) return retval;
if (backtracking == 0) {
STRING_LITERAL163_tree=(Object)adaptor.create(STRING_LITERAL163);
adaptor.addChild(root_0,STRING_LITERAL163_tree);
}
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
DQ_STRING_LITERAL164=(Token)input.LT(1);
match(input,DQ_STRING_LITERAL,FOLLOW_DQ_STRING_LITERAL_in_literal1673);
if (failed) return retval;
if (backtracking == 0) {
DQ_STRING_LITERAL164_tree=(Object)adaptor.create(DQ_STRING_LITERAL164);
adaptor.addChild(root_0,DQ_STRING_LITERAL164_tree);
}
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_boolLiteral_in_literal1678);
boolLiteral165=boolLiteral();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,boolLiteral165.getTree());
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
NULL_LITERAL166=(Token)input.LT(1);
match(input,NULL_LITERAL,FOLLOW_NULL_LITERAL_in_literal1683);
if (failed) return retval;
if (backtracking == 0) {
NULL_LITERAL166_tree=(Object)adaptor.create(NULL_LITERAL166);
adaptor.addChild(root_0,NULL_LITERAL166_tree);
}
}
break;
case 6:
{
root_0=(Object)adaptor.nil();
HEXADECIMAL_INTEGER_LITERAL167=(Token)input.LT(1);
match(input,HEXADECIMAL_INTEGER_LITERAL,FOLLOW_HEXADECIMAL_INTEGER_LITERAL_in_literal1688);
if (failed) return retval;
if (backtracking == 0) {
HEXADECIMAL_INTEGER_LITERAL167_tree=(Object)adaptor.create(HEXADECIMAL_INTEGER_LITERAL167);
adaptor.addChild(root_0,HEXADECIMAL_INTEGER_LITERAL167_tree);
}
}
break;
case 7:
{
root_0=(Object)adaptor.nil();
REAL_LITERAL168=(Token)input.LT(1);
match(input,REAL_LITERAL,FOLLOW_REAL_LITERAL_in_literal1694);
if (failed) return retval;
if (backtracking == 0) {
REAL_LITERAL168_tree=(Object)adaptor.create(REAL_LITERAL168);
adaptor.addChild(root_0,REAL_LITERAL168_tree);
}
}
break;
case 8:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_dateLiteral_in_literal1699);
dateLiteral169=dateLiteral();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,dateLiteral169.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
throw e;
}
 finally {
}
return retval;
}
