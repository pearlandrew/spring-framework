{
  literal_return retval=new literal_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token INTEGER_LITERAL164=null;
  Token STRING_LITERAL165=null;
  Token DQ_STRING_LITERAL166=null;
  Token NULL_LITERAL168=null;
  Token HEXADECIMAL_INTEGER_LITERAL169=null;
  Token REAL_LITERAL170=null;
  boolLiteral_return boolLiteral167=null;
  dateLiteral_return dateLiteral171=null;
  Object INTEGER_LITERAL164_tree=null;
  Object STRING_LITERAL165_tree=null;
  Object DQ_STRING_LITERAL166_tree=null;
  Object NULL_LITERAL168_tree=null;
  Object HEXADECIMAL_INTEGER_LITERAL169_tree=null;
  Object REAL_LITERAL170_tree=null;
  try {
    int alt40=8;
switch (input.LA(1)) {
case INTEGER_LITERAL:
{
        alt40=1;
      }
    break;
case STRING_LITERAL:
{
    alt40=2;
  }
break;
case DQ_STRING_LITERAL:
{
alt40=3;
}
break;
case TRUE:
case FALSE:
{
alt40=4;
}
break;
case NULL_LITERAL:
{
alt40=5;
}
break;
case HEXADECIMAL_INTEGER_LITERAL:
{
alt40=6;
}
break;
case REAL_LITERAL:
{
alt40=7;
}
break;
case 92:
{
alt40=8;
}
break;
default :
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("261:1: literal : ( INTEGER_LITERAL | STRING_LITERAL | DQ_STRING_LITERAL | boolLiteral | NULL_LITERAL | HEXADECIMAL_INTEGER_LITERAL | REAL_LITERAL | dateLiteral );",40,0,input);
throw nvae;
}
switch (alt40) {
case 1:
{
root_0=(Object)adaptor.nil();
INTEGER_LITERAL164=(Token)input.LT(1);
match(input,INTEGER_LITERAL,FOLLOW_INTEGER_LITERAL_in_literal1689);
if (failed) return retval;
if (backtracking == 0) {
INTEGER_LITERAL164_tree=(Object)adaptor.create(INTEGER_LITERAL164);
adaptor.addChild(root_0,INTEGER_LITERAL164_tree);
}
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
STRING_LITERAL165=(Token)input.LT(1);
match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_literal1695);
if (failed) return retval;
if (backtracking == 0) {
STRING_LITERAL165_tree=(Object)adaptor.create(STRING_LITERAL165);
adaptor.addChild(root_0,STRING_LITERAL165_tree);
}
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
DQ_STRING_LITERAL166=(Token)input.LT(1);
match(input,DQ_STRING_LITERAL,FOLLOW_DQ_STRING_LITERAL_in_literal1700);
if (failed) return retval;
if (backtracking == 0) {
DQ_STRING_LITERAL166_tree=(Object)adaptor.create(DQ_STRING_LITERAL166);
adaptor.addChild(root_0,DQ_STRING_LITERAL166_tree);
}
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_boolLiteral_in_literal1705);
boolLiteral167=boolLiteral();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,boolLiteral167.getTree());
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
NULL_LITERAL168=(Token)input.LT(1);
match(input,NULL_LITERAL,FOLLOW_NULL_LITERAL_in_literal1710);
if (failed) return retval;
if (backtracking == 0) {
NULL_LITERAL168_tree=(Object)adaptor.create(NULL_LITERAL168);
adaptor.addChild(root_0,NULL_LITERAL168_tree);
}
}
break;
case 6:
{
root_0=(Object)adaptor.nil();
HEXADECIMAL_INTEGER_LITERAL169=(Token)input.LT(1);
match(input,HEXADECIMAL_INTEGER_LITERAL,FOLLOW_HEXADECIMAL_INTEGER_LITERAL_in_literal1715);
if (failed) return retval;
if (backtracking == 0) {
HEXADECIMAL_INTEGER_LITERAL169_tree=(Object)adaptor.create(HEXADECIMAL_INTEGER_LITERAL169);
adaptor.addChild(root_0,HEXADECIMAL_INTEGER_LITERAL169_tree);
}
}
break;
case 7:
{
root_0=(Object)adaptor.nil();
REAL_LITERAL170=(Token)input.LT(1);
match(input,REAL_LITERAL,FOLLOW_REAL_LITERAL_in_literal1721);
if (failed) return retval;
if (backtracking == 0) {
REAL_LITERAL170_tree=(Object)adaptor.create(REAL_LITERAL170);
adaptor.addChild(root_0,REAL_LITERAL170_tree);
}
}
break;
case 8:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_dateLiteral_in_literal1726);
dateLiteral171=dateLiteral();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,dateLiteral171.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
reportError(e);
throw e;
}
 finally {
}
return retval;
}
