{
  literal_return retval=new literal_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token INTEGER_LITERAL156=null;
  Token STRING_LITERAL157=null;
  Token DQ_STRING_LITERAL158=null;
  Token NULL_LITERAL160=null;
  Token HEXADECIMAL_INTEGER_LITERAL161=null;
  Token REAL_LITERAL162=null;
  boolLiteral_return boolLiteral159=null;
  Object INTEGER_LITERAL156_tree=null;
  Object STRING_LITERAL157_tree=null;
  Object DQ_STRING_LITERAL158_tree=null;
  Object NULL_LITERAL160_tree=null;
  Object HEXADECIMAL_INTEGER_LITERAL161_tree=null;
  Object REAL_LITERAL162_tree=null;
  try {
    int alt38=7;
switch (input.LA(1)) {
case INTEGER_LITERAL:
{
        alt38=1;
      }
    break;
case STRING_LITERAL:
{
    alt38=2;
  }
break;
case DQ_STRING_LITERAL:
{
alt38=3;
}
break;
case TRUE:
case FALSE:
{
alt38=4;
}
break;
case NULL_LITERAL:
{
alt38=5;
}
break;
case HEXADECIMAL_INTEGER_LITERAL:
{
alt38=6;
}
break;
case REAL_LITERAL:
{
alt38=7;
}
break;
default :
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("246:1: literal : ( INTEGER_LITERAL | STRING_LITERAL | DQ_STRING_LITERAL | boolLiteral | NULL_LITERAL | HEXADECIMAL_INTEGER_LITERAL | REAL_LITERAL );",38,0,input);
throw nvae;
}
switch (alt38) {
case 1:
{
root_0=(Object)adaptor.nil();
INTEGER_LITERAL156=(Token)input.LT(1);
match(input,INTEGER_LITERAL,FOLLOW_INTEGER_LITERAL_in_literal1606);
if (failed) return retval;
if (backtracking == 0) {
INTEGER_LITERAL156_tree=(Object)adaptor.create(INTEGER_LITERAL156);
adaptor.addChild(root_0,INTEGER_LITERAL156_tree);
}
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
STRING_LITERAL157=(Token)input.LT(1);
match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_literal1612);
if (failed) return retval;
if (backtracking == 0) {
STRING_LITERAL157_tree=(Object)adaptor.create(STRING_LITERAL157);
adaptor.addChild(root_0,STRING_LITERAL157_tree);
}
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
DQ_STRING_LITERAL158=(Token)input.LT(1);
match(input,DQ_STRING_LITERAL,FOLLOW_DQ_STRING_LITERAL_in_literal1617);
if (failed) return retval;
if (backtracking == 0) {
DQ_STRING_LITERAL158_tree=(Object)adaptor.create(DQ_STRING_LITERAL158);
adaptor.addChild(root_0,DQ_STRING_LITERAL158_tree);
}
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_boolLiteral_in_literal1622);
boolLiteral159=boolLiteral();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,boolLiteral159.getTree());
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
NULL_LITERAL160=(Token)input.LT(1);
match(input,NULL_LITERAL,FOLLOW_NULL_LITERAL_in_literal1627);
if (failed) return retval;
if (backtracking == 0) {
NULL_LITERAL160_tree=(Object)adaptor.create(NULL_LITERAL160);
adaptor.addChild(root_0,NULL_LITERAL160_tree);
}
}
break;
case 6:
{
root_0=(Object)adaptor.nil();
HEXADECIMAL_INTEGER_LITERAL161=(Token)input.LT(1);
match(input,HEXADECIMAL_INTEGER_LITERAL,FOLLOW_HEXADECIMAL_INTEGER_LITERAL_in_literal1632);
if (failed) return retval;
if (backtracking == 0) {
HEXADECIMAL_INTEGER_LITERAL161_tree=(Object)adaptor.create(HEXADECIMAL_INTEGER_LITERAL161);
adaptor.addChild(root_0,HEXADECIMAL_INTEGER_LITERAL161_tree);
}
}
break;
case 7:
{
root_0=(Object)adaptor.nil();
REAL_LITERAL162=(Token)input.LT(1);
match(input,REAL_LITERAL,FOLLOW_REAL_LITERAL_in_literal1638);
if (failed) return retval;
if (backtracking == 0) {
REAL_LITERAL162_tree=(Object)adaptor.create(REAL_LITERAL162);
adaptor.addChild(root_0,REAL_LITERAL162_tree);
}
}
break;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
reportError(e);
throw e;
}
 finally {
}
return retval;
}
