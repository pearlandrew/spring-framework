{
  namedArgument_return retval=new namedArgument_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token id=null;
  Token ASSIGN130=null;
  expression_return expression131=null;
  argument_return argument132=null;
  Object id_tree=null;
  Object ASSIGN130_tree=null;
  RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
  try {
    int alt30=2;
    int LA30_0=input.LA(1);
    if ((LA30_0 == ID)) {
      int LA30_1=input.LA(2);
      if ((LA30_1 == ASSIGN)) {
        int LA30_22=input.LA(3);
        if ((synpred4())) {
          alt30=1;
        }
 else         if ((true)) {
          alt30=2;
        }
 else {
          if (backtracking > 0) {
            failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("203:1: namedArgument : ( ( ID ASSIGN )=>id= ID ASSIGN expression -> ^( NAMED_ARGUMENT[$id] expression ) | argument );",30,22,input);
          throw nvae;
        }
      }
 else       if (((LA30_1 >= DEFAULT && LA30_1 <= QMARK) || (LA30_1 >= LPAREN && LA30_1 <= POWER) || LA30_1 == DOT || (LA30_1 >= COMMA && LA30_1 <= LBRACKET) || (LA30_1 >= EQUAL && LA30_1 <= MATCHES))) {
        alt30=2;
      }
 else {
        if (backtracking > 0) {
          failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("203:1: namedArgument : ( ( ID ASSIGN )=>id= ID ASSIGN expression -> ^( NAMED_ARGUMENT[$id] expression ) | argument );",30,1,input);
        throw nvae;
      }
    }
 else     if ((LA30_0 == INTEGER_LITERAL || LA30_0 == LPAREN || (LA30_0 >= PLUS && LA30_0 <= MINUS) || LA30_0 == BANG || LA30_0 == POUND || LA30_0 == LBRACKET || LA30_0 == PROJECT || (LA30_0 >= SELECT && LA30_0 <= FALSE) || LA30_0 == 85)) {
      alt30=2;
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("203:1: namedArgument : ( ( ID ASSIGN )=>id= ID ASSIGN expression -> ^( NAMED_ARGUMENT[$id] expression ) | argument );",30,0,input);
      throw nvae;
    }
switch (alt30) {
case 1:
{
        id=(Token)input.LT(1);
        match(input,ID,FOLLOW_ID_in_namedArgument1262);
        if (failed)         return retval;
        if (backtracking == 0)         stream_ID.add(id);
        ASSIGN130=(Token)input.LT(1);
        match(input,ASSIGN,FOLLOW_ASSIGN_in_namedArgument1264);
        if (failed)         return retval;
        if (backtracking == 0)         stream_ASSIGN.add(ASSIGN130);
        pushFollow(FOLLOW_expression_in_namedArgument1266);
        expression131=expression();
        _fsp--;
        if (failed)         return retval;
        if (backtracking == 0)         stream_expression.add(expression131.getTree());
        if (backtracking == 0) {
          retval.tree=root_0;
          RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
          root_0=(Object)adaptor.nil();
{
{
              Object root_1=(Object)adaptor.nil();
              root_1=(Object)adaptor.becomeRoot(adaptor.create(NAMED_ARGUMENT,id),root_1);
              adaptor.addChild(root_1,stream_expression.next());
              adaptor.addChild(root_0,root_1);
            }
          }
        }
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    pushFollow(FOLLOW_argument_in_namedArgument1302);
    argument132=argument();
    _fsp--;
    if (failed)     return retval;
    if (backtracking == 0)     adaptor.addChild(root_0,argument132.getTree());
  }
break;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
reportError(e);
throw e;
}
 finally {
}
return retval;
}
