{
  namedArgument_return retval=new namedArgument_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token id=null;
  Token ASSIGN147=null;
  expression_return expression148=null;
  argument_return argument149=null;
  Object id_tree=null;
  Object ASSIGN147_tree=null;
  RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
  try {
    int alt35=2;
    int LA35_0=input.LA(1);
    if ((LA35_0 == ID)) {
      int LA35_1=input.LA(2);
      if ((LA35_1 == ASSIGN)) {
        int LA35_26=input.LA(3);
        if ((synpred5())) {
          alt35=1;
        }
 else         if ((true)) {
          alt35=2;
        }
 else {
          if (backtracking > 0) {
            failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("238:1: namedArgument : ( ( ID ASSIGN )=>id= ID ASSIGN expression -> ^( NAMED_ARGUMENT[$id] expression ) | argument );",35,26,input);
          throw nvae;
        }
      }
 else       if (((LA35_1 >= DEFAULT && LA35_1 <= QMARK) || (LA35_1 >= LPAREN && LA35_1 <= POWER) || LA35_1 == DOT || LA35_1 == COMMA || LA35_1 == LBRACKET || (LA35_1 >= EQUAL && LA35_1 <= MATCHES))) {
        alt35=2;
      }
 else {
        if (backtracking > 0) {
          failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("238:1: namedArgument : ( ( ID ASSIGN )=>id= ID ASSIGN expression -> ^( NAMED_ARGUMENT[$id] expression ) | argument );",35,1,input);
        throw nvae;
      }
    }
 else     if ((LA35_0 == INTEGER_LITERAL || LA35_0 == LPAREN || (LA35_0 >= PLUS && LA35_0 <= MINUS) || LA35_0 == BANG || LA35_0 == POUND || LA35_0 == DOLLAR || (LA35_0 >= AT && LA35_0 <= LBRACKET) || LA35_0 == PROJECT || (LA35_0 >= SELECT && LA35_0 <= LAMBDA) || (LA35_0 >= LCURLY && LA35_0 <= FALSE) || (LA35_0 >= 91 && LA35_0 <= 92))) {
      alt35=2;
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("238:1: namedArgument : ( ( ID ASSIGN )=>id= ID ASSIGN expression -> ^( NAMED_ARGUMENT[$id] expression ) | argument );",35,0,input);
      throw nvae;
    }
switch (alt35) {
case 1:
{
        id=(Token)input.LT(1);
        match(input,ID,FOLLOW_ID_in_namedArgument1508);
        if (failed)         return retval;
        if (backtracking == 0)         stream_ID.add(id);
        ASSIGN147=(Token)input.LT(1);
        match(input,ASSIGN,FOLLOW_ASSIGN_in_namedArgument1510);
        if (failed)         return retval;
        if (backtracking == 0)         stream_ASSIGN.add(ASSIGN147);
        pushFollow(FOLLOW_expression_in_namedArgument1512);
        expression148=expression();
        _fsp--;
        if (failed)         return retval;
        if (backtracking == 0)         stream_expression.add(expression148.getTree());
        if (backtracking == 0) {
          retval.tree=root_0;
          RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
          root_0=(Object)adaptor.nil();
{
{
              Object root_1=(Object)adaptor.nil();
              root_1=(Object)adaptor.becomeRoot(adaptor.create(NAMED_ARGUMENT,id),root_1);
              adaptor.addChild(root_1,stream_expression.next());
              adaptor.addChild(root_0,root_1);
            }
          }
        }
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    pushFollow(FOLLOW_argument_in_namedArgument1548);
    argument149=argument();
    _fsp--;
    if (failed)     return retval;
    if (backtracking == 0)     adaptor.addChild(root_0,argument149.getTree());
  }
break;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
reportError(e);
throw e;
}
 finally {
}
return retval;
}
