{
  projection_return retval=new projection_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token PROJECT99=null;
  Token RCURLY101=null;
  expression_return expression100=null;
  Object PROJECT99_tree=null;
  Object RCURLY101_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      PROJECT99=(Token)input.LT(1);
      match(input,PROJECT,FOLLOW_PROJECT_in_projection1142);
      if (failed)       return retval;
      if (backtracking == 0) {
        PROJECT99_tree=(Object)adaptor.create(PROJECT99);
        root_0=(Object)adaptor.becomeRoot(PROJECT99_tree,root_0);
      }
      pushFollow(FOLLOW_expression_in_projection1145);
      expression100=expression();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       adaptor.addChild(root_0,expression100.getTree());
      RCURLY101=(Token)input.LT(1);
      match(input,RCURLY,FOLLOW_RCURLY_in_projection1147);
      if (failed)       return retval;
    }
    retval.stop=input.LT(-1);
    if (backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException e) {
    throw e;
  }
 finally {
  }
  return retval;
}
