{
  dateLiteral_return retval=new dateLiteral_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token d=null;
  Token f=null;
  Token string_literal173=null;
  Token LPAREN174=null;
  Token COMMA175=null;
  Token RPAREN176=null;
  Object d_tree=null;
  Object f_tree=null;
  Object string_literal173_tree=null;
  Object LPAREN174_tree=null;
  Object COMMA175_tree=null;
  Object RPAREN176_tree=null;
  RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
  RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
  RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
  RewriteRuleTokenStream stream_95=new RewriteRuleTokenStream(adaptor,"token 95");
  RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
  try {
{
      string_literal173=(Token)input.LT(1);
      match(input,95,FOLLOW_95_in_dateLiteral1747);
      if (failed)       return retval;
      if (backtracking == 0)       stream_95.add(string_literal173);
      LPAREN174=(Token)input.LT(1);
      match(input,LPAREN,FOLLOW_LPAREN_in_dateLiteral1749);
      if (failed)       return retval;
      if (backtracking == 0)       stream_LPAREN.add(LPAREN174);
      d=(Token)input.LT(1);
      match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_dateLiteral1753);
      if (failed)       return retval;
      if (backtracking == 0)       stream_STRING_LITERAL.add(d);
      int alt41=2;
      int LA41_0=input.LA(1);
      if ((LA41_0 == COMMA)) {
        alt41=1;
      }
switch (alt41) {
case 1:
{
          COMMA175=(Token)input.LT(1);
          match(input,COMMA,FOLLOW_COMMA_in_dateLiteral1756);
          if (failed)           return retval;
          if (backtracking == 0)           stream_COMMA.add(COMMA175);
          f=(Token)input.LT(1);
          match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_dateLiteral1760);
          if (failed)           return retval;
          if (backtracking == 0)           stream_STRING_LITERAL.add(f);
        }
      break;
  }
  RPAREN176=(Token)input.LT(1);
  match(input,RPAREN,FOLLOW_RPAREN_in_dateLiteral1764);
  if (failed)   return retval;
  if (backtracking == 0)   stream_RPAREN.add(RPAREN176);
  if (backtracking == 0) {
    retval.tree=root_0;
    RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
    RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
    root_0=(Object)adaptor.nil();
{
{
        Object root_1=(Object)adaptor.nil();
        root_1=(Object)adaptor.becomeRoot(adaptor.create(DATE_LITERAL,"DATE_LITERAL"),root_1);
        adaptor.addChild(root_1,stream_d.next());
        if (stream_f.hasNext()) {
          adaptor.addChild(root_1,stream_f.next());
        }
        stream_f.reset();
        adaptor.addChild(root_0,root_1);
      }
    }
  }
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
reportError(e);
throw e;
}
 finally {
}
return retval;
}
