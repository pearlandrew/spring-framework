{
  contextName_return retval=new contextName_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ID153=null;
  Token DIV154=null;
  Token ID155=null;
  Object ID153_tree=null;
  Object DIV154_tree=null;
  Object ID155_tree=null;
  RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  try {
{
      ID153=(Token)input.LT(1);
      match(input,ID,FOLLOW_ID_in_contextName1584);
      if (failed)       return retval;
      if (backtracking == 0)       stream_ID.add(ID153);
      loop37:       do {
        int alt37=2;
        int LA37_0=input.LA(1);
        if ((LA37_0 == DIV)) {
          alt37=1;
        }
switch (alt37) {
case 1:
{
            DIV154=(Token)input.LT(1);
            match(input,DIV,FOLLOW_DIV_in_contextName1587);
            if (failed)             return retval;
            if (backtracking == 0)             stream_DIV.add(DIV154);
            ID155=(Token)input.LT(1);
            match(input,ID,FOLLOW_ID_in_contextName1589);
            if (failed)             return retval;
            if (backtracking == 0)             stream_ID.add(ID155);
          }
        break;
default :
      break loop37;
  }
}
 while (true);
if (backtracking == 0) {
  retval.tree=root_0;
  RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
  root_0=(Object)adaptor.nil();
{
{
      Object root_1=(Object)adaptor.nil();
      root_1=(Object)adaptor.becomeRoot(adaptor.create(QUALIFIED_IDENTIFIER,"QUALIFIED_IDENTIFIER"),root_1);
      while (stream_ID.hasNext()) {
        adaptor.addChild(root_1,stream_ID.next());
      }
      stream_ID.reset();
      adaptor.addChild(root_0,root_1);
    }
  }
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
reportError(e);
throw e;
}
 finally {
}
return retval;
}
