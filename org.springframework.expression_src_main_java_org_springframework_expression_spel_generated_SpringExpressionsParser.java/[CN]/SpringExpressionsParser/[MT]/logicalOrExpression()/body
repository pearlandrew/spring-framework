{
  logicalOrExpression_return retval=new logicalOrExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token OR16=null;
  logicalAndExpression_return logicalAndExpression15=null;
  logicalAndExpression_return logicalAndExpression17=null;
  Object OR16_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_logicalAndExpression_in_logicalOrExpression264);
      logicalAndExpression15=logicalAndExpression();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       adaptor.addChild(root_0,logicalAndExpression15.getTree());
      loop2:       do {
        int alt2=2;
        int LA2_0=input.LA(1);
        if ((LA2_0 == OR)) {
          alt2=1;
        }
switch (alt2) {
case 1:
{
            OR16=(Token)input.LT(1);
            match(input,OR,FOLLOW_OR_in_logicalOrExpression267);
            if (failed)             return retval;
            if (backtracking == 0) {
              OR16_tree=(Object)adaptor.create(OR16);
              root_0=(Object)adaptor.becomeRoot(OR16_tree,root_0);
            }
            pushFollow(FOLLOW_logicalAndExpression_in_logicalOrExpression270);
            logicalAndExpression17=logicalAndExpression();
            _fsp--;
            if (failed)             return retval;
            if (backtracking == 0)             adaptor.addChild(root_0,logicalAndExpression17.getTree());
          }
        break;
default :
      break loop2;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
reportError(e);
throw e;
}
 finally {
}
return retval;
}
