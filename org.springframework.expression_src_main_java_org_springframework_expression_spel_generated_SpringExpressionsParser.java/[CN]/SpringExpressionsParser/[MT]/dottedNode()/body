{
  dottedNode_return retval=new dottedNode_return();
  retval.start=input.LT(1);
  Object root_0=null;
  methodOrProperty_return methodOrProperty58=null;
  functionOrVar_return functionOrVar59=null;
  projection_return projection60=null;
  selection_return selection61=null;
  firstSelection_return firstSelection62=null;
  lastSelection_return lastSelection63=null;
  try {
{
      root_0=(Object)adaptor.nil();
{
        int alt15=6;
switch (input.LA(1)) {
case ID:
{
            alt15=1;
          }
        break;
case POUND:
{
        alt15=2;
      }
    break;
case PROJECT:
{
    alt15=3;
  }
break;
case SELECT:
{
alt15=4;
}
break;
case SELECT_FIRST:
{
alt15=5;
}
break;
case SELECT_LAST:
{
alt15=6;
}
break;
default :
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("101:3: ( methodOrProperty | functionOrVar | projection | selection | firstSelection | lastSelection )",15,0,input);
throw nvae;
}
switch (alt15) {
case 1:
{
pushFollow(FOLLOW_methodOrProperty_in_dottedNode576);
methodOrProperty58=methodOrProperty();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,methodOrProperty58.getTree());
}
break;
case 2:
{
pushFollow(FOLLOW_functionOrVar_in_dottedNode582);
functionOrVar59=functionOrVar();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,functionOrVar59.getTree());
}
break;
case 3:
{
pushFollow(FOLLOW_projection_in_dottedNode590);
projection60=projection();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,projection60.getTree());
}
break;
case 4:
{
pushFollow(FOLLOW_selection_in_dottedNode599);
selection61=selection();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,selection61.getTree());
}
break;
case 5:
{
pushFollow(FOLLOW_firstSelection_in_dottedNode608);
firstSelection62=firstSelection();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,firstSelection62.getTree());
}
break;
case 6:
{
pushFollow(FOLLOW_lastSelection_in_dottedNode617);
lastSelection63=lastSelection();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,lastSelection63.getTree());
}
break;
}
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
reportError(e);
throw e;
}
 finally {
}
return retval;
}
