{
  reference_return retval=new reference_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token pos=null;
  Token AT95=null;
  Token COLON96=null;
  Token RPAREN97=null;
  contextName_return cn=null;
  qualifiedId_return q=null;
  Object pos_tree=null;
  Object AT95_tree=null;
  Object COLON96_tree=null;
  Object RPAREN97_tree=null;
  RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
  RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
  RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
  RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
  RewriteRuleSubtreeStream stream_contextName=new RewriteRuleSubtreeStream(adaptor,"rule contextName");
  RewriteRuleSubtreeStream stream_qualifiedId=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedId");
  try {
{
      AT95=(Token)input.LT(1);
      match(input,AT,FOLLOW_AT_in_reference1070);
      if (failed)       return retval;
      if (backtracking == 0)       stream_AT.add(AT95);
      pos=(Token)input.LT(1);
      match(input,LPAREN,FOLLOW_LPAREN_in_reference1074);
      if (failed)       return retval;
      if (backtracking == 0)       stream_LPAREN.add(pos);
      int alt24=2;
      int LA24_0=input.LA(1);
      if ((LA24_0 == ID)) {
        int LA24_1=input.LA(2);
        if ((LA24_1 == COLON || LA24_1 == DIV)) {
          alt24=1;
        }
      }
switch (alt24) {
case 1:
{
          pushFollow(FOLLOW_contextName_in_reference1079);
          cn=contextName();
          _fsp--;
          if (failed)           return retval;
          if (backtracking == 0)           stream_contextName.add(cn.getTree());
          COLON96=(Token)input.LT(1);
          match(input,COLON,FOLLOW_COLON_in_reference1081);
          if (failed)           return retval;
          if (backtracking == 0)           stream_COLON.add(COLON96);
        }
      break;
  }
  int alt25=2;
  int LA25_0=input.LA(1);
  if ((LA25_0 == ID)) {
    alt25=1;
  }
switch (alt25) {
case 1:
{
      pushFollow(FOLLOW_qualifiedId_in_reference1088);
      q=qualifiedId();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_qualifiedId.add(q.getTree());
    }
  break;
}
RPAREN97=(Token)input.LT(1);
match(input,RPAREN,FOLLOW_RPAREN_in_reference1092);
if (failed) return retval;
if (backtracking == 0) stream_RPAREN.add(RPAREN97);
if (backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_cn=new RewriteRuleSubtreeStream(adaptor,"token cn",cn != null ? cn.tree : null);
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
RewriteRuleSubtreeStream stream_q=new RewriteRuleSubtreeStream(adaptor,"token q",q != null ? q.tree : null);
root_0=(Object)adaptor.nil();
{
{
    Object root_1=(Object)adaptor.nil();
    root_1=(Object)adaptor.becomeRoot(adaptor.create(REFERENCE,pos),root_1);
    if (stream_cn.hasNext() || stream_COLON.hasNext()) {
      adaptor.addChild(root_1,stream_cn.next());
      adaptor.addChild(root_1,stream_COLON.next());
    }
    stream_cn.reset();
    stream_COLON.reset();
    if (stream_q.hasNext()) {
      adaptor.addChild(root_1,stream_q.next());
    }
    stream_q.reset();
    adaptor.addChild(root_1,stream_RPAREN.next());
    adaptor.addChild(root_0,root_1);
  }
}
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
reportError(e);
throw e;
}
 finally {
}
return retval;
}
