{
  localFunctionOrVar_return retval=new localFunctionOrVar_return();
  retval.start=input.LT(1);
  Object root_0=null;
  localFunction_return localFunction80=null;
  localVar_return localVar81=null;
  try {
    int alt18=2;
    int LA18_0=input.LA(1);
    if ((LA18_0 == DOLLAR)) {
      int LA18_1=input.LA(2);
      if ((LA18_1 == ID)) {
        int LA18_2=input.LA(3);
        if ((synpred3())) {
          alt18=1;
        }
 else         if ((true)) {
          alt18=2;
        }
 else {
          if (backtracking > 0) {
            failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("157:1: localFunctionOrVar : ( ( DOLLAR ID LPAREN )=> localFunction | localVar );",18,2,input);
          throw nvae;
        }
      }
 else {
        if (backtracking > 0) {
          failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("157:1: localFunctionOrVar : ( ( DOLLAR ID LPAREN )=> localFunction | localVar );",18,1,input);
        throw nvae;
      }
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("157:1: localFunctionOrVar : ( ( DOLLAR ID LPAREN )=> localFunction | localVar );",18,0,input);
      throw nvae;
    }
switch (alt18) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_localFunction_in_localFunctionOrVar903);
        localFunction80=localFunction();
        _fsp--;
        if (failed)         return retval;
        if (backtracking == 0)         adaptor.addChild(root_0,localFunction80.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    pushFollow(FOLLOW_localVar_in_localFunctionOrVar908);
    localVar81=localVar();
    _fsp--;
    if (failed)     return retval;
    if (backtracking == 0)     adaptor.addChild(root_0,localVar81.getTree());
  }
break;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
throw e;
}
 finally {
}
return retval;
}
