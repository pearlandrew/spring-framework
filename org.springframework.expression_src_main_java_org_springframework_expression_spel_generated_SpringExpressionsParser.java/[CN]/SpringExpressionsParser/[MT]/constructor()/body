{
  constructor_return retval=new constructor_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token string_literal95=null;
  qualifiedId_return qualifiedId96=null;
  ctorArgs_return ctorArgs97=null;
  Object string_literal95_tree=null;
  RewriteRuleTokenStream stream_77=new RewriteRuleTokenStream(adaptor,"token 77");
  RewriteRuleSubtreeStream stream_qualifiedId=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedId");
  RewriteRuleSubtreeStream stream_ctorArgs=new RewriteRuleSubtreeStream(adaptor,"rule ctorArgs");
  try {
{
      string_literal95=(Token)input.LT(1);
      match(input,77,FOLLOW_77_in_constructor945);
      if (failed)       return retval;
      if (backtracking == 0)       stream_77.add(string_literal95);
      pushFollow(FOLLOW_qualifiedId_in_constructor947);
      qualifiedId96=qualifiedId();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_qualifiedId.add(qualifiedId96.getTree());
      pushFollow(FOLLOW_ctorArgs_in_constructor949);
      ctorArgs97=ctorArgs();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_ctorArgs.add(ctorArgs97.getTree());
      if (backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
        root_0=(Object)adaptor.nil();
{
{
            Object root_1=(Object)adaptor.nil();
            root_1=(Object)adaptor.becomeRoot(adaptor.create(CONSTRUCTOR,"CONSTRUCTOR"),root_1);
            adaptor.addChild(root_1,stream_qualifiedId.next());
            adaptor.addChild(root_1,stream_ctorArgs.next());
            adaptor.addChild(root_0,root_1);
          }
        }
      }
    }
    retval.stop=input.LT(-1);
    if (backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException e) {
    reportError(e);
    throw e;
  }
 finally {
  }
  return retval;
}
