{
  qualifiedId_return retval=new qualifiedId_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ID158=null;
  Token DOT159=null;
  Token ID160=null;
  Object ID158_tree=null;
  Object DOT159_tree=null;
  Object ID160_tree=null;
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
  try {
{
      ID158=(Token)input.LT(1);
      match(input,ID,FOLLOW_ID_in_qualifiedId1639);
      if (failed)       return retval;
      if (backtracking == 0)       stream_ID.add(ID158);
      loop38:       do {
        int alt38=2;
        int LA38_0=input.LA(1);
        if ((LA38_0 == DOT)) {
          alt38=1;
        }
switch (alt38) {
case 1:
{
            DOT159=(Token)input.LT(1);
            match(input,DOT,FOLLOW_DOT_in_qualifiedId1642);
            if (failed)             return retval;
            if (backtracking == 0)             stream_DOT.add(DOT159);
            ID160=(Token)input.LT(1);
            match(input,ID,FOLLOW_ID_in_qualifiedId1644);
            if (failed)             return retval;
            if (backtracking == 0)             stream_ID.add(ID160);
          }
        break;
default :
      break loop38;
  }
}
 while (true);
if (backtracking == 0) {
  retval.tree=root_0;
  RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
  root_0=(Object)adaptor.nil();
{
{
      Object root_1=(Object)adaptor.nil();
      root_1=(Object)adaptor.becomeRoot(adaptor.create(QUALIFIED_IDENTIFIER,"QUALIFIED_IDENTIFIER"),root_1);
      while (stream_ID.hasNext()) {
        adaptor.addChild(root_1,stream_ID.next());
      }
      stream_ID.reset();
      adaptor.addChild(root_0,root_1);
    }
  }
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
reportError(e);
throw e;
}
 finally {
}
return retval;
}
