{
  arrayRank_return retval=new arrayRank_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LBRACKET130=null;
  Token COMMA132=null;
  Token RBRACKET134=null;
  expression_return expression131=null;
  expression_return expression133=null;
  Object LBRACKET130_tree=null;
  Object COMMA132_tree=null;
  Object RBRACKET134_tree=null;
  RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
  RewriteRuleTokenStream stream_LBRACKET=new RewriteRuleTokenStream(adaptor,"token LBRACKET");
  RewriteRuleTokenStream stream_RBRACKET=new RewriteRuleTokenStream(adaptor,"token RBRACKET");
  RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
  try {
{
      LBRACKET130=(Token)input.LT(1);
      match(input,LBRACKET,FOLLOW_LBRACKET_in_arrayRank1405);
      if (failed)       return retval;
      if (backtracking == 0)       stream_LBRACKET.add(LBRACKET130);
      int alt32=2;
      int LA32_0=input.LA(1);
      if ((LA32_0 == INTEGER_LITERAL || LA32_0 == LPAREN || (LA32_0 >= PLUS && LA32_0 <= MINUS) || LA32_0 == BANG || (LA32_0 >= POUND && LA32_0 <= DOLLAR) || (LA32_0 >= AT && LA32_0 <= LBRACKET) || LA32_0 == PROJECT || (LA32_0 >= SELECT && LA32_0 <= LAMBDA) || (LA32_0 >= LCURLY && LA32_0 <= FALSE) || (LA32_0 >= 91 && LA32_0 <= 92))) {
        alt32=1;
      }
switch (alt32) {
case 1:
{
          pushFollow(FOLLOW_expression_in_arrayRank1408);
          expression131=expression();
          _fsp--;
          if (failed)           return retval;
          if (backtracking == 0)           stream_expression.add(expression131.getTree());
          loop31:           do {
            int alt31=2;
            int LA31_0=input.LA(1);
            if ((LA31_0 == COMMA)) {
              alt31=1;
            }
switch (alt31) {
case 1:
{
                COMMA132=(Token)input.LT(1);
                match(input,COMMA,FOLLOW_COMMA_in_arrayRank1411);
                if (failed)                 return retval;
                if (backtracking == 0)                 stream_COMMA.add(COMMA132);
                pushFollow(FOLLOW_expression_in_arrayRank1413);
                expression133=expression();
                _fsp--;
                if (failed)                 return retval;
                if (backtracking == 0)                 stream_expression.add(expression133.getTree());
              }
            break;
default :
          break loop31;
      }
    }
 while (true);
  }
break;
}
RBRACKET134=(Token)input.LT(1);
match(input,RBRACKET,FOLLOW_RBRACKET_in_arrayRank1419);
if (failed) return retval;
if (backtracking == 0) stream_RBRACKET.add(RBRACKET134);
if (backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
  Object root_1=(Object)adaptor.nil();
  root_1=(Object)adaptor.becomeRoot(adaptor.create(EXPRESSIONLIST,"EXPRESSIONLIST"),root_1);
  while (stream_expression.hasNext()) {
    adaptor.addChild(root_1,stream_expression.next());
  }
  stream_expression.reset();
  adaptor.addChild(root_0,root_1);
}
}
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
reportError(e);
throw e;
}
 finally {
}
return retval;
}
