{
  mapEntry_return retval=new mapEntry_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token COLON139=null;
  expression_return expression138=null;
  expression_return expression140=null;
  Object COLON139_tree=null;
  RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
  RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
  try {
{
      pushFollow(FOLLOW_expression_in_mapEntry1438);
      expression138=expression();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_expression.add(expression138.getTree());
      COLON139=(Token)input.LT(1);
      match(input,COLON,FOLLOW_COLON_in_mapEntry1440);
      if (failed)       return retval;
      if (backtracking == 0)       stream_COLON.add(COLON139);
      pushFollow(FOLLOW_expression_in_mapEntry1442);
      expression140=expression();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_expression.add(expression140.getTree());
      if (backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
        root_0=(Object)adaptor.nil();
{
{
            Object root_1=(Object)adaptor.nil();
            root_1=(Object)adaptor.becomeRoot(adaptor.create(MAP_ENTRY,"MAP_ENTRY"),root_1);
            while (stream_expression.hasNext()) {
              adaptor.addChild(root_1,stream_expression.next());
            }
            stream_expression.reset();
            adaptor.addChild(root_0,root_1);
          }
        }
      }
    }
    retval.stop=input.LT(-1);
    if (backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException e) {
    reportError(e);
    throw e;
  }
 finally {
  }
  return retval;
}
