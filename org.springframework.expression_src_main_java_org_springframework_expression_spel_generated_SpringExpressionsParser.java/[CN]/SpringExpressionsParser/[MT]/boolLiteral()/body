{
  boolLiteral_return retval=new boolLiteral_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token set163=null;
  Object set163_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      set163=(Token)input.LT(1);
      if ((input.LA(1) >= TRUE && input.LA(1) <= FALSE)) {
        input.consume();
        if (backtracking == 0)         adaptor.addChild(root_0,adaptor.create(set163));
        errorRecovery=false;
        failed=false;
      }
 else {
        if (backtracking > 0) {
          failed=true;
          return retval;
        }
        MismatchedSetException mse=new MismatchedSetException(null,input);
        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_boolLiteral0);
        throw mse;
      }
    }
    retval.stop=input.LT(-1);
    if (backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException e) {
    reportError(e);
    throw e;
  }
 finally {
  }
  return retval;
}
