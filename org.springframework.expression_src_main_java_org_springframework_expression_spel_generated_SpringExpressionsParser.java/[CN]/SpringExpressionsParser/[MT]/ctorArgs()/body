{
  ctorArgs_return retval=new ctorArgs_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LPAREN149=null;
  Token COMMA151=null;
  Token RPAREN153=null;
  namedArgument_return namedArgument150=null;
  namedArgument_return namedArgument152=null;
  Object LPAREN149_tree=null;
  Object COMMA151_tree=null;
  Object RPAREN153_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LPAREN149=(Token)input.LT(1);
      match(input,LPAREN,FOLLOW_LPAREN_in_ctorArgs1539);
      if (failed)       return retval;
      int alt36=2;
      int LA36_0=input.LA(1);
      if ((LA36_0 == INTEGER_LITERAL || LA36_0 == LPAREN || (LA36_0 >= PLUS && LA36_0 <= MINUS) || LA36_0 == BANG || (LA36_0 >= POUND && LA36_0 <= DOLLAR) || (LA36_0 >= AT && LA36_0 <= LBRACKET) || LA36_0 == PROJECT || (LA36_0 >= SELECT && LA36_0 <= LAMBDA) || (LA36_0 >= LCURLY && LA36_0 <= FALSE) || (LA36_0 >= 94 && LA36_0 <= 95))) {
        alt36=1;
      }
switch (alt36) {
case 1:
{
          pushFollow(FOLLOW_namedArgument_in_ctorArgs1543);
          namedArgument150=namedArgument();
          _fsp--;
          if (failed)           return retval;
          if (backtracking == 0)           adaptor.addChild(root_0,namedArgument150.getTree());
          loop35:           do {
            int alt35=2;
            int LA35_0=input.LA(1);
            if ((LA35_0 == COMMA)) {
              alt35=1;
            }
switch (alt35) {
case 1:
{
                COMMA151=(Token)input.LT(1);
                match(input,COMMA,FOLLOW_COMMA_in_ctorArgs1546);
                if (failed)                 return retval;
                pushFollow(FOLLOW_namedArgument_in_ctorArgs1549);
                namedArgument152=namedArgument();
                _fsp--;
                if (failed)                 return retval;
                if (backtracking == 0)                 adaptor.addChild(root_0,namedArgument152.getTree());
              }
            break;
default :
          break loop35;
      }
    }
 while (true);
  }
break;
}
RPAREN153=(Token)input.LT(1);
match(input,RPAREN,FOLLOW_RPAREN_in_ctorArgs1555);
if (failed) return retval;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
reportError(e);
throw e;
}
 finally {
}
return retval;
}
