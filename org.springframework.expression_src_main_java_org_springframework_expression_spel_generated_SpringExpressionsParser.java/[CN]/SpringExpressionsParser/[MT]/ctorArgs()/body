{
  ctorArgs_return retval=new ctorArgs_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LPAREN147=null;
  Token COMMA149=null;
  Token RPAREN151=null;
  namedArgument_return namedArgument148=null;
  namedArgument_return namedArgument150=null;
  Object LPAREN147_tree=null;
  Object COMMA149_tree=null;
  Object RPAREN151_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LPAREN147=(Token)input.LT(1);
      match(input,LPAREN,FOLLOW_LPAREN_in_ctorArgs1526);
      if (failed)       return retval;
      int alt35=2;
      int LA35_0=input.LA(1);
      if ((LA35_0 == INTEGER_LITERAL || LA35_0 == LPAREN || (LA35_0 >= PLUS && LA35_0 <= MINUS) || LA35_0 == BANG || (LA35_0 >= POUND && LA35_0 <= DOLLAR) || (LA35_0 >= AT && LA35_0 <= LBRACKET) || LA35_0 == PROJECT || (LA35_0 >= SELECT && LA35_0 <= LAMBDA) || (LA35_0 >= LCURLY && LA35_0 <= FALSE) || (LA35_0 >= 94 && LA35_0 <= 95))) {
        alt35=1;
      }
switch (alt35) {
case 1:
{
          pushFollow(FOLLOW_namedArgument_in_ctorArgs1530);
          namedArgument148=namedArgument();
          _fsp--;
          if (failed)           return retval;
          if (backtracking == 0)           adaptor.addChild(root_0,namedArgument148.getTree());
          loop34:           do {
            int alt34=2;
            int LA34_0=input.LA(1);
            if ((LA34_0 == COMMA)) {
              alt34=1;
            }
switch (alt34) {
case 1:
{
                COMMA149=(Token)input.LT(1);
                match(input,COMMA,FOLLOW_COMMA_in_ctorArgs1533);
                if (failed)                 return retval;
                pushFollow(FOLLOW_namedArgument_in_ctorArgs1536);
                namedArgument150=namedArgument();
                _fsp--;
                if (failed)                 return retval;
                if (backtracking == 0)                 adaptor.addChild(root_0,namedArgument150.getTree());
              }
            break;
default :
          break loop34;
      }
    }
 while (true);
  }
break;
}
RPAREN151=(Token)input.LT(1);
match(input,RPAREN,FOLLOW_RPAREN_in_ctorArgs1542);
if (failed) return retval;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
throw e;
}
 finally {
}
return retval;
}
