{
  ctorArgs_return retval=new ctorArgs_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LPAREN141=null;
  Token COMMA143=null;
  Token RPAREN145=null;
  namedArgument_return namedArgument142=null;
  namedArgument_return namedArgument144=null;
  Object LPAREN141_tree=null;
  Object COMMA143_tree=null;
  Object RPAREN145_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LPAREN141=(Token)input.LT(1);
      match(input,LPAREN,FOLLOW_LPAREN_in_ctorArgs1460);
      if (failed)       return retval;
      int alt34=2;
      int LA34_0=input.LA(1);
      if ((LA34_0 == INTEGER_LITERAL || LA34_0 == LPAREN || (LA34_0 >= PLUS && LA34_0 <= MINUS) || LA34_0 == BANG || (LA34_0 >= POUND && LA34_0 <= DOLLAR) || (LA34_0 >= AT && LA34_0 <= LBRACKET) || LA34_0 == PROJECT || (LA34_0 >= SELECT && LA34_0 <= LAMBDA) || (LA34_0 >= LCURLY && LA34_0 <= FALSE) || (LA34_0 >= 91 && LA34_0 <= 92))) {
        alt34=1;
      }
switch (alt34) {
case 1:
{
          pushFollow(FOLLOW_namedArgument_in_ctorArgs1464);
          namedArgument142=namedArgument();
          _fsp--;
          if (failed)           return retval;
          if (backtracking == 0)           adaptor.addChild(root_0,namedArgument142.getTree());
          loop33:           do {
            int alt33=2;
            int LA33_0=input.LA(1);
            if ((LA33_0 == COMMA)) {
              alt33=1;
            }
switch (alt33) {
case 1:
{
                COMMA143=(Token)input.LT(1);
                match(input,COMMA,FOLLOW_COMMA_in_ctorArgs1467);
                if (failed)                 return retval;
                pushFollow(FOLLOW_namedArgument_in_ctorArgs1470);
                namedArgument144=namedArgument();
                _fsp--;
                if (failed)                 return retval;
                if (backtracking == 0)                 adaptor.addChild(root_0,namedArgument144.getTree());
              }
            break;
default :
          break loop33;
      }
    }
 while (true);
  }
break;
}
RPAREN145=(Token)input.LT(1);
match(input,RPAREN,FOLLOW_RPAREN_in_ctorArgs1476);
if (failed) return retval;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
reportError(e);
throw e;
}
 finally {
}
return retval;
}
