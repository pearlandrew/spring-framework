{
  ctorArgs_return retval=new ctorArgs_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LPAREN128=null;
  Token COMMA130=null;
  Token RPAREN132=null;
  namedArgument_return namedArgument129=null;
  namedArgument_return namedArgument131=null;
  Object LPAREN128_tree=null;
  Object COMMA130_tree=null;
  Object RPAREN132_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LPAREN128=(Token)input.LT(1);
      match(input,LPAREN,FOLLOW_LPAREN_in_ctorArgs1289);
      if (failed)       return retval;
      int alt31=2;
      int LA31_0=input.LA(1);
      if ((LA31_0 == INTEGER_LITERAL || LA31_0 == LPAREN || (LA31_0 >= PLUS && LA31_0 <= MINUS) || LA31_0 == BANG || (LA31_0 >= POUND && LA31_0 <= ID) || (LA31_0 >= AT && LA31_0 <= LBRACKET) || LA31_0 == PROJECT || (LA31_0 >= SELECT && LA31_0 <= FALSE) || LA31_0 == 86)) {
        alt31=1;
      }
switch (alt31) {
case 1:
{
          pushFollow(FOLLOW_namedArgument_in_ctorArgs1293);
          namedArgument129=namedArgument();
          _fsp--;
          if (failed)           return retval;
          if (backtracking == 0)           adaptor.addChild(root_0,namedArgument129.getTree());
          loop30:           do {
            int alt30=2;
            int LA30_0=input.LA(1);
            if ((LA30_0 == COMMA)) {
              alt30=1;
            }
switch (alt30) {
case 1:
{
                COMMA130=(Token)input.LT(1);
                match(input,COMMA,FOLLOW_COMMA_in_ctorArgs1296);
                if (failed)                 return retval;
                pushFollow(FOLLOW_namedArgument_in_ctorArgs1299);
                namedArgument131=namedArgument();
                _fsp--;
                if (failed)                 return retval;
                if (backtracking == 0)                 adaptor.addChild(root_0,namedArgument131.getTree());
              }
            break;
default :
          break loop30;
      }
    }
 while (true);
  }
break;
}
RPAREN132=(Token)input.LT(1);
match(input,RPAREN,FOLLOW_RPAREN_in_ctorArgs1305);
if (failed) return retval;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
reportError(e);
throw e;
}
 finally {
}
return retval;
}
