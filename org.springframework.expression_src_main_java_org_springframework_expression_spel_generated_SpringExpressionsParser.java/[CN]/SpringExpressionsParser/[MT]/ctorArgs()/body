{
  ctorArgs_return retval=new ctorArgs_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LPAREN98=null;
  Token COMMA100=null;
  Token RPAREN102=null;
  namedArgument_return namedArgument99=null;
  namedArgument_return namedArgument101=null;
  Object LPAREN98_tree=null;
  Object COMMA100_tree=null;
  Object RPAREN102_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LPAREN98=(Token)input.LT(1);
      match(input,LPAREN,FOLLOW_LPAREN_in_ctorArgs971);
      if (failed)       return retval;
      int alt23=2;
      int LA23_0=input.LA(1);
      if ((LA23_0 == INTEGER_LITERAL || LA23_0 == LPAREN || (LA23_0 >= PLUS && LA23_0 <= MINUS) || LA23_0 == BANG || (LA23_0 >= POUND && LA23_0 <= ID) || LA23_0 == LBRACKET || LA23_0 == PROJECT || (LA23_0 >= SELECT && LA23_0 <= FALSE) || LA23_0 == 77)) {
        alt23=1;
      }
switch (alt23) {
case 1:
{
          pushFollow(FOLLOW_namedArgument_in_ctorArgs975);
          namedArgument99=namedArgument();
          _fsp--;
          if (failed)           return retval;
          if (backtracking == 0)           adaptor.addChild(root_0,namedArgument99.getTree());
          loop22:           do {
            int alt22=2;
            int LA22_0=input.LA(1);
            if ((LA22_0 == COMMA)) {
              alt22=1;
            }
switch (alt22) {
case 1:
{
                COMMA100=(Token)input.LT(1);
                match(input,COMMA,FOLLOW_COMMA_in_ctorArgs978);
                if (failed)                 return retval;
                pushFollow(FOLLOW_namedArgument_in_ctorArgs981);
                namedArgument101=namedArgument();
                _fsp--;
                if (failed)                 return retval;
                if (backtracking == 0)                 adaptor.addChild(root_0,namedArgument101.getTree());
              }
            break;
default :
          break loop22;
      }
    }
 while (true);
  }
break;
}
RPAREN102=(Token)input.LT(1);
match(input,RPAREN,FOLLOW_RPAREN_in_ctorArgs987);
if (failed) return retval;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
reportError(e);
throw e;
}
 finally {
}
return retval;
}
