{
  indexer_return retval=new indexer_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LBRACKET83=null;
  Token COMMA84=null;
  Token RBRACKET85=null;
  argument_return r1=null;
  argument_return r2=null;
  Object LBRACKET83_tree=null;
  Object COMMA84_tree=null;
  Object RBRACKET85_tree=null;
  RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
  RewriteRuleTokenStream stream_LBRACKET=new RewriteRuleTokenStream(adaptor,"token LBRACKET");
  RewriteRuleTokenStream stream_RBRACKET=new RewriteRuleTokenStream(adaptor,"token RBRACKET");
  RewriteRuleSubtreeStream stream_argument=new RewriteRuleSubtreeStream(adaptor,"rule argument");
  try {
{
      LBRACKET83=(Token)input.LT(1);
      match(input,LBRACKET,FOLLOW_LBRACKET_in_indexer951);
      if (failed)       return retval;
      if (backtracking == 0)       stream_LBRACKET.add(LBRACKET83);
      pushFollow(FOLLOW_argument_in_indexer955);
      r1=argument();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_argument.add(r1.getTree());
      loop23:       do {
        int alt23=2;
        int LA23_0=input.LA(1);
        if ((LA23_0 == COMMA)) {
          alt23=1;
        }
switch (alt23) {
case 1:
{
            COMMA84=(Token)input.LT(1);
            match(input,COMMA,FOLLOW_COMMA_in_indexer958);
            if (failed)             return retval;
            if (backtracking == 0)             stream_COMMA.add(COMMA84);
            pushFollow(FOLLOW_argument_in_indexer962);
            r2=argument();
            _fsp--;
            if (failed)             return retval;
            if (backtracking == 0)             stream_argument.add(r2.getTree());
          }
        break;
default :
      break loop23;
  }
}
 while (true);
RBRACKET85=(Token)input.LT(1);
match(input,RBRACKET,FOLLOW_RBRACKET_in_indexer966);
if (failed) return retval;
if (backtracking == 0) stream_RBRACKET.add(RBRACKET85);
if (backtracking == 0) {
  retval.tree=root_0;
  RewriteRuleSubtreeStream stream_r2=new RewriteRuleSubtreeStream(adaptor,"token r2",r2 != null ? r2.tree : null);
  RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
  RewriteRuleSubtreeStream stream_r1=new RewriteRuleSubtreeStream(adaptor,"token r1",r1 != null ? r1.tree : null);
  root_0=(Object)adaptor.nil();
{
{
      Object root_1=(Object)adaptor.nil();
      root_1=(Object)adaptor.becomeRoot(adaptor.create(INDEXER,"INDEXER"),root_1);
      adaptor.addChild(root_1,stream_r1.next());
      while (stream_r2.hasNext()) {
        adaptor.addChild(root_1,stream_r2.next());
      }
      stream_r2.reset();
      adaptor.addChild(root_0,root_1);
    }
  }
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
reportError(e);
throw e;
}
 finally {
}
return retval;
}
