{
  logicalAndExpression_return retval=new logicalAndExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token AND25=null;
  relationalExpression_return relationalExpression24=null;
  relationalExpression_return relationalExpression26=null;
  Object AND25_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_relationalExpression_in_logicalAndExpression358);
      relationalExpression24=relationalExpression();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       adaptor.addChild(root_0,relationalExpression24.getTree());
      loop5:       do {
        int alt5=2;
        int LA5_0=input.LA(1);
        if ((LA5_0 == AND)) {
          alt5=1;
        }
switch (alt5) {
case 1:
{
            AND25=(Token)input.LT(1);
            match(input,AND,FOLLOW_AND_in_logicalAndExpression361);
            if (failed)             return retval;
            if (backtracking == 0) {
              AND25_tree=(Object)adaptor.create(AND25);
              root_0=(Object)adaptor.becomeRoot(AND25_tree,root_0);
            }
            pushFollow(FOLLOW_relationalExpression_in_logicalAndExpression364);
            relationalExpression26=relationalExpression();
            _fsp--;
            if (failed)             return retval;
            if (backtracking == 0)             adaptor.addChild(root_0,relationalExpression26.getTree());
          }
        break;
default :
      break loop5;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
throw e;
}
 finally {
}
return retval;
}
