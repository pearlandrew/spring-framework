{
  logicalAndExpression_return retval=new logicalAndExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token AND19=null;
  relationalExpression_return relationalExpression18=null;
  relationalExpression_return relationalExpression20=null;
  Object AND19_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_relationalExpression_in_logicalAndExpression325);
      relationalExpression18=relationalExpression();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       adaptor.addChild(root_0,relationalExpression18.getTree());
      loop3:       do {
        int alt3=2;
        int LA3_0=input.LA(1);
        if ((LA3_0 == AND)) {
          alt3=1;
        }
switch (alt3) {
case 1:
{
            AND19=(Token)input.LT(1);
            match(input,AND,FOLLOW_AND_in_logicalAndExpression328);
            if (failed)             return retval;
            if (backtracking == 0) {
              AND19_tree=(Object)adaptor.create(AND19);
              root_0=(Object)adaptor.becomeRoot(AND19_tree,root_0);
            }
            pushFollow(FOLLOW_relationalExpression_in_logicalAndExpression331);
            relationalExpression20=relationalExpression();
            _fsp--;
            if (failed)             return retval;
            if (backtracking == 0)             adaptor.addChild(root_0,relationalExpression20.getTree());
          }
        break;
default :
      break loop3;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
reportError(e);
throw e;
}
 finally {
}
return retval;
}
