{
  exprList_return retval=new exprList_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LPAREN3=null;
  Token SEMI5=null;
  Token SEMIRPAREN7=null;
  Token RPAREN8=null;
  expression_return expression4=null;
  expression_return expression6=null;
  Object LPAREN3_tree=null;
  Object SEMI5_tree=null;
  Object SEMIRPAREN7_tree=null;
  Object RPAREN8_tree=null;
  RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
  RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
  RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
  RewriteRuleTokenStream stream_SEMIRPAREN=new RewriteRuleTokenStream(adaptor,"token SEMIRPAREN");
  RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
  try {
{
      LPAREN3=(Token)input.LT(1);
      match(input,LPAREN,FOLLOW_LPAREN_in_exprList188);
      if (failed)       return retval;
      if (backtracking == 0)       stream_LPAREN.add(LPAREN3);
      pushFollow(FOLLOW_expression_in_exprList190);
      expression4=expression();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_expression.add(expression4.getTree());
      int cnt1=0;
      loop1:       do {
        int alt1=2;
        int LA1_0=input.LA(1);
        if ((LA1_0 == SEMI)) {
          alt1=1;
        }
switch (alt1) {
case 1:
{
            SEMI5=(Token)input.LT(1);
            match(input,SEMI,FOLLOW_SEMI_in_exprList193);
            if (failed)             return retval;
            if (backtracking == 0)             stream_SEMI.add(SEMI5);
            pushFollow(FOLLOW_expression_in_exprList195);
            expression6=expression();
            _fsp--;
            if (failed)             return retval;
            if (backtracking == 0)             stream_expression.add(expression6.getTree());
          }
        break;
default :
      if (cnt1 >= 1)       break loop1;
    if (backtracking > 0) {
      failed=true;
      return retval;
    }
  EarlyExitException eee=new EarlyExitException(1,input);
throw eee;
}
cnt1++;
}
 while (true);
int alt2=2;
int LA2_0=input.LA(1);
if ((LA2_0 == SEMIRPAREN)) {
alt2=1;
}
 else if ((LA2_0 == RPAREN)) {
alt2=2;
}
 else {
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("59:44: ( SEMIRPAREN | RPAREN )",2,0,input);
throw nvae;
}
switch (alt2) {
case 1:
{
SEMIRPAREN7=(Token)input.LT(1);
match(input,SEMIRPAREN,FOLLOW_SEMIRPAREN_in_exprList200);
if (failed) return retval;
if (backtracking == 0) stream_SEMIRPAREN.add(SEMIRPAREN7);
}
break;
case 2:
{
RPAREN8=(Token)input.LT(1);
match(input,RPAREN,FOLLOW_RPAREN_in_exprList204);
if (failed) return retval;
if (backtracking == 0) stream_RPAREN.add(RPAREN8);
}
break;
}
if (backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot(adaptor.create(EXPRESSIONLIST,"EXPRESSIONLIST"),root_1);
if (!(stream_expression.hasNext())) {
throw new RewriteEarlyExitException();
}
while (stream_expression.hasNext()) {
adaptor.addChild(root_1,stream_expression.next());
}
stream_expression.reset();
adaptor.addChild(root_0,root_1);
}
}
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
throw e;
}
 finally {
}
return retval;
}
