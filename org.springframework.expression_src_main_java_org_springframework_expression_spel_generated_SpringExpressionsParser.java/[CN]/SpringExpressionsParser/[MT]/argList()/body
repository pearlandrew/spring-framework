{
  argList_return retval=new argList_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token COMMA113=null;
  Token id=null;
  List list_id=null;
  Object COMMA113_tree=null;
  Object id_tree=null;
  RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  try {
{
{
        id=(Token)input.LT(1);
        match(input,ID,FOLLOW_ID_in_argList1209);
        if (failed)         return retval;
        if (backtracking == 0)         stream_ID.add(id);
        if (list_id == null)         list_id=new ArrayList();
        list_id.add(id);
        loop26:         do {
          int alt26=2;
          int LA26_0=input.LA(1);
          if ((LA26_0 == COMMA)) {
            alt26=1;
          }
switch (alt26) {
case 1:
{
              COMMA113=(Token)input.LT(1);
              match(input,COMMA,FOLLOW_COMMA_in_argList1212);
              if (failed)               return retval;
              if (backtracking == 0)               stream_COMMA.add(COMMA113);
              id=(Token)input.LT(1);
              match(input,ID,FOLLOW_ID_in_argList1216);
              if (failed)               return retval;
              if (backtracking == 0)               stream_ID.add(id);
              if (list_id == null)               list_id=new ArrayList();
              list_id.add(id);
            }
          break;
default :
        break loop26;
    }
  }
 while (true);
}
if (backtracking == 0) {
  retval.tree=root_0;
  RewriteRuleTokenStream stream_id=new RewriteRuleTokenStream(adaptor,"token id",list_id);
  RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
  root_0=(Object)adaptor.nil();
{
{
      Object root_1=(Object)adaptor.nil();
      root_1=(Object)adaptor.becomeRoot(adaptor.create(ARGLIST,"ARGLIST"),root_1);
      while (stream_id.hasNext()) {
        adaptor.addChild(root_1,stream_id.next());
      }
      stream_id.reset();
      adaptor.addChild(root_0,root_1);
    }
  }
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
reportError(e);
throw e;
}
 finally {
}
return retval;
}
