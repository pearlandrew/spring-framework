{
  expr_return retval=new expr_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token EOF2=null;
  expression_return expression1=null;
  Object EOF2_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_expression_in_expr181);
      expression1=expression();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       adaptor.addChild(root_0,expression1.getTree());
      EOF2=(Token)input.LT(1);
      match(input,EOF,FOLLOW_EOF_in_expr183);
      if (failed)       return retval;
    }
    retval.stop=input.LT(-1);
    if (backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException e) {
    reportError(e);
    throw e;
  }
 finally {
  }
  return retval;
}
