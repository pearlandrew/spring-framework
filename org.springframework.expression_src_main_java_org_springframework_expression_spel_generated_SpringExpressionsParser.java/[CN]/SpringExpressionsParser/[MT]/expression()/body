{
  expression_return retval=new expression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ASSIGN10=null;
  Token DEFAULT12=null;
  Token QMARK14=null;
  Token COLON16=null;
  logicalOrExpression_return logicalOrExpression9=null;
  logicalOrExpression_return logicalOrExpression11=null;
  logicalOrExpression_return logicalOrExpression13=null;
  expression_return expression15=null;
  expression_return expression17=null;
  Object ASSIGN10_tree=null;
  Object DEFAULT12_tree=null;
  Object QMARK14_tree=null;
  Object COLON16_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_logicalOrExpression_in_expression253);
      logicalOrExpression9=logicalOrExpression();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       adaptor.addChild(root_0,logicalOrExpression9.getTree());
      int alt3=4;
switch (input.LA(1)) {
case ASSIGN:
{
          alt3=1;
        }
      break;
case DEFAULT:
{
      alt3=2;
    }
  break;
case QMARK:
{
  alt3=3;
}
break;
}
switch (alt3) {
case 1:
{
{
ASSIGN10=(Token)input.LT(1);
match(input,ASSIGN,FOLLOW_ASSIGN_in_expression262);
if (failed) return retval;
if (backtracking == 0) {
  ASSIGN10_tree=(Object)adaptor.create(ASSIGN10);
  root_0=(Object)adaptor.becomeRoot(ASSIGN10_tree,root_0);
}
pushFollow(FOLLOW_logicalOrExpression_in_expression265);
logicalOrExpression11=logicalOrExpression();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,logicalOrExpression11.getTree());
}
}
break;
case 2:
{
{
DEFAULT12=(Token)input.LT(1);
match(input,DEFAULT,FOLLOW_DEFAULT_in_expression275);
if (failed) return retval;
if (backtracking == 0) {
DEFAULT12_tree=(Object)adaptor.create(DEFAULT12);
root_0=(Object)adaptor.becomeRoot(DEFAULT12_tree,root_0);
}
pushFollow(FOLLOW_logicalOrExpression_in_expression278);
logicalOrExpression13=logicalOrExpression();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,logicalOrExpression13.getTree());
}
}
break;
case 3:
{
{
QMARK14=(Token)input.LT(1);
match(input,QMARK,FOLLOW_QMARK_in_expression288);
if (failed) return retval;
if (backtracking == 0) {
QMARK14_tree=(Object)adaptor.create(QMARK14);
root_0=(Object)adaptor.becomeRoot(QMARK14_tree,root_0);
}
pushFollow(FOLLOW_expression_in_expression291);
expression15=expression();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,expression15.getTree());
COLON16=(Token)input.LT(1);
match(input,COLON,FOLLOW_COLON_in_expression293);
if (failed) return retval;
pushFollow(FOLLOW_expression_in_expression296);
expression17=expression();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,expression17.getTree());
}
}
break;
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
throw e;
}
 finally {
}
return retval;
}
