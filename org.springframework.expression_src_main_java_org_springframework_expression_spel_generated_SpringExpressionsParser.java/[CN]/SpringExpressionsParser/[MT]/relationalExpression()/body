{
  relationalExpression_return retval=new relationalExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  sumExpression_return sumExpression27=null;
  relationalOperator_return relationalOperator28=null;
  sumExpression_return sumExpression29=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_sumExpression_in_relationalExpression375);
      sumExpression27=sumExpression();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       adaptor.addChild(root_0,sumExpression27.getTree());
      int alt6=2;
      int LA6_0=input.LA(1);
      if (((LA6_0 >= EQUAL && LA6_0 <= DISTANCETO))) {
        alt6=1;
      }
switch (alt6) {
case 1:
{
          pushFollow(FOLLOW_relationalOperator_in_relationalExpression378);
          relationalOperator28=relationalOperator();
          _fsp--;
          if (failed)           return retval;
          if (backtracking == 0)           root_0=(Object)adaptor.becomeRoot(relationalOperator28.getTree(),root_0);
          pushFollow(FOLLOW_sumExpression_in_relationalExpression381);
          sumExpression29=sumExpression();
          _fsp--;
          if (failed)           return retval;
          if (backtracking == 0)           adaptor.addChild(root_0,sumExpression29.getTree());
        }
      break;
  }
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
throw e;
}
 finally {
}
return retval;
}
