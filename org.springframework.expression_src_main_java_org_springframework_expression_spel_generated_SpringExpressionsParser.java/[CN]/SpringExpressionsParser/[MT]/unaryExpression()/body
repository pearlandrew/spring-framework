{
  unaryExpression_return retval=new unaryExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token PLUS36=null;
  Token MINUS37=null;
  Token BANG38=null;
  unaryExpression_return unaryExpression39=null;
  primaryExpression_return primaryExpression40=null;
  Object PLUS36_tree=null;
  Object MINUS37_tree=null;
  Object BANG38_tree=null;
  try {
    int alt11=2;
    int LA11_0=input.LA(1);
    if (((LA11_0 >= PLUS && LA11_0 <= MINUS) || LA11_0 == BANG)) {
      alt11=1;
    }
 else     if ((LA11_0 == INTEGER_LITERAL || LA11_0 == LPAREN || (LA11_0 >= POUND && LA11_0 <= ID) || LA11_0 == LBRACKET || LA11_0 == PROJECT || (LA11_0 >= SELECT && LA11_0 <= FALSE) || LA11_0 == 84)) {
      alt11=2;
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("77:1: unaryExpression : ( ( PLUS | MINUS | BANG ) unaryExpression | primaryExpression );",11,0,input);
      throw nvae;
    }
switch (alt11) {
case 1:
{
        root_0=(Object)adaptor.nil();
        int alt10=3;
switch (input.LA(1)) {
case PLUS:
{
            alt10=1;
          }
        break;
case MINUS:
{
        alt10=2;
      }
    break;
case BANG:
{
    alt10=3;
  }
break;
default :
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("78:4: ( PLUS | MINUS | BANG )",10,0,input);
throw nvae;
}
switch (alt10) {
case 1:
{
PLUS36=(Token)input.LT(1);
match(input,PLUS,FOLLOW_PLUS_in_unaryExpression395);
if (failed) return retval;
if (backtracking == 0) {
PLUS36_tree=(Object)adaptor.create(PLUS36);
root_0=(Object)adaptor.becomeRoot(PLUS36_tree,root_0);
}
}
break;
case 2:
{
MINUS37=(Token)input.LT(1);
match(input,MINUS,FOLLOW_MINUS_in_unaryExpression400);
if (failed) return retval;
if (backtracking == 0) {
MINUS37_tree=(Object)adaptor.create(MINUS37);
root_0=(Object)adaptor.becomeRoot(MINUS37_tree,root_0);
}
}
break;
case 3:
{
BANG38=(Token)input.LT(1);
match(input,BANG,FOLLOW_BANG_in_unaryExpression405);
if (failed) return retval;
if (backtracking == 0) {
BANG38_tree=(Object)adaptor.create(BANG38);
root_0=(Object)adaptor.becomeRoot(BANG38_tree,root_0);
}
}
break;
}
pushFollow(FOLLOW_unaryExpression_in_unaryExpression409);
unaryExpression39=unaryExpression();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,unaryExpression39.getTree());
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_primaryExpression_in_unaryExpression415);
primaryExpression40=primaryExpression();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,primaryExpression40.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
reportError(e);
throw e;
}
 finally {
}
return retval;
}
