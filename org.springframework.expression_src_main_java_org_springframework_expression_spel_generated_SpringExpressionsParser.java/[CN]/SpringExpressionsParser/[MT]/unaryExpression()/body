{
  unaryExpression_return retval=new unaryExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token PLUS42=null;
  Token MINUS43=null;
  Token BANG44=null;
  unaryExpression_return unaryExpression45=null;
  primaryExpression_return primaryExpression46=null;
  Object PLUS42_tree=null;
  Object MINUS43_tree=null;
  Object BANG44_tree=null;
  try {
    int alt13=2;
    int LA13_0=input.LA(1);
    if (((LA13_0 >= PLUS && LA13_0 <= MINUS) || LA13_0 == BANG)) {
      alt13=1;
    }
 else     if ((LA13_0 == INTEGER_LITERAL || LA13_0 == LPAREN || (LA13_0 >= POUND && LA13_0 <= DOLLAR) || (LA13_0 >= AT && LA13_0 <= LBRACKET) || LA13_0 == PROJECT || (LA13_0 >= SELECT && LA13_0 <= LAMBDA) || (LA13_0 >= LCURLY && LA13_0 <= FALSE) || (LA13_0 >= 91 && LA13_0 <= 92))) {
      alt13=2;
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("103:1: unaryExpression : ( ( PLUS | MINUS | BANG ) unaryExpression | primaryExpression );",13,0,input);
      throw nvae;
    }
switch (alt13) {
case 1:
{
        root_0=(Object)adaptor.nil();
        int alt12=3;
switch (input.LA(1)) {
case PLUS:
{
            alt12=1;
          }
        break;
case MINUS:
{
        alt12=2;
      }
    break;
case BANG:
{
    alt12=3;
  }
break;
default :
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("104:4: ( PLUS | MINUS | BANG )",12,0,input);
throw nvae;
}
switch (alt12) {
case 1:
{
PLUS42=(Token)input.LT(1);
match(input,PLUS,FOLLOW_PLUS_in_unaryExpression485);
if (failed) return retval;
if (backtracking == 0) {
PLUS42_tree=(Object)adaptor.create(PLUS42);
root_0=(Object)adaptor.becomeRoot(PLUS42_tree,root_0);
}
}
break;
case 2:
{
MINUS43=(Token)input.LT(1);
match(input,MINUS,FOLLOW_MINUS_in_unaryExpression490);
if (failed) return retval;
if (backtracking == 0) {
MINUS43_tree=(Object)adaptor.create(MINUS43);
root_0=(Object)adaptor.becomeRoot(MINUS43_tree,root_0);
}
}
break;
case 3:
{
BANG44=(Token)input.LT(1);
match(input,BANG,FOLLOW_BANG_in_unaryExpression495);
if (failed) return retval;
if (backtracking == 0) {
BANG44_tree=(Object)adaptor.create(BANG44);
root_0=(Object)adaptor.becomeRoot(BANG44_tree,root_0);
}
}
break;
}
pushFollow(FOLLOW_unaryExpression_in_unaryExpression499);
unaryExpression45=unaryExpression();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,unaryExpression45.getTree());
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_primaryExpression_in_unaryExpression505);
primaryExpression46=primaryExpression();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,primaryExpression46.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
reportError(e);
throw e;
}
 finally {
}
return retval;
}
