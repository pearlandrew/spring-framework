{
  lambda_return retval=new lambda_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LAMBDA114=null;
  Token PIPE116=null;
  Token RCURLY118=null;
  argList_return argList115=null;
  expression_return expression117=null;
  Object LAMBDA114_tree=null;
  Object PIPE116_tree=null;
  Object RCURLY118_tree=null;
  RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
  RewriteRuleTokenStream stream_PIPE=new RewriteRuleTokenStream(adaptor,"token PIPE");
  RewriteRuleTokenStream stream_LAMBDA=new RewriteRuleTokenStream(adaptor,"token LAMBDA");
  RewriteRuleSubtreeStream stream_argList=new RewriteRuleSubtreeStream(adaptor,"rule argList");
  RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
  try {
{
      LAMBDA114=(Token)input.LT(1);
      match(input,LAMBDA,FOLLOW_LAMBDA_in_lambda1226);
      if (failed)       return retval;
      if (backtracking == 0)       stream_LAMBDA.add(LAMBDA114);
      int alt26=2;
      int LA26_0=input.LA(1);
      if ((LA26_0 == ID)) {
        alt26=1;
      }
switch (alt26) {
case 1:
{
          pushFollow(FOLLOW_argList_in_lambda1229);
          argList115=argList();
          _fsp--;
          if (failed)           return retval;
          if (backtracking == 0)           stream_argList.add(argList115.getTree());
        }
      break;
  }
  PIPE116=(Token)input.LT(1);
  match(input,PIPE,FOLLOW_PIPE_in_lambda1233);
  if (failed)   return retval;
  if (backtracking == 0)   stream_PIPE.add(PIPE116);
  pushFollow(FOLLOW_expression_in_lambda1235);
  expression117=expression();
  _fsp--;
  if (failed)   return retval;
  if (backtracking == 0)   stream_expression.add(expression117.getTree());
  RCURLY118=(Token)input.LT(1);
  match(input,RCURLY,FOLLOW_RCURLY_in_lambda1237);
  if (failed)   return retval;
  if (backtracking == 0)   stream_RCURLY.add(RCURLY118);
  if (backtracking == 0) {
    retval.tree=root_0;
    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
    root_0=(Object)adaptor.nil();
{
{
        Object root_1=(Object)adaptor.nil();
        root_1=(Object)adaptor.becomeRoot(stream_LAMBDA.next(),root_1);
        if (stream_argList.hasNext()) {
          adaptor.addChild(root_1,stream_argList.next());
        }
        stream_argList.reset();
        adaptor.addChild(root_1,stream_expression.next());
        adaptor.addChild(root_0,root_1);
      }
    }
  }
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
throw e;
}
 finally {
}
return retval;
}
