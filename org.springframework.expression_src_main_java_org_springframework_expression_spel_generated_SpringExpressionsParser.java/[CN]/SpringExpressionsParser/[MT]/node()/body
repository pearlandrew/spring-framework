{
  node_return retval=new node_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token DOT74=null;
  methodOrProperty_return methodOrProperty66=null;
  functionOrVar_return functionOrVar67=null;
  indexer_return indexer68=null;
  projection_return projection69=null;
  selection_return selection70=null;
  firstSelection_return firstSelection71=null;
  lastSelection_return lastSelection72=null;
  exprList_return exprList73=null;
  Object DOT74_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int cnt16=0;
      loop16:       do {
        int alt16=10;
switch (input.LA(1)) {
case ID:
{
            alt16=1;
          }
        break;
case POUND:
{
        alt16=2;
      }
    break;
case LBRACKET:
{
    alt16=3;
  }
break;
case PROJECT:
{
alt16=4;
}
break;
case SELECT:
{
alt16=5;
}
break;
case SELECT_FIRST:
{
alt16=6;
}
break;
case SELECT_LAST:
{
alt16=7;
}
break;
case LPAREN:
{
alt16=8;
}
break;
case DOT:
{
alt16=9;
}
break;
}
switch (alt16) {
case 1:
{
pushFollow(FOLLOW_methodOrProperty_in_node707);
methodOrProperty66=methodOrProperty();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,methodOrProperty66.getTree());
}
break;
case 2:
{
pushFollow(FOLLOW_functionOrVar_in_node713);
functionOrVar67=functionOrVar();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,functionOrVar67.getTree());
}
break;
case 3:
{
pushFollow(FOLLOW_indexer_in_node721);
indexer68=indexer();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,indexer68.getTree());
}
break;
case 4:
{
pushFollow(FOLLOW_projection_in_node729);
projection69=projection();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,projection69.getTree());
}
break;
case 5:
{
pushFollow(FOLLOW_selection_in_node738);
selection70=selection();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,selection70.getTree());
}
break;
case 6:
{
pushFollow(FOLLOW_firstSelection_in_node747);
firstSelection71=firstSelection();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,firstSelection71.getTree());
}
break;
case 7:
{
pushFollow(FOLLOW_lastSelection_in_node756);
lastSelection72=lastSelection();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,lastSelection72.getTree());
}
break;
case 8:
{
pushFollow(FOLLOW_exprList_in_node765);
exprList73=exprList();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,exprList73.getTree());
}
break;
case 9:
{
DOT74=(Token)input.LT(1);
match(input,DOT,FOLLOW_DOT_in_node773);
if (failed) return retval;
if (backtracking == 0) {
DOT74_tree=(Object)adaptor.create(DOT74);
adaptor.addChild(root_0,DOT74_tree);
}
}
break;
default :
if (cnt16 >= 1) break loop16;
if (backtracking > 0) {
failed=true;
return retval;
}
EarlyExitException eee=new EarlyExitException(16,input);
throw eee;
}
cnt16++;
}
 while (true);
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
throw e;
}
 finally {
}
return retval;
}
