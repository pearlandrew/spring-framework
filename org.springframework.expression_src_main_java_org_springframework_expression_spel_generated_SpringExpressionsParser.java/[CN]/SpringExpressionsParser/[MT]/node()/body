{
  node_return retval=new node_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token DOT59=null;
  dottedNode_return dottedNode60=null;
  nonDottedNode_return nonDottedNode61=null;
  Object DOT59_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int cnt14=0;
      loop14:       do {
        int alt14=3;
        int LA14_0=input.LA(1);
        if ((LA14_0 == DOT)) {
          alt14=1;
        }
 else         if ((LA14_0 == LBRACKET)) {
          alt14=2;
        }
switch (alt14) {
case 1:
{
{
              DOT59=(Token)input.LT(1);
              match(input,DOT,FOLLOW_DOT_in_node643);
              if (failed)               return retval;
              if (backtracking == 0) {
                DOT59_tree=(Object)adaptor.create(DOT59);
                adaptor.addChild(root_0,DOT59_tree);
              }
              pushFollow(FOLLOW_dottedNode_in_node645);
              dottedNode60=dottedNode();
              _fsp--;
              if (failed)               return retval;
              if (backtracking == 0)               adaptor.addChild(root_0,dottedNode60.getTree());
            }
          }
        break;
case 2:
{
        pushFollow(FOLLOW_nonDottedNode_in_node650);
        nonDottedNode61=nonDottedNode();
        _fsp--;
        if (failed)         return retval;
        if (backtracking == 0)         adaptor.addChild(root_0,nonDottedNode61.getTree());
      }
    break;
default :
  if (cnt14 >= 1)   break loop14;
if (backtracking > 0) {
  failed=true;
  return retval;
}
EarlyExitException eee=new EarlyExitException(14,input);
throw eee;
}
cnt14++;
}
 while (true);
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
reportError(e);
throw e;
}
 finally {
}
return retval;
}
