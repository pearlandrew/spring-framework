{
  listInitializer_return retval=new listInitializer_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LCURLY127=null;
  Token COMMA129=null;
  Token RCURLY131=null;
  expression_return expression128=null;
  expression_return expression130=null;
  Object LCURLY127_tree=null;
  Object COMMA129_tree=null;
  Object RCURLY131_tree=null;
  RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
  RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
  RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
  RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
  try {
{
      LCURLY127=(Token)input.LT(1);
      match(input,LCURLY,FOLLOW_LCURLY_in_listInitializer1361);
      if (failed)       return retval;
      if (backtracking == 0)       stream_LCURLY.add(LCURLY127);
      pushFollow(FOLLOW_expression_in_listInitializer1363);
      expression128=expression();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_expression.add(expression128.getTree());
      loop31:       do {
        int alt31=2;
        int LA31_0=input.LA(1);
        if ((LA31_0 == COMMA)) {
          alt31=1;
        }
switch (alt31) {
case 1:
{
            COMMA129=(Token)input.LT(1);
            match(input,COMMA,FOLLOW_COMMA_in_listInitializer1366);
            if (failed)             return retval;
            if (backtracking == 0)             stream_COMMA.add(COMMA129);
            pushFollow(FOLLOW_expression_in_listInitializer1368);
            expression130=expression();
            _fsp--;
            if (failed)             return retval;
            if (backtracking == 0)             stream_expression.add(expression130.getTree());
          }
        break;
default :
      break loop31;
  }
}
 while (true);
RCURLY131=(Token)input.LT(1);
match(input,RCURLY,FOLLOW_RCURLY_in_listInitializer1372);
if (failed) return retval;
if (backtracking == 0) stream_RCURLY.add(RCURLY131);
if (backtracking == 0) {
  retval.tree=root_0;
  RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
  root_0=(Object)adaptor.nil();
{
{
      Object root_1=(Object)adaptor.nil();
      root_1=(Object)adaptor.becomeRoot(adaptor.create(LIST_INITIALIZER,"LIST_INITIALIZER"),root_1);
      while (stream_expression.hasNext()) {
        adaptor.addChild(root_1,stream_expression.next());
      }
      stream_expression.reset();
      adaptor.addChild(root_0,root_1);
    }
  }
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
reportError(e);
throw e;
}
 finally {
}
return retval;
}
