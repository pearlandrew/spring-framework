{
  methodArgs_return retval=new methodArgs_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LPAREN74=null;
  Token COMMA76=null;
  Token COMMA78=null;
  Token RPAREN79=null;
  argument_return argument75=null;
  argument_return argument77=null;
  Object LPAREN74_tree=null;
  Object COMMA76_tree=null;
  Object COMMA78_tree=null;
  Object RPAREN79_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LPAREN74=(Token)input.LT(1);
      match(input,LPAREN,FOLLOW_LPAREN_in_methodArgs837);
      if (failed)       return retval;
      int alt20=2;
      int LA20_0=input.LA(1);
      if ((LA20_0 == INTEGER_LITERAL || LA20_0 == LPAREN || (LA20_0 >= PLUS && LA20_0 <= MINUS) || LA20_0 == BANG || (LA20_0 >= POUND && LA20_0 <= ID) || (LA20_0 >= AT && LA20_0 <= LBRACKET) || LA20_0 == PROJECT || (LA20_0 >= SELECT && LA20_0 <= FALSE) || LA20_0 == 86)) {
        alt20=1;
      }
switch (alt20) {
case 1:
{
          pushFollow(FOLLOW_argument_in_methodArgs841);
          argument75=argument();
          _fsp--;
          if (failed)           return retval;
          if (backtracking == 0)           adaptor.addChild(root_0,argument75.getTree());
          loop18:           do {
            int alt18=2;
            int LA18_0=input.LA(1);
            if ((LA18_0 == COMMA)) {
              int LA18_1=input.LA(2);
              if ((LA18_1 == INTEGER_LITERAL || LA18_1 == LPAREN || (LA18_1 >= PLUS && LA18_1 <= MINUS) || LA18_1 == BANG || (LA18_1 >= POUND && LA18_1 <= ID) || (LA18_1 >= AT && LA18_1 <= LBRACKET) || LA18_1 == PROJECT || (LA18_1 >= SELECT && LA18_1 <= FALSE) || LA18_1 == 86)) {
                alt18=1;
              }
            }
switch (alt18) {
case 1:
{
                COMMA76=(Token)input.LT(1);
                match(input,COMMA,FOLLOW_COMMA_in_methodArgs844);
                if (failed)                 return retval;
                pushFollow(FOLLOW_argument_in_methodArgs847);
                argument77=argument();
                _fsp--;
                if (failed)                 return retval;
                if (backtracking == 0)                 adaptor.addChild(root_0,argument77.getTree());
              }
            break;
default :
          break loop18;
      }
    }
 while (true);
    int alt19=2;
    int LA19_0=input.LA(1);
    if ((LA19_0 == COMMA)) {
      alt19=1;
    }
switch (alt19) {
case 1:
{
        COMMA78=(Token)input.LT(1);
        match(input,COMMA,FOLLOW_COMMA_in_methodArgs852);
        if (failed)         return retval;
      }
    break;
}
}
break;
}
RPAREN79=(Token)input.LT(1);
match(input,RPAREN,FOLLOW_RPAREN_in_methodArgs859);
if (failed) return retval;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
reportError(e);
throw e;
}
 finally {
}
return retval;
}
