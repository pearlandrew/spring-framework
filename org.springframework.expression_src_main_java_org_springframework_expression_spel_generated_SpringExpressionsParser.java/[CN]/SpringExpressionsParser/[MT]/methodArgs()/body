{
  methodArgs_return retval=new methodArgs_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LPAREN87=null;
  Token COMMA89=null;
  Token COMMA91=null;
  Token RPAREN92=null;
  argument_return argument88=null;
  argument_return argument90=null;
  Object LPAREN87_tree=null;
  Object COMMA89_tree=null;
  Object COMMA91_tree=null;
  Object RPAREN92_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LPAREN87=(Token)input.LT(1);
      match(input,LPAREN,FOLLOW_LPAREN_in_methodArgs986);
      if (failed)       return retval;
      int alt22=2;
      int LA22_0=input.LA(1);
      if ((LA22_0 == INTEGER_LITERAL || LA22_0 == LPAREN || (LA22_0 >= PLUS && LA22_0 <= MINUS) || LA22_0 == BANG || (LA22_0 >= POUND && LA22_0 <= DOLLAR) || (LA22_0 >= AT && LA22_0 <= LBRACKET) || LA22_0 == PROJECT || (LA22_0 >= SELECT && LA22_0 <= LAMBDA) || (LA22_0 >= LCURLY && LA22_0 <= FALSE) || (LA22_0 >= 94 && LA22_0 <= 95))) {
        alt22=1;
      }
switch (alt22) {
case 1:
{
          pushFollow(FOLLOW_argument_in_methodArgs990);
          argument88=argument();
          _fsp--;
          if (failed)           return retval;
          if (backtracking == 0)           adaptor.addChild(root_0,argument88.getTree());
          loop20:           do {
            int alt20=2;
            int LA20_0=input.LA(1);
            if ((LA20_0 == COMMA)) {
              int LA20_1=input.LA(2);
              if ((LA20_1 == INTEGER_LITERAL || LA20_1 == LPAREN || (LA20_1 >= PLUS && LA20_1 <= MINUS) || LA20_1 == BANG || (LA20_1 >= POUND && LA20_1 <= DOLLAR) || (LA20_1 >= AT && LA20_1 <= LBRACKET) || LA20_1 == PROJECT || (LA20_1 >= SELECT && LA20_1 <= LAMBDA) || (LA20_1 >= LCURLY && LA20_1 <= FALSE) || (LA20_1 >= 94 && LA20_1 <= 95))) {
                alt20=1;
              }
            }
switch (alt20) {
case 1:
{
                COMMA89=(Token)input.LT(1);
                match(input,COMMA,FOLLOW_COMMA_in_methodArgs993);
                if (failed)                 return retval;
                pushFollow(FOLLOW_argument_in_methodArgs996);
                argument90=argument();
                _fsp--;
                if (failed)                 return retval;
                if (backtracking == 0)                 adaptor.addChild(root_0,argument90.getTree());
              }
            break;
default :
          break loop20;
      }
    }
 while (true);
    int alt21=2;
    int LA21_0=input.LA(1);
    if ((LA21_0 == COMMA)) {
      alt21=1;
    }
switch (alt21) {
case 1:
{
        COMMA91=(Token)input.LT(1);
        match(input,COMMA,FOLLOW_COMMA_in_methodArgs1001);
        if (failed)         return retval;
      }
    break;
}
}
break;
}
RPAREN92=(Token)input.LT(1);
match(input,RPAREN,FOLLOW_RPAREN_in_methodArgs1008);
if (failed) return retval;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
throw e;
}
 finally {
}
return retval;
}
