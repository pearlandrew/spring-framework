{
  productExpression_return retval=new productExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token STAR29=null;
  Token DIV30=null;
  Token MOD31=null;
  powerExpr_return powerExpr28=null;
  powerExpr_return powerExpr32=null;
  Object STAR29_tree=null;
  Object DIV30_tree=null;
  Object MOD31_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_powerExpr_in_productExpression385);
      powerExpr28=powerExpr();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       adaptor.addChild(root_0,powerExpr28.getTree());
      loop8:       do {
        int alt8=2;
        int LA8_0=input.LA(1);
        if (((LA8_0 >= STAR && LA8_0 <= MOD))) {
          alt8=1;
        }
switch (alt8) {
case 1:
{
            int alt7=3;
switch (input.LA(1)) {
case STAR:
{
                alt7=1;
              }
            break;
case DIV:
{
            alt7=2;
          }
        break;
case MOD:
{
        alt7=3;
      }
    break;
default :
  if (backtracking > 0) {
    failed=true;
    return retval;
  }
NoViableAltException nvae=new NoViableAltException("88:15: ( STAR | DIV | MOD )",7,0,input);
throw nvae;
}
switch (alt7) {
case 1:
{
STAR29=(Token)input.LT(1);
match(input,STAR,FOLLOW_STAR_in_productExpression389);
if (failed) return retval;
if (backtracking == 0) {
STAR29_tree=(Object)adaptor.create(STAR29);
root_0=(Object)adaptor.becomeRoot(STAR29_tree,root_0);
}
}
break;
case 2:
{
DIV30=(Token)input.LT(1);
match(input,DIV,FOLLOW_DIV_in_productExpression394);
if (failed) return retval;
if (backtracking == 0) {
DIV30_tree=(Object)adaptor.create(DIV30);
root_0=(Object)adaptor.becomeRoot(DIV30_tree,root_0);
}
}
break;
case 3:
{
MOD31=(Token)input.LT(1);
match(input,MOD,FOLLOW_MOD_in_productExpression398);
if (failed) return retval;
if (backtracking == 0) {
MOD31_tree=(Object)adaptor.create(MOD31);
root_0=(Object)adaptor.becomeRoot(MOD31_tree,root_0);
}
}
break;
}
pushFollow(FOLLOW_powerExpr_in_productExpression402);
powerExpr32=powerExpr();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,powerExpr32.getTree());
}
break;
default :
break loop8;
}
}
 while (true);
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
reportError(e);
throw e;
}
 finally {
}
return retval;
}
