{
  productExpression_return retval=new productExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token STAR35=null;
  Token DIV36=null;
  Token MOD37=null;
  powerExpr_return powerExpr34=null;
  powerExpr_return powerExpr38=null;
  Object STAR35_tree=null;
  Object DIV36_tree=null;
  Object MOD37_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_powerExpr_in_productExpression421);
      powerExpr34=powerExpr();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       adaptor.addChild(root_0,powerExpr34.getTree());
      loop10:       do {
        int alt10=2;
        int LA10_0=input.LA(1);
        if (((LA10_0 >= STAR && LA10_0 <= MOD))) {
          alt10=1;
        }
switch (alt10) {
case 1:
{
            int alt9=3;
switch (input.LA(1)) {
case STAR:
{
                alt9=1;
              }
            break;
case DIV:
{
            alt9=2;
          }
        break;
case MOD:
{
        alt9=3;
      }
    break;
default :
  if (backtracking > 0) {
    failed=true;
    return retval;
  }
NoViableAltException nvae=new NoViableAltException("87:15: ( STAR | DIV | MOD )",9,0,input);
throw nvae;
}
switch (alt9) {
case 1:
{
STAR35=(Token)input.LT(1);
match(input,STAR,FOLLOW_STAR_in_productExpression425);
if (failed) return retval;
if (backtracking == 0) {
STAR35_tree=(Object)adaptor.create(STAR35);
root_0=(Object)adaptor.becomeRoot(STAR35_tree,root_0);
}
}
break;
case 2:
{
DIV36=(Token)input.LT(1);
match(input,DIV,FOLLOW_DIV_in_productExpression430);
if (failed) return retval;
if (backtracking == 0) {
DIV36_tree=(Object)adaptor.create(DIV36);
root_0=(Object)adaptor.becomeRoot(DIV36_tree,root_0);
}
}
break;
case 3:
{
MOD37=(Token)input.LT(1);
match(input,MOD,FOLLOW_MOD_in_productExpression434);
if (failed) return retval;
if (backtracking == 0) {
MOD37_tree=(Object)adaptor.create(MOD37);
root_0=(Object)adaptor.becomeRoot(MOD37_tree,root_0);
}
}
break;
}
pushFollow(FOLLOW_powerExpr_in_productExpression438);
powerExpr38=powerExpr();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,powerExpr38.getTree());
}
break;
default :
break loop10;
}
}
 while (true);
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
throw e;
}
 finally {
}
return retval;
}
