{
  arrayConstructor_return retval=new arrayConstructor_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token string_literal101=null;
  qualifiedId_return qualifiedId102=null;
  arrayRank_return arrayRank103=null;
  listInitializer_return listInitializer104=null;
  Object string_literal101_tree=null;
  RewriteRuleTokenStream stream_84=new RewriteRuleTokenStream(adaptor,"token 84");
  RewriteRuleSubtreeStream stream_listInitializer=new RewriteRuleSubtreeStream(adaptor,"rule listInitializer");
  RewriteRuleSubtreeStream stream_qualifiedId=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedId");
  RewriteRuleSubtreeStream stream_arrayRank=new RewriteRuleSubtreeStream(adaptor,"rule arrayRank");
  try {
{
      string_literal101=(Token)input.LT(1);
      match(input,84,FOLLOW_84_in_arrayConstructor1019);
      if (failed)       return retval;
      if (backtracking == 0)       stream_84.add(string_literal101);
      pushFollow(FOLLOW_qualifiedId_in_arrayConstructor1021);
      qualifiedId102=qualifiedId();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_qualifiedId.add(qualifiedId102.getTree());
      pushFollow(FOLLOW_arrayRank_in_arrayConstructor1023);
      arrayRank103=arrayRank();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_arrayRank.add(arrayRank103.getTree());
      int alt23=2;
      int LA23_0=input.LA(1);
      if ((LA23_0 == LCURLY)) {
        alt23=1;
      }
switch (alt23) {
case 1:
{
          pushFollow(FOLLOW_listInitializer_in_arrayConstructor1026);
          listInitializer104=listInitializer();
          _fsp--;
          if (failed)           return retval;
          if (backtracking == 0)           stream_listInitializer.add(listInitializer104.getTree());
        }
      break;
  }
  if (backtracking == 0) {
    retval.tree=root_0;
    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
    root_0=(Object)adaptor.nil();
{
{
        Object root_1=(Object)adaptor.nil();
        root_1=(Object)adaptor.becomeRoot(adaptor.create(CONSTRUCTOR_ARRAY,"CONSTRUCTOR_ARRAY"),root_1);
        adaptor.addChild(root_1,stream_qualifiedId.next());
        adaptor.addChild(root_1,stream_arrayRank.next());
        if (stream_listInitializer.hasNext()) {
          adaptor.addChild(root_1,stream_listInitializer.next());
        }
        stream_listInitializer.reset();
        adaptor.addChild(root_0,root_1);
      }
    }
  }
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
reportError(e);
throw e;
}
 finally {
}
return retval;
}
