{
  Class<?> targetObjectRuntimeClass=getObjectClass(this.targetObject);
  try {
    if (Indexer.this.cachedReadName != null && Indexer.this.cachedReadName.equals(this.name) && Indexer.this.cachedReadTargetType != null && Indexer.this.cachedReadTargetType.equals(targetObjectRuntimeClass)) {
      return Indexer.this.cachedReadAccessor.read(this.evaluationContext,this.targetObject,this.name);
    }
    List<PropertyAccessor> accessorsToTry=AstUtils.getPropertyAccessorsToTry(targetObjectRuntimeClass,this.evaluationContext.getPropertyAccessors());
    if (accessorsToTry != null) {
      for (      PropertyAccessor accessor : accessorsToTry) {
        if (accessor.canRead(this.evaluationContext,this.targetObject,this.name)) {
          if (accessor instanceof ReflectivePropertyAccessor) {
            accessor=((ReflectivePropertyAccessor)accessor).createOptimalAccessor(this.evaluationContext,this.targetObject,this.name);
          }
          Indexer.this.cachedReadAccessor=accessor;
          Indexer.this.cachedReadName=this.name;
          Indexer.this.cachedReadTargetType=targetObjectRuntimeClass;
          if (accessor instanceof ReflectivePropertyAccessor.OptimalPropertyAccessor) {
            ReflectivePropertyAccessor.OptimalPropertyAccessor optimalAccessor=(ReflectivePropertyAccessor.OptimalPropertyAccessor)accessor;
            Member member=optimalAccessor.member;
            if (member instanceof Field) {
              Indexer.this.exitTypeDescriptor=CodeFlow.toDescriptor(((Field)member).getType());
            }
 else {
              Indexer.this.exitTypeDescriptor=CodeFlow.toDescriptor(((Method)member).getReturnType());
            }
          }
          return accessor.read(this.evaluationContext,this.targetObject,this.name);
        }
      }
    }
  }
 catch (  AccessException ex) {
    throw new SpelEvaluationException(getStartPosition(),ex,SpelMessage.INDEXING_NOT_SUPPORTED_FOR_TYPE,this.targetObjectTypeDescriptor.toString());
  }
  throw new SpelEvaluationException(getStartPosition(),SpelMessage.INDEXING_NOT_SUPPORTED_FOR_TYPE,this.targetObjectTypeDescriptor.toString());
}
