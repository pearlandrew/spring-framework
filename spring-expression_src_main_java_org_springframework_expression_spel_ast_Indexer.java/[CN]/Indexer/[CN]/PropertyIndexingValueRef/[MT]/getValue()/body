{
  Class<?> targetObjectRuntimeClass=getObjectClass(targetObject);
  try {
    if (cachedReadName != null && cachedReadName.equals(name) && cachedReadTargetType != null && cachedReadTargetType.equals(targetObjectRuntimeClass)) {
      return cachedReadAccessor.read(this.eContext,this.targetObject,this.name);
    }
    List<PropertyAccessor> accessorsToTry=AstUtils.getPropertyAccessorsToTry(targetObjectRuntimeClass,eContext.getPropertyAccessors());
    if (accessorsToTry != null) {
      for (      PropertyAccessor accessor : accessorsToTry) {
        if (accessor.canRead(this.eContext,this.targetObject,this.name)) {
          if (accessor instanceof ReflectivePropertyAccessor) {
            accessor=((ReflectivePropertyAccessor)accessor).createOptimalAccessor(this.eContext,this.targetObject,this.name);
          }
          cachedReadAccessor=accessor;
          cachedReadName=this.name;
          cachedReadTargetType=targetObjectRuntimeClass;
          return accessor.read(this.eContext,this.targetObject,this.name);
        }
      }
    }
  }
 catch (  AccessException ex) {
    throw new SpelEvaluationException(getStartPosition(),ex,SpelMessage.INDEXING_NOT_SUPPORTED_FOR_TYPE,this.td.toString());
  }
  throw new SpelEvaluationException(getStartPosition(),SpelMessage.INDEXING_NOT_SUPPORTED_FOR_TYPE,this.td.toString());
}
