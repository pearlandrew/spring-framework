{
  TypedValue context=state.getActiveContextObject();
  Object targetObject=context.getValue();
  TypeDescriptor targetDescriptor=context.getTypeDescriptor();
  TypedValue indexValue=null;
  Object index=null;
  if (targetObject instanceof Map && (this.children[0] instanceof PropertyOrFieldReference)) {
    PropertyOrFieldReference reference=(PropertyOrFieldReference)this.children[0];
    index=reference.getName();
    indexValue=new TypedValue(index);
  }
 else {
    try {
      state.pushActiveContextObject(state.getRootContextObject());
      indexValue=this.children[0].getValueInternal(state);
      index=indexValue.getValue();
    }
  finally {
      state.popActiveContextObject();
    }
  }
  if (targetObject instanceof Map) {
    Object key=index;
    if (targetDescriptor.getMapKeyTypeDescriptor() != null) {
      key=state.convertValue(key,targetDescriptor.getMapKeyTypeDescriptor());
    }
    this.indexedType=IndexedType.MAP;
    return new MapIndexingValueRef(state.getTypeConverter(),(Map<?,?>)targetObject,key,targetDescriptor);
  }
  if (targetObject == null) {
    throw new SpelEvaluationException(getStartPosition(),SpelMessage.CANNOT_INDEX_INTO_NULL_VALUE);
  }
  if (targetObject.getClass().isArray() || targetObject instanceof Collection || targetObject instanceof String) {
    int idx=(Integer)state.convertValue(index,TypeDescriptor.valueOf(Integer.class));
    if (targetObject.getClass().isArray()) {
      this.indexedType=IndexedType.ARRAY;
      return new ArrayIndexingValueRef(state.getTypeConverter(),targetObject,idx,targetDescriptor);
    }
 else     if (targetObject instanceof Collection) {
      if (targetObject instanceof List) {
        this.indexedType=IndexedType.LIST;
      }
      return new CollectionIndexingValueRef((Collection<?>)targetObject,idx,targetDescriptor,state.getTypeConverter(),state.getConfiguration().isAutoGrowCollections(),state.getConfiguration().getMaximumAutoGrowSize());
    }
 else {
      this.indexedType=IndexedType.STRING;
      return new StringIndexingLValue((String)targetObject,idx,targetDescriptor);
    }
  }
  if (String.class.equals(indexValue.getTypeDescriptor().getType())) {
    this.indexedType=IndexedType.OBJECT;
    return new PropertyIndexingValueRef(targetObject,(String)indexValue.getValue(),state.getEvaluationContext(),targetDescriptor);
  }
  throw new SpelEvaluationException(getStartPosition(),SpelMessage.INDEXING_NOT_SUPPORTED_FOR_TYPE,targetDescriptor.toString());
}
