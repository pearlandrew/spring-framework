{
  String s=codeflow.lastDescriptor();
  if (s == null) {
    codeflow.loadTarget(mv);
  }
  if (this.indexedType == IndexedType.array) {
    if (exitTypeDescriptor == "I") {
      mv.visitTypeInsn(CHECKCAST,"[I");
      SpelNodeImpl index=this.children[0];
      index.generateCode(mv,codeflow);
      mv.visitInsn(IALOAD);
    }
 else     if (exitTypeDescriptor == "D") {
      mv.visitTypeInsn(CHECKCAST,"[D");
      SpelNodeImpl index=this.children[0];
      index.generateCode(mv,codeflow);
      mv.visitInsn(DALOAD);
    }
 else     if (exitTypeDescriptor == "J") {
      mv.visitTypeInsn(CHECKCAST,"[J");
      SpelNodeImpl index=this.children[0];
      index.generateCode(mv,codeflow);
      mv.visitInsn(LALOAD);
    }
 else     if (exitTypeDescriptor == "F") {
      mv.visitTypeInsn(CHECKCAST,"[F");
      SpelNodeImpl index=this.children[0];
      index.generateCode(mv,codeflow);
      mv.visitInsn(FALOAD);
    }
 else     if (exitTypeDescriptor == "S") {
      mv.visitTypeInsn(CHECKCAST,"[S");
      SpelNodeImpl index=this.children[0];
      index.generateCode(mv,codeflow);
      mv.visitInsn(SALOAD);
    }
 else     if (exitTypeDescriptor == "B") {
      mv.visitTypeInsn(CHECKCAST,"[B");
      SpelNodeImpl index=this.children[0];
      index.generateCode(mv,codeflow);
      mv.visitInsn(BALOAD);
    }
 else     if (exitTypeDescriptor == "C") {
      mv.visitTypeInsn(CHECKCAST,"[C");
      SpelNodeImpl index=this.children[0];
      index.generateCode(mv,codeflow);
      mv.visitInsn(CALOAD);
    }
 else {
      mv.visitTypeInsn(CHECKCAST,"[" + exitTypeDescriptor + (CodeFlow.isPrimitiveArray(exitTypeDescriptor) ? "" : ";"));
      SpelNodeImpl index=this.children[0];
      index.generateCode(mv,codeflow);
      mv.visitInsn(AALOAD);
    }
  }
 else   if (this.indexedType == IndexedType.list) {
    mv.visitTypeInsn(CHECKCAST,"java/util/List");
    this.children[0].generateCode(mv,codeflow);
    mv.visitMethodInsn(INVOKEINTERFACE,"java/util/List","get","(I)Ljava/lang/Object;",true);
    CodeFlow.insertCheckCast(mv,exitTypeDescriptor);
  }
 else   if (this.indexedType == IndexedType.map) {
    mv.visitTypeInsn(CHECKCAST,"java/util/Map");
    this.children[0].generateCode(mv,codeflow);
    mv.visitMethodInsn(INVOKEINTERFACE,"java/util/Map","get","(Ljava/lang/Object;)Ljava/lang/Object;",true);
    CodeFlow.insertCheckCast(mv,exitTypeDescriptor);
  }
 else   if (this.indexedType == IndexedType.object) {
    ReflectivePropertyAccessor.OptimalPropertyAccessor accessor=(ReflectivePropertyAccessor.OptimalPropertyAccessor)this.cachedReadAccessor;
    Member member=accessor.member;
    boolean isStatic=Modifier.isStatic(member.getModifiers());
    String descriptor=codeflow.lastDescriptor();
    String memberDeclaringClassSlashedDescriptor=member.getDeclaringClass().getName().replace('.','/');
    if (!isStatic) {
      if (descriptor == null) {
        codeflow.loadTarget(mv);
      }
      if (descriptor == null || !memberDeclaringClassSlashedDescriptor.equals(descriptor.substring(1))) {
        mv.visitTypeInsn(CHECKCAST,memberDeclaringClassSlashedDescriptor);
      }
    }
    if (member instanceof Field) {
      mv.visitFieldInsn(isStatic ? GETSTATIC : GETFIELD,memberDeclaringClassSlashedDescriptor,member.getName(),CodeFlow.toJVMDescriptor(((Field)member).getType()));
    }
 else {
      mv.visitMethodInsn(isStatic ? INVOKESTATIC : INVOKEVIRTUAL,memberDeclaringClassSlashedDescriptor,member.getName(),CodeFlow.createSignatureDescriptor((Method)member),false);
    }
  }
  codeflow.pushDescriptor(exitTypeDescriptor);
}
