{
  String descriptor=cf.lastDescriptor();
  if (descriptor == null) {
    cf.loadTarget(mv);
  }
  if (this.indexedType == IndexedType.ARRAY) {
    int insn;
    if ("D".equals(this.exitTypeDescriptor)) {
      mv.visitTypeInsn(CHECKCAST,"[D");
      insn=DALOAD;
    }
 else     if ("F".equals(this.exitTypeDescriptor)) {
      mv.visitTypeInsn(CHECKCAST,"[F");
      insn=FALOAD;
    }
 else     if ("J".equals(this.exitTypeDescriptor)) {
      mv.visitTypeInsn(CHECKCAST,"[J");
      insn=LALOAD;
    }
 else     if ("I".equals(this.exitTypeDescriptor)) {
      mv.visitTypeInsn(CHECKCAST,"[I");
      insn=IALOAD;
    }
 else     if ("S".equals(this.exitTypeDescriptor)) {
      mv.visitTypeInsn(CHECKCAST,"[S");
      insn=SALOAD;
    }
 else     if ("B".equals(this.exitTypeDescriptor)) {
      mv.visitTypeInsn(CHECKCAST,"[B");
      insn=BALOAD;
    }
 else     if ("C".equals(this.exitTypeDescriptor)) {
      mv.visitTypeInsn(CHECKCAST,"[C");
      insn=CALOAD;
    }
 else {
      mv.visitTypeInsn(CHECKCAST,"[" + this.exitTypeDescriptor + (CodeFlow.isPrimitiveArray(this.exitTypeDescriptor) ? "" : ";"));
      insn=AALOAD;
    }
    SpelNodeImpl index=this.children[0];
    cf.enterCompilationScope();
    index.generateCode(mv,cf);
    cf.exitCompilationScope();
    mv.visitInsn(insn);
  }
 else   if (this.indexedType == IndexedType.LIST) {
    mv.visitTypeInsn(CHECKCAST,"java/util/List");
    cf.enterCompilationScope();
    this.children[0].generateCode(mv,cf);
    cf.exitCompilationScope();
    mv.visitMethodInsn(INVOKEINTERFACE,"java/util/List","get","(I)Ljava/lang/Object;",true);
  }
 else   if (this.indexedType == IndexedType.MAP) {
    mv.visitTypeInsn(CHECKCAST,"java/util/Map");
    if ((this.children[0] instanceof PropertyOrFieldReference)) {
      PropertyOrFieldReference reference=(PropertyOrFieldReference)this.children[0];
      String mapKeyName=reference.getName();
      mv.visitLdcInsn(mapKeyName);
    }
 else {
      cf.enterCompilationScope();
      this.children[0].generateCode(mv,cf);
      cf.exitCompilationScope();
    }
    mv.visitMethodInsn(INVOKEINTERFACE,"java/util/Map","get","(Ljava/lang/Object;)Ljava/lang/Object;",true);
  }
 else   if (this.indexedType == IndexedType.OBJECT) {
    ReflectivePropertyAccessor.OptimalPropertyAccessor accessor=(ReflectivePropertyAccessor.OptimalPropertyAccessor)this.cachedReadAccessor;
    Member member=accessor.member;
    boolean isStatic=Modifier.isStatic(member.getModifiers());
    String classDesc=member.getDeclaringClass().getName().replace('.','/');
    if (!isStatic) {
      if (descriptor == null) {
        cf.loadTarget(mv);
      }
      if (descriptor == null || !classDesc.equals(descriptor.substring(1))) {
        mv.visitTypeInsn(CHECKCAST,classDesc);
      }
    }
    if (member instanceof Method) {
      mv.visitMethodInsn((isStatic ? INVOKESTATIC : INVOKEVIRTUAL),classDesc,member.getName(),CodeFlow.createSignatureDescriptor((Method)member),false);
    }
 else {
      mv.visitFieldInsn((isStatic ? GETSTATIC : GETFIELD),classDesc,member.getName(),CodeFlow.toJvmDescriptor(((Field)member).getType()));
    }
  }
  cf.pushDescriptor(this.exitTypeDescriptor);
}
