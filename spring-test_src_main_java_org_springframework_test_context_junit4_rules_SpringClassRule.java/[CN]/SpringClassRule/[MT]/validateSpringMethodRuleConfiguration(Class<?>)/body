{
  Field ruleField=null;
  for (  Field field : testClass.getFields()) {
    int modifiers=field.getModifiers();
    if (!Modifier.isStatic(modifiers) && Modifier.isPublic(modifiers) && SpringMethodRule.class.isAssignableFrom(field.getType())) {
      ruleField=field;
      break;
    }
  }
  if (ruleField == null) {
    throw new IllegalStateException(String.format("Failed to find 'public SpringMethodRule' field in test class [%s]. " + "Consult the javadoc for SpringClassRule for details.",testClass.getName()));
  }
  if (!ruleField.isAnnotationPresent(Rule.class)) {
    throw new IllegalStateException(String.format("SpringMethodRule field [%s] must be annotated with JUnit's @Rule annotation. " + "Consult the javadoc for SpringClassRule for details.",ruleField));
  }
}
