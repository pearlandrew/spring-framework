{
  SpelExpressionParser parser=new SpelExpressionParser();
  Expression e=parser.parseExpression(expression);
  Object o=e.getValue();
  Assert.assertNotNull(o);
  Assert.assertTrue(o.getClass().isArray());
  StringBuilder s=new StringBuilder();
  s.append('[');
  if (o instanceof int[]) {
    int[] array=(int[])o;
    for (int i=0; i < array.length; i++) {
      if (i > 0) {
        s.append(',');
      }
      s.append(array[i]);
    }
  }
 else   if (o instanceof boolean[]) {
    boolean[] array=(boolean[])o;
    for (int i=0; i < array.length; i++) {
      if (i > 0) {
        s.append(',');
      }
      s.append(array[i]);
    }
  }
 else   if (o instanceof char[]) {
    char[] array=(char[])o;
    for (int i=0; i < array.length; i++) {
      if (i > 0) {
        s.append(',');
      }
      s.append(array[i]);
    }
  }
 else   if (o instanceof long[]) {
    long[] array=(long[])o;
    for (int i=0; i < array.length; i++) {
      if (i > 0) {
        s.append(',');
      }
      s.append(array[i]);
    }
  }
 else   if (o instanceof short[]) {
    short[] array=(short[])o;
    for (int i=0; i < array.length; i++) {
      if (i > 0) {
        s.append(',');
      }
      s.append(array[i]);
    }
  }
 else   if (o instanceof double[]) {
    double[] array=(double[])o;
    for (int i=0; i < array.length; i++) {
      if (i > 0) {
        s.append(',');
      }
      s.append(array[i]);
    }
  }
 else   if (o instanceof float[]) {
    float[] array=(float[])o;
    for (int i=0; i < array.length; i++) {
      if (i > 0) {
        s.append(',');
      }
      s.append(array[i]);
    }
  }
 else   if (o instanceof byte[]) {
    byte[] array=(byte[])o;
    for (int i=0; i < array.length; i++) {
      if (i > 0) {
        s.append(',');
      }
      s.append(array[i]);
    }
  }
 else {
    Assert.fail("Not supported " + o.getClass());
  }
  s.append(']');
  Assert.assertEquals(expectedToString,s.toString());
  return s.toString();
}
