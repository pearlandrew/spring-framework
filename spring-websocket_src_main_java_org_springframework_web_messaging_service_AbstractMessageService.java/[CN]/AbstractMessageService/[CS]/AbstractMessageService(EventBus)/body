{
  Assert.notNull(reactor,"reactor is required");
  this.eventBus=reactor;
  this.eventBus.registerConsumer(CLIENT_TO_SERVER_MESSAGE_KEY,new EventConsumer<Message<?>>(){
    @Override public void accept(    Message<?> message){
      if (!isAllowedDestination(message)) {
        return;
      }
      if (logger.isTraceEnabled()) {
        logger.trace("Processing message id=" + message.getHeaders().getId());
      }
      PubSubHeaders headers=PubSubHeaders.fromMessageHeaders(message.getHeaders());
      MessageType messageType=headers.getMessageType();
      if (messageType == null || messageType.equals(MessageType.OTHER)) {
        processOther(message);
      }
 else       if (MessageType.CONNECT.equals(messageType)) {
        processConnect(message);
      }
 else       if (MessageType.MESSAGE.equals(messageType)) {
        processMessage(message);
      }
 else       if (MessageType.SUBSCRIBE.equals(messageType)) {
        processSubscribe(message);
      }
 else       if (MessageType.UNSUBSCRIBE.equals(messageType)) {
        processUnsubscribe(message);
      }
 else       if (MessageType.DISCONNECT.equals(messageType)) {
        processDisconnect(message);
      }
    }
  }
);
  this.eventBus.registerConsumer(CLIENT_CONNECTION_CLOSED_KEY,new EventConsumer<String>(){
    @Override public void accept(    String sessionId){
      processClientConnectionClosed(sessionId);
    }
  }
);
}
