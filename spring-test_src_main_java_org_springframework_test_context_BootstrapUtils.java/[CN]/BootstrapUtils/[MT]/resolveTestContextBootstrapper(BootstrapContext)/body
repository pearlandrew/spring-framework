{
  Class<?> testClass=bootstrapContext.getTestClass();
  Class<? extends TestContextBootstrapper> clazz=null;
  try {
    MultiValueMap<String,Object> attributesMultiMap=AnnotatedElementUtils.getAllAnnotationAttributes(testClass,BootstrapWith.class.getName());
    List<Object> values=(attributesMultiMap == null ? null : attributesMultiMap.get(AnnotationUtils.VALUE));
    if (values != null) {
      if (values.size() != 1) {
        String msg=String.format("Configuration error: found multiple declarations of @BootstrapWith on test class [%s] with values %s",testClass.getName(),values);
        throw new IllegalStateException(msg);
      }
      clazz=(Class<? extends TestContextBootstrapper>)values.get(0);
    }
 else {
      clazz=(Class<? extends TestContextBootstrapper>)ClassUtils.forName(DEFAULT_TEST_CONTEXT_BOOTSTRAPPER_CLASS_NAME,BootstrapUtils.class.getClassLoader());
    }
    if (logger.isDebugEnabled()) {
      logger.debug(String.format("Instantiating TestContextBootstrapper for test class [%s] from class [%s]",testClass.getName(),clazz.getName()));
    }
    TestContextBootstrapper testContextBootstrapper=instantiateClass(clazz,TestContextBootstrapper.class);
    testContextBootstrapper.setBootstrapContext(bootstrapContext);
    return testContextBootstrapper;
  }
 catch (  Throwable t) {
    if (t instanceof IllegalStateException) {
      throw (IllegalStateException)t;
    }
    throw new IllegalStateException("Could not load TestContextBootstrapper [" + clazz + "]. Specify @BootstrapWith's 'value' attribute "+ "or make the default bootstrapper class available.",t);
  }
}
