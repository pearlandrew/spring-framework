{
  try {
    return mi.proceed();
  }
 catch (  RuntimeException ex) {
    if (!this.alwaysTranslate && ReflectionUtils.declaresException(mi.getMethod(),ex.getClass())) {
      throw ex;
    }
 else {
      if (this.persistenceExceptionTranslator == null) {
        this.persistenceExceptionTranslator=detectPersistenceExceptionTranslators(this.beanFactory);
      }
      throw DataAccessUtils.translateIfNecessary(ex,this.persistenceExceptionTranslator);
    }
  }
}
