{
  if (isFallbackNecessary()) {
    return this.fallback.evaluate(attrName,attrValue,resultClass,pageContext);
  }
  try {
    Map expressionCache=getJspExpressionCache(pageContext);
    if (expressionCache != null) {
      ExpressionCacheKey cacheKey=new ExpressionCacheKey(attrValue,resultClass);
      Expression expr=(Expression)expressionCache.get(cacheKey);
      if (expr == null) {
        expr=pageContext.getExpressionEvaluator().parseExpression(attrValue,resultClass,null);
        expressionCache.put(cacheKey,expr);
      }
      return expr.evaluate(pageContext.getVariableResolver());
    }
 else {
      return pageContext.getExpressionEvaluator().evaluate(attrValue,resultClass,pageContext.getVariableResolver(),null);
    }
  }
 catch (  ELException ex) {
    throw new JspException("Parsing of JSP EL expression \"" + attrValue + "\" failed",ex);
  }
catch (  LinkageError err) {
    logger.debug("JSP 2.0 ExpressionEvaluator API present but not implemented - using fallback",err);
    setFallbackNecessary();
    return this.fallback.evaluate(attrName,attrValue,resultClass,pageContext);
  }
}
