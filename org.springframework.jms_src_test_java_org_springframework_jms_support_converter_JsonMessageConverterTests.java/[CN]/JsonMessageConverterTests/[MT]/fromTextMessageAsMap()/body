{
  TextMessage textMessageMock=createMock(TextMessage.class);
  Map<String,String> unmarshalled=Collections.singletonMap("foo","bar");
  String text="{\"foo\":\"bar\"}";
  expect(textMessageMock.getStringProperty(DefaultJavaTypeMapper.CLASSID_PROPERTY_NAME)).andReturn(HashMap.class.getName());
  expect(textMessageMock.getStringProperty(DefaultJavaTypeMapper.CONTENT_CLASSID_PROPERTY_NAME)).andReturn(Object.class.getName());
  expect(textMessageMock.getStringProperty(DefaultJavaTypeMapper.KEY_CLASSID_PROPERTY_NAME)).andReturn(Object.class.getName());
  expect(textMessageMock.getText()).andReturn(text);
  replay(sessionMock,textMessageMock);
  Object result=converter.fromMessage(textMessageMock);
  assertEquals("Invalid result",result,unmarshalled);
  verify(sessionMock,textMessageMock);
}
