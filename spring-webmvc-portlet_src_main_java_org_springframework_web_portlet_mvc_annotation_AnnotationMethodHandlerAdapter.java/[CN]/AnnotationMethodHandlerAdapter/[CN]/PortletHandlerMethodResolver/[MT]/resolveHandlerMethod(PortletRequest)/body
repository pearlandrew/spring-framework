{
  Map<RequestMappingInfo,Method> targetHandlerMethods=new LinkedHashMap<RequestMappingInfo,Method>();
  for (  Method handlerMethod : getHandlerMethods()) {
    RequestMappingInfo mappingInfo=this.mappings.get(handlerMethod);
    if (mappingInfo.match(request)) {
      Method oldMappedMethod=targetHandlerMethods.put(mappingInfo,handlerMethod);
      if (oldMappedMethod != null && oldMappedMethod != handlerMethod) {
        throw new IllegalStateException("Ambiguous handler methods mapped for portlet mode '" + request.getPortletMode() + "': {"+ oldMappedMethod+ ", "+ handlerMethod+ "}. If you intend to handle the same mode in multiple methods, then factor "+ "them out into a dedicated handler class with that mode mapped at the type level!");
      }
    }
  }
  if (!targetHandlerMethods.isEmpty()) {
    if (targetHandlerMethods.size() == 1) {
      return targetHandlerMethods.values().iterator().next();
    }
 else {
      RequestMappingInfo bestMappingMatch=null;
      for (      RequestMappingInfo mapping : targetHandlerMethods.keySet()) {
        if (bestMappingMatch == null) {
          bestMappingMatch=mapping;
        }
 else {
          if (mapping.isBetterMatchThan(bestMappingMatch)) {
            bestMappingMatch=mapping;
          }
        }
      }
      return targetHandlerMethods.get(bestMappingMatch);
    }
  }
 else {
    throw new NoHandlerFoundException("No matching handler method found for portlet request",request);
  }
}
