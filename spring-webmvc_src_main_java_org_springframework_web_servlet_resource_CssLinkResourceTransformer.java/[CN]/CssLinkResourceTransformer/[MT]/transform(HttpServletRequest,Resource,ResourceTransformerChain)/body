{
  resource=transformerChain.transform(request,resource);
  String filename=resource.getFilename();
  if (!"css".equals(StringUtils.getFilenameExtension(filename))) {
    return resource;
  }
  if (logger.isTraceEnabled()) {
    logger.trace("Transforming resource: " + resource);
  }
  byte[] bytes=FileCopyUtils.copyToByteArray(resource.getInputStream());
  String content=new String(bytes,DEFAULT_CHARSET);
  List<Segment> linkSegments=new ArrayList<>(8);
  for (  LinkParser parser : this.linkParsers) {
    linkSegments.addAll(parser.parseLink(content));
  }
  if (linkSegments.isEmpty()) {
    if (logger.isTraceEnabled()) {
      logger.trace("No links found.");
    }
    return resource;
  }
  Collections.sort(linkSegments);
  int index=0;
  StringWriter writer=new StringWriter();
  for (  Segment linkSegment : linkSegments) {
    writer.write(content.substring(index,linkSegment.getStart()));
    String link=content.substring(linkSegment.getStart(),linkSegment.getEnd());
    String newLink=null;
    if (!hasScheme(link)) {
      newLink=resolveUrlPath(link,request,resource,transformerChain);
    }
    if (logger.isTraceEnabled()) {
      if (newLink != null && !link.equals(newLink)) {
        logger.trace("Link modified: " + newLink + " (original: "+ link+ ")");
      }
 else {
        logger.trace("Link not modified: " + link);
      }
    }
    writer.write(newLink != null ? newLink : link);
    index=linkSegment.getEnd();
  }
  writer.write(content.substring(index));
  return new TransformedResource(resource,writer.toString().getBytes(DEFAULT_CHARSET));
}
