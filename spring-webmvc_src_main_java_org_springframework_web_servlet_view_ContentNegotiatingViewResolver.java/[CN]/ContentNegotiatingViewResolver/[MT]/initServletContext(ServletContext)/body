{
  Collection<ViewResolver> matchingBeans=BeanFactoryUtils.beansOfTypeIncludingAncestors(getApplicationContext(),ViewResolver.class).values();
  if (this.viewResolvers == null) {
    this.viewResolvers=new ArrayList<>(matchingBeans.size());
    for (    ViewResolver viewResolver : matchingBeans) {
      if (this != viewResolver) {
        this.viewResolvers.add(viewResolver);
      }
    }
  }
 else {
    for (int i=0; i < viewResolvers.size(); i++) {
      if (matchingBeans.contains(viewResolvers.get(i))) {
        continue;
      }
      String name=viewResolvers.get(i).getClass().getName() + i;
      getApplicationContext().getAutowireCapableBeanFactory().initializeBean(viewResolvers.get(i),name);
    }
  }
  if (this.viewResolvers.isEmpty()) {
    logger.warn("Did not find any ViewResolvers to delegate to; please configure them using the " + "'viewResolvers' property on the ContentNegotiatingViewResolver");
  }
  AnnotationAwareOrderComparator.sort(this.viewResolvers);
  this.cnmFactoryBean.setServletContext(servletContext);
}
