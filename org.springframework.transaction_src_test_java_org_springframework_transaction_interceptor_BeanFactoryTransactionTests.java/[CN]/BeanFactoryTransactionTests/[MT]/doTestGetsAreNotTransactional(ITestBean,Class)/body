{
  MockControl ptmControl=MockControl.createControl(PlatformTransactionManager.class);
  PlatformTransactionManager ptm=(PlatformTransactionManager)ptmControl.getMock();
  ptmControl.replay();
  PlatformTransactionManagerFacade.delegate=ptm;
  assertTrue("Age should not be " + testBean.getAge(),testBean.getAge() == 666);
  ptmControl.verify();
  MockControl statusControl=MockControl.createControl(TransactionStatus.class);
  final TransactionStatus ts=(TransactionStatus)statusControl.getMock();
  ptm=new PlatformTransactionManager(){
    private boolean invoked;
    public TransactionStatus getTransaction(    TransactionDefinition definition) throws TransactionException {
      if (invoked) {
        throw new IllegalStateException("getTransaction should not get invoked more than once");
      }
      invoked=true;
      if (!((definition.getName().indexOf(proxyClass.getName()) != -1) && (definition.getName().indexOf("setAge") != -1))) {
        throw new IllegalStateException("transaction name should contain class and method name: " + definition.getName());
      }
      return ts;
    }
    public void commit(    TransactionStatus status) throws TransactionException {
      assertTrue(status == ts);
    }
    public void rollback(    TransactionStatus status) throws TransactionException {
      throw new IllegalStateException("rollback should not get invoked");
    }
  }
;
  PlatformTransactionManagerFacade.delegate=ptm;
  int age=666;
  testBean.setAge(age);
  assertTrue(testBean.getAge() == age);
  ptmControl.verify();
}
