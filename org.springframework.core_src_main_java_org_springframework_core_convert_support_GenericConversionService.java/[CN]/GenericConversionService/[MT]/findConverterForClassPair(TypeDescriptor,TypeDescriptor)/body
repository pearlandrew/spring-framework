{
  Class<?> sourceObjectType=sourceType.getObjectType();
  if (sourceObjectType.isInterface()) {
    LinkedList<Class<?>> classQueue=new LinkedList<Class<?>>();
    classQueue.addFirst(sourceObjectType);
    while (!classQueue.isEmpty()) {
      Class<?> currentClass=classQueue.removeLast();
      Map<Class<?>,MatchableConverters> converters=getTargetConvertersForSource(currentClass);
      GenericConverter converter=getMatchingConverterForTarget(sourceType,targetType,converters);
      if (converter != null) {
        return converter;
      }
      Class<?>[] interfaces=currentClass.getInterfaces();
      for (      Class<?> ifc : interfaces) {
        classQueue.addFirst(ifc);
      }
    }
    Map<Class<?>,MatchableConverters> objectConverters=getTargetConvertersForSource(Object.class);
    return getMatchingConverterForTarget(sourceType,targetType,objectConverters);
  }
 else   if (sourceObjectType.isArray()) {
    LinkedList<Class<?>> classQueue=new LinkedList<Class<?>>();
    classQueue.addFirst(sourceObjectType);
    while (!classQueue.isEmpty()) {
      Class<?> currentClass=classQueue.removeLast();
      Map<Class<?>,MatchableConverters> converters=getTargetConvertersForSource(currentClass);
      GenericConverter converter=getMatchingConverterForTarget(sourceType,targetType,converters);
      if (converter != null) {
        return converter;
      }
      Class<?> componentType=ClassUtils.resolvePrimitiveIfNecessary(currentClass.getComponentType());
      if (componentType.getSuperclass() != null) {
        classQueue.addFirst(Array.newInstance(componentType.getSuperclass(),0).getClass());
      }
 else       if (componentType.isInterface()) {
        classQueue.addFirst(Object[].class);
      }
    }
    return null;
  }
 else {
    HashSet<Class<?>> interfaces=new LinkedHashSet<Class<?>>();
    LinkedList<Class<?>> classQueue=new LinkedList<Class<?>>();
    classQueue.addFirst(sourceObjectType);
    while (!classQueue.isEmpty()) {
      Class<?> currentClass=classQueue.removeLast();
      Map<Class<?>,MatchableConverters> converters=getTargetConvertersForSource(currentClass);
      GenericConverter converter=getMatchingConverterForTarget(sourceType,targetType,converters);
      if (converter != null) {
        return converter;
      }
      Class<?> superClass=currentClass.getSuperclass();
      if (superClass != null && superClass != Object.class) {
        classQueue.addFirst(superClass);
      }
      for (      Class<?> interfaceType : currentClass.getInterfaces()) {
        addInterfaceHierarchy(interfaceType,interfaces);
      }
    }
    for (    Class<?> interfaceType : interfaces) {
      Map<Class<?>,MatchableConverters> converters=getTargetConvertersForSource(interfaceType);
      GenericConverter converter=getMatchingConverterForTarget(sourceType,targetType,converters);
      if (converter != null) {
        return converter;
      }
    }
    Map<Class<?>,MatchableConverters> objectConverters=getTargetConvertersForSource(Object.class);
    return getMatchingConverterForTarget(sourceType,targetType,objectConverters);
  }
}
