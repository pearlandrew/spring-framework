{
  if (logger.isDebugEnabled()) {
    logger.debug("Looking for Converter to convert from " + sourceType + " to "+ targetType);
  }
  Class<?> sourceObjectType=sourceType.getObjectType();
  if (sourceObjectType.isInterface()) {
    LinkedList<Class<?>> classQueue=new LinkedList<Class<?>>();
    classQueue.addFirst(sourceObjectType);
    while (!classQueue.isEmpty()) {
      Class<?> currentClass=classQueue.removeLast();
      Map<Class<?>,MatchableConverters> converters=getTargetConvertersForSource(currentClass);
      GenericConverter converter=getMatchingConverterForTarget(sourceType,targetType,converters);
      if (converter != null) {
        return converter;
      }
      Class<?>[] interfaces=currentClass.getInterfaces();
      for (      Class<?> ifc : interfaces) {
        classQueue.addFirst(ifc);
      }
    }
    Map<Class<?>,MatchableConverters> objectConverters=getTargetConvertersForSource(Object.class);
    return getMatchingConverterForTarget(sourceType,targetType,objectConverters);
  }
 else {
    LinkedList<Class<?>> classQueue=new LinkedList<Class<?>>();
    classQueue.addFirst(sourceObjectType);
    while (!classQueue.isEmpty()) {
      Class<?> currentClass=classQueue.removeLast();
      Map<Class<?>,MatchableConverters> converters=getTargetConvertersForSource(currentClass);
      GenericConverter converter=getMatchingConverterForTarget(sourceType,targetType,converters);
      if (converter != null) {
        return converter;
      }
      if (currentClass.isArray()) {
        Class<?> componentType=ClassUtils.resolvePrimitiveIfNecessary(currentClass.getComponentType());
        if (componentType.getSuperclass() != null) {
          classQueue.addFirst(Array.newInstance(componentType.getSuperclass(),0).getClass());
        }
      }
 else {
        Class<?>[] interfaces=currentClass.getInterfaces();
        for (        Class<?> ifc : interfaces) {
          addInterfaceHierarchy(ifc,classQueue);
        }
        if (currentClass.getSuperclass() != null) {
          classQueue.addFirst(currentClass.getSuperclass());
        }
      }
    }
    return null;
  }
}
