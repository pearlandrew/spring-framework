{
  given(userTransaction.getStatus()).willReturn(Status.STATUS_NO_TRANSACTION,Status.STATUS_ACTIVE,Status.STATUS_ACTIVE);
  if (suspendException) {
    given(transactionManager.suspend()).willThrow(new SystemException());
  }
 else {
    given(transactionManager.suspend()).willReturn(transaction);
    willThrow(new SystemException()).given(userTransaction).begin();
  }
  given(connection.isReadOnly()).willReturn(true);
  final DataSource dsToUse=useTransactionAwareDataSource ? new TransactionAwareDataSourceProxy(dataSource) : dataSource;
  if (dsToUse instanceof TransactionAwareDataSourceProxy) {
    ((TransactionAwareDataSourceProxy)dsToUse).setReobtainTransactionalConnections(true);
  }
  JtaTransactionManager ptm=new JtaTransactionManager(userTransaction,transactionManager);
  final TransactionTemplate tt=new TransactionTemplate(ptm);
  tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(dsToUse));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  try {
    tt.execute(new TransactionCallbackWithoutResult(){
      @Override protected void doInTransactionWithoutResult(      TransactionStatus status) throws RuntimeException {
        assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(dsToUse));
        assertTrue("JTA synchronizations active",TransactionSynchronizationManager.isSynchronizationActive());
        assertTrue("Is new transaction",status.isNewTransaction());
        Connection c=DataSourceUtils.getConnection(dsToUse);
        try {
          assertTrue("Has thread connection",TransactionSynchronizationManager.hasResource(dsToUse));
          c.isReadOnly();
          DataSourceUtils.releaseConnection(c,dsToUse);
          c=DataSourceUtils.getConnection(dsToUse);
          assertTrue("Has thread connection",TransactionSynchronizationManager.hasResource(dsToUse));
          if (!openOuterConnection) {
            DataSourceUtils.releaseConnection(c,dsToUse);
          }
        }
 catch (        SQLException ex) {
        }
        try {
          tt.execute(new TransactionCallbackWithoutResult(){
            @Override protected void doInTransactionWithoutResult(            TransactionStatus status) throws RuntimeException {
              assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(dsToUse));
              assertTrue("JTA synchronizations active",TransactionSynchronizationManager.isSynchronizationActive());
              assertTrue("Is new transaction",status.isNewTransaction());
              Connection c=DataSourceUtils.getConnection(dsToUse);
              assertTrue("Has thread connection",TransactionSynchronizationManager.hasResource(dsToUse));
              DataSourceUtils.releaseConnection(c,dsToUse);
              c=DataSourceUtils.getConnection(dsToUse);
              assertTrue("Has thread connection",TransactionSynchronizationManager.hasResource(dsToUse));
              DataSourceUtils.releaseConnection(c,dsToUse);
            }
          }
);
        }
  finally {
          if (openOuterConnection) {
            try {
              c.isReadOnly();
              DataSourceUtils.releaseConnection(c,dsToUse);
            }
 catch (            SQLException ex) {
            }
          }
        }
      }
    }
);
    fail("Should have thrown TransactionException");
  }
 catch (  TransactionException ex) {
  }
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(dsToUse));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  verify(userTransaction).begin();
  if (suspendException) {
    verify(userTransaction).rollback();
  }
  if (suspendException) {
    verify(connection,atLeastOnce()).close();
  }
 else {
    verify(connection,never()).close();
  }
}
