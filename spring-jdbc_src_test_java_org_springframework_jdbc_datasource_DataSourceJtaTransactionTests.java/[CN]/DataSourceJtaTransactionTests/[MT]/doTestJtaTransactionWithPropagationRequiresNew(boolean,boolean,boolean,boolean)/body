{
  given(transactionManager.suspend()).willReturn(transaction);
  if (rollback) {
    given(userTransaction.getStatus()).willReturn(Status.STATUS_NO_TRANSACTION,Status.STATUS_ACTIVE);
  }
 else {
    given(userTransaction.getStatus()).willReturn(Status.STATUS_NO_TRANSACTION,Status.STATUS_ACTIVE,Status.STATUS_ACTIVE);
  }
  given(connection.isReadOnly()).willReturn(true);
  final DataSource dsToUse=useTransactionAwareDataSource ? new TransactionAwareDataSourceProxy(dataSource) : dataSource;
  JtaTransactionManager ptm=new JtaTransactionManager(userTransaction,transactionManager);
  final TransactionTemplate tt=new TransactionTemplate(ptm);
  tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(dsToUse));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  tt.execute(new TransactionCallbackWithoutResult(){
    @Override protected void doInTransactionWithoutResult(    TransactionStatus status) throws RuntimeException {
      assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(dsToUse));
      assertTrue("JTA synchronizations active",TransactionSynchronizationManager.isSynchronizationActive());
      assertTrue("Is new transaction",status.isNewTransaction());
      Connection c=DataSourceUtils.getConnection(dsToUse);
      try {
        assertTrue("Has thread connection",TransactionSynchronizationManager.hasResource(dsToUse));
        c.isReadOnly();
        DataSourceUtils.releaseConnection(c,dsToUse);
        c=DataSourceUtils.getConnection(dsToUse);
        assertTrue("Has thread connection",TransactionSynchronizationManager.hasResource(dsToUse));
        if (!openOuterConnection) {
          DataSourceUtils.releaseConnection(c,dsToUse);
        }
      }
 catch (      SQLException ex) {
      }
      for (int i=0; i < 5; i++) {
        tt.execute(new TransactionCallbackWithoutResult(){
          @Override protected void doInTransactionWithoutResult(          TransactionStatus status) throws RuntimeException {
            assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(dsToUse));
            assertTrue("JTA synchronizations active",TransactionSynchronizationManager.isSynchronizationActive());
            assertTrue("Is new transaction",status.isNewTransaction());
            try {
              Connection c=DataSourceUtils.getConnection(dsToUse);
              c.isReadOnly();
              assertTrue("Has thread connection",TransactionSynchronizationManager.hasResource(dsToUse));
              DataSourceUtils.releaseConnection(c,dsToUse);
              c=DataSourceUtils.getConnection(dsToUse);
              assertTrue("Has thread connection",TransactionSynchronizationManager.hasResource(dsToUse));
              DataSourceUtils.releaseConnection(c,dsToUse);
            }
 catch (            SQLException ex) {
            }
          }
        }
);
      }
      if (rollback) {
        status.setRollbackOnly();
      }
      if (accessAfterResume) {
        try {
          if (!openOuterConnection) {
            c=DataSourceUtils.getConnection(dsToUse);
          }
          assertTrue("Has thread connection",TransactionSynchronizationManager.hasResource(dsToUse));
          c.isReadOnly();
          DataSourceUtils.releaseConnection(c,dsToUse);
          c=DataSourceUtils.getConnection(dsToUse);
          assertTrue("Has thread connection",TransactionSynchronizationManager.hasResource(dsToUse));
          DataSourceUtils.releaseConnection(c,dsToUse);
        }
 catch (        SQLException ex) {
        }
      }
 else {
        if (openOuterConnection) {
          DataSourceUtils.releaseConnection(c,dsToUse);
        }
      }
    }
  }
);
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(dsToUse));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  verify(userTransaction,times(6)).begin();
  verify(transactionManager,times(5)).resume(transaction);
  if (rollback) {
    verify(userTransaction,times(5)).commit();
    verify(userTransaction).rollback();
  }
 else {
    verify(userTransaction,times(6)).commit();
  }
  if (accessAfterResume && !openOuterConnection) {
    verify(connection,times(7)).close();
  }
 else {
    verify(connection,times(6)).close();
  }
}
