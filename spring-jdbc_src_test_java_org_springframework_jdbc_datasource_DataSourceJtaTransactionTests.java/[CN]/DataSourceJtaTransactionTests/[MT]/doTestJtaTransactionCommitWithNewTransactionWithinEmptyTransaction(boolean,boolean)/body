{
  if (notSupported) {
    given(userTransaction.getStatus()).willReturn(Status.STATUS_ACTIVE,Status.STATUS_NO_TRANSACTION,Status.STATUS_ACTIVE,Status.STATUS_ACTIVE);
    given(transactionManager.suspend()).willReturn(transaction);
  }
 else {
    given(userTransaction.getStatus()).willReturn(Status.STATUS_NO_TRANSACTION,Status.STATUS_NO_TRANSACTION,Status.STATUS_ACTIVE,Status.STATUS_ACTIVE);
  }
  final DataSource dataSource=mock(DataSource.class);
  final Connection connection1=mock(Connection.class);
  final Connection connection2=mock(Connection.class);
  given(dataSource.getConnection()).willReturn(connection1,connection2);
  final JtaTransactionManager ptm=new JtaTransactionManager(userTransaction,transactionManager);
  TransactionTemplate tt=new TransactionTemplate(ptm);
  tt.setPropagationBehavior(notSupported ? TransactionDefinition.PROPAGATION_NOT_SUPPORTED : TransactionDefinition.PROPAGATION_SUPPORTS);
  assertFalse(TransactionSynchronizationManager.isSynchronizationActive());
  tt.execute(new TransactionCallbackWithoutResult(){
    @Override protected void doInTransactionWithoutResult(    TransactionStatus status){
      assertTrue(TransactionSynchronizationManager.isSynchronizationActive());
      assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
      assertFalse(TransactionSynchronizationManager.isActualTransactionActive());
      assertSame(connection1,DataSourceUtils.getConnection(dataSource));
      assertSame(connection1,DataSourceUtils.getConnection(dataSource));
      TransactionTemplate tt2=new TransactionTemplate(ptm);
      tt2.setPropagationBehavior(requiresNew ? TransactionDefinition.PROPAGATION_REQUIRES_NEW : TransactionDefinition.PROPAGATION_REQUIRED);
      tt2.execute(new TransactionCallbackWithoutResult(){
        @Override protected void doInTransactionWithoutResult(        TransactionStatus status){
          assertTrue(TransactionSynchronizationManager.isSynchronizationActive());
          assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
          assertTrue(TransactionSynchronizationManager.isActualTransactionActive());
          assertSame(connection2,DataSourceUtils.getConnection(dataSource));
          assertSame(connection2,DataSourceUtils.getConnection(dataSource));
        }
      }
);
      assertTrue(TransactionSynchronizationManager.isSynchronizationActive());
      assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
      assertFalse(TransactionSynchronizationManager.isActualTransactionActive());
      assertSame(connection1,DataSourceUtils.getConnection(dataSource));
    }
  }
);
  assertFalse(TransactionSynchronizationManager.isSynchronizationActive());
  verify(userTransaction).begin();
  verify(userTransaction).commit();
  if (notSupported) {
    verify(transactionManager).resume(transaction);
  }
  verify(connection2).close();
  verify(connection1).close();
}
