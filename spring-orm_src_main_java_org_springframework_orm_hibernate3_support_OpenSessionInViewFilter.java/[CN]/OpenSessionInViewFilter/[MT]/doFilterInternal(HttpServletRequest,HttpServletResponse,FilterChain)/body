{
  SessionFactory sessionFactory=lookupSessionFactory(request);
  boolean participate=false;
  WebAsyncManager asyncManager=AsyncWebUtils.getAsyncManager(request);
  String key=getAlreadyFilteredAttributeName();
  if (isSingleSession()) {
    if (TransactionSynchronizationManager.hasResource(sessionFactory)) {
      participate=true;
    }
 else {
      if (!isAsyncDispatch(request) || !asyncManager.initializeAsyncThread(key)) {
        logger.debug("Opening single Hibernate Session in OpenSessionInViewFilter");
        Session session=getSession(sessionFactory);
        SessionHolder sessionHolder=new SessionHolder(session);
        TransactionSynchronizationManager.bindResource(sessionFactory,sessionHolder);
        WebAsyncThreadInitializer initializer=createAsyncThreadInitializer(sessionFactory,sessionHolder);
        asyncManager.registerAsyncThreadInitializer(key,initializer);
      }
    }
  }
 else {
    Assert.state(isLastRequestThread(request),"Deferred close mode is not supported on async dispatches");
    if (SessionFactoryUtils.isDeferredCloseActive(sessionFactory)) {
      participate=true;
    }
 else {
      SessionFactoryUtils.initDeferredClose(sessionFactory);
    }
  }
  try {
    filterChain.doFilter(request,response);
  }
  finally {
    if (!participate) {
      if (isSingleSession()) {
        SessionHolder sessionHolder=(SessionHolder)TransactionSynchronizationManager.unbindResource(sessionFactory);
        if (isLastRequestThread(request)) {
          logger.debug("Closing single Hibernate Session in OpenSessionInViewFilter");
          closeSession(sessionHolder.getSession(),sessionFactory);
        }
      }
 else {
        SessionFactoryUtils.processDeferredClose(sessionFactory);
      }
    }
  }
}
