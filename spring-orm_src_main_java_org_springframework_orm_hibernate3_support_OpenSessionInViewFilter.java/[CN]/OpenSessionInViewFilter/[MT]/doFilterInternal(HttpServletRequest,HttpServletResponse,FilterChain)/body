{
  AsyncExecutionChain chain=AsyncExecutionChain.getForCurrentRequest(request);
  SessionFactory sessionFactory=lookupSessionFactory(request);
  boolean participate=false;
  if (isSingleSession()) {
    if (TransactionSynchronizationManager.hasResource(sessionFactory)) {
      participate=true;
    }
 else {
      logger.debug("Opening single Hibernate Session in OpenSessionInViewFilter");
      Session session=getSession(sessionFactory);
      SessionHolder sessionHolder=new SessionHolder(session);
      TransactionSynchronizationManager.bindResource(sessionFactory,sessionHolder);
      chain.addDelegatingCallable(getAsyncCallable(request,sessionFactory,sessionHolder));
    }
  }
 else {
    if (SessionFactoryUtils.isDeferredCloseActive(sessionFactory)) {
      participate=true;
    }
 else {
      SessionFactoryUtils.initDeferredClose(sessionFactory);
    }
  }
  try {
    filterChain.doFilter(request,response);
  }
  finally {
    if (!participate) {
      if (isSingleSession()) {
        SessionHolder sessionHolder=(SessionHolder)TransactionSynchronizationManager.unbindResource(sessionFactory);
        if (chain.isAsyncStarted()) {
          return;
        }
        logger.debug("Closing single Hibernate Session in OpenSessionInViewFilter");
        closeSession(sessionHolder.getSession(),sessionFactory);
      }
 else {
        if (chain.isAsyncStarted()) {
          throw new IllegalStateException("Deferred close is not supported with async requests.");
        }
        SessionFactoryUtils.processDeferredClose(sessionFactory);
      }
    }
  }
}
