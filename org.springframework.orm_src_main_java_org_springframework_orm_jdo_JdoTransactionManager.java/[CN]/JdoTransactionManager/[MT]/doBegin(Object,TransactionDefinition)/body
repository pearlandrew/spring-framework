{
  JdoTransactionObject txObject=(JdoTransactionObject)transaction;
  if (txObject.hasConnectionHolder() && !txObject.getConnectionHolder().isSynchronizedWithTransaction()) {
    throw new IllegalTransactionStateException("Pre-bound JDBC Connection found! JdoTransactionManager does not support " + "running within DataSourceTransactionManager if told to manage the DataSource itself. " + "It is recommended to use a single JdoTransactionManager for all transactions "+ "on a single DataSource, no matter whether JDO or JDBC access.");
  }
  PersistenceManager pm=null;
  try {
    if (txObject.getPersistenceManagerHolder() == null || txObject.getPersistenceManagerHolder().isSynchronizedWithTransaction()) {
      PersistenceManager newPm=getPersistenceManagerFactory().getPersistenceManager();
      if (logger.isDebugEnabled()) {
        logger.debug("Opened new PersistenceManager [" + newPm + "] for JDO transaction");
      }
      txObject.setPersistenceManagerHolder(new PersistenceManagerHolder(newPm),true);
    }
    pm=txObject.getPersistenceManagerHolder().getPersistenceManager();
    Object transactionData=getJdoDialect().beginTransaction(pm.currentTransaction(),definition);
    txObject.setTransactionData(transactionData);
    int timeout=determineTimeout(definition);
    if (timeout != TransactionDefinition.TIMEOUT_DEFAULT) {
      txObject.getPersistenceManagerHolder().setTimeoutInSeconds(timeout);
    }
    if (getDataSource() != null) {
      ConnectionHandle conHandle=getJdoDialect().getJdbcConnection(pm,definition.isReadOnly());
      if (conHandle != null) {
        ConnectionHolder conHolder=new ConnectionHolder(conHandle);
        if (timeout != TransactionDefinition.TIMEOUT_DEFAULT) {
          conHolder.setTimeoutInSeconds(timeout);
        }
        if (logger.isDebugEnabled()) {
          logger.debug("Exposing JDO transaction as JDBC transaction [" + conHolder.getConnectionHandle() + "]");
        }
        TransactionSynchronizationManager.bindResource(getDataSource(),conHolder);
        txObject.setConnectionHolder(conHolder);
      }
 else {
        if (logger.isDebugEnabled()) {
          logger.debug("Not exposing JDO transaction [" + pm + "] as JDBC transaction because JdoDialect ["+ getJdoDialect()+ "] does not support JDBC Connection retrieval");
        }
      }
    }
    if (txObject.isNewPersistenceManagerHolder()) {
      TransactionSynchronizationManager.bindResource(getPersistenceManagerFactory(),txObject.getPersistenceManagerHolder());
    }
    txObject.getPersistenceManagerHolder().setSynchronizedWithTransaction(true);
  }
 catch (  TransactionException ex) {
    closePersistenceManagerAfterFailedBegin(txObject);
    throw ex;
  }
catch (  Exception ex) {
    closePersistenceManagerAfterFailedBegin(txObject);
    throw new CannotCreateTransactionException("Could not open JDO PersistenceManager for transaction",ex);
  }
}
