{
  StringBuilder result=new StringBuilder("[\n");
  for (Iterator<ConfigurableApplicationContext> it=contexts.iterator(); it.hasNext(); ) {
    ConfigurableApplicationContext context=it.next();
    result.append("{\n\"context\": \"").append(context.getId()).append("\",\n");
    if (context.getParent() != null) {
      result.append("\"parent\": \"").append(context.getParent().getId()).append("\",\n");
    }
 else {
      result.append("\"parent\": null,\n");
    }
    result.append("\"beans\": [\n");
    ConfigurableListableBeanFactory bf=context.getBeanFactory();
    String[] beanNames=bf.getBeanDefinitionNames();
    boolean elementAppended=false;
    for (    String beanName : beanNames) {
      BeanDefinition bd=bf.getBeanDefinition(beanName);
      if (isBeanEligible(beanName,bd,bf)) {
        if (elementAppended) {
          result.append(",\n");
        }
        result.append("{\n\"bean\": \"").append(beanName).append("\",\n");
        result.append("\"aliases\": ");
        appendArray(result,bf.getAliases(beanName));
        result.append(",\n");
        String scope=bd.getScope();
        if (!StringUtils.hasText(scope)) {
          scope=BeanDefinition.SCOPE_SINGLETON;
        }
        result.append("\"scope\": \"").append(scope).append("\",\n");
        Class<?> beanType=bf.getType(beanName);
        if (beanType != null) {
          result.append("\"type\": \"").append(beanType.getName()).append("\",\n");
        }
 else {
          result.append("\"type\": null,\n");
        }
        result.append("\"resource\": \"").append(getEscapedResourceDescription(bd)).append("\",\n");
        result.append("\"dependencies\": ");
        appendArray(result,bf.getDependenciesForBean(beanName));
        result.append("\n}");
        elementAppended=true;
      }
    }
    result.append("]\n");
    result.append("}");
    if (it.hasNext()) {
      result.append(",\n");
    }
  }
  result.append("]");
  return result.toString();
}
