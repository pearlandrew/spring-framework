{
  AnnotationAsyncExecutionInterceptor i=new AnnotationAsyncExecutionInterceptor(null);
{
class C {
      @Async("qMethod") void m(){
      }
    }
    assertThat(i.getExecutorQualifier(C.class.getDeclaredMethod("m")),is("qMethod"));
  }
{
@Async("qClass") class C {
      void m(){
      }
    }
    assertThat(i.getExecutorQualifier(C.class.getDeclaredMethod("m")),is("qClass"));
  }
{
@Async("qClass") class C {
      @Async("qMethod") void m(){
      }
    }
    assertThat(i.getExecutorQualifier(C.class.getDeclaredMethod("m")),is("qMethod"));
  }
{
@Async("qClass") class C {
      @Async void m(){
      }
    }
    assertThat(i.getExecutorQualifier(C.class.getDeclaredMethod("m")),is(""));
  }
{
@MyAsync class C {
      void m(){
      }
    }
    assertThat(i.getExecutorQualifier(C.class.getDeclaredMethod("m")),is("qMeta"));
  }
}
