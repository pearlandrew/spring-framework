{
  Set<BeanDefinitionHolder> configCandidates=new LinkedHashSet<BeanDefinitionHolder>();
  for (  String beanName : registry.getBeanDefinitionNames()) {
    BeanDefinition beanDef=registry.getBeanDefinition(beanName);
    if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef,this.metadataReaderFactory)) {
      configCandidates.add(new BeanDefinitionHolder(beanDef,beanName));
    }
  }
  if (configCandidates.isEmpty()) {
    return;
  }
  ConfigurationClassParser parser=new ConfigurationClassParser(this.metadataReaderFactory,this.problemReporter,this.environment,this.resourceLoader,registry);
  for (  BeanDefinitionHolder holder : configCandidates) {
    BeanDefinition bd=holder.getBeanDefinition();
    try {
      if (bd instanceof AbstractBeanDefinition && ((AbstractBeanDefinition)bd).hasBeanClass()) {
        parser.parse(((AbstractBeanDefinition)bd).getBeanClass(),holder.getBeanName());
      }
 else {
        parser.parse(bd.getBeanClassName(),holder.getBeanName());
      }
    }
 catch (    IOException ex) {
      throw new BeanDefinitionStoreException("Failed to load bean class: " + bd.getBeanClassName(),ex);
    }
  }
  parser.validate();
  Stack<PropertySource<?>> parsedPropertySources=parser.getPropertySources();
  if (!parsedPropertySources.isEmpty()) {
    if (!(this.environment instanceof ConfigurableEnvironment)) {
      logger.warn("Ignoring @PropertySource annotations. " + "Reason: Environment must implement ConfigurableEnvironment");
    }
 else {
      MutablePropertySources envPropertySources=((ConfigurableEnvironment)this.environment).getPropertySources();
      while (!parsedPropertySources.isEmpty()) {
        envPropertySources.addLast(parsedPropertySources.pop());
      }
    }
  }
  this.getConfigurationClassBeanDefinitionReader(registry).loadBeanDefinitions(parser.getConfigurationClasses());
  if (registry instanceof SingletonBeanRegistry) {
    if (!((SingletonBeanRegistry)registry).containsSingleton("importRegistry")) {
      ((SingletonBeanRegistry)registry).registerSingleton("importRegistry",parser.getImportRegistry());
    }
  }
}
