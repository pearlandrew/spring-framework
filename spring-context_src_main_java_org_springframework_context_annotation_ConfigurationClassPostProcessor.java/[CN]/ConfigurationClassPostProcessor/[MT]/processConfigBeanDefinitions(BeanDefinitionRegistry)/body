{
  Set<BeanDefinitionHolder> configCandidates=new LinkedHashSet<BeanDefinitionHolder>();
  for (  String beanName : registry.getBeanDefinitionNames()) {
    BeanDefinition beanDef=registry.getBeanDefinition(beanName);
    if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef,this.metadataReaderFactory)) {
      configCandidates.add(new BeanDefinitionHolder(beanDef,beanName));
    }
  }
  if (configCandidates.isEmpty()) {
    return;
  }
  SingletonBeanRegistry singletonRegistry=null;
  if (registry instanceof SingletonBeanRegistry) {
    singletonRegistry=(SingletonBeanRegistry)registry;
    if (!this.localBeanNameGeneratorSet && singletonRegistry.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {
      BeanNameGenerator generator=(BeanNameGenerator)singletonRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR);
      this.componentScanBeanNameGenerator=generator;
      this.importBeanNameGenerator=generator;
    }
  }
  ConfigurationClassParser parser=new ConfigurationClassParser(this.metadataReaderFactory,this.problemReporter,this.environment,this.resourceLoader,this.componentScanBeanNameGenerator,registry);
  parser.parse(configCandidates);
  parser.validate();
  List<PropertySource<?>> parsedPropertySources=parser.getPropertySources();
  if (!parsedPropertySources.isEmpty()) {
    if (!(this.environment instanceof ConfigurableEnvironment)) {
      logger.warn("Ignoring @PropertySource annotations. " + "Reason: Environment must implement ConfigurableEnvironment");
    }
 else {
      MutablePropertySources envPropertySources=((ConfigurableEnvironment)this.environment).getPropertySources();
      for (      PropertySource<?> propertySource : parsedPropertySources) {
        envPropertySources.addLast(propertySource);
      }
    }
  }
  if (this.reader == null) {
    this.reader=new ConfigurationClassBeanDefinitionReader(registry,this.sourceExtractor,this.problemReporter,this.metadataReaderFactory,this.resourceLoader,this.environment,this.importBeanNameGenerator);
  }
  reader.loadBeanDefinitions(parser.getConfigurationClasses());
  if (singletonRegistry != null) {
    if (!singletonRegistry.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {
      singletonRegistry.registerSingleton(IMPORT_REGISTRY_BEAN_NAME,parser.getImportRegistry());
    }
  }
  if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {
    ((CachingMetadataReaderFactory)this.metadataReaderFactory).clearCache();
  }
}
