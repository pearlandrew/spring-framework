{
  Map<String,AbstractBeanDefinition> configBeanDefs=new LinkedHashMap<String,AbstractBeanDefinition>();
  for (  String beanName : beanFactory.getBeanDefinitionNames()) {
    BeanDefinition beanDef=beanFactory.getBeanDefinition(beanName);
    if (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) {
      if (!(beanDef instanceof AbstractBeanDefinition)) {
        throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" + beanName + "' since it is not stored in an AbstractBeanDefinition subclass");
      }
      configBeanDefs.put(beanName,(AbstractBeanDefinition)beanDef);
    }
  }
  if (configBeanDefs.isEmpty()) {
    return;
  }
  ConfigurationClassEnhancer enhancer=new ConfigurationClassEnhancer(beanFactory);
  for (  Map.Entry<String,AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {
    AbstractBeanDefinition beanDef=entry.getValue();
    try {
      Class<?> configClass=beanDef.resolveBeanClass(this.beanClassLoader);
      Class<?> enhancedClass=enhancer.enhance(configClass);
      if (configClass != enhancedClass) {
        if (logger.isDebugEnabled()) {
          logger.debug(String.format("Replacing bean definition '%s' existing class name '%s' " + "with enhanced class name '%s'",entry.getKey(),configClass.getName(),enhancedClass.getName()));
        }
        beanDef.setBeanClass(enhancedClass);
      }
    }
 catch (    Throwable ex) {
      throw new IllegalStateException("Cannot load configuration class: " + beanDef.getBeanClassName(),ex);
    }
  }
}
