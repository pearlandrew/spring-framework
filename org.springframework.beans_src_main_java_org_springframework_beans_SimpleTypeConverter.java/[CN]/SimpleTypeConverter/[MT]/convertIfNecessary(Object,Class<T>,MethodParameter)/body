{
  try {
    return this.typeConverterDelegate.convertIfNecessary(value,requiredType,methodParam);
  }
 catch (  ConverterNotFoundException ex) {
    throw new ConversionNotSupportedException(value,requiredType,ex);
  }
catch (  ConversionException ex) {
    throw new TypeMismatchException(value,requiredType,ex);
  }
catch (  IllegalStateException ex) {
    throw new ConversionNotSupportedException(value,requiredType,ex);
  }
catch (  IllegalArgumentException ex) {
    throw new TypeMismatchException(value,requiredType,ex);
  }
}
