{
  given(con.getAutoCommit()).willReturn(true);
  final TransactionTemplate tt=new TransactionTemplate(tm);
  tt.setPropagationBehavior(TransactionTemplate.PROPAGATION_REQUIRES_NEW);
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(ds));
  tt.execute(new TransactionCallbackWithoutResult(){
    @Override protected void doInTransactionWithoutResult(    TransactionStatus status){
      assertEquals(con,DataSourceUtils.getConnection(ds));
      final TransactionAwareDataSourceProxy dsProxy=new TransactionAwareDataSourceProxy(ds);
      dsProxy.setReobtainTransactionalConnections(true);
      try {
        assertEquals(con,((ConnectionProxy)dsProxy.getConnection()).getTargetConnection());
        assertEquals(con,new SimpleNativeJdbcExtractor().getNativeConnection(dsProxy.getConnection()));
        dsProxy.getConnection().close();
      }
 catch (      SQLException ex) {
        throw new UncategorizedSQLException("","",ex);
      }
      tt.execute(new TransactionCallbackWithoutResult(){
        @Override protected void doInTransactionWithoutResult(        TransactionStatus status){
          assertEquals(con,DataSourceUtils.getConnection(ds));
          try {
            assertEquals(con,((ConnectionProxy)dsProxy.getConnection()).getTargetConnection());
            assertEquals(con,new SimpleNativeJdbcExtractor().getNativeConnection(dsProxy.getConnection()));
            dsProxy.getConnection().close();
          }
 catch (          SQLException ex) {
            throw new UncategorizedSQLException("","",ex);
          }
        }
      }
);
      try {
        assertEquals(con,((ConnectionProxy)dsProxy.getConnection()).getTargetConnection());
        dsProxy.getConnection().close();
      }
 catch (      SQLException ex) {
        throw new UncategorizedSQLException("","",ex);
      }
    }
  }
);
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(ds));
  InOrder ordered=inOrder(con);
  ordered.verify(con).setAutoCommit(false);
  ordered.verify(con).commit();
  ordered.verify(con).setAutoCommit(true);
  verify(con,times(2)).close();
}
