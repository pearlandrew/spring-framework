{
  tm.setTransactionSynchronization(DataSourceTransactionManager.SYNCHRONIZATION_NEVER);
  DataSourceTransactionManager tm2=new DataSourceTransactionManager(ds);
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(ds));
  assertTrue("Synchronization not active",!TransactionSynchronizationManager.isSynchronizationActive());
  TransactionStatus ts=tm.getTransaction(new DefaultTransactionDefinition());
  final TestTransactionSynchronization synch=new TestTransactionSynchronization(ds,TransactionSynchronization.STATUS_UNKNOWN);
  try {
    assertTrue("Is new transaction",ts.isNewTransaction());
    final TransactionTemplate tt=new TransactionTemplate(tm2);
    tt.execute(new TransactionCallbackWithoutResult(){
      @Override protected void doInTransactionWithoutResult(      TransactionStatus status) throws RuntimeException {
        assertTrue("Is existing transaction",!status.isNewTransaction());
        assertFalse("Is not rollback-only",status.isRollbackOnly());
        tt.execute(new TransactionCallbackWithoutResult(){
          @Override protected void doInTransactionWithoutResult(          TransactionStatus status) throws RuntimeException {
            assertTrue("Has thread connection",TransactionSynchronizationManager.hasResource(ds));
            assertTrue("Synchronization active",TransactionSynchronizationManager.isSynchronizationActive());
            assertTrue("Is existing transaction",!status.isNewTransaction());
            status.setRollbackOnly();
          }
        }
);
        assertTrue("Is existing transaction",!status.isNewTransaction());
        assertTrue("Is rollback-only",status.isRollbackOnly());
        TransactionSynchronizationManager.registerSynchronization(synch);
      }
    }
);
    tm.commit(ts);
    fail("Should have thrown UnexpectedRollbackException");
  }
 catch (  UnexpectedRollbackException ex) {
  }
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(ds));
  assertFalse(synch.beforeCommitCalled);
  assertTrue(synch.beforeCompletionCalled);
  assertFalse(synch.afterCommitCalled);
  assertTrue(synch.afterCompletionCalled);
  verify(con).rollback();
  verify(con).close();
}
