{
  MockControl conControl=MockControl.createControl(Connection.class);
  Connection con=(Connection)conControl.getMock();
  con.getAutoCommit();
  conControl.setReturnValue(false,1);
  con.commit();
  conControl.setVoidCallable(1);
  con.isReadOnly();
  conControl.setReturnValue(false,1);
  con.close();
  conControl.setVoidCallable(1);
  MockControl dsControl=MockControl.createControl(DataSource.class);
  final DataSource ds=(DataSource)dsControl.getMock();
  ds.getConnection();
  dsControl.setReturnValue(con,1);
  conControl.replay();
  dsControl.replay();
  PlatformTransactionManager tm=new DataSourceTransactionManager(ds);
  final TransactionTemplate tt=new TransactionTemplate(tm);
  tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(ds));
  assertTrue("Synchronization not active",!TransactionSynchronizationManager.isSynchronizationActive());
  tt.execute(new TransactionCallbackWithoutResult(){
    @Override protected void doInTransactionWithoutResult(    TransactionStatus status) throws RuntimeException {
      assertTrue("Is new transaction",status.isNewTransaction());
      assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
      assertTrue(TransactionSynchronizationManager.isActualTransactionActive());
      tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_NOT_SUPPORTED);
      tt.execute(new TransactionCallbackWithoutResult(){
        @Override protected void doInTransactionWithoutResult(        TransactionStatus status) throws RuntimeException {
          assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(ds));
          assertTrue("Synchronization active",TransactionSynchronizationManager.isSynchronizationActive());
          assertTrue("Isn't new transaction",!status.isNewTransaction());
          assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
          assertFalse(TransactionSynchronizationManager.isActualTransactionActive());
          status.setRollbackOnly();
        }
      }
);
      assertTrue("Is new transaction",status.isNewTransaction());
      assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
      assertTrue(TransactionSynchronizationManager.isActualTransactionActive());
    }
  }
);
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(ds));
  conControl.verify();
  dsControl.verify();
}
