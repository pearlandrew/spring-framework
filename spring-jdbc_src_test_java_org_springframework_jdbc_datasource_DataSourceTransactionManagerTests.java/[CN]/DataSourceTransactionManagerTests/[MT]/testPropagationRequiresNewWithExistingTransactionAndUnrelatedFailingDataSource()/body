{
  MockControl conControl=MockControl.createControl(Connection.class);
  Connection con=(Connection)conControl.getMock();
  con.getAutoCommit();
  conControl.setReturnValue(false,1);
  con.rollback();
  conControl.setVoidCallable(1);
  con.isReadOnly();
  conControl.setReturnValue(false,1);
  con.close();
  conControl.setVoidCallable(1);
  MockControl dsControl=MockControl.createControl(DataSource.class);
  final DataSource ds=(DataSource)dsControl.getMock();
  ds.getConnection();
  dsControl.setReturnValue(con,1);
  conControl.replay();
  dsControl.replay();
  MockControl ds2Control=MockControl.createControl(DataSource.class);
  final DataSource ds2=(DataSource)ds2Control.getMock();
  SQLException failure=new SQLException();
  ds2.getConnection();
  ds2Control.setThrowable(failure);
  ds2Control.replay();
  DataSourceTransactionManager tm=new DataSourceTransactionManager(ds);
  final TransactionTemplate tt=new TransactionTemplate(tm);
  tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);
  DataSourceTransactionManager tm2=new DataSourceTransactionManager(ds2);
  tm2.setTransactionSynchronization(DataSourceTransactionManager.SYNCHRONIZATION_NEVER);
  final TransactionTemplate tt2=new TransactionTemplate(tm2);
  tt2.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(ds));
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(ds2));
  assertTrue("Synchronization not active",!TransactionSynchronizationManager.isSynchronizationActive());
  try {
    tt.execute(new TransactionCallbackWithoutResult(){
      @Override protected void doInTransactionWithoutResult(      TransactionStatus status) throws RuntimeException {
        assertTrue("Is new transaction",status.isNewTransaction());
        assertTrue("Synchronization active",TransactionSynchronizationManager.isSynchronizationActive());
        assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
        assertTrue(TransactionSynchronizationManager.isActualTransactionActive());
        tt2.execute(new TransactionCallbackWithoutResult(){
          @Override protected void doInTransactionWithoutResult(          TransactionStatus status) throws RuntimeException {
            status.setRollbackOnly();
          }
        }
);
      }
    }
);
    fail("Should have thrown CannotCreateTransactionException");
  }
 catch (  CannotCreateTransactionException ex) {
    assertSame(failure,ex.getCause());
  }
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(ds));
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(ds2));
  conControl.verify();
  dsControl.verify();
  ds2Control.verify();
}
