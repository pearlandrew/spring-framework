{
  MockControl conControl=MockControl.createControl(Connection.class);
  Connection con=(Connection)conControl.getMock();
  MockControl dsControl=MockControl.createControl(DataSource.class);
  final DataSource ds=(DataSource)dsControl.getMock();
  conControl.replay();
  dsControl.replay();
  DataSourceTransactionManager tm=new DataSourceTransactionManager(ds);
  tm.setTransactionSynchronization(DataSourceTransactionManager.SYNCHRONIZATION_NEVER);
  TransactionTemplate tt=new TransactionTemplate(tm);
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(ds));
  assertTrue("Synchronization not active",!TransactionSynchronizationManager.isSynchronizationActive());
  ConnectionHolder conHolder=new ConnectionHolder(con);
  conHolder.setTransactionActive(true);
  TransactionSynchronizationManager.bindResource(ds,conHolder);
  final RuntimeException ex=new RuntimeException("Application exception");
  try {
    tt.execute(new TransactionCallbackWithoutResult(){
      protected void doInTransactionWithoutResult(      TransactionStatus status) throws RuntimeException {
        assertTrue("Has thread connection",TransactionSynchronizationManager.hasResource(ds));
        assertTrue("Synchronization not active",!TransactionSynchronizationManager.isSynchronizationActive());
        assertTrue("Is existing transaction",!status.isNewTransaction());
        throw ex;
      }
    }
);
    fail("Should have thrown RuntimeException");
  }
 catch (  RuntimeException ex2) {
    assertTrue("Synchronization not active",!TransactionSynchronizationManager.isSynchronizationActive());
    assertEquals("Correct exception thrown",ex,ex2);
  }
 finally {
    TransactionSynchronizationManager.unbindResource(ds);
  }
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(ds));
  conControl.verify();
  dsControl.verify();
}
