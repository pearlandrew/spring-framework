{
  MockControl dsControl=MockControl.createControl(DataSource.class);
  DataSource ds=(DataSource)dsControl.getMock();
  MockControl conControl=MockControl.createControl(Connection.class);
  Connection con=(Connection)conControl.getMock();
  if (lazyConnection) {
    ds.getConnection();
    dsControl.setReturnValue(con,1);
    con.getAutoCommit();
    conControl.setReturnValue(autoCommit,1);
    con.getTransactionIsolation();
    conControl.setReturnValue(Connection.TRANSACTION_READ_COMMITTED,1);
    con.close();
    conControl.setVoidCallable(1);
  }
  if (!lazyConnection || createStatement) {
    ds.getConnection();
    dsControl.setReturnValue(con,1);
    con.getAutoCommit();
    conControl.setReturnValue(autoCommit,1);
    if (autoCommit) {
      con.setAutoCommit(false);
      conControl.setVoidCallable(1);
    }
    if (createStatement) {
      con.createStatement();
      conControl.setReturnValue(null,1);
    }
    con.rollback();
    conControl.setVoidCallable(1);
    con.isReadOnly();
    conControl.setReturnValue(false,1);
    if (autoCommit) {
      con.setAutoCommit(true);
      conControl.setVoidCallable(1);
    }
    con.close();
    conControl.setVoidCallable(1);
  }
  conControl.replay();
  dsControl.replay();
  final DataSource dsToUse=(lazyConnection ? new LazyConnectionDataSourceProxy(ds) : ds);
  PlatformTransactionManager tm=new DataSourceTransactionManager(dsToUse);
  TransactionTemplate tt=new TransactionTemplate(tm);
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(dsToUse));
  assertTrue("Synchronization not active",!TransactionSynchronizationManager.isSynchronizationActive());
  final RuntimeException ex=new RuntimeException("Application exception");
  try {
    tt.execute(new TransactionCallbackWithoutResult(){
      @Override protected void doInTransactionWithoutResult(      TransactionStatus status) throws RuntimeException {
        assertTrue("Has thread connection",TransactionSynchronizationManager.hasResource(dsToUse));
        assertTrue("Synchronization active",TransactionSynchronizationManager.isSynchronizationActive());
        assertTrue("Is new transaction",status.isNewTransaction());
        Connection con=DataSourceUtils.getConnection(dsToUse);
        if (createStatement) {
          try {
            con.createStatement();
          }
 catch (          SQLException ex) {
            throw new UncategorizedSQLException("","",ex);
          }
        }
        throw ex;
      }
    }
);
    fail("Should have thrown RuntimeException");
  }
 catch (  RuntimeException ex2) {
    assertTrue("Correct exception thrown",ex2.equals(ex));
  }
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(ds));
  assertTrue("Synchronization not active",!TransactionSynchronizationManager.isSynchronizationActive());
  conControl.verify();
  dsControl.verify();
}
