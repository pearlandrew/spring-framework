{
  if (lazyConnection) {
    given(con.getAutoCommit()).willReturn(autoCommit);
    given(con.getTransactionIsolation()).willReturn(Connection.TRANSACTION_READ_COMMITTED);
  }
  if (!lazyConnection || createStatement) {
    given(con.getAutoCommit()).willReturn(autoCommit);
  }
  final DataSource dsToUse=(lazyConnection ? new LazyConnectionDataSourceProxy(ds) : ds);
  tm=new DataSourceTransactionManager(dsToUse);
  TransactionTemplate tt=new TransactionTemplate(tm);
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(dsToUse));
  assertTrue("Synchronization not active",!TransactionSynchronizationManager.isSynchronizationActive());
  final RuntimeException ex=new RuntimeException("Application exception");
  try {
    tt.execute(new TransactionCallbackWithoutResult(){
      @Override protected void doInTransactionWithoutResult(      TransactionStatus status) throws RuntimeException {
        assertTrue("Has thread connection",TransactionSynchronizationManager.hasResource(dsToUse));
        assertTrue("Synchronization active",TransactionSynchronizationManager.isSynchronizationActive());
        assertTrue("Is new transaction",status.isNewTransaction());
        Connection con=DataSourceUtils.getConnection(dsToUse);
        if (createStatement) {
          try {
            con.createStatement();
          }
 catch (          SQLException ex) {
            throw new UncategorizedSQLException("","",ex);
          }
        }
        throw ex;
      }
    }
);
    fail("Should have thrown RuntimeException");
  }
 catch (  RuntimeException ex2) {
    assertTrue("Correct exception thrown",ex2.equals(ex));
  }
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(ds));
  assertTrue("Synchronization not active",!TransactionSynchronizationManager.isSynchronizationActive());
  if (autoCommit && (!lazyConnection || createStatement)) {
    InOrder ordered=inOrder(con);
    ordered.verify(con).setAutoCommit(false);
    ordered.verify(con).rollback();
    ordered.verify(con).setAutoCommit(true);
  }
  if (createStatement) {
    verify(con,times(2)).close();
  }
 else {
    verify(con).close();
  }
}
