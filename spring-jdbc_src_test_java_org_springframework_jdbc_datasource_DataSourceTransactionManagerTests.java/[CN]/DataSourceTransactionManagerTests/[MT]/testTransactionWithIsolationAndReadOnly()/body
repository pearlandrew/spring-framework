{
  MockControl dsControl=MockControl.createControl(DataSource.class);
  DataSource ds=(DataSource)dsControl.getMock();
  MockControl conControl=MockControl.createControl(Connection.class);
  final Connection con=(Connection)conControl.getMock();
  ds.getConnection();
  dsControl.setReturnValue(con,1);
  con.getTransactionIsolation();
  conControl.setReturnValue(Connection.TRANSACTION_READ_COMMITTED,1);
  con.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
  conControl.setVoidCallable(1);
  con.setReadOnly(true);
  conControl.setVoidCallable(1);
  con.getAutoCommit();
  conControl.setReturnValue(true,1);
  con.setAutoCommit(false);
  conControl.setVoidCallable(1);
  con.commit();
  conControl.setVoidCallable(1);
  con.setAutoCommit(true);
  conControl.setVoidCallable(1);
  con.isReadOnly();
  conControl.setReturnValue(false,1);
  con.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
  conControl.setVoidCallable(1);
  con.close();
  conControl.setVoidCallable(1);
  conControl.replay();
  dsControl.replay();
  PlatformTransactionManager tm=new DataSourceTransactionManager(ds);
  TransactionTemplate tt=new TransactionTemplate(tm);
  tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);
  tt.setIsolationLevel(TransactionDefinition.ISOLATION_SERIALIZABLE);
  tt.setReadOnly(true);
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(ds));
  tt.execute(new TransactionCallbackWithoutResult(){
    @Override protected void doInTransactionWithoutResult(    TransactionStatus status){
      assertTrue(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
      assertTrue(TransactionSynchronizationManager.isActualTransactionActive());
    }
  }
);
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(ds));
  conControl.verify();
  dsControl.verify();
}
