{
  given(con.isReadOnly()).willReturn(false);
  if (failEarly) {
    tm.setFailEarlyOnGlobalRollbackOnly(true);
  }
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(ds));
  assertTrue("Synchronization not active",!TransactionSynchronizationManager.isSynchronizationActive());
  TransactionStatus ts=tm.getTransaction(new DefaultTransactionDefinition());
  TestTransactionSynchronization synch=new TestTransactionSynchronization(ds,TransactionSynchronization.STATUS_ROLLED_BACK);
  TransactionSynchronizationManager.registerSynchronization(synch);
  boolean outerTransactionBoundaryReached=false;
  try {
    assertTrue("Is new transaction",ts.isNewTransaction());
    final TransactionTemplate tt=new TransactionTemplate(tm);
    tt.execute(new TransactionCallbackWithoutResult(){
      @Override protected void doInTransactionWithoutResult(      TransactionStatus status) throws RuntimeException {
        assertTrue("Is existing transaction",!status.isNewTransaction());
        assertFalse("Is not rollback-only",status.isRollbackOnly());
        tt.execute(new TransactionCallbackWithoutResult(){
          @Override protected void doInTransactionWithoutResult(          TransactionStatus status) throws RuntimeException {
            assertTrue("Has thread connection",TransactionSynchronizationManager.hasResource(ds));
            assertTrue("Synchronization active",TransactionSynchronizationManager.isSynchronizationActive());
            assertTrue("Is existing transaction",!status.isNewTransaction());
            status.setRollbackOnly();
          }
        }
);
        assertTrue("Is existing transaction",!status.isNewTransaction());
        assertTrue("Is rollback-only",status.isRollbackOnly());
      }
    }
);
    outerTransactionBoundaryReached=true;
    tm.commit(ts);
    fail("Should have thrown UnexpectedRollbackException");
  }
 catch (  UnexpectedRollbackException ex) {
    if (!outerTransactionBoundaryReached) {
      tm.rollback(ts);
    }
    if (failEarly) {
      assertFalse(outerTransactionBoundaryReached);
    }
 else {
      assertTrue(outerTransactionBoundaryReached);
    }
  }
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(ds));
  assertFalse(synch.beforeCommitCalled);
  assertTrue(synch.beforeCompletionCalled);
  assertFalse(synch.afterCommitCalled);
  assertTrue(synch.afterCompletionCalled);
  verify(con).rollback();
  verify(con).close();
}
