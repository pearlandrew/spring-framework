{
  PreparedStatement ps=mock(PreparedStatement.class);
  given(con.getAutoCommit()).willReturn(true);
  given(con.prepareStatement("some SQL statement")).willReturn(ps);
  TransactionTemplate tt=new TransactionTemplate(tm);
  tt.setTimeout(timeout);
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(ds));
  try {
    tt.execute(new TransactionCallbackWithoutResult(){
      @Override protected void doInTransactionWithoutResult(      TransactionStatus status){
        try {
          Thread.sleep(1500);
        }
 catch (        InterruptedException ex) {
        }
        try {
          Connection con=DataSourceUtils.getConnection(ds);
          PreparedStatement ps=con.prepareStatement("some SQL statement");
          DataSourceUtils.applyTransactionTimeout(ps,ds);
        }
 catch (        SQLException ex) {
          throw new DataAccessResourceFailureException("",ex);
        }
      }
    }
);
    if (timeout <= 1) {
      fail("Should have thrown TransactionTimedOutException");
    }
  }
 catch (  TransactionTimedOutException ex) {
    if (timeout <= 1) {
    }
 else {
      throw ex;
    }
  }
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(ds));
  if (timeout > 1) {
    verify(ps).setQueryTimeout(timeout - 1);
    verify(con).commit();
  }
 else {
    verify(con).rollback();
  }
  InOrder ordered=inOrder(con);
  ordered.verify(con).setAutoCommit(false);
  ordered.verify(con).setAutoCommit(true);
  verify(con).close();
}
