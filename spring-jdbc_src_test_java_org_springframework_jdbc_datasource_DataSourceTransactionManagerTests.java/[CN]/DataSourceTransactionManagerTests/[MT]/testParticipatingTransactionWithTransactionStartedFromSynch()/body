{
  MockControl conControl=MockControl.createControl(Connection.class);
  Connection con=(Connection)conControl.getMock();
  con.getAutoCommit();
  conControl.setReturnValue(false,2);
  con.commit();
  conControl.setVoidCallable(2);
  con.isReadOnly();
  conControl.setReturnValue(false,2);
  con.close();
  conControl.setVoidCallable(2);
  MockControl dsControl=MockControl.createControl(DataSource.class);
  final DataSource ds=(DataSource)dsControl.getMock();
  ds.getConnection();
  dsControl.setReturnValue(con,2);
  conControl.replay();
  dsControl.replay();
  DataSourceTransactionManager tm=new DataSourceTransactionManager(ds);
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(ds));
  assertTrue("Synchronization not active",!TransactionSynchronizationManager.isSynchronizationActive());
  final TransactionTemplate tt=new TransactionTemplate(tm);
  tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);
  final TestTransactionSynchronization synch=new TestTransactionSynchronization(ds,TransactionSynchronization.STATUS_COMMITTED){
    @Override public void afterCompletion(    int status){
      super.afterCompletion(status);
      tt.execute(new TransactionCallbackWithoutResult(){
        @Override protected void doInTransactionWithoutResult(        TransactionStatus status) throws RuntimeException {
        }
      }
);
    }
  }
;
  tt.execute(new TransactionCallbackWithoutResult(){
    @Override protected void doInTransactionWithoutResult(    TransactionStatus status) throws RuntimeException {
      TransactionSynchronizationManager.registerSynchronization(synch);
    }
  }
);
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(ds));
  assertTrue(synch.beforeCommitCalled);
  assertTrue(synch.beforeCompletionCalled);
  assertTrue(synch.afterCommitCalled);
  assertTrue(synch.afterCompletionCalled);
  conControl.verify();
  dsControl.verify();
}
