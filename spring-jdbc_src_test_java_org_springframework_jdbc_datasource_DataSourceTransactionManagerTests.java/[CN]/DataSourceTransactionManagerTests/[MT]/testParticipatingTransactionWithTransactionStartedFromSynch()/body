{
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(ds));
  assertTrue("Synchronization not active",!TransactionSynchronizationManager.isSynchronizationActive());
  final TransactionTemplate tt=new TransactionTemplate(tm);
  tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);
  final TestTransactionSynchronization synch=new TestTransactionSynchronization(ds,TransactionSynchronization.STATUS_COMMITTED){
    @Override public void afterCompletion(    int status){
      super.afterCompletion(status);
      tt.execute(new TransactionCallbackWithoutResult(){
        @Override protected void doInTransactionWithoutResult(        TransactionStatus status) throws RuntimeException {
        }
      }
);
    }
  }
;
  tt.execute(new TransactionCallbackWithoutResult(){
    @Override protected void doInTransactionWithoutResult(    TransactionStatus status) throws RuntimeException {
      TransactionSynchronizationManager.registerSynchronization(synch);
    }
  }
);
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(ds));
  assertTrue(synch.beforeCommitCalled);
  assertTrue(synch.beforeCompletionCalled);
  assertTrue(synch.afterCommitCalled);
  assertTrue(synch.afterCompletionCalled);
  verify(con,times(2)).commit();
  verify(con,times(2)).close();
}
