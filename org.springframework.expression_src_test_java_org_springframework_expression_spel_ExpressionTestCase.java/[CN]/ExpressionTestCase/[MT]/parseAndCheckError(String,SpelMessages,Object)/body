{
  try {
    Expression expr=parser.parseExpression(expression);
    SpelUtilities.printAbstractSyntaxTree(System.out,expr);
    fail("Parsing should have failed!");
  }
 catch (  ParseException pe) {
    Throwable t=pe.getCause();
    if (t == null) {
      fail("ParseException caught with no defined cause");
    }
    if (!(t instanceof SpelException)) {
      t.printStackTrace();
      fail("Cause of parse exception is not a SpelException");
    }
    SpelException ex=(SpelException)t;
    if (ex.getMessageUnformatted() != expectedMessage) {
      System.out.println(ex.getMessage());
      ex.printStackTrace();
      assertEquals("Failed to get expected message",expectedMessage,ex.getMessageUnformatted());
    }
    if (otherProperties != null && otherProperties.length != 0) {
      int pos=((Integer)otherProperties[0]).intValue();
      assertEquals("Did not get correct position reported in error ",pos,ex.getPosition());
      if (otherProperties.length > 1) {
        Object[] inserts=ex.getInserts();
        if (inserts == null) {
          inserts=new Object[0];
        }
        if (inserts.length < otherProperties.length - 1) {
          ex.printStackTrace();
          fail("Cannot check " + (otherProperties.length - 1) + " properties of the exception, it only has "+ inserts.length+ " inserts");
        }
        for (int i=1; i < otherProperties.length; i++) {
          if (!inserts[i - 1].equals(otherProperties[i])) {
            ex.printStackTrace();
            fail("Insert does not match, expected '" + otherProperties[i] + "' but insert value was '"+ inserts[i - 1]+ "'");
          }
        }
      }
    }
  }
}
