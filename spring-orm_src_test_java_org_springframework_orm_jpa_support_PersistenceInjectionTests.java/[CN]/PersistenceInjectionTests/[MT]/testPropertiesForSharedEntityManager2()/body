{
  Properties props=new Properties();
  props.put("foo","bar");
  MockControl emC=MockControl.createControl(EntityManager.class);
  EntityManager em=(EntityManager)emC.getMock();
  emfMc.expectAndReturn(mockEmf.createEntityManager(),em);
  emC.expectAndReturn(em.getDelegate(),new Object(),2);
  emC.expectAndReturn(em.isOpen(),true);
  em.close();
  emfMc.replay();
  emC.replay();
  PersistenceAnnotationBeanPostProcessor babpp=new MockPersistenceAnnotationBeanPostProcessor();
  DefaultPrivatePersistenceContextFieldWithProperties transactionalFieldWithProperties=new DefaultPrivatePersistenceContextFieldWithProperties();
  DefaultPrivatePersistenceContextField transactionalField=new DefaultPrivatePersistenceContextField();
  babpp.postProcessPropertyValues(null,null,transactionalFieldWithProperties,null);
  babpp.postProcessPropertyValues(null,null,transactionalField,null);
  assertNotNull(transactionalFieldWithProperties.em);
  assertNotNull(transactionalField.em);
  assertNotNull(transactionalField.em.getDelegate());
  try {
    TransactionSynchronizationManager.bindResource(mockEmf,new EntityManagerHolder(em));
    assertNotNull(transactionalFieldWithProperties.em.getDelegate());
    emfMc.verify();
    emC.verify();
  }
  finally {
    TransactionSynchronizationManager.unbindResource(mockEmf);
  }
}
