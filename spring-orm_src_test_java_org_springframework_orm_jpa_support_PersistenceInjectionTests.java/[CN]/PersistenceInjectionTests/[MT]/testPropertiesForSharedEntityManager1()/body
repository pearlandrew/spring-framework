{
  Properties props=new Properties();
  props.put("foo","bar");
  EntityManager em=mock(EntityManager.class);
  given(mockEmf.createEntityManager(props)).willReturn(em);
  given(em.getDelegate()).willReturn(new Object());
  given(em.isOpen()).willReturn(true);
  PersistenceAnnotationBeanPostProcessor babpp=new MockPersistenceAnnotationBeanPostProcessor();
  DefaultPrivatePersistenceContextFieldWithProperties transactionalFieldWithProperties=new DefaultPrivatePersistenceContextFieldWithProperties();
  DefaultPrivatePersistenceContextField transactionalField=new DefaultPrivatePersistenceContextField();
  babpp.postProcessPropertyValues(null,null,transactionalFieldWithProperties,"bean1");
  babpp.postProcessPropertyValues(null,null,transactionalField,"bean2");
  assertNotNull(transactionalFieldWithProperties.em);
  assertNotNull(transactionalField.em);
  assertNotNull(transactionalFieldWithProperties.em.getDelegate());
  try {
    TransactionSynchronizationManager.bindResource(mockEmf,new EntityManagerHolder(em));
    assertNotNull(transactionalField.em.getDelegate());
    verify(em).close();
  }
  finally {
    TransactionSynchronizationManager.unbindResource(mockEmf);
  }
}
