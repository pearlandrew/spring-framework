{
  final GenericWebApplicationContext wac=new GenericWebApplicationContext();
  servlet=new DispatcherServlet(){
    @Override protected WebApplicationContext createWebApplicationContext(    WebApplicationContext parent){
      for (      Class<?> clazz : controllerClasses) {
        wac.registerBeanDefinition(clazz.getSimpleName(),new RootBeanDefinition(clazz));
      }
      Class<?> mappingType=RequestMappingHandlerMapping.class;
      wac.registerBeanDefinition("handlerMapping",new RootBeanDefinition(mappingType));
      Class<?> adapterType=RequestMappingHandlerAdapter.class;
      wac.registerBeanDefinition("handlerAdapter",new RootBeanDefinition(adapterType));
      Class<?> resolverType=ExceptionHandlerExceptionResolver.class;
      wac.registerBeanDefinition("requestMappingResolver",new RootBeanDefinition(resolverType));
      resolverType=ResponseStatusExceptionResolver.class;
      wac.registerBeanDefinition("responseStatusResolver",new RootBeanDefinition(resolverType));
      resolverType=DefaultHandlerExceptionResolver.class;
      wac.registerBeanDefinition("defaultResolver",new RootBeanDefinition(resolverType));
      if (initializer != null) {
        initializer.initialize(wac);
      }
      wac.refresh();
      return wac;
    }
  }
;
  servlet.init(new MockServletConfig());
  return wac;
}
