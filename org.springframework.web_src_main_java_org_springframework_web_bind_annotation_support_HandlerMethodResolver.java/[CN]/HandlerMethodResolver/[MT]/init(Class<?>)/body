{
  Class<?>[] handlerTypes=Proxy.isProxyClass(handlerType) ? handlerType.getInterfaces() : new Class<?>[]{handlerType};
  for (  final Class<?> currentHandlerType : handlerTypes) {
    ReflectionUtils.doWithMethods(currentHandlerType,new ReflectionUtils.MethodCallback(){
      public void doWith(      Method method){
        Method specificMethod=ClassUtils.getMostSpecificMethod(method,currentHandlerType);
        if (isHandlerMethod(method)) {
          handlerMethods.add(specificMethod);
        }
 else         if (method.isAnnotationPresent(InitBinder.class)) {
          initBinderMethods.add(specificMethod);
        }
 else         if (method.isAnnotationPresent(ModelAttribute.class)) {
          modelAttributeMethods.add(specificMethod);
        }
      }
    }
,ReflectionUtils.NON_BRIDGED_METHODS);
  }
  this.typeLevelMapping=AnnotationUtils.findAnnotation(handlerType,RequestMapping.class);
  SessionAttributes sessionAttributes=AnnotationUtils.findAnnotation(handlerType,SessionAttributes.class);
  this.sessionAttributesFound=(sessionAttributes != null);
  if (this.sessionAttributesFound) {
    this.sessionAttributeNames.addAll(Arrays.asList(sessionAttributes.value()));
    this.sessionAttributeTypes.addAll(Arrays.asList(sessionAttributes.types()));
  }
}
