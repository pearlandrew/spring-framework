{
  tagWriter.startTag("select");
  writeDefaultAttributes(tagWriter);
  if (isMultiple()) {
    tagWriter.writeAttribute("multiple","multiple");
  }
  tagWriter.writeOptionalAttributeValue("size",getDisplayString(evaluate("size",getSize())));
  Object items=getItems();
  if (items != null) {
    if (items != EMPTY) {
      Object itemsObject=evaluate("items",items);
      if (itemsObject != null) {
        final String selectName=getName();
        String valueProperty=(getItemValue() != null ? ObjectUtils.getDisplayString(evaluate("itemValue",getItemValue())) : null);
        String labelProperty=(getItemLabel() != null ? ObjectUtils.getDisplayString(evaluate("itemLabel",getItemLabel())) : null);
        OptionWriter optionWriter=new OptionWriter(itemsObject,getBindStatus(),valueProperty,labelProperty,isHtmlEscape()){
          @Override protected String processOptionValue(          String resolvedValue){
            return processFieldValue(selectName,resolvedValue,"option");
          }
        }
;
        optionWriter.writeOptions(tagWriter);
      }
    }
    tagWriter.endTag(true);
    writeHiddenTagIfNecessary(tagWriter);
    return SKIP_BODY;
  }
 else {
    tagWriter.forceBlock();
    this.tagWriter=tagWriter;
    this.pageContext.setAttribute(LIST_VALUE_PAGE_ATTRIBUTE,getBindStatus());
    return EVAL_BODY_INCLUDE;
  }
}
