{
  Comparator<String> comparator=pathMatcher.getPatternComparator("/hotels/new");
  List<String> paths=new ArrayList<>(3);
  paths.add(null);
  paths.add("/hotels/new");
  Collections.sort(paths,comparator);
  assertEquals("/hotels/new",paths.get(0));
  assertNull(paths.get(1));
  paths.clear();
  paths.add("/hotels/new");
  paths.add(null);
  Collections.sort(paths,comparator);
  assertEquals("/hotels/new",paths.get(0));
  assertNull(paths.get(1));
  paths.clear();
  paths.add("/hotels/*");
  paths.add("/hotels/new");
  Collections.sort(paths,comparator);
  assertEquals("/hotels/new",paths.get(0));
  assertEquals("/hotels/*",paths.get(1));
  paths.clear();
  paths.add("/hotels/new");
  paths.add("/hotels/*");
  Collections.sort(paths,comparator);
  assertEquals("/hotels/new",paths.get(0));
  assertEquals("/hotels/*",paths.get(1));
  paths.clear();
  paths.add("/hotels/**");
  paths.add("/hotels/*");
  Collections.sort(paths,comparator);
  assertEquals("/hotels/*",paths.get(0));
  assertEquals("/hotels/**",paths.get(1));
  paths.clear();
  paths.add("/hotels/*");
  paths.add("/hotels/**");
  Collections.sort(paths,comparator);
  assertEquals("/hotels/*",paths.get(0));
  assertEquals("/hotels/**",paths.get(1));
  paths.clear();
  paths.add("/hotels/{hotel}");
  paths.add("/hotels/new");
  Collections.sort(paths,comparator);
  assertEquals("/hotels/new",paths.get(0));
  assertEquals("/hotels/{hotel}",paths.get(1));
  paths.clear();
  paths.add("/hotels/new");
  paths.add("/hotels/{hotel}");
  Collections.sort(paths,comparator);
  assertEquals("/hotels/new",paths.get(0));
  assertEquals("/hotels/{hotel}",paths.get(1));
  paths.clear();
  paths.add("/hotels/*");
  paths.add("/hotels/{hotel}");
  paths.add("/hotels/new");
  Collections.sort(paths,comparator);
  assertEquals("/hotels/new",paths.get(0));
  assertEquals("/hotels/{hotel}",paths.get(1));
  assertEquals("/hotels/*",paths.get(2));
  paths.clear();
  paths.add("/hotels/ne*");
  paths.add("/hotels/n*");
  Collections.shuffle(paths);
  Collections.sort(paths,comparator);
  assertEquals("/hotels/ne*",paths.get(0));
  assertEquals("/hotels/n*",paths.get(1));
  paths.clear();
  comparator=pathMatcher.getPatternComparator("/hotels/new.html");
  paths.add("/hotels/new.*");
  paths.add("/hotels/{hotel}");
  Collections.shuffle(paths);
  Collections.sort(paths,comparator);
  assertEquals("/hotels/new.*",paths.get(0));
  assertEquals("/hotels/{hotel}",paths.get(1));
  paths.clear();
  comparator=pathMatcher.getPatternComparator("/web/endUser/action/login.html");
  paths.add("/**/login.*");
  paths.add("/**/endUser/action/login.*");
  Collections.sort(paths,comparator);
  assertEquals("/**/endUser/action/login.*",paths.get(0));
  assertEquals("/**/login.*",paths.get(1));
  paths.clear();
}
