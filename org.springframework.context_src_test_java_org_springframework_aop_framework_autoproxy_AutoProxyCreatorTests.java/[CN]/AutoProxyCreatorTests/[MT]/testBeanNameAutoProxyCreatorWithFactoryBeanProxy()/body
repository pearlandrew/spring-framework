{
  StaticApplicationContext sac=new StaticApplicationContext();
  sac.registerSingleton("testInterceptor",TestInterceptor.class);
  RootBeanDefinition proxyCreator=new RootBeanDefinition(BeanNameAutoProxyCreator.class);
  proxyCreator.getPropertyValues().add("interceptorNames","testInterceptor");
  proxyCreator.getPropertyValues().add("beanNames","singletonToBeProxied,&singletonFactoryToBeProxied");
  sac.getDefaultListableBeanFactory().registerBeanDefinition("beanNameAutoProxyCreator",proxyCreator);
  RootBeanDefinition bd=new RootBeanDefinition(TestBean.class);
  sac.getDefaultListableBeanFactory().registerBeanDefinition("singletonToBeProxied",bd);
  sac.registerSingleton("singletonFactoryToBeProxied",DummyFactory.class);
  sac.refresh();
  ITestBean singletonToBeProxied=(ITestBean)sac.getBean("singletonToBeProxied");
  assertTrue(Proxy.isProxyClass(singletonToBeProxied.getClass()));
  TestInterceptor ti=(TestInterceptor)sac.getBean("testInterceptor");
  assertEquals(2,ti.nrOfInvocations);
  singletonToBeProxied.getName();
  assertEquals(3,ti.nrOfInvocations);
  FactoryBean<?> factory=(FactoryBean<?>)sac.getBean("&singletonFactoryToBeProxied");
  assertTrue(Proxy.isProxyClass(factory.getClass()));
  TestBean tb=(TestBean)sac.getBean("singletonFactoryToBeProxied");
  assertFalse(AopUtils.isAopProxy(tb));
  assertEquals(5,ti.nrOfInvocations);
  tb.getAge();
  assertEquals(5,ti.nrOfInvocations);
}
