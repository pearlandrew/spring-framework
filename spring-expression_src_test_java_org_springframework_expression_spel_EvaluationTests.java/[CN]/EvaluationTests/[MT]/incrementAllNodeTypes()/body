{
  Spr9751 helper=new Spr9751();
  StandardEvaluationContext ctx=new StandardEvaluationContext(helper);
  ExpressionParser parser=new SpelExpressionParser(new SpelParserConfiguration(true,true));
  Expression e=null;
  expectFailNotAssignable(parser,ctx,"true++");
  expectFailNotAssignable(parser,ctx,"--false");
  expectFailSetValueNotSupported(parser,ctx,"true=false");
  expectFailNotAssignable(parser,ctx,"12++");
  expectFailNotAssignable(parser,ctx,"--1222");
  expectFailSetValueNotSupported(parser,ctx,"12=16");
  expectFailNotAssignable(parser,ctx,"1.0d++");
  expectFailNotAssignable(parser,ctx,"--3.4d");
  expectFailSetValueNotSupported(parser,ctx,"1.0d=3.2d");
  expectFailNotAssignable(parser,ctx,"null++");
  expectFailNotAssignable(parser,ctx,"--null");
  expectFailSetValueNotSupported(parser,ctx,"null=null");
  expectFailSetValueNotSupported(parser,ctx,"null=123");
  expectFailNotAssignable(parser,ctx,"(true && false)++");
  expectFailNotAssignable(parser,ctx,"--(false AND true)");
  expectFailSetValueNotSupported(parser,ctx,"(true && false)=(false && true)");
  expectFailNotAssignable(parser,ctx,"(3/4)++");
  expectFailNotAssignable(parser,ctx,"--(2/5)");
  expectFailSetValueNotSupported(parser,ctx,"(1/2)=(3/4)");
  expectFailNotAssignable(parser,ctx,"(3==4)++");
  expectFailNotAssignable(parser,ctx,"--(2==5)");
  expectFailSetValueNotSupported(parser,ctx,"(1==2)=(3==4)");
  expectFailNotAssignable(parser,ctx,"(3>=4)++");
  expectFailNotAssignable(parser,ctx,"--(2>=5)");
  expectFailSetValueNotSupported(parser,ctx,"(1>=2)=(3>=4)");
  expectFailNotAssignable(parser,ctx,"(3>4)++");
  expectFailNotAssignable(parser,ctx,"--(2>5)");
  expectFailSetValueNotSupported(parser,ctx,"(1>2)=(3>4)");
  expectFailNotAssignable(parser,ctx,"(3<=4)++");
  expectFailNotAssignable(parser,ctx,"--(2<=5)");
  expectFailSetValueNotSupported(parser,ctx,"(1<=2)=(3<=4)");
  expectFailNotAssignable(parser,ctx,"(3<4)++");
  expectFailNotAssignable(parser,ctx,"--(2<5)");
  expectFailSetValueNotSupported(parser,ctx,"(1<2)=(3<4)");
  expectFailNotAssignable(parser,ctx,"(3-4)++");
  expectFailNotAssignable(parser,ctx,"--(2-5)");
  expectFailSetValueNotSupported(parser,ctx,"(1-2)=(3-4)");
  expectFailNotAssignable(parser,ctx,"(3%4)++");
  expectFailNotAssignable(parser,ctx,"--(2%5)");
  expectFailSetValueNotSupported(parser,ctx,"(1%2)=(3%4)");
  expectFailNotAssignable(parser,ctx,"(3*4)++");
  expectFailNotAssignable(parser,ctx,"--(2*5)");
  expectFailSetValueNotSupported(parser,ctx,"(1*2)=(3*4)");
  expectFailNotAssignable(parser,ctx,"(3!=4)++");
  expectFailNotAssignable(parser,ctx,"--(2!=5)");
  expectFailSetValueNotSupported(parser,ctx,"(1!=2)=(3!=4)");
  expectFailNotAssignable(parser,ctx,"(true || false)++");
  expectFailNotAssignable(parser,ctx,"--(false OR true)");
  expectFailSetValueNotSupported(parser,ctx,"(true || false)=(false OR true)");
  expectFailNotAssignable(parser,ctx,"(3+4)++");
  expectFailNotAssignable(parser,ctx,"--(2+5)");
  expectFailSetValueNotSupported(parser,ctx,"(1+2)=(3+4)");
  expectFailNotAssignable(parser,ctx,"1.0d++");
  expectFailNotAssignable(parser,ctx,"--2.0d");
  expectFailSetValueNotSupported(parser,ctx,"(1.0d)=(3.0d)");
  expectFailNotAssignable(parser,ctx,"1.0f++");
  expectFailNotAssignable(parser,ctx,"--2.0f");
  expectFailSetValueNotSupported(parser,ctx,"(1.0f)=(3.0f)");
  expectFailNotAssignable(parser,ctx,"'abc'++");
  expectFailNotAssignable(parser,ctx,"--'def'");
  expectFailSetValueNotSupported(parser,ctx,"'abc'='def'");
  expectFailNotAssignable(parser,ctx,"(true?true:false)++");
  expectFailNotAssignable(parser,ctx,"--(true?true:false)");
  expectFailSetValueNotSupported(parser,ctx,"(true?true:false)=(true?true:false)");
  expectFailNotAssignable(parser,ctx,"T(String)++");
  expectFailNotAssignable(parser,ctx,"--T(Integer)");
  expectFailSetValueNotSupported(parser,ctx,"T(String)=T(Integer)");
  expectFailNotAssignable(parser,ctx,"(3 between {1,5})++");
  expectFailNotAssignable(parser,ctx,"--(3 between {1,5})");
  expectFailSetValueNotSupported(parser,ctx,"(3 between {1,5})=(3 between {1,5})");
  expectFailNotAssignable(parser,ctx,"(type instanceof T(String))++");
  expectFailNotAssignable(parser,ctx,"--(type instanceof T(String))");
  expectFailSetValueNotSupported(parser,ctx,"(type instanceof T(String))=(type instanceof T(String))");
  expectFailNotAssignable(parser,ctx,"(true?:false)++");
  expectFailNotAssignable(parser,ctx,"--(true?:false)");
  expectFailSetValueNotSupported(parser,ctx,"(true?:false)=(true?:false)");
  expectFailNotAssignable(parser,ctx,"(iii++)++");
  expectFailNotAssignable(parser,ctx,"--(++iii)");
  expectFailSetValueNotSupported(parser,ctx,"(iii++)=(++iii)");
  expectFailNotAssignable(parser,ctx,"(iii--)++");
  expectFailNotAssignable(parser,ctx,"--(--iii)");
  expectFailSetValueNotSupported(parser,ctx,"(iii--)=(--iii)");
  expectFailNotAssignable(parser,ctx,"(!true)++");
  expectFailNotAssignable(parser,ctx,"--(!false)");
  expectFailSetValueNotSupported(parser,ctx,"(!true)=(!false)");
  expectFailNotAssignable(parser,ctx,"(iii^2)++");
  expectFailNotAssignable(parser,ctx,"--(iii^2)");
  expectFailSetValueNotSupported(parser,ctx,"(iii^2)=(iii^3)");
  e=parser.parseExpression("iii=iii++");
  assertEquals(42,helper.iii);
  int return_iii=e.getValue(ctx,Integer.TYPE);
  assertEquals(42,helper.iii);
  assertEquals(42,return_iii);
  e=parser.parseExpression("iii++");
  assertEquals(42,helper.iii);
  return_iii=e.getValue(ctx,Integer.TYPE);
  assertEquals(42,return_iii);
  assertEquals(43,helper.iii);
  e=parser.parseExpression("--iii");
  assertEquals(43,helper.iii);
  return_iii=e.getValue(ctx,Integer.TYPE);
  assertEquals(42,return_iii);
  assertEquals(42,helper.iii);
  e=parser.parseExpression("iii=99");
  assertEquals(42,helper.iii);
  return_iii=e.getValue(ctx,Integer.TYPE);
  assertEquals(99,return_iii);
  assertEquals(99,helper.iii);
  e=parser.parseExpression("foo.iii++");
  assertEquals(99,helper.foo.iii);
  int return_foo_iii=e.getValue(ctx,Integer.TYPE);
  assertEquals(99,return_foo_iii);
  assertEquals(100,helper.foo.iii);
  e=parser.parseExpression("--foo.iii");
  assertEquals(100,helper.foo.iii);
  return_foo_iii=e.getValue(ctx,Integer.TYPE);
  assertEquals(99,return_foo_iii);
  assertEquals(99,helper.foo.iii);
  e=parser.parseExpression("foo.iii=999");
  assertEquals(99,helper.foo.iii);
  return_foo_iii=e.getValue(ctx,Integer.TYPE);
  assertEquals(999,return_foo_iii);
  assertEquals(999,helper.foo.iii);
  expectFailNotAssignable(parser,ctx,"(new String('abc'))++");
  expectFailNotAssignable(parser,ctx,"--(new String('abc'))");
  expectFailSetValueNotSupported(parser,ctx,"(new String('abc'))=(new String('abc'))");
  expectFailNotIncrementable(parser,ctx,"m()++");
  expectFailNotDecrementable(parser,ctx,"--m()");
  expectFailSetValueNotSupported(parser,ctx,"m()=m()");
  expectFailNotAssignable(parser,ctx,"('abc' matches '^a..')++");
  expectFailNotAssignable(parser,ctx,"--('abc' matches '^a..')");
  expectFailSetValueNotSupported(parser,ctx,"('abc' matches '^a..')=('abc' matches '^a..')");
  ctx.registerFunction("isEven",Spr9751.class.getDeclaredMethod("isEven",Integer.TYPE));
  expectFailNotIncrementable(parser,ctx,"({1,2,3}.?[#isEven(#this)])++");
  expectFailNotDecrementable(parser,ctx,"--({1,2,3}.?[#isEven(#this)])");
  expectFailNotAssignable(parser,ctx,"({1,2,3}.?[#isEven(#this)])=({1,2,3}.?[#isEven(#this)])");
  expectFailNotAssignable(parser,ctx,"({1,2,3}.^[#isEven(#this)])++");
  expectFailNotAssignable(parser,ctx,"--({1,2,3}.^[#isEven(#this)])");
  expectFailNotAssignable(parser,ctx,"({1,2,3}.^[#isEven(#this)])=({1,2,3}.^[#isEven(#this)])");
  expectFailNotAssignable(parser,ctx,"({1,2,3}.$[#isEven(#this)])++");
  expectFailNotAssignable(parser,ctx,"--({1,2,3}.$[#isEven(#this)])");
  expectFailNotAssignable(parser,ctx,"({1,2,3}.$[#isEven(#this)])=({1,2,3}.$[#isEven(#this)])");
  expectFailNotAssignable(parser,ctx,"#isEven(3)++");
  expectFailNotAssignable(parser,ctx,"--#isEven(4)");
  expectFailSetValueNotSupported(parser,ctx,"#isEven(3)=#isEven(5)");
  ctx.setVariable("wibble","hello world");
  expectFailNotIncrementable(parser,ctx,"#wibble++");
  expectFailNotDecrementable(parser,ctx,"--#wibble");
  e=parser.parseExpression("#wibble=#wibble+#wibble");
  String s=e.getValue(ctx,String.class);
  assertEquals("hello worldhello world",s);
  assertEquals("hello worldhello world",ctx.lookupVariable("wibble"));
  ctx.setVariable("wobble",3);
  e=parser.parseExpression("#wobble++");
  assertEquals(3,((Integer)ctx.lookupVariable("wobble")).intValue());
  int r=e.getValue(ctx,Integer.TYPE);
  assertEquals(3,r);
  assertEquals(4,((Integer)ctx.lookupVariable("wobble")).intValue());
  e=parser.parseExpression("--#wobble");
  assertEquals(4,((Integer)ctx.lookupVariable("wobble")).intValue());
  r=e.getValue(ctx,Integer.TYPE);
  assertEquals(3,r);
  assertEquals(3,((Integer)ctx.lookupVariable("wobble")).intValue());
  e=parser.parseExpression("#wobble=34");
  assertEquals(3,((Integer)ctx.lookupVariable("wobble")).intValue());
  r=e.getValue(ctx,Integer.TYPE);
  assertEquals(34,r);
  assertEquals(34,((Integer)ctx.lookupVariable("wobble")).intValue());
  expectFailNotIncrementable(parser,ctx,"({1,2,3}.![#isEven(#this)])++");
  expectFailNotDecrementable(parser,ctx,"--({1,2,3}.![#isEven(#this)])");
  expectFailNotAssignable(parser,ctx,"({1,2,3}.![#isEven(#this)])=({1,2,3}.![#isEven(#this)])");
  expectFailNotAssignable(parser,ctx,"({1,2,3})++");
  expectFailNotAssignable(parser,ctx,"--({1,2,3})");
  expectFailSetValueNotSupported(parser,ctx,"({1,2,3})=({1,2,3})");
  expectFailNotAssignable(parser,ctx,"({'a':1,'b':2,'c':3})++");
  expectFailNotAssignable(parser,ctx,"--({'a':1,'b':2,'c':3})");
  expectFailSetValueNotSupported(parser,ctx,"({'a':1,'b':2,'c':3})=({'a':1,'b':2,'c':3})");
  ctx.setBeanResolver(new MyBeanResolver());
  expectFailNotAssignable(parser,ctx,"@foo++");
  expectFailNotAssignable(parser,ctx,"--@foo");
  expectFailSetValueNotSupported(parser,ctx,"@foo=@bar");
  helper.iii=42;
  e=parser.parseExpression("iii++");
  assertEquals(42,helper.iii);
  r=e.getValue(ctx,Integer.TYPE);
  assertEquals(42,r);
  assertEquals(43,helper.iii);
  e=parser.parseExpression("--iii");
  assertEquals(43,helper.iii);
  r=e.getValue(ctx,Integer.TYPE);
  assertEquals(42,r);
  assertEquals(42,helper.iii);
  e=parser.parseExpression("iii=100");
  assertEquals(42,helper.iii);
  r=e.getValue(ctx,Integer.TYPE);
  assertEquals(100,r);
  assertEquals(100,helper.iii);
}
