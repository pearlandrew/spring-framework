{
  Element sockJsElement=DomUtils.getChildElementByTagName(element,"sockjs");
  if (sockJsElement != null) {
    Element handshakeHandler=DomUtils.getChildElementByTagName(element,"handshake-handler");
    RootBeanDefinition sockJsServiceDef=new RootBeanDefinition(DefaultSockJsService.class);
    sockJsServiceDef.setSource(source);
    Object scheduler;
    String customTaskSchedulerName=sockJsElement.getAttribute("scheduler");
    if (!customTaskSchedulerName.isEmpty()) {
      scheduler=new RuntimeBeanReference(customTaskSchedulerName);
    }
 else {
      scheduler=registerSockJsScheduler(sockJsSchedulerName,context,source);
    }
    sockJsServiceDef.getConstructorArgumentValues().addIndexedArgumentValue(0,scheduler);
    Element transportHandlersElement=DomUtils.getChildElementByTagName(sockJsElement,"transport-handlers");
    if (transportHandlersElement != null) {
      String registerDefaults=transportHandlersElement.getAttribute("register-defaults");
      if (registerDefaults.equals("false")) {
        sockJsServiceDef.setBeanClass(TransportHandlingSockJsService.class);
      }
      ManagedList<?> transportHandlers=parseBeanSubElements(transportHandlersElement,context);
      sockJsServiceDef.getConstructorArgumentValues().addIndexedArgumentValue(1,transportHandlers);
    }
 else     if (handshakeHandler != null) {
      RuntimeBeanReference handshakeHandlerRef=new RuntimeBeanReference(handshakeHandler.getAttribute("ref"));
      RootBeanDefinition transportHandler=new RootBeanDefinition(WebSocketTransportHandler.class);
      transportHandler.setSource(source);
      transportHandler.getConstructorArgumentValues().addIndexedArgumentValue(0,handshakeHandlerRef);
      sockJsServiceDef.getConstructorArgumentValues().addIndexedArgumentValue(1,transportHandler);
    }
    Element interceptorsElement=DomUtils.getChildElementByTagName(element,"handshake-interceptors");
    ManagedList<? super Object> interceptors=WebSocketNamespaceUtils.parseBeanSubElements(interceptorsElement,context);
    String allowedOriginsAttribute=element.getAttribute("allowed-origins");
    List<String> allowedOrigins=Arrays.asList(StringUtils.tokenizeToStringArray(allowedOriginsAttribute,","));
    sockJsServiceDef.getPropertyValues().add("allowedOrigins",allowedOrigins);
    interceptors.add(new OriginHandshakeInterceptor(allowedOrigins));
    sockJsServiceDef.getPropertyValues().add("handshakeInterceptors",interceptors);
    String attrValue=sockJsElement.getAttribute("name");
    if (!attrValue.isEmpty()) {
      sockJsServiceDef.getPropertyValues().add("name",attrValue);
    }
    attrValue=sockJsElement.getAttribute("websocket-enabled");
    if (!attrValue.isEmpty()) {
      sockJsServiceDef.getPropertyValues().add("webSocketEnabled",Boolean.valueOf(attrValue));
    }
    attrValue=sockJsElement.getAttribute("session-cookie-needed");
    if (!attrValue.isEmpty()) {
      sockJsServiceDef.getPropertyValues().add("sessionCookieNeeded",Boolean.valueOf(attrValue));
    }
    attrValue=sockJsElement.getAttribute("stream-bytes-limit");
    if (!attrValue.isEmpty()) {
      sockJsServiceDef.getPropertyValues().add("streamBytesLimit",Integer.valueOf(attrValue));
    }
    attrValue=sockJsElement.getAttribute("disconnect-delay");
    if (!attrValue.isEmpty()) {
      sockJsServiceDef.getPropertyValues().add("disconnectDelay",Long.valueOf(attrValue));
    }
    attrValue=sockJsElement.getAttribute("message-cache-size");
    if (!attrValue.isEmpty()) {
      sockJsServiceDef.getPropertyValues().add("httpMessageCacheSize",Integer.valueOf(attrValue));
    }
    attrValue=sockJsElement.getAttribute("heartbeat-time");
    if (!attrValue.isEmpty()) {
      sockJsServiceDef.getPropertyValues().add("heartbeatTime",Long.valueOf(attrValue));
    }
    attrValue=sockJsElement.getAttribute("message-codec");
    if (!attrValue.isEmpty()) {
      sockJsServiceDef.getPropertyValues().add("messageCodec",new RuntimeBeanReference(attrValue));
    }
    attrValue=sockJsElement.getAttribute("suppress-cors");
    if (!attrValue.isEmpty()) {
      sockJsServiceDef.getPropertyValues().add("suppressCors",Boolean.valueOf(attrValue));
    }
    sockJsServiceDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
    String sockJsServiceName=context.getReaderContext().registerWithGeneratedName(sockJsServiceDef);
    return new RuntimeBeanReference(sockJsServiceName);
  }
  return null;
}
