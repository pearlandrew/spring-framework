{
  this.argumentBindings=new HashMap<>();
  int numExpectedArgumentNames=this.aspectJAdviceMethod.getParameterCount();
  if (this.argumentNames.length != numExpectedArgumentNames) {
    throw new IllegalStateException("Expecting to find " + numExpectedArgumentNames + " arguments to bind by name in advice, but actually found "+ this.argumentNames.length+ " arguments.");
  }
  int argumentIndexOffset=this.parameterTypes.length - numArgumentsLeftToBind;
  for (int i=argumentIndexOffset; i < this.argumentNames.length; i++) {
    this.argumentBindings.put(this.argumentNames[i],i);
  }
  if (this.returningName != null) {
    if (!this.argumentBindings.containsKey(this.returningName)) {
      throw new IllegalStateException("Returning argument name '" + this.returningName + "' was not bound in advice arguments");
    }
 else {
      Integer index=this.argumentBindings.get(this.returningName);
      this.discoveredReturningType=this.aspectJAdviceMethod.getParameterTypes()[index];
      this.discoveredReturningGenericType=this.aspectJAdviceMethod.getGenericParameterTypes()[index];
    }
  }
  if (this.throwingName != null) {
    if (!this.argumentBindings.containsKey(this.throwingName)) {
      throw new IllegalStateException("Throwing argument name '" + this.throwingName + "' was not bound in advice arguments");
    }
 else {
      Integer index=this.argumentBindings.get(this.throwingName);
      this.discoveredThrowingType=this.aspectJAdviceMethod.getParameterTypes()[index];
    }
  }
  configurePointcutParameters(argumentIndexOffset);
}
