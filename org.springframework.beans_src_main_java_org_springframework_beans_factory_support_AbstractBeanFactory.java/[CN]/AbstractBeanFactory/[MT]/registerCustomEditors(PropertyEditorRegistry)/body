{
  PropertyEditorRegistrySupport registrySupport=(registry instanceof PropertyEditorRegistrySupport ? (PropertyEditorRegistrySupport)registry : null);
  if (registrySupport != null) {
    registrySupport.useConfigValueEditors();
  }
  if (!this.propertyEditorRegistrars.isEmpty()) {
    for (Iterator it=this.propertyEditorRegistrars.iterator(); it.hasNext(); ) {
      PropertyEditorRegistrar registrar=(PropertyEditorRegistrar)it.next();
      try {
        registrar.registerCustomEditors(registry);
      }
 catch (      BeanCreationException ex) {
        Throwable rootCause=ex.getMostSpecificCause();
        if (rootCause instanceof BeanCurrentlyInCreationException) {
          BeanCreationException bce=(BeanCreationException)rootCause;
          if (isCurrentlyInCreation(bce.getBeanName())) {
            if (logger.isDebugEnabled()) {
              logger.debug("PropertyEditorRegistrar [" + registrar.getClass().getName() + "] failed because it tried to obtain currently created bean '"+ ex.getBeanName()+ "': "+ ex.getMessage());
            }
            onSuppressedException(ex);
            continue;
          }
        }
        throw ex;
      }
    }
  }
  if (!this.customEditors.isEmpty()) {
    for (Iterator it=this.customEditors.entrySet().iterator(); it.hasNext(); ) {
      Map.Entry entry=(Map.Entry)it.next();
      Class requiredType=(Class)entry.getKey();
      Object value=entry.getValue();
      if (value instanceof PropertyEditor) {
        PropertyEditor editor=(PropertyEditor)value;
        if (registrySupport != null) {
          registrySupport.registerSharedEditor(requiredType,editor);
        }
 else {
          registry.registerCustomEditor(requiredType,editor);
        }
      }
 else       if (value instanceof Class) {
        Class editorClass=(Class)value;
        registry.registerCustomEditor(requiredType,(PropertyEditor)BeanUtils.instantiateClass(editorClass));
      }
 else {
        throw new IllegalStateException("Illegal custom editor value type: " + value.getClass().getName());
      }
    }
  }
}
