{
  String beanName=transformedBeanName(name);
  Object beanInstance=getSingleton(beanName,false);
  if (beanInstance != null) {
    if (beanInstance instanceof FactoryBean && !BeanFactoryUtils.isFactoryDereference(name)) {
      return getTypeForFactoryBean((FactoryBean)beanInstance);
    }
 else {
      return beanInstance.getClass();
    }
  }
 else {
    BeanFactory parentBeanFactory=getParentBeanFactory();
    if (parentBeanFactory != null && !containsBeanDefinition(beanName)) {
      return parentBeanFactory.getType(originalBeanName(name));
    }
    RootBeanDefinition mbd=getMergedLocalBeanDefinition(beanName);
    BeanDefinitionHolder dbd=mbd.getDecoratedDefinition();
    if (dbd != null && !BeanFactoryUtils.isFactoryDereference(name)) {
      RootBeanDefinition tbd=getMergedBeanDefinition(dbd.getBeanName(),dbd.getBeanDefinition(),mbd);
      Class targetClass=predictBeanType(dbd.getBeanName(),tbd);
      if (targetClass != null && !FactoryBean.class.isAssignableFrom(targetClass)) {
        return targetClass;
      }
    }
    Class beanClass=predictBeanType(beanName,mbd);
    if (beanClass != null && FactoryBean.class.isAssignableFrom(beanClass)) {
      if (!BeanFactoryUtils.isFactoryDereference(name)) {
        return getTypeForFactoryBean(beanName,mbd);
      }
 else {
        return beanClass;
      }
    }
 else {
      return (!BeanFactoryUtils.isFactoryDereference(name) ? beanClass : null);
    }
  }
}
