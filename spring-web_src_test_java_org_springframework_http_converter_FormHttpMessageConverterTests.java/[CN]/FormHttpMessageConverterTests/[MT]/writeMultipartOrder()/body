{
  MyBean myBean=new MyBean();
  myBean.setString("foo");
  MultiValueMap<String,Object> parts=new LinkedMultiValueMap<String,Object>();
  parts.add("part1",myBean);
  HttpHeaders entityHeaders=new HttpHeaders();
  entityHeaders.setContentType(MediaType.TEXT_XML);
  HttpEntity<MyBean> entity=new HttpEntity<MyBean>(myBean,entityHeaders);
  parts.add("part2",entity);
  MockHttpOutputMessage outputMessage=new MockHttpOutputMessage();
  this.converter.setMultipartCharset(UTF_8);
  this.converter.write(parts,new MediaType("multipart","form-data",UTF_8),outputMessage);
  final MediaType contentType=outputMessage.getHeaders().getContentType();
  assertNotNull("No boundary found",contentType.getParameter("boundary"));
  FileItemFactory fileItemFactory=new DiskFileItemFactory();
  FileUpload fileUpload=new FileUpload(fileItemFactory);
  RequestContext requestContext=new MockHttpOutputMessageRequestContext(outputMessage);
  List<FileItem> items=fileUpload.parseRequest(requestContext);
  assertEquals(2,items.size());
  FileItem item=items.get(0);
  assertTrue(item.isFormField());
  assertEquals("part1",item.getFieldName());
  assertEquals("{\"string\":\"foo\"}",item.getString());
  item=items.get(1);
  assertTrue(item.isFormField());
  assertEquals("part2",item.getFieldName());
  assertThat(item.getString(),allOf(startsWith("<MyBean"),endsWith("><string>foo</string></MyBean>")));
}
