{
  InputStream is=clazz.getResourceAsStream(ClassUtils.getClassFileName(clazz));
  if (is == null) {
    if (logger.isDebugEnabled()) {
      logger.debug("Cannot find '.class' file for class [" + clazz + "] - unable to determine constructor/method parameter names");
    }
    return NO_DEBUG_INFO_MAP;
  }
  try {
    ClassReader classReader=new ClassReader(is);
    Map<Member,String[]> map=new ConcurrentHashMap<>(32);
    classReader.accept(new ParameterNameDiscoveringVisitor(clazz,map),0);
    return map;
  }
 catch (  IOException ex) {
    if (logger.isDebugEnabled()) {
      logger.debug("Exception thrown while reading '.class' file for class [" + clazz + "] - unable to determine constructor/method parameter names",ex);
    }
  }
catch (  IllegalArgumentException ex) {
    if (logger.isDebugEnabled()) {
      logger.debug("ASM ClassReader failed to parse class file [" + clazz + "], probably due to a new Java class file version that isn't supported yet "+ "- unable to determine constructor/method parameter names",ex);
    }
  }
 finally {
    try {
      is.close();
    }
 catch (    IOException ex) {
    }
  }
  return NO_DEBUG_INFO_MAP;
}
