{
  Assert.notNull(type,"Type must not be null");
  if (this == NONE || type == NONE) {
    return false;
  }
  if (isArray()) {
    return (type.isArray() && getComponentType().isAssignableFrom(type.getComponentType()));
  }
  if (matchedBefore != null && matchedBefore.get(this) == type) {
    return true;
  }
  WildcardBounds ourBounds=WildcardBounds.get(this);
  WildcardBounds typeBounds=WildcardBounds.get(type);
  if (typeBounds != null) {
    return (ourBounds != null && ourBounds.isSameKind(typeBounds) && ourBounds.isAssignableFrom(typeBounds.getBounds()));
  }
  if (ourBounds != null) {
    return ourBounds.isAssignableFrom(type);
  }
  boolean exactMatch=(matchedBefore != null);
  boolean checkGenerics=true;
  Class<?> ourResolved=null;
  if (this.type instanceof TypeVariable) {
    TypeVariable<?> variable=(TypeVariable<?>)this.type;
    if (this.variableResolver != null) {
      ResolvableType resolved=this.variableResolver.resolveVariable(variable);
      if (resolved != null) {
        ourResolved=resolved.resolve();
      }
    }
    if (ourResolved == null) {
      if (type.variableResolver != null) {
        ResolvableType resolved=type.variableResolver.resolveVariable(variable);
        if (resolved != null) {
          ourResolved=resolved.resolve();
          checkGenerics=false;
        }
      }
    }
    if (ourResolved == null) {
      exactMatch=false;
    }
  }
  if (ourResolved == null) {
    ourResolved=resolve(Object.class);
  }
  Class<?> typeResolved=type.resolve(Object.class);
  if (exactMatch ? !ourResolved.equals(typeResolved) : !ClassUtils.isAssignable(ourResolved,typeResolved)) {
    return false;
  }
  if (checkGenerics) {
    ResolvableType[] ourGenerics=getGenerics();
    ResolvableType[] typeGenerics=type.as(ourResolved).getGenerics();
    if (ourGenerics.length != typeGenerics.length) {
      return false;
    }
    if (matchedBefore == null) {
      matchedBefore=new IdentityHashMap<ResolvableType,ResolvableType>(1);
    }
    matchedBefore.put(this,type);
    for (int i=0; i < ourGenerics.length; i++) {
      if (!ourGenerics[i].isAssignableFrom(typeGenerics[i],matchedBefore)) {
        return false;
      }
    }
  }
  return true;
}
