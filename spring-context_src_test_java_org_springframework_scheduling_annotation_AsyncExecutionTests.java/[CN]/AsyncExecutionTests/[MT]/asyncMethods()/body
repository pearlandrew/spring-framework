{
  originalThreadName=Thread.currentThread().getName();
  GenericApplicationContext context=new GenericApplicationContext();
  context.registerBeanDefinition("asyncTest",new RootBeanDefinition(AsyncMethodBean.class));
  context.registerBeanDefinition("autoProxyCreator",new RootBeanDefinition(DefaultAdvisorAutoProxyCreator.class));
  context.registerBeanDefinition("asyncAdvisor",new RootBeanDefinition(AsyncAnnotationAdvisor.class));
  context.refresh();
  AsyncMethodBean asyncTest=context.getBean("asyncTest",AsyncMethodBean.class);
  asyncTest.doNothing(5);
  asyncTest.doSomething(10);
  Future<String> future=asyncTest.returnSomething(20);
  assertEquals("20",future.get());
  ListenableFuture<String> listenableFuture=asyncTest.returnSomethingListenable(20);
  assertEquals("20",listenableFuture.get());
  future=asyncTest.returnSomething(0);
  try {
    future.get();
    fail("Should have thrown ExecutionException");
  }
 catch (  ExecutionException ex) {
    assertTrue(ex.getCause() instanceof IllegalArgumentException);
  }
  future=asyncTest.returnSomething(-1);
  try {
    future.get();
    fail("Should have thrown ExecutionException");
  }
 catch (  ExecutionException ex) {
    assertTrue(ex.getCause() instanceof IOException);
  }
}
