{
  MockControl utControl=MockControl.createControl(UserTransaction.class);
  UserTransaction ut=(UserTransaction)utControl.getMock();
  ut.getStatus();
  utControl.setReturnValue(Status.STATUS_NO_TRANSACTION,1);
  ut.begin();
  utControl.setVoidCallable(1);
  ut.getStatus();
  utControl.setReturnValue(Status.STATUS_ACTIVE,1);
  ut.rollback();
  utControl.setVoidCallable(1);
  utControl.replay();
  MockControl sfControl=MockControl.createControl(SessionFactory.class);
  final SessionFactory sf=(SessionFactory)sfControl.getMock();
  MockControl sessionControl=MockControl.createControl(Session.class);
  final Session session=(Session)sessionControl.getMock();
  sf.openSession();
  sfControl.setReturnValue(session,1);
  session.getSessionFactory();
  sessionControl.setReturnValue(sf,1);
  session.isOpen();
  sessionControl.setReturnValue(true,1);
  session.getFlushMode();
  sessionControl.setReturnValue(FlushMode.AUTO,3);
  session.flush();
  sessionControl.setVoidCallable(3);
  session.close();
  sessionControl.setReturnValue(null,1);
  sfControl.replay();
  sessionControl.replay();
  JtaTransactionManager tm=new JtaTransactionManager(ut);
  TransactionTemplate tt=new TransactionTemplate(tm);
  tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_SUPPORTS);
  final TransactionTemplate tt2=new TransactionTemplate(tm);
  tt2.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  tt.execute(new TransactionCallback(){
    public Object doInTransaction(    TransactionStatus status){
      assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
      assertTrue("Is not new transaction",!status.isNewTransaction());
      assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
      assertFalse(TransactionSynchronizationManager.isActualTransactionActive());
      HibernateTemplate ht=new HibernateTemplate(sf);
      ht.setFlushMode(HibernateTemplate.FLUSH_EAGER);
      ht.execute(new HibernateCallback(){
        public Object doInHibernate(        org.hibernate.Session session){
          return null;
        }
      }
);
      assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
      tt2.execute(new TransactionCallback(){
        public Object doInTransaction(        TransactionStatus status){
          HibernateTemplate ht=new HibernateTemplate(sf);
          ht.setFlushMode(HibernateTemplate.FLUSH_EAGER);
          return ht.executeFind(new HibernateCallback(){
            public Object doInHibernate(            org.hibernate.Session session){
              assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
              return null;
            }
          }
);
        }
      }
);
      assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());
      assertFalse(TransactionSynchronizationManager.isActualTransactionActive());
      return null;
    }
  }
);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  sfControl.verify();
  sessionControl.verify();
}
