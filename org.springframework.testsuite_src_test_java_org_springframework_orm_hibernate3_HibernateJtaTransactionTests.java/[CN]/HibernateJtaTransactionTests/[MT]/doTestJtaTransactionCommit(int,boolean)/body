{
  MockControl utControl=MockControl.createControl(UserTransaction.class);
  UserTransaction ut=(UserTransaction)utControl.getMock();
  MockControl sfControl=MockControl.createControl(SessionFactory.class);
  final SessionFactory sf=(SessionFactory)sfControl.getMock();
  final MockControl sessionControl=MockControl.createControl(Session.class);
  final Session session=(Session)sessionControl.getMock();
  final MockControl queryControl=MockControl.createControl(Query.class);
  Query query=(Query)queryControl.getMock();
  ut.getStatus();
  utControl.setReturnValue(status,1);
  if (status == Status.STATUS_NO_TRANSACTION) {
    ut.begin();
    utControl.setVoidCallable(1);
    ut.getStatus();
    utControl.setReturnValue(Status.STATUS_ACTIVE,2);
    ut.commit();
    utControl.setVoidCallable(1);
  }
 else {
    ut.getStatus();
    utControl.setReturnValue(status,1);
  }
  final List list=new ArrayList();
  list.add("test");
  sf.openSession();
  sfControl.setReturnValue(session,1);
  session.getSessionFactory();
  sessionControl.setReturnValue(sf,1);
  session.isOpen();
  sessionControl.setReturnValue(true,1);
  session.createQuery("some query string");
  sessionControl.setReturnValue(query,1);
  if (readOnly) {
    session.setFlushMode(FlushMode.NEVER);
    sessionControl.setVoidCallable(1);
  }
  query.list();
  queryControl.setReturnValue(list,1);
  utControl.replay();
  sfControl.replay();
  sessionControl.replay();
  queryControl.replay();
  JtaTransactionManager ptm=new JtaTransactionManager(ut);
  TransactionTemplate tt=new TransactionTemplate(ptm);
  tt.setReadOnly(readOnly);
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  Object result=tt.execute(new TransactionCallback(){
    public Object doInTransaction(    TransactionStatus status){
      try {
        assertTrue("JTA synchronizations active",TransactionSynchronizationManager.isSynchronizationActive());
        assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
        HibernateTemplate ht=new HibernateTemplate(sf);
        ht.setExposeNativeSession(true);
        ht.executeFind(new HibernateCallback(){
          public Object doInHibernate(          org.hibernate.Session sess){
            assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
            assertEquals(session,sess);
            return null;
          }
        }
);
        ht=new HibernateTemplate(sf);
        List htl=ht.executeFind(new HibernateCallback(){
          public Object doInHibernate(          org.hibernate.Session sess){
            assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
            return sess.createQuery("some query string").list();
          }
        }
);
        assertTrue("Has thread session",TransactionSynchronizationManager.hasResource(sf));
        sessionControl.verify();
        queryControl.verify();
        sessionControl.reset();
        if (!readOnly) {
          session.getFlushMode();
          sessionControl.setReturnValue(FlushMode.AUTO,1);
          session.flush();
          sessionControl.setVoidCallable(1);
        }
        session.close();
        sessionControl.setReturnValue(null,1);
        sessionControl.replay();
        return htl;
      }
 catch (      Error err) {
        err.printStackTrace();
        throw err;
      }
    }
  }
);
  assertTrue("Correct result list",result == list);
  assertTrue("Hasn't thread session",!TransactionSynchronizationManager.hasResource(sf));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  utControl.verify();
  sfControl.verify();
  sessionControl.verify();
}
