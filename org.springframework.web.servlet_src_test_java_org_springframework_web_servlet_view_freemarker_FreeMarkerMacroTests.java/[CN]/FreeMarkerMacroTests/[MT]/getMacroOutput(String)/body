{
  String macro=fetchMacro(name);
  assertNotNull(macro);
  FileSystemResource resource=new FileSystemResource(System.getProperty("java.io.tmpdir") + "/tmp.ftl");
  FileCopyUtils.copy("<#import \"spring.ftl\" as spring />\n" + macro,new FileWriter(resource.getPath()));
  DummyMacroRequestContext rc=new DummyMacroRequestContext(request);
  Map msgMap=new HashMap();
  msgMap.put("hello","Howdy");
  msgMap.put("world","Mundo");
  rc.setMessageMap(msgMap);
  Map themeMsgMap=new HashMap();
  themeMsgMap.put("hello","Howdy!");
  themeMsgMap.put("world","Mundo!");
  rc.setThemeMessageMap(themeMsgMap);
  rc.setContextPath("/springtest");
  TestBean tb=new TestBean("Darren",99);
  tb.setSpouse(new TestBean("Fred"));
  tb.setJedi(true);
  request.setAttribute("command",tb);
  HashMap names=new HashMap();
  names.put("Darren","Darren Davison");
  names.put("John","John Doe");
  names.put("Fred","Fred Bloggs");
  names.put("Rob&Harrop","Rob Harrop");
  Configuration config=fc.getConfiguration();
  Map model=new HashMap();
  model.put("command",tb);
  model.put("springMacroRequestContext",rc);
  model.put("msgArgs",new Object[]{"World"});
  model.put("nameOptionMap",names);
  model.put("options",names.values());
  FreeMarkerView view=new FreeMarkerView();
  view.setBeanName("myView");
  view.setUrl("tmp.ftl");
  view.setExposeSpringMacroHelpers(false);
  view.setConfiguration(config);
  view.setServletContext(new MockServletContext());
  view.render(model,request,response);
  String output=response.getContentAsString();
  return output.trim();
}
