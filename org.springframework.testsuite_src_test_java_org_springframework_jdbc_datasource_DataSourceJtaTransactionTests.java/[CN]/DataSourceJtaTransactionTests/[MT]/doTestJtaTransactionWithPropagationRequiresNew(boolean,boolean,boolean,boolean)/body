{
  MockControl utControl=MockControl.createControl(UserTransaction.class);
  UserTransaction ut=(UserTransaction)utControl.getMock();
  MockControl tmControl=MockControl.createControl(TransactionManager.class);
  TransactionManager tm=(TransactionManager)tmControl.getMock();
  MockControl txControl=MockControl.createControl(Transaction.class);
  Transaction tx=(Transaction)txControl.getMock();
  ut.getStatus();
  utControl.setReturnValue(Status.STATUS_NO_TRANSACTION,1);
  ut.begin();
  utControl.setVoidCallable(1);
  ut.getStatus();
  utControl.setReturnValue(Status.STATUS_ACTIVE,16);
  tm.suspend();
  tmControl.setReturnValue(tx,5);
  ut.begin();
  utControl.setVoidCallable(5);
  ut.commit();
  utControl.setVoidCallable(5);
  tm.resume(tx);
  tmControl.setVoidCallable(5);
  if (rollback) {
    ut.rollback();
  }
 else {
    ut.getStatus();
    utControl.setReturnValue(Status.STATUS_ACTIVE,1);
    ut.commit();
  }
  utControl.setVoidCallable(1);
  utControl.replay();
  tmControl.replay();
  final MockControl dsControl=MockControl.createControl(DataSource.class);
  final DataSource ds=(DataSource)dsControl.getMock();
  final MockControl conControl=MockControl.createControl(Connection.class);
  final Connection con=(Connection)conControl.getMock();
  ds.getConnection();
  dsControl.setReturnValue(con,1);
  con.isReadOnly();
  conControl.setReturnValue(true,1);
  if (!openOuterConnection) {
    con.close();
    conControl.setVoidCallable(1);
  }
  conControl.replay();
  dsControl.replay();
  final DataSource dsToUse=useTransactionAwareDataSource ? new TransactionAwareDataSourceProxy(ds) : ds;
  JtaTransactionManager ptm=new JtaTransactionManager(ut,tm);
  final TransactionTemplate tt=new TransactionTemplate(ptm);
  tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(dsToUse));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  tt.execute(new TransactionCallbackWithoutResult(){
    protected void doInTransactionWithoutResult(    TransactionStatus status) throws RuntimeException {
      assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(dsToUse));
      assertTrue("JTA synchronizations active",TransactionSynchronizationManager.isSynchronizationActive());
      assertTrue("Is new transaction",status.isNewTransaction());
      Connection c=DataSourceUtils.getConnection(dsToUse);
      try {
        assertTrue("Has thread connection",TransactionSynchronizationManager.hasResource(dsToUse));
        c.isReadOnly();
        DataSourceUtils.releaseConnection(c,dsToUse);
        c=DataSourceUtils.getConnection(dsToUse);
        assertTrue("Has thread connection",TransactionSynchronizationManager.hasResource(dsToUse));
        if (!openOuterConnection) {
          DataSourceUtils.releaseConnection(c,dsToUse);
        }
      }
 catch (      SQLException ex) {
      }
      for (int i=0; i < 5; i++) {
        tt.execute(new TransactionCallbackWithoutResult(){
          protected void doInTransactionWithoutResult(          TransactionStatus status) throws RuntimeException {
            assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(dsToUse));
            assertTrue("JTA synchronizations active",TransactionSynchronizationManager.isSynchronizationActive());
            assertTrue("Is new transaction",status.isNewTransaction());
            try {
              dsControl.verify();
              conControl.verify();
              dsControl.reset();
              conControl.reset();
              ds.getConnection();
              dsControl.setReturnValue(con,1);
              con.isReadOnly();
              conControl.setReturnValue(true,1);
              con.close();
              conControl.setVoidCallable(1);
              dsControl.replay();
              conControl.replay();
              Connection c=DataSourceUtils.getConnection(dsToUse);
              c.isReadOnly();
              assertTrue("Has thread connection",TransactionSynchronizationManager.hasResource(dsToUse));
              DataSourceUtils.releaseConnection(c,dsToUse);
              c=DataSourceUtils.getConnection(dsToUse);
              assertTrue("Has thread connection",TransactionSynchronizationManager.hasResource(dsToUse));
              DataSourceUtils.releaseConnection(c,dsToUse);
            }
 catch (            SQLException ex) {
            }
          }
        }
);
      }
      if (rollback) {
        status.setRollbackOnly();
      }
      if (accessAfterResume) {
        try {
          if (!openOuterConnection) {
            dsControl.verify();
            dsControl.reset();
            ds.getConnection();
            dsControl.setReturnValue(con,1);
            dsControl.replay();
          }
          conControl.verify();
          conControl.reset();
          con.isReadOnly();
          conControl.setReturnValue(true,1);
          con.close();
          conControl.setVoidCallable(1);
          conControl.replay();
          if (!openOuterConnection) {
            c=DataSourceUtils.getConnection(dsToUse);
          }
          assertTrue("Has thread connection",TransactionSynchronizationManager.hasResource(dsToUse));
          c.isReadOnly();
          DataSourceUtils.releaseConnection(c,dsToUse);
          c=DataSourceUtils.getConnection(dsToUse);
          assertTrue("Has thread connection",TransactionSynchronizationManager.hasResource(dsToUse));
          DataSourceUtils.releaseConnection(c,dsToUse);
        }
 catch (        SQLException ex) {
        }
      }
 else {
        if (openOuterConnection) {
          try {
            conControl.verify();
            conControl.reset();
            con.close();
            conControl.setVoidCallable(1);
            conControl.replay();
          }
 catch (          SQLException ex) {
          }
          DataSourceUtils.releaseConnection(c,dsToUse);
        }
      }
    }
  }
);
  assertTrue("Hasn't thread connection",!TransactionSynchronizationManager.hasResource(dsToUse));
  assertTrue("JTA synchronizations not active",!TransactionSynchronizationManager.isSynchronizationActive());
  dsControl.verify();
  conControl.verify();
  utControl.verify();
  tmControl.verify();
}
