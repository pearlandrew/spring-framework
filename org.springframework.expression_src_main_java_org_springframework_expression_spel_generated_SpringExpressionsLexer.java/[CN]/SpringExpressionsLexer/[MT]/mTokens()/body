{
  int alt26=54;
  alt26=dfa26.predict(input);
switch (alt26) {
case 1:
{
      mT84();
    }
  break;
case 2:
{
  mINTEGER_LITERAL();
}
break;
case 3:
{
mHEXADECIMAL_INTEGER_LITERAL();
}
break;
case 4:
{
mASSIGN();
}
break;
case 5:
{
mEQUAL();
}
break;
case 6:
{
mNOT_EQUAL();
}
break;
case 7:
{
mLESS_THAN();
}
break;
case 8:
{
mLESS_THAN_OR_EQUAL();
}
break;
case 9:
{
mGREATER_THAN();
}
break;
case 10:
{
mGREATER_THAN_OR_EQUAL();
}
break;
case 11:
{
mIN();
}
break;
case 12:
{
mINSTANCEOF();
}
break;
case 13:
{
mBETWEEN();
}
break;
case 14:
{
mMATCHES();
}
break;
case 15:
{
mNULL_LITERAL();
}
break;
case 16:
{
mSEMI();
}
break;
case 17:
{
mDOT();
}
break;
case 18:
{
mCOMMA();
}
break;
case 19:
{
mLPAREN();
}
break;
case 20:
{
mRPAREN();
}
break;
case 21:
{
mLCURLY();
}
break;
case 22:
{
mRCURLY();
}
break;
case 23:
{
mLBRACKET();
}
break;
case 24:
{
mRBRACKET();
}
break;
case 25:
{
mPIPE();
}
break;
case 26:
{
mAND();
}
break;
case 27:
{
mOR();
}
break;
case 28:
{
mFALSE();
}
break;
case 29:
{
mTRUE();
}
break;
case 30:
{
mPLUS();
}
break;
case 31:
{
mMINUS();
}
break;
case 32:
{
mDIV();
}
break;
case 33:
{
mSTAR();
}
break;
case 34:
{
mMOD();
}
break;
case 35:
{
mPOWER();
}
break;
case 36:
{
mBANG();
}
break;
case 37:
{
mPOUND();
}
break;
case 38:
{
mQMARK();
}
break;
case 39:
{
mDEFAULT();
}
break;
case 40:
{
mPROJECT();
}
break;
case 41:
{
mSELECT();
}
break;
case 42:
{
mSELECT_FIRST();
}
break;
case 43:
{
mSELECT_LAST();
}
break;
case 44:
{
mTYPE();
}
break;
case 45:
{
mSTRING_LITERAL();
}
break;
case 46:
{
mDQ_STRING_LITERAL();
}
break;
case 47:
{
mID();
}
break;
case 48:
{
mDOT_ESCAPED();
}
break;
case 49:
{
mWS();
}
break;
case 50:
{
mDOLLAR();
}
break;
case 51:
{
mAT();
}
break;
case 52:
{
mUPTO();
}
break;
case 53:
{
mCOLON();
}
break;
case 54:
{
mREAL_LITERAL();
}
break;
}
}
