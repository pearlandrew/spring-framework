{
  Map multipartFiles=new HashMap();
  Map multipartParameters=new HashMap();
  for (Iterator it=fileItems.iterator(); it.hasNext(); ) {
    FileItem fileItem=(FileItem)it.next();
    if (fileItem.isFormField()) {
      String value=null;
      if (encoding != null) {
        try {
          value=fileItem.getString(encoding);
        }
 catch (        UnsupportedEncodingException ex) {
          if (logger.isWarnEnabled()) {
            logger.warn("Could not decode multipart item '" + fileItem.getFieldName() + "' with encoding '"+ encoding+ "': using platform default");
          }
          value=fileItem.getString();
        }
      }
 else {
        value=fileItem.getString();
      }
      String[] curParam=(String[])multipartParameters.get(fileItem.getFieldName());
      if (curParam == null) {
        multipartParameters.put(fileItem.getFieldName(),new String[]{value});
      }
 else {
        String[] newParam=StringUtils.addStringToArray(curParam,value);
        multipartParameters.put(fileItem.getFieldName(),newParam);
      }
    }
 else {
      CommonsMultipartFile file=new CommonsMultipartFile(fileItem);
      if (multipartFiles.put(file.getName(),file) != null) {
        throw new MultipartException("Multiple files for field name [" + file.getName() + "] found - not supported by MultipartResolver");
      }
      if (logger.isDebugEnabled()) {
        logger.debug("Found multipart file [" + file.getName() + "] of size "+ file.getSize()+ " bytes with original filename ["+ file.getOriginalFilename()+ "], stored "+ file.getStorageDescription());
      }
    }
  }
  return new MultipartParsingResult(multipartFiles,multipartParameters);
}
