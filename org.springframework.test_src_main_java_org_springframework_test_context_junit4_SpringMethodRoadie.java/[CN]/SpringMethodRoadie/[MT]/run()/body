{
  if (this.testMethod.isIgnored()) {
    this.notifier.fireTestIgnored(this.description);
    return;
  }
  this.notifier.fireTestStarted(this.description);
  try {
    Timed timedAnnotation=this.testMethod.getMethod().getAnnotation(Timed.class);
    long springTimeout=(timedAnnotation != null && timedAnnotation.millis() > 0 ? timedAnnotation.millis() : 0);
    long junitTimeout=this.testMethod.getTimeout();
    if (springTimeout > 0 && junitTimeout > 0) {
      throw new IllegalStateException("Test method [" + this.testMethod.getMethod() + "] has been configured with Spring's @Timed(millis="+ springTimeout+ ") and JUnit's @Test(timeout="+ junitTimeout+ ") annotations. Only one declaration of a 'timeout' is permitted per test method.");
    }
 else     if (springTimeout > 0) {
      long startTime=System.currentTimeMillis();
      try {
        runTest();
      }
  finally {
        long elapsed=System.currentTimeMillis() - startTime;
        if (elapsed > springTimeout) {
          addFailure(new TimeoutException("Took " + elapsed + " ms; limit was "+ springTimeout));
        }
      }
    }
 else     if (junitTimeout > 0) {
      runWithTimeout(junitTimeout);
    }
 else {
      runTest();
    }
  }
  finally {
    this.notifier.fireTestFinished(this.description);
  }
}
