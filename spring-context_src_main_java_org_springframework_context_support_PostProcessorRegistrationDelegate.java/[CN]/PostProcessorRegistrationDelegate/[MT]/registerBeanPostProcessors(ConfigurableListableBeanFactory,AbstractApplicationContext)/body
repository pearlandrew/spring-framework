{
  String[] postProcessorNames=beanFactory.getBeanNamesForType(BeanPostProcessor.class,true,false);
  int beanProcessorTargetCount=beanFactory.getBeanPostProcessorCount() + 1 + postProcessorNames.length;
  beanFactory.addBeanPostProcessor(new BeanPostProcessorChecker(beanFactory,beanProcessorTargetCount));
  List<BeanPostProcessor> priorityOrderedPostProcessors=new ArrayList<>();
  List<BeanPostProcessor> internalPostProcessors=new ArrayList<>();
  List<String> orderedPostProcessorNames=new ArrayList<>();
  List<String> nonOrderedPostProcessorNames=new ArrayList<>();
  for (  String ppName : postProcessorNames) {
    if (beanFactory.isTypeMatch(ppName,PriorityOrdered.class)) {
      BeanPostProcessor pp=beanFactory.getBean(ppName,BeanPostProcessor.class);
      priorityOrderedPostProcessors.add(pp);
      if (pp instanceof MergedBeanDefinitionPostProcessor) {
        internalPostProcessors.add(pp);
      }
    }
 else     if (beanFactory.isTypeMatch(ppName,Ordered.class)) {
      orderedPostProcessorNames.add(ppName);
    }
 else {
      nonOrderedPostProcessorNames.add(ppName);
    }
  }
  sortPostProcessors(beanFactory,priorityOrderedPostProcessors);
  registerBeanPostProcessors(beanFactory,priorityOrderedPostProcessors);
  List<BeanPostProcessor> orderedPostProcessors=new ArrayList<>();
  for (  String ppName : orderedPostProcessorNames) {
    BeanPostProcessor pp=beanFactory.getBean(ppName,BeanPostProcessor.class);
    orderedPostProcessors.add(pp);
    if (pp instanceof MergedBeanDefinitionPostProcessor) {
      internalPostProcessors.add(pp);
    }
  }
  sortPostProcessors(beanFactory,orderedPostProcessors);
  registerBeanPostProcessors(beanFactory,orderedPostProcessors);
  List<BeanPostProcessor> nonOrderedPostProcessors=new ArrayList<>();
  for (  String ppName : nonOrderedPostProcessorNames) {
    BeanPostProcessor pp=beanFactory.getBean(ppName,BeanPostProcessor.class);
    nonOrderedPostProcessors.add(pp);
    if (pp instanceof MergedBeanDefinitionPostProcessor) {
      internalPostProcessors.add(pp);
    }
  }
  registerBeanPostProcessors(beanFactory,nonOrderedPostProcessors);
  sortPostProcessors(beanFactory,internalPostProcessors);
  registerBeanPostProcessors(beanFactory,internalPostProcessors);
  beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(applicationContext));
}
