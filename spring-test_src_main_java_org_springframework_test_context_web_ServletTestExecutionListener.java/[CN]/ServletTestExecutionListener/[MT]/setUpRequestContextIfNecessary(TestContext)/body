{
  ApplicationContext context=testContext.getApplicationContext();
  if (context instanceof WebApplicationContext) {
    WebApplicationContext wac=(WebApplicationContext)context;
    ServletContext servletContext=wac.getServletContext();
    if (!(servletContext instanceof MockServletContext)) {
      throw new IllegalStateException(String.format("The WebApplicationContext for test context %s must be configured with a MockServletContext.",testContext));
    }
    if (logger.isDebugEnabled()) {
      logger.debug(String.format("Setting up MockHttpServletRequest, MockHttpServletResponse, ServletWebRequest, and RequestContextHolder for test context %s.",testContext));
    }
    if (RequestContextHolder.getRequestAttributes() == null) {
      MockServletContext mockServletContext=(MockServletContext)servletContext;
      MockHttpServletRequest request=new MockHttpServletRequest(mockServletContext);
      MockHttpServletResponse response=new MockHttpServletResponse();
      ServletWebRequest servletWebRequest=new ServletWebRequest(request,response);
      RequestContextHolder.setRequestAttributes(servletWebRequest);
      testContext.setAttribute(RESET_REQUEST_CONTEXT_HOLDER_ATTRIBUTE,Boolean.TRUE);
      if (wac instanceof ConfigurableApplicationContext) {
        @SuppressWarnings("resource") ConfigurableApplicationContext configurableApplicationContext=(ConfigurableApplicationContext)wac;
        ConfigurableListableBeanFactory bf=configurableApplicationContext.getBeanFactory();
        bf.registerResolvableDependency(MockHttpServletResponse.class,response);
        bf.registerResolvableDependency(ServletWebRequest.class,servletWebRequest);
      }
    }
  }
}
