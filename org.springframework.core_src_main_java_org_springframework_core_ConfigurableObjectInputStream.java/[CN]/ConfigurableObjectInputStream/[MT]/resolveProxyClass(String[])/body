{
  if (!this.acceptProxyClasses) {
    throw new NotSerializableException("Not allowed to accept serialized proxy classes");
  }
  if (this.classLoader != null) {
    Class[] resolvedInterfaces=new Class[interfaces.length];
    for (int i=0; i < interfaces.length; i++) {
      try {
        resolvedInterfaces[i]=ClassUtils.forName(interfaces[i],this.classLoader);
      }
 catch (      ClassNotFoundException ex) {
        resolvedInterfaces[i]=resolveFallbackIfPossible(interfaces[i],ex);
      }
    }
    try {
      return Proxy.getProxyClass(this.classLoader,resolvedInterfaces);
    }
 catch (    IllegalArgumentException ex) {
      throw new ClassNotFoundException(null,ex);
    }
  }
 else {
    try {
      return super.resolveProxyClass(interfaces);
    }
 catch (    ClassNotFoundException ex) {
      Class[] resolvedInterfaces=new Class[interfaces.length];
      for (int i=0; i < interfaces.length; i++) {
        resolvedInterfaces[i]=resolveFallbackIfPossible(interfaces[i],ex);
      }
      return Proxy.getProxyClass(getFallbackClassLoader(),resolvedInterfaces);
    }
  }
}
