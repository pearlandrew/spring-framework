{
  BeanWrapperImpl bw=new BeanWrapperImpl();
  this.beanFactory.initBeanWrapper(bw);
  Constructor constructorToUse=null;
  Object[] argsToUse=null;
  if (explicitArgs != null) {
    argsToUse=explicitArgs;
  }
 else {
    constructorToUse=(Constructor)mbd.resolvedConstructorOrFactoryMethod;
    if (constructorToUse != null) {
      argsToUse=mbd.resolvedConstructorArguments;
      if (argsToUse == null) {
        Class[] paramTypes=constructorToUse.getParameterTypes();
        Object[] argsToResolve=mbd.preparedConstructorArguments;
        TypeConverter converter=(this.typeConverter != null ? this.typeConverter : bw);
        BeanDefinitionValueResolver valueResolver=new BeanDefinitionValueResolver(this.beanFactory,beanName,mbd,converter);
        argsToUse=new Object[argsToResolve.length];
        for (int i=0; i < argsToResolve.length; i++) {
          Object argValue=argsToResolve[i];
          MethodParameter methodParam=new MethodParameter(constructorToUse,i);
          GenericTypeResolver.resolveParameterType(methodParam,constructorToUse.getDeclaringClass());
          if (argValue instanceof AutowiredArgumentMarker) {
            argValue=resolveAutowiredArgument(methodParam,beanName,null,converter);
          }
 else           if (argValue instanceof BeanMetadataElement) {
            argValue=valueResolver.resolveValueIfNecessary("constructor argument",argValue);
          }
          argsToUse[i]=converter.convertIfNecessary(argValue,paramTypes[i],methodParam);
        }
      }
    }
  }
  if (constructorToUse == null) {
    boolean autowiring=(chosenCtors != null || mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);
    ConstructorArgumentValues resolvedValues=null;
    int minNrOfArgs=0;
    if (explicitArgs != null) {
      minNrOfArgs=explicitArgs.length;
    }
 else {
      ConstructorArgumentValues cargs=mbd.getConstructorArgumentValues();
      resolvedValues=new ConstructorArgumentValues();
      minNrOfArgs=resolveConstructorArguments(beanName,mbd,bw,cargs,resolvedValues);
    }
    Constructor[] candidates=(chosenCtors != null ? chosenCtors : mbd.getBeanClass().getDeclaredConstructors());
    AutowireUtils.sortConstructors(candidates);
    int minTypeDiffWeight=Integer.MAX_VALUE;
    for (int i=0; i < candidates.length; i++) {
      Constructor candidate=candidates[i];
      Class[] paramTypes=candidate.getParameterTypes();
      if (constructorToUse != null && argsToUse.length > paramTypes.length) {
        break;
      }
      if (paramTypes.length < minNrOfArgs) {
        throw new BeanCreationException(mbd.getResourceDescription(),beanName,minNrOfArgs + " constructor arguments specified but no matching constructor found in bean '" + beanName+ "' "+ "(hint: specify index and/or type arguments for simple parameters to avoid type ambiguities)");
      }
      ArgumentsHolder args=null;
      List causes=null;
      if (resolvedValues != null) {
        try {
          args=createArgumentArray(beanName,mbd,resolvedValues,bw,paramTypes,candidate,autowiring);
        }
 catch (        UnsatisfiedDependencyException ex) {
          if (this.beanFactory.logger.isTraceEnabled()) {
            this.beanFactory.logger.trace("Ignoring constructor [" + candidate + "] of bean '"+ beanName+ "': "+ ex);
          }
          if (i == candidates.length - 1 && constructorToUse == null) {
            if (causes != null) {
              for (Iterator it=causes.iterator(); it.hasNext(); ) {
                this.beanFactory.onSuppressedException((Exception)it.next());
              }
            }
            throw ex;
          }
 else {
            if (causes == null) {
              causes=new LinkedList();
            }
            causes.add(ex);
            continue;
          }
        }
      }
 else {
        if (paramTypes.length != explicitArgs.length) {
          continue;
        }
        args=new ArgumentsHolder(explicitArgs);
      }
      int typeDiffWeight=args.getTypeDifferenceWeight(paramTypes);
      if (typeDiffWeight < minTypeDiffWeight) {
        constructorToUse=candidate;
        argsToUse=args.arguments;
        minTypeDiffWeight=typeDiffWeight;
      }
    }
    if (constructorToUse == null) {
      throw new BeanCreationException(mbd.getResourceDescription(),beanName,"Could not resolve matching constructor");
    }
    if (explicitArgs == null) {
      mbd.resolvedConstructorOrFactoryMethod=constructorToUse;
    }
  }
  try {
    Object beanInstance=this.instantiationStrategy.instantiate(mbd,beanName,this.beanFactory,constructorToUse,argsToUse);
    bw.setWrappedInstance(beanInstance);
    return bw;
  }
 catch (  Throwable ex) {
    throw new BeanCreationException(mbd.getResourceDescription(),beanName,"Instantiation of bean failed",ex);
  }
}
