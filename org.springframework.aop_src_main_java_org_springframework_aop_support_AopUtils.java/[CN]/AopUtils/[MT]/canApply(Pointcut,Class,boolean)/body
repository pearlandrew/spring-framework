{
  if (!pc.getClassFilter().matches(targetClass)) {
    return false;
  }
  MethodMatcher methodMatcher=pc.getMethodMatcher();
  IntroductionAwareMethodMatcher introductionAwareMethodMatcher=null;
  if (methodMatcher instanceof IntroductionAwareMethodMatcher) {
    introductionAwareMethodMatcher=(IntroductionAwareMethodMatcher)methodMatcher;
  }
  Set classes=new HashSet(ClassUtils.getAllInterfacesForClassAsSet(targetClass));
  classes.add(targetClass);
  for (Iterator it=classes.iterator(); it.hasNext(); ) {
    Class clazz=(Class)it.next();
    Method[] methods=clazz.getMethods();
    for (int j=0; j < methods.length; j++) {
      if ((introductionAwareMethodMatcher != null && introductionAwareMethodMatcher.matches(methods[j],targetClass,hasIntroductions)) || methodMatcher.matches(methods[j],targetClass)) {
        return true;
      }
    }
  }
  return false;
}
