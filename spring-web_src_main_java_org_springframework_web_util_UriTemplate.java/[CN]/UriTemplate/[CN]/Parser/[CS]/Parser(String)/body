{
  Assert.hasText(uriTemplate,"'uriTemplate' must not be null");
  Matcher matcher=NAMES_PATTERN.matcher(uriTemplate);
  int end=0;
  while (matcher.find()) {
    this.patternBuilder.append(quote(uriTemplate,end,matcher.start()));
    String match=matcher.group(1);
    int colonIdx=match.indexOf(':');
    if (colonIdx == -1) {
      this.patternBuilder.append(DEFAULT_VARIABLE_PATTERN);
      this.variableNames.add(match);
    }
 else {
      if (colonIdx + 1 == match.length()) {
        throw new IllegalArgumentException("No custom regular expression specified after ':' in \"" + match + "\"");
      }
      String variablePattern=match.substring(colonIdx + 1,match.length());
      this.patternBuilder.append('(');
      this.patternBuilder.append(variablePattern);
      this.patternBuilder.append(')');
      String variableName=match.substring(0,colonIdx);
      this.variableNames.add(variableName);
    }
    end=matcher.end();
  }
  this.patternBuilder.append(quote(uriTemplate,end,uriTemplate.length()));
  int lastIdx=this.patternBuilder.length() - 1;
  if (lastIdx >= 0 && this.patternBuilder.charAt(lastIdx) == '/') {
    this.patternBuilder.deleteCharAt(lastIdx);
  }
}
