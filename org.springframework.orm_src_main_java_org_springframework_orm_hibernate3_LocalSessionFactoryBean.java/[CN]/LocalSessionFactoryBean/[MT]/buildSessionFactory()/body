{
  Configuration config=newConfiguration();
  DataSource dataSource=getDataSource();
  if (dataSource != null) {
    configTimeDataSourceHolder.set(dataSource);
  }
  if (this.jtaTransactionManager != null) {
    configTimeTransactionManagerHolder.set(this.jtaTransactionManager);
  }
  if (this.cacheProvider != null) {
    configTimeCacheProviderHolder.set(this.cacheProvider);
  }
  if (this.lobHandler != null) {
    configTimeLobHandlerHolder.set(this.lobHandler);
  }
  Thread currentThread=Thread.currentThread();
  ClassLoader threadContextClassLoader=currentThread.getContextClassLoader();
  boolean overrideClassLoader=(this.beanClassLoader != null && !this.beanClassLoader.equals(threadContextClassLoader));
  if (overrideClassLoader) {
    currentThread.setContextClassLoader(this.beanClassLoader);
  }
  try {
    if (isExposeTransactionAwareSessionFactory()) {
      config.setProperty(Environment.CURRENT_SESSION_CONTEXT_CLASS,SpringSessionContext.class.getName());
    }
    if (this.jtaTransactionManager != null) {
      config.setProperty(Environment.TRANSACTION_STRATEGY,JTATransactionFactory.class.getName());
      config.setProperty(Environment.TRANSACTION_MANAGER_STRATEGY,LocalTransactionManagerLookup.class.getName());
    }
 else {
      config.setProperty(Environment.TRANSACTION_STRATEGY,SpringTransactionFactory.class.getName());
    }
    if (this.entityInterceptor != null) {
      config.setInterceptor(this.entityInterceptor);
    }
    if (this.namingStrategy != null) {
      config.setNamingStrategy(this.namingStrategy);
    }
    if (this.typeDefinitions != null) {
      Mappings mappings=config.createMappings();
      for (int i=0; i < this.typeDefinitions.length; i++) {
        TypeDefinitionBean typeDef=this.typeDefinitions[i];
        mappings.addTypeDef(typeDef.getTypeName(),typeDef.getTypeClass(),typeDef.getParameters());
      }
    }
    if (this.filterDefinitions != null) {
      for (int i=0; i < this.filterDefinitions.length; i++) {
        config.addFilterDefinition(this.filterDefinitions[i]);
      }
    }
    if (this.configLocations != null) {
      for (int i=0; i < this.configLocations.length; i++) {
        config.configure(this.configLocations[i].getURL());
      }
    }
    if (this.hibernateProperties != null) {
      config.addProperties(this.hibernateProperties);
    }
    if (dataSource != null) {
      Class providerClass=LocalDataSourceConnectionProvider.class;
      if (isUseTransactionAwareDataSource() || dataSource instanceof TransactionAwareDataSourceProxy) {
        providerClass=TransactionAwareDataSourceConnectionProvider.class;
      }
 else       if (config.getProperty(Environment.TRANSACTION_MANAGER_STRATEGY) != null) {
        providerClass=LocalJtaDataSourceConnectionProvider.class;
      }
      config.setProperty(Environment.CONNECTION_PROVIDER,providerClass.getName());
    }
    if (this.cacheProvider != null) {
      config.setProperty(Environment.CACHE_PROVIDER,LocalCacheProviderProxy.class.getName());
    }
    if (this.mappingResources != null) {
      for (int i=0; i < this.mappingResources.length; i++) {
        Resource resource=new ClassPathResource(this.mappingResources[i].trim(),this.beanClassLoader);
        config.addInputStream(resource.getInputStream());
      }
    }
    if (this.mappingLocations != null) {
      for (int i=0; i < this.mappingLocations.length; i++) {
        config.addInputStream(this.mappingLocations[i].getInputStream());
      }
    }
    if (this.cacheableMappingLocations != null) {
      for (int i=0; i < this.cacheableMappingLocations.length; i++) {
        config.addCacheableFile(this.cacheableMappingLocations[i].getFile());
      }
    }
    if (this.mappingJarLocations != null) {
      for (int i=0; i < this.mappingJarLocations.length; i++) {
        Resource resource=this.mappingJarLocations[i];
        config.addJar(resource.getFile());
      }
    }
    if (this.mappingDirectoryLocations != null) {
      for (int i=0; i < this.mappingDirectoryLocations.length; i++) {
        File file=this.mappingDirectoryLocations[i].getFile();
        if (!file.isDirectory()) {
          throw new IllegalArgumentException("Mapping directory location [" + this.mappingDirectoryLocations[i] + "] does not denote a directory");
        }
        config.addDirectory(file);
      }
    }
    postProcessMappings(config);
    config.buildMappings();
    if (this.entityCacheStrategies != null) {
      for (Enumeration classNames=this.entityCacheStrategies.propertyNames(); classNames.hasMoreElements(); ) {
        String className=(String)classNames.nextElement();
        String[] strategyAndRegion=StringUtils.commaDelimitedListToStringArray(this.entityCacheStrategies.getProperty(className));
        if (strategyAndRegion.length > 1) {
          config.setCacheConcurrencyStrategy(className,strategyAndRegion[0],strategyAndRegion[1]);
        }
 else         if (strategyAndRegion.length > 0) {
          config.setCacheConcurrencyStrategy(className,strategyAndRegion[0]);
        }
      }
    }
    if (this.collectionCacheStrategies != null) {
      for (Enumeration collRoles=this.collectionCacheStrategies.propertyNames(); collRoles.hasMoreElements(); ) {
        String collRole=(String)collRoles.nextElement();
        String[] strategyAndRegion=StringUtils.commaDelimitedListToStringArray(this.collectionCacheStrategies.getProperty(collRole));
        if (strategyAndRegion.length > 1) {
          config.setCollectionCacheConcurrencyStrategy(collRole,strategyAndRegion[0],strategyAndRegion[1]);
        }
 else         if (strategyAndRegion.length > 0) {
          config.setCollectionCacheConcurrencyStrategy(collRole,strategyAndRegion[0]);
        }
      }
    }
    if (this.eventListeners != null) {
      for (Iterator it=this.eventListeners.entrySet().iterator(); it.hasNext(); ) {
        Map.Entry entry=(Map.Entry)it.next();
        Assert.isTrue(entry.getKey() instanceof String,"Event listener key needs to be of type String");
        String listenerType=(String)entry.getKey();
        Object listenerObject=entry.getValue();
        if (listenerObject instanceof Collection) {
          Collection listeners=(Collection)listenerObject;
          EventListeners listenerRegistry=config.getEventListeners();
          Object[] listenerArray=(Object[])Array.newInstance(listenerRegistry.getListenerClassFor(listenerType),listeners.size());
          listenerArray=listeners.toArray(listenerArray);
          config.setListeners(listenerType,listenerArray);
        }
 else {
          config.setListener(listenerType,listenerObject);
        }
      }
    }
    postProcessConfiguration(config);
    logger.info("Building new Hibernate SessionFactory");
    this.configuration=config;
    return newSessionFactory(config);
  }
  finally {
    if (dataSource != null) {
      configTimeDataSourceHolder.set(null);
    }
    if (this.jtaTransactionManager != null) {
      configTimeTransactionManagerHolder.set(null);
    }
    if (this.cacheProvider != null) {
      configTimeCacheProviderHolder.set(null);
    }
    if (this.lobHandler != null) {
      configTimeLobHandlerHolder.set(null);
    }
    if (overrideClassLoader) {
      currentThread.setContextClassLoader(threadContextClassLoader);
    }
  }
}
