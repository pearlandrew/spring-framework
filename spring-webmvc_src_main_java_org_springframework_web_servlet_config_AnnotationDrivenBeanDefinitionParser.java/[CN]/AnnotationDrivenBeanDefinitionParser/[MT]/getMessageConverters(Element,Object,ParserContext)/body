{
  Element convertersElement=DomUtils.getChildElementByTagName(element,"message-converters");
  ManagedList<? super Object> messageConverters=new ManagedList<Object>();
  if (convertersElement != null) {
    messageConverters.setSource(source);
    for (    Element beanElement : DomUtils.getChildElementsByTagName(convertersElement,new String[]{"bean","ref"})) {
      Object object=parserContext.getDelegate().parsePropertySubElement(beanElement,null);
      messageConverters.add(object);
    }
  }
  if (convertersElement == null || Boolean.valueOf(convertersElement.getAttribute("register-defaults"))) {
    messageConverters.setSource(source);
    messageConverters.add(createConverterBeanDefinition(ByteArrayHttpMessageConverter.class,source));
    RootBeanDefinition stringConverterDef=createConverterBeanDefinition(StringHttpMessageConverter.class,source);
    stringConverterDef.getPropertyValues().add("writeAcceptCharset",false);
    messageConverters.add(stringConverterDef);
    messageConverters.add(createConverterBeanDefinition(ResourceHttpMessageConverter.class,source));
    messageConverters.add(createConverterBeanDefinition(SourceHttpMessageConverter.class,source));
    messageConverters.add(createConverterBeanDefinition(AllEncompassingFormHttpMessageConverter.class,source));
    if (romePresent) {
      messageConverters.add(createConverterBeanDefinition(AtomFeedHttpMessageConverter.class,source));
      messageConverters.add(createConverterBeanDefinition(RssChannelHttpMessageConverter.class,source));
    }
    if (jaxb2Present) {
      messageConverters.add(createConverterBeanDefinition(Jaxb2RootElementHttpMessageConverter.class,source));
    }
    if (jackson2Present) {
      messageConverters.add(createConverterBeanDefinition(MappingJackson2HttpMessageConverter.class,source));
    }
 else     if (jacksonPresent) {
      messageConverters.add(createConverterBeanDefinition(org.springframework.http.converter.json.MappingJacksonHttpMessageConverter.class,source));
    }
  }
  return messageConverters;
}
