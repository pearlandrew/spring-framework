{
  this.protocolHandlers.clear();
  for (  SubProtocolHandler handler : protocolHandlers) {
    List<String> protocols=handler.getSupportedProtocols();
    if (CollectionUtils.isEmpty(protocols)) {
      logger.warn("No sub-protocols, ignoring handler " + handler);
      continue;
    }
    for (    String protocol : protocols) {
      SubProtocolHandler replaced=this.protocolHandlers.put(protocol,handler);
      if (replaced != null) {
        throw new IllegalStateException("Failed to map handler " + handler + " to protocol '"+ protocol+ "', it is already mapped to handler "+ replaced);
      }
    }
  }
  if ((this.protocolHandlers.size() == 1) && (this.defaultProtocolHandler == null)) {
    this.defaultProtocolHandler=this.protocolHandlers.values().iterator().next();
  }
}
