{
  TestBean target=new TestBean("myname",99);
  final HttpInvokerServiceExporter exporter=new HttpInvokerServiceExporter(){
    protected RemoteInvocation doReadRemoteInvocation(    ObjectInputStream ois) throws IOException, ClassNotFoundException {
      Object obj=ois.readObject();
      if (!(obj instanceof TestRemoteInvocationWrapper)) {
        throw new IOException("Deserialized object needs to be assignable to type [" + TestRemoteInvocationWrapper.class.getName() + "]: "+ obj);
      }
      return ((TestRemoteInvocationWrapper)obj).remoteInvocation;
    }
    protected void doWriteRemoteInvocationResult(    RemoteInvocationResult result,    ObjectOutputStream oos) throws IOException {
      oos.writeObject(new TestRemoteInvocationResultWrapper(result));
    }
  }
;
  exporter.setServiceInterface(ITestBean.class);
  exporter.setService(target);
  exporter.afterPropertiesSet();
  HttpInvokerProxyFactoryBean pfb=new HttpInvokerProxyFactoryBean();
  pfb.setServiceInterface(ITestBean.class);
  pfb.setServiceUrl("http://myurl");
  pfb.setHttpInvokerRequestExecutor(new AbstractHttpInvokerRequestExecutor(){
    protected RemoteInvocationResult doExecuteRequest(    HttpInvokerClientConfiguration config,    ByteArrayOutputStream baos) throws Exception {
      assertEquals("http://myurl",config.getServiceUrl());
      MockHttpServletRequest request=new MockHttpServletRequest();
      MockHttpServletResponse response=new MockHttpServletResponse();
      request.setContent(baos.toByteArray());
      exporter.handleRequest(request,response);
      return readRemoteInvocationResult(new ByteArrayInputStream(response.getContentAsByteArray()),config.getCodebaseUrl());
    }
    protected void doWriteRemoteInvocation(    RemoteInvocation invocation,    ObjectOutputStream oos) throws IOException {
      oos.writeObject(new TestRemoteInvocationWrapper(invocation));
    }
    protected RemoteInvocationResult doReadRemoteInvocationResult(    ObjectInputStream ois) throws IOException, ClassNotFoundException {
      Object obj=ois.readObject();
      if (!(obj instanceof TestRemoteInvocationResultWrapper)) {
        throw new IOException("Deserialized object needs to be assignable to type [" + TestRemoteInvocationResultWrapper.class.getName() + "]: "+ obj);
      }
      return ((TestRemoteInvocationResultWrapper)obj).remoteInvocationResult;
    }
  }
);
  pfb.afterPropertiesSet();
  ITestBean proxy=(ITestBean)pfb.getObject();
  assertEquals("myname",proxy.getName());
  assertEquals(99,proxy.getAge());
  proxy.setAge(50);
  assertEquals(50,proxy.getAge());
  try {
    proxy.exceptional(new IllegalStateException());
    fail("Should have thrown IllegalStateException");
  }
 catch (  IllegalStateException ex) {
  }
  try {
    proxy.exceptional(new IllegalAccessException());
    fail("Should have thrown IllegalAccessException");
  }
 catch (  IllegalAccessException ex) {
  }
}
