{
  SpelNodeImpl leftOp=getLeftOperand();
  SpelNodeImpl rightOp=getRightOperand();
  if (rightOp == null) {
    Object operand=leftOp.getValueInternal(state).getValue();
    if (operand instanceof Number) {
      if (operand instanceof BigDecimal) {
        return new TypedValue(((BigDecimal)operand).negate());
      }
 else       if (operand instanceof Double) {
        this.exitTypeDescriptor="D";
        return new TypedValue(0 - ((Number)operand).doubleValue());
      }
 else       if (operand instanceof Float) {
        this.exitTypeDescriptor="F";
        return new TypedValue(0 - ((Number)operand).floatValue());
      }
 else       if (operand instanceof BigInteger) {
        return new TypedValue(((BigInteger)operand).negate());
      }
 else       if (operand instanceof Long) {
        this.exitTypeDescriptor="J";
        return new TypedValue(0 - ((Number)operand).longValue());
      }
 else       if (operand instanceof Integer) {
        this.exitTypeDescriptor="I";
        return new TypedValue(0 - ((Number)operand).intValue());
      }
 else       if (operand instanceof Short) {
        return new TypedValue(0 - ((Number)operand).shortValue());
      }
 else       if (operand instanceof Byte) {
        return new TypedValue(0 - ((Number)operand).byteValue());
      }
 else {
        return new TypedValue(0 - ((Number)operand).doubleValue());
      }
    }
    return state.operate(Operation.SUBTRACT,operand,null);
  }
  Object left=leftOp.getValueInternal(state).getValue();
  Object right=rightOp.getValueInternal(state).getValue();
  if (left instanceof Number && right instanceof Number) {
    Number leftNumber=(Number)left;
    Number rightNumber=(Number)right;
    if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) {
      BigDecimal leftBigDecimal=NumberUtils.convertNumberToTargetClass(leftNumber,BigDecimal.class);
      BigDecimal rightBigDecimal=NumberUtils.convertNumberToTargetClass(rightNumber,BigDecimal.class);
      return new TypedValue(leftBigDecimal.subtract(rightBigDecimal));
    }
 else     if (leftNumber instanceof Double || rightNumber instanceof Double) {
      this.exitTypeDescriptor="D";
      return new TypedValue(leftNumber.doubleValue() - rightNumber.doubleValue());
    }
 else     if (leftNumber instanceof Float || rightNumber instanceof Float) {
      this.exitTypeDescriptor="F";
      return new TypedValue(leftNumber.floatValue() - rightNumber.floatValue());
    }
 else     if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) {
      BigInteger leftBigInteger=NumberUtils.convertNumberToTargetClass(leftNumber,BigInteger.class);
      BigInteger rightBigInteger=NumberUtils.convertNumberToTargetClass(rightNumber,BigInteger.class);
      return new TypedValue(leftBigInteger.subtract(rightBigInteger));
    }
 else     if (leftNumber instanceof Long || rightNumber instanceof Long) {
      this.exitTypeDescriptor="J";
      return new TypedValue(leftNumber.longValue() - rightNumber.longValue());
    }
 else     if (CodeFlow.isIntegerForNumericOp(leftNumber) || CodeFlow.isIntegerForNumericOp(rightNumber)) {
      this.exitTypeDescriptor="I";
      return new TypedValue(leftNumber.intValue() - rightNumber.intValue());
    }
 else {
      return new TypedValue(leftNumber.doubleValue() - rightNumber.doubleValue());
    }
  }
  if (left instanceof String && right instanceof Integer && ((String)left).length() == 1) {
    String theString=(String)left;
    Integer theInteger=(Integer)right;
    return new TypedValue(Character.toString((char)(theString.charAt(0) - theInteger)));
  }
  return state.operate(Operation.SUBTRACT,left,right);
}
