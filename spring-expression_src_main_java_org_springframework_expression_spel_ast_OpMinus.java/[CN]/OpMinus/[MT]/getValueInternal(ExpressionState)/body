{
  SpelNodeImpl leftOp=getLeftOperand();
  SpelNodeImpl rightOp=getRightOperand();
  if (rightOp == null) {
    Object operand=leftOp.getValueInternal(state).getValue();
    if (operand instanceof Number) {
      Number n=(Number)operand;
      if (operand instanceof BigDecimal) {
        BigDecimal bdn=(BigDecimal)n;
        return new TypedValue(bdn.negate());
      }
      if (operand instanceof Double) {
        return new TypedValue(0 - n.doubleValue());
      }
      if (operand instanceof Float) {
        return new TypedValue(0 - n.floatValue());
      }
      if (operand instanceof Long) {
        return new TypedValue(0 - n.longValue());
      }
      return new TypedValue(0 - n.intValue());
    }
    return state.operate(Operation.SUBTRACT,operand,null);
  }
  Object left=leftOp.getValueInternal(state).getValue();
  Object right=rightOp.getValueInternal(state).getValue();
  if (left instanceof Number && right instanceof Number) {
    Number leftNumber=(Number)left;
    Number rightNumber=(Number)right;
    if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) {
      BigDecimal leftBigDecimal=NumberUtils.convertNumberToTargetClass(leftNumber,BigDecimal.class);
      BigDecimal rightBigDecimal=NumberUtils.convertNumberToTargetClass(rightNumber,BigDecimal.class);
      return new TypedValue(leftBigDecimal.subtract(rightBigDecimal));
    }
    if (leftNumber instanceof Double || rightNumber instanceof Double) {
      return new TypedValue(leftNumber.doubleValue() - rightNumber.doubleValue());
    }
    if (leftNumber instanceof Float || rightNumber instanceof Float) {
      return new TypedValue(leftNumber.floatValue() - rightNumber.floatValue());
    }
    if (leftNumber instanceof Long || rightNumber instanceof Long) {
      return new TypedValue(leftNumber.longValue() - rightNumber.longValue());
    }
    return new TypedValue(leftNumber.intValue() - rightNumber.intValue());
  }
 else   if (left instanceof String && right instanceof Integer && ((String)left).length() == 1) {
    String theString=(String)left;
    Integer theInteger=(Integer)right;
    return new TypedValue(Character.toString((char)(theString.charAt(0) - theInteger)));
  }
  return state.operate(Operation.SUBTRACT,left,right);
}
