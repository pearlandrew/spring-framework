{
  Message<?> message;
  try {
    Assert.isInstanceOf(TextMessage.class,webSocketMessage);
    String payload=((TextMessage)webSocketMessage).getPayload();
    ByteBuffer byteBuffer=ByteBuffer.wrap(payload.getBytes(Charset.forName("UTF-8")));
    message=this.stompDecoder.decode(byteBuffer);
  }
 catch (  Throwable error) {
    logger.error("Failed to parse STOMP frame, WebSocket message payload: ",error);
    sendErrorMessage(session,error);
    return;
  }
  if (logger.isTraceEnabled()) {
    logger.trace("Message " + message);
  }
  try {
    StompHeaderAccessor headers=StompHeaderAccessor.wrap(message);
    headers.setSessionId(session.getId());
    headers.setUser(session.getPrincipal());
    message=MessageBuilder.withPayloadAndHeaders(message.getPayload(),headers).build();
    if (this.handleConnect && SimpMessageType.CONNECT.equals(headers.getMessageType())) {
      handleConnect(session,message);
    }
 else {
      outputChannel.send(message);
    }
  }
 catch (  Throwable t) {
    logger.error("Terminating STOMP session due to failure to send message: ",t);
    sendErrorMessage(session,t);
  }
}
