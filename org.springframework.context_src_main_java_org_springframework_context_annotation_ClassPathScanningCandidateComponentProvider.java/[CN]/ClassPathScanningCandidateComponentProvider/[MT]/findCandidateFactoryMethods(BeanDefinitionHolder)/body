{
  Set<BeanDefinition> candidates=new LinkedHashSet<BeanDefinition>();
  AbstractBeanDefinition containingBeanDef=(AbstractBeanDefinition)beanDefinitionHolder.getBeanDefinition();
  Resource resource=containingBeanDef.getResource();
  boolean debugEnabled=logger.isDebugEnabled();
  boolean traceEnabled=logger.isTraceEnabled();
  try {
    if (resource.isReadable()) {
      MetadataReader metadataReader=this.metadataReaderFactory.getMetadataReader(resource);
      Set<MethodMetadata> factoryMethodMetadataSet=metadataReader.getAnnotationMetadata().getAnnotatedMethods("org.springframework.beans.factory.annotation.FactoryMethod");
      for (      MethodMetadata methodMetadata : factoryMethodMetadataSet) {
        if (isCandidateFactoryMethod(methodMetadata)) {
          ScannedGenericBeanDefinition factoryBeanDef=new ScannedGenericBeanDefinition(metadataReader);
          if (!methodMetadata.isStatic()) {
            factoryBeanDef.setFactoryBeanName(beanDefinitionHolder.getBeanName());
          }
          factoryBeanDef.setFactoryMethodName(methodMetadata.getMethodName());
          addQualifierToFactoryMethodBeanDefinition(methodMetadata,factoryBeanDef);
          addScopeToFactoryMethodBeanDefinition(containingBeanDef,methodMetadata,factoryBeanDef);
          factoryBeanDef.setResource(containingBeanDef.getResource());
          factoryBeanDef.setSource(containingBeanDef.getSource());
          if (debugEnabled) {
            logger.debug("Identified candidate factory method in class: " + resource);
          }
          candidates.add(factoryBeanDef);
          RootBeanDefinition scopedFactoryBeanDef=null;
          if (methodMetadata.hasAnnotation(SCOPEDPROXY_CLASS_NAME)) {
            Map<String,Object> attributes=methodMetadata.getAnnotationAttributes(SCOPEDPROXY_CLASS_NAME);
            scopedFactoryBeanDef=new RootBeanDefinition(ScopedProxyFactoryBean.class);
            String t=scopedFactoryBeanDef.getBeanClassName();
            String targetBeanName=createFactoryBeanName(beanDefinitionHolder.getBeanName(),factoryBeanDef.getFactoryMethodName());
            scopedFactoryBeanDef.getPropertyValues().addPropertyValue("targetBeanName",targetBeanName);
            scopedFactoryBeanDef.setAutowireCandidate(false);
            scopedFactoryBeanDef.setResource(containingBeanDef.getResource());
            scopedFactoryBeanDef.setSource(containingBeanDef.getSource());
            candidates.add(scopedFactoryBeanDef);
          }
        }
 else {
          if (traceEnabled) {
            logger.trace("Ignored because not matching any filter: " + resource);
          }
        }
      }
    }
  }
 catch (  IOException ex) {
    throw new BeanDefinitionStoreException("I/O failure during classpath scanning",ex);
  }
  return candidates;
}
