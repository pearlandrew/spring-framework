{
  this.parserContext=parserContext;
  source=parserContext.extractSource(element);
  CompositeComponentDefinition compDefinition=new CompositeComponentDefinition(element.getTagName(),source);
  parserContext.pushContainingComponent(compDefinition);
  List<Element> viewResolverElements=DomUtils.getChildElementsByTagName(element,new String[]{"jsp","tiles","bean-name","freemarker"});
  for (  Element viewResolverElement : viewResolverElements) {
    if ("jsp".equals(viewResolverElement.getLocalName())) {
      registerInternalResourceViewResolverBean(parserContext,viewResolverElement);
      System.out.println("Registered Internalresource view resolver");
    }
    if ("bean-name".equals(viewResolverElement.getLocalName())) {
      registerBeanNameViewResolverBean(parserContext,viewResolverElement);
      System.out.println("Registered BeanNameViewResolverBean view resolver");
    }
    if ("tiles".equals(viewResolverElement.getLocalName())) {
      registerTilesViewResolverBean(parserContext,viewResolverElement);
      registerTilesConfigurerBean(parserContext,viewResolverElement);
    }
    if ("freemarker".equals(viewResolverElement.getLocalName())) {
      registerFreemarkerViewResolverBean(parserContext,viewResolverElement);
      registerFreemarkerConfigurerBean(parserContext,viewResolverElement);
    }
  }
  parserContext.popAndRegisterContainingComponent();
  return null;
}
