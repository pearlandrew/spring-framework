{
  Object source=context.extractSource(element);
  context.pushContainingComponent(new CompositeComponentDefinition(element.getTagName(),source));
  ManagedList<Object> resolvers=new ManagedList<Object>(4);
  resolvers.setSource(context.extractSource(element));
  String[] names=new String[]{"jsp","tiles","bean-name","freemarker","velocity","groovy","bean","ref"};
  for (  Element resolverElement : DomUtils.getChildElementsByTagName(element,names)) {
    String name=resolverElement.getLocalName();
    if ("bean".equals(name) || "ref".equals(name)) {
      resolvers.add(context.getDelegate().parsePropertySubElement(resolverElement,null));
      continue;
    }
    RootBeanDefinition resolverBeanDef=null;
    if ("jsp".equals(name)) {
      resolverBeanDef=new RootBeanDefinition(InternalResourceViewResolver.class);
      resolverBeanDef.getPropertyValues().add("prefix","/WEB-INF/");
      resolverBeanDef.getPropertyValues().add("suffix",".jsp");
      addUrlBasedViewResolverProperties(resolverElement,resolverBeanDef);
    }
 else     if ("tiles".equals(name)) {
      resolverBeanDef=new RootBeanDefinition(TilesViewResolver.class);
      addUrlBasedViewResolverProperties(resolverElement,resolverBeanDef);
    }
 else     if ("freemarker".equals(name)) {
      resolverBeanDef=new RootBeanDefinition(FreeMarkerViewResolver.class);
      resolverBeanDef.getPropertyValues().add("suffix",".ftl");
      addUrlBasedViewResolverProperties(resolverElement,resolverBeanDef);
    }
 else     if ("velocity".equals(name)) {
      resolverBeanDef=new RootBeanDefinition(VelocityViewResolver.class);
      resolverBeanDef.getPropertyValues().add("suffix",".vm");
      addUrlBasedViewResolverProperties(resolverElement,resolverBeanDef);
    }
 else     if ("groovy".equals(name)) {
      resolverBeanDef=new RootBeanDefinition(GroovyMarkupViewResolver.class);
      resolverBeanDef.getPropertyValues().add("suffix",".tpl");
      addUrlBasedViewResolverProperties(resolverElement,resolverBeanDef);
    }
 else     if ("bean-name".equals(name)) {
      resolverBeanDef=new RootBeanDefinition(BeanNameViewResolver.class);
    }
 else {
      throw new IllegalStateException("Unexpected element name: " + name);
    }
    resolverBeanDef.setSource(source);
    resolverBeanDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
    resolvers.add(resolverBeanDef);
  }
  String beanName=VIEW_RESOLVER_BEAN_NAME;
  RootBeanDefinition compositeResolverBeanDef=new RootBeanDefinition(ViewResolverComposite.class);
  compositeResolverBeanDef.setSource(source);
  compositeResolverBeanDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
  names=new String[]{"content-negotiation"};
  List<Element> contentnNegotiationElements=DomUtils.getChildElementsByTagName(element,names);
  if (contentnNegotiationElements.isEmpty()) {
    compositeResolverBeanDef.getPropertyValues().add("viewResolvers",resolvers);
  }
 else   if (contentnNegotiationElements.size() == 1) {
    BeanDefinition beanDef=createContentNegotiatingViewResolver(contentnNegotiationElements.get(0),context);
    beanDef.getPropertyValues().add("viewResolvers",resolvers);
    ManagedList<Object> list=new ManagedList<Object>(1);
    list.add(beanDef);
    compositeResolverBeanDef.getPropertyValues().add("order",Ordered.HIGHEST_PRECEDENCE);
    compositeResolverBeanDef.getPropertyValues().add("viewResolvers",list);
  }
 else   if (contentnNegotiationElements.size() > 1) {
    throw new IllegalArgumentException("Only one <content-negotiation> element is allowed.");
  }
  if (element.hasAttribute("order")) {
    compositeResolverBeanDef.getPropertyValues().add("order",element.getAttribute("order"));
  }
  context.getReaderContext().getRegistry().registerBeanDefinition(beanName,compositeResolverBeanDef);
  context.registerComponent(new BeanComponentDefinition(compositeResolverBeanDef,beanName));
  context.popAndRegisterContainingComponent();
  return null;
}
