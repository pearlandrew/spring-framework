{
  GenericApplicationContext context=new GenericApplicationContext();
  ClassPathBeanDefinitionScanner scanner=new ClassPathBeanDefinitionScanner(context);
  SimpleMapScope scope=new SimpleMapScope();
  context.getBeanFactory().registerScope("request",scope);
  int beanCount=scanner.scan(BASE_PACKAGE);
  assertEquals(NUM_FACTORY_METHODS + NUM_COMPONENT_DEFS + NUM_DEFAULT_BEAN_DEFS,beanCount);
  assertTrue(context.containsBean("factoryMethodComponent"));
  assertTrue(context.containsBean("factoryMethodComponent$staticInstance"));
  assertTrue(context.containsBean("factoryMethodComponent$getPublicInstance"));
  TestBean staticTestBean=(TestBean)context.getBean("factoryMethodComponent$staticInstance");
  assertEquals("staticInstance",staticTestBean.getName());
  TestBean staticTestBean2=(TestBean)context.getBean("factoryMethodComponent$staticInstance");
  assertSame(staticTestBean,staticTestBean2);
  TestBean tb=(TestBean)context.getBean("factoryMethodComponent$getPublicInstance");
  assertEquals("publicInstance",tb.getName());
  TestBean tb2=(TestBean)context.getBean("factoryMethodComponent$getPublicInstance");
  assertEquals("publicInstance",tb2.getName());
  assertSame(tb2,tb);
  ConfigurableListableBeanFactory cbf=(ConfigurableListableBeanFactory)context.getAutowireCapableBeanFactory();
  AbstractBeanDefinition abd=(AbstractBeanDefinition)cbf.getBeanDefinition("factoryMethodComponent$getPublicInstance");
  Set<AutowireCandidateQualifier> qualifierSet=abd.getQualifiers();
  assertEquals(1,qualifierSet.size());
  tb=(TestBean)context.getBean("factoryMethodComponent$getProtectedInstance");
  assertEquals("protectedInstance",tb.getName());
  tb2=(TestBean)context.getBean("factoryMethodComponent$getProtectedInstance");
  assertEquals("protectedInstance",tb2.getName());
  assertSame(tb2,tb);
  tb=(TestBean)context.getBean("factoryMethodComponent$getPrivateInstance");
  assertEquals("privateInstance",tb.getName());
  assertEquals(0,tb.getAge());
  tb2=(TestBean)context.getBean("factoryMethodComponent$getPrivateInstance");
  assertEquals(1,tb2.getAge());
  assertNotSame(tb2,tb);
  Object bean=context.getBean("scopedTarget.factoryMethodComponent$requestScopedInstance");
  assertNotNull(bean);
  assertTrue(bean instanceof ScopedObject);
  assertTrue(AopUtils.isCglibProxy(bean));
}
