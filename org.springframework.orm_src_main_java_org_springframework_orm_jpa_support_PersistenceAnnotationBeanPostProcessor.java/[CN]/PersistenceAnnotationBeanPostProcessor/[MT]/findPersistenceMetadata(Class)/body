{
  InjectionMetadata metadata=this.injectionMetadataCache.get(clazz);
  if (metadata == null) {
synchronized (this.injectionMetadataCache) {
      metadata=this.injectionMetadataCache.get(clazz);
      if (metadata == null) {
        final InjectionMetadata newMetadata=new InjectionMetadata(clazz);
        ReflectionUtils.doWithFields(clazz,new ReflectionUtils.FieldCallback(){
          public void doWith(          Field field){
            PersistenceContext pc=field.getAnnotation(PersistenceContext.class);
            PersistenceUnit pu=field.getAnnotation(PersistenceUnit.class);
            if (pc != null || pu != null) {
              if (Modifier.isStatic(field.getModifiers())) {
                throw new IllegalStateException("Persistence annotations are not supported on static fields");
              }
              newMetadata.addInjectedField(new PersistenceElement(field,null));
            }
          }
        }
);
        ReflectionUtils.doWithMethods(clazz,new ReflectionUtils.MethodCallback(){
          public void doWith(          Method method){
            PersistenceContext pc=method.getAnnotation(PersistenceContext.class);
            PersistenceUnit pu=method.getAnnotation(PersistenceUnit.class);
            if (pc != null || pu != null && method.equals(ClassUtils.getMostSpecificMethod(method,clazz))) {
              if (Modifier.isStatic(method.getModifiers())) {
                throw new IllegalStateException("Persistence annotations are not supported on static methods");
              }
              if (method.getParameterTypes().length != 1) {
                throw new IllegalStateException("Persistence annotation requires a single-arg method: " + method);
              }
              PropertyDescriptor pd=BeanUtils.findPropertyForMethod(method);
              newMetadata.addInjectedMethod(new PersistenceElement(method,pd));
            }
          }
        }
);
        metadata=newMetadata;
        this.injectionMetadataCache.put(clazz,metadata);
      }
    }
  }
  return metadata;
}
