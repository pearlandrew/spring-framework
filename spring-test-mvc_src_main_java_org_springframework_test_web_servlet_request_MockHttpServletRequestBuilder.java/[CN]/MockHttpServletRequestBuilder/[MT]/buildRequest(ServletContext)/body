{
  MockHttpServletRequest request=createServletRequest(servletContext);
  String requestUri=this.uriComponents.getPath();
  request.setRequestURI(requestUri);
  updatePathRequestProperties(request,requestUri);
  if (this.uriComponents.getScheme() != null) {
    request.setScheme(this.uriComponents.getScheme());
  }
  if (this.uriComponents.getHost() != null) {
    request.setServerName(uriComponents.getHost());
  }
  if (this.uriComponents.getPort() != -1) {
    request.setServerPort(this.uriComponents.getPort());
  }
  request.setMethod(this.method.name());
  for (  String name : this.headers.keySet()) {
    for (    Object value : this.headers.get(name)) {
      request.addHeader(name,value);
    }
  }
  try {
    if (this.uriComponents.getQuery() != null) {
      String query=UriUtils.decode(this.uriComponents.getQuery(),"UTF-8");
      request.setQueryString(query);
    }
    for (    Entry<String,List<String>> entry : this.uriComponents.getQueryParams().entrySet()) {
      for (      String value : entry.getValue()) {
        request.addParameter(UriUtils.decode(entry.getKey(),"UTF-8"),UriUtils.decode(value,"UTF-8"));
      }
    }
  }
 catch (  UnsupportedEncodingException ex) {
  }
  for (  String name : this.parameters.keySet()) {
    for (    String value : this.parameters.get(name)) {
      request.addParameter(name,value);
    }
  }
  request.setContentType(this.contentType);
  request.setContent(this.content);
  request.setCookies(this.cookies.toArray(new Cookie[this.cookies.size()]));
  if (this.locale != null) {
    request.addPreferredLocale(this.locale);
  }
  request.setCharacterEncoding(this.characterEncoding);
  request.setUserPrincipal(this.principal);
  if (this.secure != null) {
    request.setSecure(this.secure);
  }
  for (  String name : this.attributes.keySet()) {
    request.setAttribute(name,this.attributes.get(name));
  }
  if (this.session != null) {
    request.setSession(this.session);
  }
  for (  String name : this.sessionAttributes.keySet()) {
    request.getSession().setAttribute(name,this.sessionAttributes.get(name));
  }
  FlashMap flashMap=new FlashMap();
  flashMap.putAll(this.flashAttributes);
  FlashMapManager flashMapManager=getFlashMapManager(request);
  flashMapManager.saveOutputFlashMap(flashMap,request,new MockHttpServletResponse());
  for (  RequestPostProcessor postProcessor : this.postProcessors) {
    request=postProcessor.postProcessRequest(request);
    Assert.notNull(request,"Post-processor [" + postProcessor.getClass().getName() + "] returned null");
  }
  return request;
}
