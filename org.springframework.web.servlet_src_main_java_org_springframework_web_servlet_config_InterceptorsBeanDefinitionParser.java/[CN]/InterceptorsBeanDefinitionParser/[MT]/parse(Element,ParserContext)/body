{
  CompositeComponentDefinition compDefinition=new CompositeComponentDefinition(element.getTagName(),parserContext.extractSource(element));
  parserContext.pushContainingComponent(compDefinition);
  List<Element> interceptors=DomUtils.getChildElementsByTagName(element,new String[]{"bean","interceptor"});
  for (  Element interceptor : interceptors) {
    RootBeanDefinition mappedInterceptorDef=new RootBeanDefinition(MappedInterceptor.class);
    mappedInterceptorDef.setSource(parserContext.extractSource(interceptor));
    mappedInterceptorDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
    String[] pathPatterns;
    BeanDefinitionHolder interceptorDef;
    if ("interceptor".equals(interceptor.getLocalName())) {
      List<Element> paths=DomUtils.getChildElementsByTagName(interceptor,"mapping");
      pathPatterns=new String[paths.size()];
      for (int i=0; i < paths.size(); i++) {
        pathPatterns[i]=paths.get(i).getAttribute("path");
      }
      Element interceptorBean=DomUtils.getChildElementByTagName(interceptor,"bean");
      interceptorDef=parserContext.getDelegate().parseBeanDefinitionElement(interceptorBean);
      interceptorDef=parserContext.getDelegate().decorateBeanDefinitionIfRequired(interceptorBean,interceptorDef);
    }
 else {
      pathPatterns=null;
      interceptorDef=parserContext.getDelegate().parseBeanDefinitionElement(interceptor);
      interceptorDef=parserContext.getDelegate().decorateBeanDefinitionIfRequired(interceptor,interceptorDef);
    }
    mappedInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(0,pathPatterns);
    mappedInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(1,interceptorDef);
    String mappedInterceptorName=parserContext.getReaderContext().registerWithGeneratedName(mappedInterceptorDef);
    parserContext.registerComponent(new BeanComponentDefinition(mappedInterceptorDef,mappedInterceptorName));
  }
  parserContext.popAndRegisterContainingComponent();
  return null;
}
