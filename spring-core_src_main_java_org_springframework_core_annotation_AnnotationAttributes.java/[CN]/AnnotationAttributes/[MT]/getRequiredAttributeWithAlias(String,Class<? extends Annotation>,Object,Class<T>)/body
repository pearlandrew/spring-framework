{
  Assert.hasText(attributeName,"attributeName must not be null or empty");
  Assert.notNull(annotationType,"annotationType must not be null");
  Assert.notNull(expectedType,"expectedType must not be null");
  T attributeValue=getAttribute(attributeName,expectedType);
  List<String> aliasNames=AnnotationUtils.getAttributeAliasMap(annotationType).get(attributeName);
  if (aliasNames != null) {
    for (    String aliasName : aliasNames) {
      T aliasValue=getAttribute(aliasName,expectedType);
      boolean attributeEmpty=ObjectUtils.isEmpty(attributeValue);
      boolean aliasEmpty=ObjectUtils.isEmpty(aliasValue);
      if (!attributeEmpty && !aliasEmpty && !ObjectUtils.nullSafeEquals(attributeValue,aliasValue)) {
        String elementName=(annotationSource == null ? "unknown element" : annotationSource.toString());
        String msg=String.format("In annotation [%s] declared on [%s], attribute [%s] and its alias [%s] " + "are present with values of [%s] and [%s], but only one is permitted.",annotationType.getName(),elementName,attributeName,aliasName,ObjectUtils.nullSafeToString(attributeValue),ObjectUtils.nullSafeToString(aliasValue));
        throw new AnnotationConfigurationException(msg);
      }
      if (expectedType.isArray() && attributeValue == null && aliasValue != null) {
        attributeValue=aliasValue;
      }
 else       if (attributeEmpty && !aliasEmpty) {
        attributeValue=aliasValue;
      }
    }
    assertAttributePresence(attributeName,aliasNames,attributeValue);
  }
  return attributeValue;
}
