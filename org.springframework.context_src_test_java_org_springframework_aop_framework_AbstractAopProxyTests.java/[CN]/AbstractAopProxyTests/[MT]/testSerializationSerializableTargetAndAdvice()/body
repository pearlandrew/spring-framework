{
  SerializablePerson personTarget=new SerializablePerson();
  personTarget.setName("jim");
  personTarget.setAge(26);
  assertTrue(SerializationTestUtils.isSerializable(personTarget));
  ProxyFactory pf=new ProxyFactory(personTarget);
  CountingThrowsAdvice cta=new CountingThrowsAdvice();
  pf.addAdvice(new SerializableNopInterceptor());
  pf.addAdvice(new CountingBeforeAdvice());
  pf.addAdvice(new CountingAfterReturningAdvice());
  pf.addAdvice(cta);
  Person p=(Person)createAopProxy(pf).getProxy();
  p.echo(null);
  assertEquals(0,cta.getCalls());
  try {
    p.echo(new IOException());
  }
 catch (  IOException ex) {
  }
  assertEquals(1,cta.getCalls());
  Person p2=(Person)SerializationTestUtils.serializeAndDeserialize(p);
  assertNotSame(p,p2);
  assertEquals(p.getName(),p2.getName());
  assertEquals(p.getAge(),p2.getAge());
  assertTrue("Deserialized object is an AOP proxy",AopUtils.isAopProxy(p2));
  Advised a1=(Advised)p;
  Advised a2=(Advised)p2;
  assertEquals(a1.getAdvisors().length,a2.getAdvisors().length);
  assertEquals("Proxies should be equal, even after one was serialized",p,p2);
  assertEquals("Proxies should be equal, even after one was serialized",p2,p);
  NopInterceptor ni=new NopInterceptor();
  p2.getAge();
  assertEquals(0,ni.getCount());
  a2.addAdvice(ni);
  p2.getAge();
  assertEquals(1,ni.getCount());
  cta=(CountingThrowsAdvice)a2.getAdvisors()[3].getAdvice();
  p2.echo(null);
  assertEquals(1,cta.getCalls());
  try {
    p2.echo(new IOException());
  }
 catch (  IOException ex) {
  }
  assertEquals(2,cta.getCalls());
}
