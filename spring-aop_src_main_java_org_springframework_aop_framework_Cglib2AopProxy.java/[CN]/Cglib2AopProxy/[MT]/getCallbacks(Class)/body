{
  boolean exposeProxy=this.advised.isExposeProxy();
  boolean isFrozen=this.advised.isFrozen();
  boolean isStatic=this.advised.getTargetSource().isStatic();
  Callback aopInterceptor=new DynamicAdvisedInterceptor(this.advised);
  Callback targetInterceptor;
  if (exposeProxy) {
    targetInterceptor=isStatic ? new StaticUnadvisedExposedInterceptor(this.advised.getTargetSource().getTarget()) : new DynamicUnadvisedExposedInterceptor(this.advised.getTargetSource());
  }
 else {
    targetInterceptor=isStatic ? new StaticUnadvisedInterceptor(this.advised.getTargetSource().getTarget()) : new DynamicUnadvisedInterceptor(this.advised.getTargetSource());
  }
  Callback targetDispatcher=isStatic ? new StaticDispatcher(this.advised.getTargetSource().getTarget()) : new SerializableNoOp();
  Callback[] mainCallbacks=new Callback[]{aopInterceptor,targetInterceptor,new SerializableNoOp(),targetDispatcher,this.advisedDispatcher,new EqualsInterceptor(this.advised),new HashCodeInterceptor(this.advised)};
  Callback[] callbacks;
  if (isStatic && isFrozen) {
    Method[] methods=rootClass.getMethods();
    Callback[] fixedCallbacks=new Callback[methods.length];
    this.fixedInterceptorMap=new HashMap<String,Integer>(methods.length);
    for (int x=0; x < methods.length; x++) {
      List<Object> chain=this.advised.getInterceptorsAndDynamicInterceptionAdvice(methods[x],rootClass);
      fixedCallbacks[x]=new FixedChainStaticTargetInterceptor(chain,this.advised.getTargetSource().getTarget(),this.advised.getTargetClass());
      this.fixedInterceptorMap.put(methods[x].toString(),x);
    }
    callbacks=new Callback[mainCallbacks.length + fixedCallbacks.length];
    System.arraycopy(mainCallbacks,0,callbacks,0,mainCallbacks.length);
    System.arraycopy(fixedCallbacks,0,callbacks,mainCallbacks.length,fixedCallbacks.length);
    this.fixedInterceptorOffset=mainCallbacks.length;
  }
 else {
    callbacks=mainCallbacks;
  }
  return callbacks;
}
