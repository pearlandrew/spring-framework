{
  TypedValue op=state.getActiveContextObject();
  Object operand=op.getValue();
  boolean operandIsArray=ObjectUtils.isArray(operand);
  if (operand instanceof Map) {
    Map<?,?> mapData=(Map<?,?>)operand;
    List<Object> result=new ArrayList<Object>();
    for (    Map.Entry<?,?> entry : mapData.entrySet()) {
      try {
        state.pushActiveContextObject(new TypedValue(entry));
        result.add(this.children[0].getValueInternal(state).getValue());
      }
  finally {
        state.popActiveContextObject();
      }
    }
    return new ValueRef.TypedValueHolderValueRef(new TypedValue(result),this);
  }
  if (operand instanceof Collection || operandIsArray) {
    Collection<?> data=(operand instanceof Collection ? (Collection<?>)operand : Arrays.asList(ObjectUtils.toObjectArray(operand)));
    List<Object> result=new ArrayList<Object>();
    int idx=0;
    Class<?> arrayElementType=null;
    for (    Object element : data) {
      try {
        state.pushActiveContextObject(new TypedValue(element));
        state.enterScope("index",idx);
        Object value=this.children[0].getValueInternal(state).getValue();
        if (value != null && operandIsArray) {
          arrayElementType=determineCommonType(arrayElementType,value.getClass());
        }
        result.add(value);
      }
  finally {
        state.exitScope();
        state.popActiveContextObject();
      }
      idx++;
    }
    if (operandIsArray) {
      if (arrayElementType == null) {
        arrayElementType=Object.class;
      }
      Object resultArray=Array.newInstance(arrayElementType,result.size());
      System.arraycopy(result.toArray(),0,resultArray,0,result.size());
      return new ValueRef.TypedValueHolderValueRef(new TypedValue(resultArray),this);
    }
    return new ValueRef.TypedValueHolderValueRef(new TypedValue(result),this);
  }
  if (operand == null) {
    if (this.nullSafe) {
      return ValueRef.NullValueRef.instance;
    }
    throw new SpelEvaluationException(getStartPosition(),SpelMessage.PROJECTION_NOT_SUPPORTED_ON_TYPE,"null");
  }
  throw new SpelEvaluationException(getStartPosition(),SpelMessage.PROJECTION_NOT_SUPPORTED_ON_TYPE,operand.getClass().getName());
}
