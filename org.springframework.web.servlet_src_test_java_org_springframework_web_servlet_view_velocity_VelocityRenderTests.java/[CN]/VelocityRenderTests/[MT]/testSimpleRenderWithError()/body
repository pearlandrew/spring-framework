{
  thrown.expect(NestedServletException.class);
  thrown.expect(new TypeSafeMatcher<Exception>(){
    @Override public boolean matchesSafely(    Exception item){
      return item.getCause() instanceof MethodInvocationException;
    }
    @Override public void describeTo(    Description description){
      description.appendText("exception has cause of MethodInvocationException");
    }
  }
);
  VelocityConfigurer vc=new VelocityConfigurer();
  vc.setPreferFileSystemAccess(false);
  vc.setVelocityPropertiesMap(Collections.<String,Object>singletonMap("runtime.references.strict","true"));
  VelocityEngine ve=vc.createVelocityEngine();
  VelocityView view=new VelocityView();
  view.setBeanName("myView");
  view.setUrl("org/springframework/web/servlet/view/velocity/error.vm");
  view.setVelocityEngine(ve);
  view.setApplicationContext(wac);
  Map<String,Object> model=new HashMap<String,Object>();
  model.put("command",new TestBean("juergen",99));
  view.render(model,request,response);
}
