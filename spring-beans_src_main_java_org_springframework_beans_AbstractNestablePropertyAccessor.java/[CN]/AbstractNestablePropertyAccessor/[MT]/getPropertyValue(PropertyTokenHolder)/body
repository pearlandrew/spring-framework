{
  String propertyName=tokens.canonicalName;
  String actualName=tokens.actualName;
  PropertyHandler ph=getLocalPropertyHandler(actualName);
  if (ph == null || !ph.isReadable()) {
    throw new NotReadablePropertyException(getRootClass(),this.nestedPath + propertyName);
  }
  try {
    Object value=ph.getValue();
    if (tokens.keys != null) {
      if (value == null) {
        if (isAutoGrowNestedPaths()) {
          value=setDefaultValue(tokens.actualName);
        }
 else {
          throw new NullValueInNestedPathException(getRootClass(),this.nestedPath + propertyName,"Cannot access indexed value of property referenced in indexed " + "property path '" + propertyName + "': returned null");
        }
      }
      String indexedPropertyName=tokens.actualName;
      for (int i=0; i < tokens.keys.length; i++) {
        String key=tokens.keys[i];
        if (value == null) {
          throw new NullValueInNestedPathException(getRootClass(),this.nestedPath + propertyName,"Cannot access indexed value of property referenced in indexed " + "property path '" + propertyName + "': returned null");
        }
 else         if (value.getClass().isArray()) {
          int index=Integer.parseInt(key);
          value=growArrayIfNecessary(value,index,indexedPropertyName);
          value=Array.get(value,index);
        }
 else         if (value instanceof List) {
          int index=Integer.parseInt(key);
          List<Object> list=(List<Object>)value;
          growCollectionIfNecessary(list,index,indexedPropertyName,ph,i + 1);
          value=list.get(index);
        }
 else         if (value instanceof Set) {
          Set<Object> set=(Set<Object>)value;
          int index=Integer.parseInt(key);
          if (index < 0 || index >= set.size()) {
            throw new InvalidPropertyException(getRootClass(),this.nestedPath + propertyName,"Cannot get element with index " + index + " from Set of size "+ set.size()+ ", accessed using property path '"+ propertyName+ "'");
          }
          Iterator<Object> it=set.iterator();
          for (int j=0; it.hasNext(); j++) {
            Object elem=it.next();
            if (j == index) {
              value=elem;
              break;
            }
          }
        }
 else         if (value instanceof Map) {
          Map<Object,Object> map=(Map<Object,Object>)value;
          Class<?> mapKeyType=ph.getResolvableType().getNested(i + 1).asMap().resolveGeneric(0);
          TypeDescriptor typeDescriptor=TypeDescriptor.valueOf(mapKeyType);
          Object convertedMapKey=convertIfNecessary(null,null,key,mapKeyType,typeDescriptor);
          value=map.get(convertedMapKey);
        }
 else {
          throw new InvalidPropertyException(getRootClass(),this.nestedPath + propertyName,"Property referenced in indexed property path '" + propertyName + "' is neither an array nor a List nor a Set nor a Map; returned value was ["+ value+ "]");
        }
        indexedPropertyName+=PROPERTY_KEY_PREFIX + key + PROPERTY_KEY_SUFFIX;
      }
    }
    return value;
  }
 catch (  IndexOutOfBoundsException ex) {
    throw new InvalidPropertyException(getRootClass(),this.nestedPath + propertyName,"Index of out of bounds in property path '" + propertyName + "'",ex);
  }
catch (  NumberFormatException ex) {
    throw new InvalidPropertyException(getRootClass(),this.nestedPath + propertyName,"Invalid index in property path '" + propertyName + "'",ex);
  }
catch (  TypeMismatchException ex) {
    throw new InvalidPropertyException(getRootClass(),this.nestedPath + propertyName,"Invalid index in property path '" + propertyName + "'",ex);
  }
catch (  InvocationTargetException ex) {
    throw new InvalidPropertyException(getRootClass(),this.nestedPath + propertyName,"Getter for property '" + actualName + "' threw exception",ex);
  }
catch (  Exception ex) {
    throw new InvalidPropertyException(getRootClass(),this.nestedPath + propertyName,"Illegal attempt to get property '" + actualName + "' threw exception",ex);
  }
}
