{
  String sockJsPath=getSockJsPath(request);
  if (sockJsPath == null) {
    logger.warn("Could not determine SockJS path for URL \"" + request.getURI().getPath() + ". Consider setting validSockJsPrefixes.");
    response.setStatusCode(HttpStatus.NOT_FOUND);
    return;
  }
  logger.debug(request.getMethod() + " with SockJS path [" + sockJsPath+ "]");
  try {
    request.getHeaders();
  }
 catch (  IllegalArgumentException ex) {
  }
  try {
    if (sockJsPath.equals("") || sockJsPath.equals("/")) {
      response.getHeaders().setContentType(new MediaType("text","plain",Charset.forName("UTF-8")));
      response.getBody().write("Welcome to SockJS!\n".getBytes("UTF-8"));
      return;
    }
 else     if (sockJsPath.equals("/info")) {
      this.infoHandler.handle(request,response);
      return;
    }
 else     if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {
      this.iframeHandler.handle(request,response);
      return;
    }
 else     if (sockJsPath.equals("/websocket")) {
      handleRawWebSocketRequest(request,response,handler);
      return;
    }
    String[] pathSegments=StringUtils.tokenizeToStringArray(sockJsPath.substring(1),"/");
    if (pathSegments.length != 3) {
      logger.warn("Expected \"/{server}/{session}/{transport}\" but got \"" + sockJsPath + "\"");
      response.setStatusCode(HttpStatus.NOT_FOUND);
      return;
    }
    String serverId=pathSegments[0];
    String sessionId=pathSegments[1];
    String transport=pathSegments[2];
    if (!validateRequest(serverId,sessionId,transport)) {
      response.setStatusCode(HttpStatus.NOT_FOUND);
      return;
    }
    handleTransportRequest(request,response,sessionId,TransportType.fromValue(transport),handler);
  }
  finally {
    response.flush();
  }
}
