{
  String elementName=(propertyName != null) ? "<property> element for property '" + propertyName + "'" : "<constructor-arg> element";
  NodeList nl=ele.getChildNodes();
  Element subElement=null;
  for (int i=0; i < nl.getLength(); i++) {
    Node node=nl.item(i);
    if (node instanceof Element && !DomUtils.nodeNameEquals(node,DESCRIPTION_ELEMENT) && !DomUtils.nodeNameEquals(node,META_ELEMENT)) {
      if (subElement != null) {
        error(elementName + " must not contain more than one sub-element",ele);
      }
 else {
        subElement=(Element)node;
      }
    }
  }
  boolean hasRefAttribute=ele.hasAttribute(REF_ATTRIBUTE);
  boolean hasValueAttribute=ele.hasAttribute(VALUE_ATTRIBUTE);
  if ((hasRefAttribute && hasValueAttribute) || ((hasRefAttribute || hasValueAttribute) && subElement != null)) {
    error(elementName + " is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element",ele);
  }
  if (hasRefAttribute) {
    String refName=ele.getAttribute(REF_ATTRIBUTE);
    if (!StringUtils.hasText(refName)) {
      error(elementName + " contains empty 'ref' attribute",ele);
    }
    RuntimeBeanReference ref=new RuntimeBeanReference(refName);
    ref.setSource(extractSource(ele));
    return ref;
  }
 else   if (hasValueAttribute) {
    TypedStringValue valueHolder=new TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE));
    valueHolder.setSource(extractSource(ele));
    return valueHolder;
  }
 else   if (subElement != null) {
    return parsePropertySubElement(subElement,bd);
  }
 else {
    error(elementName + " must specify a ref or value",ele);
    return null;
  }
}
