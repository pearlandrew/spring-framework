{
  Assert.notNull(declaringClass,"Declaring class must not be null");
  List<Class<?>> configClasses=new ArrayList<Class<?>>();
  for (  Class<?> configClass : declaringClass.getDeclaredClasses()) {
    if (isDefaultConfigurationClassCandidate(configClass)) {
      configClasses.add(configClass);
    }
 else {
      if (logger.isDebugEnabled()) {
        logger.debug(String.format("Ignoring class [%s]; it must be static, non-private, non-final, and annotated " + "with @Configuration to be considered a default configuration class.",configClass.getName()));
      }
    }
  }
  if (configClasses.isEmpty()) {
    logger.warn(String.format("Test class [%s] does not declare any static, non-private, non-final, inner classes annotated " + "with @Configuration that can be used as a default configuration class.",declaringClass));
  }
  return configClasses.toArray(new Class<?>[configClasses.size()]);
}
