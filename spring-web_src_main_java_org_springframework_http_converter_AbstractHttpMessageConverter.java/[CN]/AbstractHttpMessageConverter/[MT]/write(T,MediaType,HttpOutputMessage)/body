{
  final HttpHeaders headers=outputMessage.getHeaders();
  if (headers.getContentType() == null) {
    if (contentType == null || contentType.isWildcardType() || contentType.isWildcardSubtype()) {
      contentType=getDefaultContentType(t);
    }
    if (contentType != null) {
      headers.setContentType(contentType);
    }
  }
  if (headers.getContentLength() == -1) {
    Long contentLength=getContentLength(t,headers.getContentType());
    if (contentLength != null) {
      headers.setContentLength(contentLength);
    }
  }
  if (outputMessage instanceof StreamingHttpOutputMessage) {
    StreamingHttpOutputMessage streamingOutputMessage=(StreamingHttpOutputMessage)outputMessage;
    streamingOutputMessage.setBody(new StreamingHttpOutputMessage.Body(){
      @Override public void writeTo(      final OutputStream outputStream) throws IOException {
        writeInternal(t,new HttpOutputMessage(){
          @Override public OutputStream getBody() throws IOException {
            return outputStream;
          }
          @Override public HttpHeaders getHeaders(){
            return headers;
          }
          @Override public Cookies getCookies(){
            return null;
          }
        }
);
      }
    }
);
  }
 else {
    writeInternal(t,outputMessage);
    outputMessage.getBody().flush();
  }
}
