{
  request.addHeader("Accept","text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
  MediaType mediaType=new MediaType("application","xml");
  FixedContentNegotiationStrategy fixedStrategy=new FixedContentNegotiationStrategy(mediaType);
  viewResolver.setContentNegotiationManager(new ContentNegotiationManager(fixedStrategy));
  ViewResolver viewResolverMock1=createMock("viewResolver1",ViewResolver.class);
  ViewResolver viewResolverMock2=createMock("viewResolver2",ViewResolver.class);
  viewResolver.setViewResolvers(Arrays.asList(viewResolverMock1,viewResolverMock2));
  viewResolver.afterPropertiesSet();
  View viewMock1=createMock("application_xml",View.class);
  View viewMock2=createMock("text_html",View.class);
  String viewName="view";
  Locale locale=Locale.ENGLISH;
  expect(viewResolverMock1.resolveViewName(viewName,locale)).andReturn(viewMock1);
  expect(viewResolverMock2.resolveViewName(viewName,locale)).andReturn(viewMock2);
  expect(viewMock1.getContentType()).andReturn("application/xml").anyTimes();
  expect(viewMock2.getContentType()).andReturn("text/html;charset=ISO-8859-1").anyTimes();
  replay(viewResolverMock1,viewResolverMock2,viewMock1,viewMock2);
  View result=viewResolver.resolveViewName(viewName,locale);
  assertSame("Invalid view",viewMock1,result);
  verify(viewResolverMock1,viewResolverMock2,viewMock1,viewMock2);
}
