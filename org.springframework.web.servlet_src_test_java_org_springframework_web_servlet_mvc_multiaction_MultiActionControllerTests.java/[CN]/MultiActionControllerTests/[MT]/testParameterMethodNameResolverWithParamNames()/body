{
  ParameterMethodNameResolver resolver=new ParameterMethodNameResolver();
  resolver.setDefaultMethodName("default");
  resolver.setMethodParamNames(new String[]{"hello","spring","colin"});
  Properties logicalMappings=new Properties();
  logicalMappings.setProperty("hello","goodbye");
  logicalMappings.setProperty("nina","colin");
  resolver.setLogicalMappings(logicalMappings);
  MockHttpServletRequest request=new MockHttpServletRequest();
  request.addParameter("this will not match anything","whatever");
  assertEquals("default",resolver.getHandlerMethodName(request));
  request=new MockHttpServletRequest();
  request.addParameter("action","reset");
  assertEquals("reset",resolver.getHandlerMethodName(request));
  request=new MockHttpServletRequest();
  request.addParameter("action","nina");
  assertEquals("colin",resolver.getHandlerMethodName(request));
  request=new MockHttpServletRequest();
  request.addParameter("hello","whatever");
  assertEquals("goodbye",resolver.getHandlerMethodName(request));
  request=new MockHttpServletRequest();
  request.addParameter("spring","whatever");
  assertEquals("spring",resolver.getHandlerMethodName(request));
  request=new MockHttpServletRequest();
  request.addParameter("hello","whatever");
  request.addParameter("spring","whatever");
  assertEquals("goodbye",resolver.getHandlerMethodName(request));
  request=new MockHttpServletRequest();
  request.addParameter("colin","whatever");
  request.addParameter("spring","whatever");
  assertEquals("spring",resolver.getHandlerMethodName(request));
  request=new MockHttpServletRequest();
  request.addParameter("spring.x","whatever");
  assertEquals("spring",resolver.getHandlerMethodName(request));
  request=new MockHttpServletRequest();
  request.addParameter("hello.x","whatever");
  request.addParameter("spring","whatever");
  assertEquals("goodbye",resolver.getHandlerMethodName(request));
}
