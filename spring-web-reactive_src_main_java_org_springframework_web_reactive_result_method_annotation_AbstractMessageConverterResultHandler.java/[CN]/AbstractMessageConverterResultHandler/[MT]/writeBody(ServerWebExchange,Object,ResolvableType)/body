{
  boolean convertToFlux=getConversionService().canConvert(bodyType.getRawClass(),Flux.class);
  boolean convertToMono=getConversionService().canConvert(bodyType.getRawClass(),Mono.class);
  ResolvableType elementType=convertToFlux || convertToMono ? bodyType.getGeneric(0) : bodyType;
  Publisher<?> publisher;
  if (body == null) {
    publisher=Mono.empty();
  }
 else   if (convertToMono) {
    publisher=getConversionService().convert(body,Mono.class);
  }
 else   if (convertToFlux) {
    publisher=getConversionService().convert(body,Flux.class);
  }
 else {
    publisher=Mono.just(body);
  }
  if (Void.class.equals(elementType.getRawClass())) {
    return Mono.from((Publisher<Void>)publisher);
  }
  List<MediaType> producibleTypes=getProducibleMediaTypes(elementType);
  if (producibleTypes.isEmpty()) {
    return Mono.error(new IllegalStateException("No converter for return value type: " + elementType));
  }
  MediaType bestMediaType=selectMediaType(exchange,producibleTypes);
  if (bestMediaType != null) {
    for (    HttpMessageConverter<?> converter : getMessageConverters()) {
      if (converter.canWrite(elementType,bestMediaType)) {
        ServerHttpResponse response=exchange.getResponse();
        return converter.write((Publisher)publisher,elementType,bestMediaType,response);
      }
    }
  }
  return Mono.error(new NotAcceptableStatusException(producibleTypes));
}
