{
  Queue destination=mock(Queue.class);
  final TextMessage sentTextMessage=mock(TextMessage.class);
  given(sentTextMessage.getJMSCorrelationID()).willReturn(CORRELATION_ID);
  given(sentTextMessage.getJMSReplyTo()).willReturn(destination);
  TextMessage responseTextMessage=mock(TextMessage.class);
  QueueSender queueSender=mock(QueueSender.class);
  willThrow(new JMSException("Doe!")).given(queueSender).send(responseTextMessage);
  final QueueSession session=mock(QueueSession.class);
  given(session.createTextMessage(RESPONSE_TEXT)).willReturn(responseTextMessage);
  given(session.createSender(destination)).willReturn(queueSender);
  ResponsiveMessageDelegate delegate=mock(ResponsiveMessageDelegate.class);
  given(delegate.handleMessage(sentTextMessage)).willReturn(RESPONSE_TEXT);
  final MessageListenerAdapter102 adapter=new MessageListenerAdapter102(delegate){
    @Override protected Object extractMessage(    Message message){
      return message;
    }
  }
;
  try {
    adapter.onMessage(sentTextMessage,session);
    fail("expected JMSException");
  }
 catch (  JMSException ex) {
  }
  verify(responseTextMessage).setJMSCorrelationID(CORRELATION_ID);
  verify(queueSender).close();
  verify(delegate).handleMessage(sentTextMessage);
}
