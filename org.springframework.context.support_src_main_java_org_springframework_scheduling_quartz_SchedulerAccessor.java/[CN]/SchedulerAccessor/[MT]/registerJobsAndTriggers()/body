{
  TransactionStatus transactionStatus=null;
  if (this.transactionManager != null) {
    transactionStatus=this.transactionManager.getTransaction(new DefaultTransactionDefinition());
  }
  try {
    if (this.jobSchedulingDataLocations != null) {
      ClassLoadHelper clh=new ResourceLoaderClassLoadHelper(this.resourceLoader);
      clh.initialize();
      try {
        Class dataProcessorClass=getClass().getClassLoader().loadClass("import org.quartz.xml.XMLSchedulingDataProcessor");
        logger.debug("Using Quartz 1.8 XMLSchedulingDataProcessor");
        Object dataProcessor=dataProcessorClass.getConstructor(ClassLoadHelper.class).newInstance(clh);
        Method processFileAndScheduleJobs=dataProcessorClass.getMethod("processFileAndScheduleJobs",String.class,Scheduler.class);
        for (        String location : this.jobSchedulingDataLocations) {
          processFileAndScheduleJobs.invoke(dataProcessor,location,getScheduler());
        }
      }
 catch (      ClassNotFoundException ex) {
        Class dataProcessorClass=getClass().getClassLoader().loadClass("import org.quartz.xml.JobSchedulingDataProcessor");
        logger.debug("Using Quartz 1.6 JobSchedulingDataProcessor");
        Object dataProcessor=dataProcessorClass.getConstructor(ClassLoadHelper.class,boolean.class,boolean.class).newInstance(clh,true,true);
        Method processFileAndScheduleJobs=dataProcessorClass.getMethod("processFileAndScheduleJobs",String.class,Scheduler.class,boolean.class);
        for (        String location : this.jobSchedulingDataLocations) {
          processFileAndScheduleJobs.invoke(dataProcessor,location,getScheduler(),this.overwriteExistingJobs);
        }
      }
    }
    if (this.jobDetails != null) {
      for (      JobDetail jobDetail : this.jobDetails) {
        addJobToScheduler(jobDetail);
      }
    }
 else {
      this.jobDetails=new LinkedList<JobDetail>();
    }
    if (this.calendars != null) {
      for (      String calendarName : this.calendars.keySet()) {
        Calendar calendar=this.calendars.get(calendarName);
        getScheduler().addCalendar(calendarName,calendar,true,true);
      }
    }
    if (this.triggers != null) {
      for (      Trigger trigger : this.triggers) {
        addTriggerToScheduler(trigger);
      }
    }
  }
 catch (  Throwable ex) {
    if (transactionStatus != null) {
      try {
        this.transactionManager.rollback(transactionStatus);
      }
 catch (      TransactionException tex) {
        logger.error("Job registration exception overridden by rollback exception",ex);
        throw tex;
      }
    }
    if (ex instanceof SchedulerException) {
      throw (SchedulerException)ex;
    }
    if (ex instanceof Exception) {
      throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage(),ex);
    }
    throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage());
  }
  if (transactionStatus != null) {
    this.transactionManager.commit(transactionStatus);
  }
}
