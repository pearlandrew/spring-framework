{
  resolver=new RequestParamMethodArgumentResolver(null,true);
  assertTrue(resolver.supportsParameter(paramNamedDefaultValueString));
  assertTrue(resolver.supportsParameter(paramNamedStringArray));
  assertTrue(resolver.supportsParameter(paramNamedMap));
  assertTrue(resolver.supportsParameter(paramMultipartFile));
  assertTrue(resolver.supportsParameter(paramMultipartFileList));
  assertTrue(resolver.supportsParameter(paramMultipartFileArray));
  assertTrue(resolver.supportsParameter(paramPart));
  assertTrue(resolver.supportsParameter(paramPartList));
  assertTrue(resolver.supportsParameter(paramPartArray));
  assertFalse(resolver.supportsParameter(paramMap));
  assertTrue(resolver.supportsParameter(paramStringNotAnnot));
  assertTrue(resolver.supportsParameter(paramMultipartFileNotAnnot));
  assertTrue(resolver.supportsParameter(paramMultipartFileListNotAnnot));
  assertTrue(resolver.supportsParameter(paramPartNotAnnot));
  assertFalse(resolver.supportsParameter(paramRequestPartAnnot));
  assertTrue(resolver.supportsParameter(paramRequired));
  assertTrue(resolver.supportsParameter(paramNotRequired));
  assertTrue(resolver.supportsParameter(paramOptional));
  assertTrue(resolver.supportsParameter(multipartFileOptional));
  resolver=new RequestParamMethodArgumentResolver(null,false);
  assertFalse(resolver.supportsParameter(paramStringNotAnnot));
  assertFalse(resolver.supportsParameter(paramRequestPartAnnot));
}
