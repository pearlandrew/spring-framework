{
  resolver=new RequestParamMethodArgumentResolver(null,true);
  assertTrue("String parameter not supported",resolver.supportsParameter(paramNamedDefaultValueString));
  assertTrue("String array parameter not supported",resolver.supportsParameter(paramNamedStringArray));
  assertTrue("Named map not parameter supported",resolver.supportsParameter(paramNamedMap));
  assertTrue("MultipartFile parameter not supported",resolver.supportsParameter(paramMultipartFile));
  assertTrue("List<MultipartFile> parameter not supported",resolver.supportsParameter(paramMultipartFileList));
  assertTrue("MultipartFile[] parameter not supported",resolver.supportsParameter(paramMultipartFileArray));
  assertTrue("Part parameter not supported",resolver.supportsParameter(paramPart));
  assertTrue("List<Part> parameter not supported",resolver.supportsParameter(paramPartList));
  assertTrue("Part[] parameter not supported",resolver.supportsParameter(paramPartArray));
  assertFalse("non-@RequestParam parameter supported",resolver.supportsParameter(paramMap));
  assertTrue("Simple type params supported w/o annotations",resolver.supportsParameter(paramStringNotAnnot));
  assertTrue("MultipartFile parameter not supported",resolver.supportsParameter(paramMultipartFileNotAnnot));
  assertTrue("Part parameter not supported",resolver.supportsParameter(paramPartNotAnnot));
  resolver=new RequestParamMethodArgumentResolver(null,false);
  assertFalse(resolver.supportsParameter(paramStringNotAnnot));
  assertFalse(resolver.supportsParameter(paramRequestPartAnnot));
}
