{
  Assert.hasText(id,"The id of the custom converter is required");
  Assert.notNull(sourceClass,"The source class to convert from is required");
  Assert.notNull(targetClass,"The target class to convert to is required");
  Converter converter=(Converter)customConverters.get(id);
  if (converter == null) {
    if (parent != null) {
      return parent.getConversionExecutor(id,sourceClass,targetClass);
    }
 else {
      throw new ConversionExecutorNotFoundException(sourceClass,targetClass,"No custom Converter found with id '" + id + "' for converting from sourceClass ["+ sourceClass.getName()+ "] to targetClass ["+ targetClass.getName()+ "]");
    }
  }
  sourceClass=convertToWrapperClassIfNecessary(sourceClass);
  targetClass=convertToWrapperClassIfNecessary(targetClass);
  List typeInfo=getRequiredTypeInfo(converter);
  Class converterSourceClass=(Class)typeInfo.get(0);
  Class converterTargetClass=(Class)typeInfo.get(1);
  if (sourceClass.isArray()) {
    Class sourceComponentType=sourceClass.getComponentType();
    if (targetClass.isArray()) {
      Class targetComponentType=targetClass.getComponentType();
      if (converterSourceClass.isAssignableFrom(sourceComponentType)) {
        if (!converterTargetClass.equals(targetComponentType)) {
          throw new ConversionExecutorNotFoundException(sourceClass,targetClass,"Custom Converter with id '" + id + "' cannot convert from an array storing elements of type ["+ sourceComponentType.getName()+ "] to an array of storing elements of type ["+ targetComponentType.getName()+ "]");
        }
        ConversionExecutor elementConverter=new StaticConversionExecutor(sourceComponentType,targetComponentType,converter);
        return new StaticSuperConversionExecutor(sourceClass,targetClass,new ArrayToArray(elementConverter));
      }
 else       if (converterTargetClass.isAssignableFrom(sourceComponentType)) {
        if (!converterSourceClass.equals(targetComponentType)) {
          throw new ConversionExecutorNotFoundException(sourceClass,targetClass,"Custom Converter with id '" + id + "' cannot convert from an array storing elements of type ["+ sourceComponentType.getName()+ "] to an array of storing elements of type ["+ targetComponentType.getName()+ "]");
        }
        ConversionExecutor elementConverter=new StaticConversionExecutor(sourceComponentType,targetComponentType,new ReverseConverter(converter));
        return new StaticSuperConversionExecutor(sourceClass,targetClass,new ArrayToArray(elementConverter));
      }
 else {
        throw new ConversionExecutorNotFoundException(sourceClass,targetClass,"Custom Converter with id '" + id + "' cannot convert from an array storing elements of type ["+ sourceComponentType.getName()+ "] to an array storing elements of type ["+ targetComponentType.getName()+ "]");
      }
    }
 else     if (Collection.class.isAssignableFrom(targetClass)) {
      if (!targetClass.isInterface() && Modifier.isAbstract(targetClass.getModifiers())) {
        throw new IllegalArgumentException("Conversion target class [" + targetClass.getName() + "] is invalid; cannot convert to abstract collection types--"+ "request an interface or concrete implementation instead");
      }
      if (converterSourceClass.isAssignableFrom(sourceComponentType)) {
        ConversionExecutor elementConverter=new StaticConversionExecutor(sourceComponentType,converterTargetClass,converter);
        return new StaticSuperConversionExecutor(sourceClass,targetClass,new ArrayToCollection(elementConverter));
      }
 else       if (converterTargetClass.isAssignableFrom(sourceComponentType)) {
        ConversionExecutor elementConverter=new StaticConversionExecutor(sourceComponentType,converterSourceClass,new ReverseConverter(converter));
        return new StaticSuperConversionExecutor(sourceClass,targetClass,new ArrayToCollection(elementConverter));
      }
 else {
        throw new ConversionExecutorNotFoundException(sourceClass,targetClass,"Custom Converter with id '" + id + "' cannot convert from array an storing elements type ["+ sourceComponentType.getName()+ "] to a collection of type ["+ targetClass.getName()+ "]");
      }
    }
  }
  if (targetClass.isArray()) {
    Class targetComponentType=targetClass.getComponentType();
    if (Collection.class.isAssignableFrom(sourceClass)) {
      if (converterTargetClass.equals(targetComponentType)) {
        ConversionExecutor elementConverter=new StaticConversionExecutor(converterSourceClass,targetComponentType,converter);
        SuperConverter collectionToArray=new ReverseSuperConverter(new ArrayToCollection(elementConverter));
        return new StaticSuperConversionExecutor(sourceClass,targetClass,collectionToArray);
      }
 else       if (converterSourceClass.equals(targetComponentType)) {
        ConversionExecutor elementConverter=new StaticConversionExecutor(converterTargetClass,targetComponentType,new ReverseConverter(converter));
        SuperConverter collectionToArray=new ReverseSuperConverter(new ArrayToCollection(elementConverter));
        return new StaticSuperConversionExecutor(sourceClass,targetClass,collectionToArray);
      }
 else {
        throw new ConversionExecutorNotFoundException(sourceClass,targetClass,"Custom Converter with id '" + id + "' cannot convert from collection of type ["+ sourceClass.getName()+ "] to an array storing elements of type ["+ targetComponentType.getName()+ "]");
      }
    }
 else {
      if (converterSourceClass.isAssignableFrom(sourceClass)) {
        if (!converterTargetClass.equals(targetComponentType)) {
          throw new ConversionExecutorNotFoundException(sourceClass,targetClass,"Custom Converter with id '" + id + "' cannot convert from sourceClass ["+ sourceClass.getName()+ "] to array holding elements of type ["+ targetComponentType.getName()+ "]");
        }
        ConversionExecutor elementConverter=new StaticConversionExecutor(sourceClass,targetComponentType,converter);
        return new StaticSuperConversionExecutor(sourceClass,targetClass,new ObjectToArray(elementConverter));
      }
 else       if (converterTargetClass.isAssignableFrom(sourceClass)) {
        if (!converterSourceClass.equals(targetComponentType)) {
          throw new ConversionExecutorNotFoundException(sourceClass,targetClass,"Custom Converter with id '" + id + "' cannot convert from sourceClass ["+ sourceClass.getName()+ "] to array holding elements of type ["+ targetComponentType.getName()+ "]");
        }
        ConversionExecutor elementConverter=new StaticConversionExecutor(sourceClass,targetComponentType,new ReverseConverter(converter));
        return new StaticSuperConversionExecutor(sourceClass,targetClass,new ObjectToArray(elementConverter));
      }
    }
  }
  if (converterSourceClass.isAssignableFrom(sourceClass)) {
    if (!converterTargetClass.equals(targetClass)) {
      throw new ConversionExecutorNotFoundException(sourceClass,targetClass,"Custom Converter with id '" + id + "' cannot convert from sourceClass ["+ sourceClass.getName()+ "] to targetClass ["+ targetClass.getName()+ "]");
    }
    return new StaticConversionExecutor(sourceClass,targetClass,converter);
  }
 else   if (converterTargetClass.isAssignableFrom(sourceClass)) {
    if (!converterSourceClass.equals(targetClass)) {
      throw new ConversionExecutorNotFoundException(sourceClass,targetClass,"Custom Converter with id '" + id + "' cannot convert from sourceClass ["+ sourceClass.getName()+ "] to targetClass ["+ targetClass.getName()+ "]");
    }
    return new StaticConversionExecutor(sourceClass,targetClass,new ReverseConverter(converter));
  }
 else {
    throw new ConversionExecutorNotFoundException(sourceClass,targetClass,"Custom Converter with id '" + id + "' cannot convert from sourceClass ["+ sourceClass.getName()+ "] to targetClass ["+ targetClass.getName()+ "]");
  }
}
