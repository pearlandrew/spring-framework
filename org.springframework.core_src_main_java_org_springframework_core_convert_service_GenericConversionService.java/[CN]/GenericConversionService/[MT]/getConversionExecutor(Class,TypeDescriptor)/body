{
  Assert.notNull(sourceClass,"The sourceType to convert from is required");
  Assert.notNull(targetType,"The targetType to convert to is required");
  TypeDescriptor sourceType=TypeDescriptor.valueOf(sourceClass);
  if (sourceType.isArray()) {
    if (targetType.isArray()) {
      return new ArrayToArray(sourceType,targetType,this);
    }
 else     if (targetType.isCollection()) {
      if (targetType.isAbstractClass()) {
        throw new IllegalArgumentException("Conversion target class [" + targetType.getName() + "] is invalid; cannot convert to abstract collection types--"+ "request an interface or concrete implementation instead");
      }
      return new ArrayToCollection(sourceType,targetType,this);
    }
  }
  if (targetType.isArray()) {
    if (sourceType.isCollection()) {
      return new CollectionToArray(sourceType,targetType,this);
    }
 else {
      throw new UnsupportedOperationException("Object to Array conversion not yet supported");
    }
  }
  if (sourceType.isCollection()) {
    if (targetType.isCollection()) {
      return new CollectionToCollection(sourceType,targetType,this);
    }
 else {
      throw new UnsupportedOperationException("Object to Collection conversion not yet supported");
    }
  }
  if (sourceType.isMap()) {
    if (targetType.isMap()) {
      return new MapToMap(sourceType,targetType,this);
    }
 else {
      throw new UnsupportedOperationException("Object to Map conversion not yet supported");
    }
  }
  Converter converter=findRegisteredConverter(sourceClass,targetType.getType());
  if (converter != null) {
    return new StaticConversionExecutor(sourceType,targetType,converter);
  }
 else {
    SuperConverter superConverter=findRegisteredSuperConverter(sourceClass,targetType.getType());
    if (superConverter != null) {
      return new StaticSuperConversionExecutor(sourceType,targetType,superConverter);
    }
    if (parent != null) {
      return parent.getConversionExecutor(sourceClass,targetType);
    }
 else {
      if (sourceType.isAssignableTo(targetType)) {
        return new StaticConversionExecutor(sourceType,targetType,NoOpConverter.INSTANCE);
      }
      throw new ConversionExecutorNotFoundException(sourceType,targetType,"No ConversionExecutor found for converting from sourceType [" + sourceType.getName() + "] to targetType ["+ targetType.getName()+ "]");
    }
  }
}
