{
  Assert.notNull(sourceClass,"The source class to convert from is required");
  Assert.notNull(targetClass,"The target class to convert to is required");
  if (targetClass.isAssignableFrom(sourceClass)) {
    return new StaticConversionExecutor(sourceClass,targetClass,new NoOpConverter());
  }
  sourceClass=convertToWrapperClassIfNecessary(sourceClass);
  targetClass=convertToWrapperClassIfNecessary(targetClass);
  if (sourceClass.isArray()) {
    if (targetClass.isArray()) {
      return new StaticSuperConversionExecutor(sourceClass,targetClass,new ArrayToArray(this));
    }
 else     if (Collection.class.isAssignableFrom(targetClass)) {
      if (!targetClass.isInterface() && Modifier.isAbstract(targetClass.getModifiers())) {
        throw new IllegalArgumentException("Conversion target class [" + targetClass.getName() + "] is invalid; cannot convert to abstract collection types--"+ "request an interface or concrete implementation instead");
      }
      return new StaticSuperConversionExecutor(sourceClass,targetClass,new ArrayToCollection(this));
    }
  }
  if (targetClass.isArray()) {
    if (Collection.class.isAssignableFrom(sourceClass)) {
      SuperConverter collectionToArray=new ReverseSuperConverter(new ArrayToCollection(this));
      return new StaticSuperConversionExecutor(sourceClass,targetClass,collectionToArray);
    }
 else {
      return new StaticSuperConversionExecutor(sourceClass,targetClass,new ObjectToArray(this));
    }
  }
  Converter converter=findRegisteredConverter(sourceClass,targetClass);
  if (converter != null) {
    return new StaticConversionExecutor(sourceClass,targetClass,converter);
  }
 else {
    SuperConverter superConverter=findRegisteredSuperConverter(sourceClass,targetClass);
    if (superConverter != null) {
      return new StaticSuperConversionExecutor(sourceClass,targetClass,superConverter);
    }
    if (parent != null) {
      return parent.getConversionExecutor(sourceClass,targetClass);
    }
 else {
      throw new ConversionExecutorNotFoundException(sourceClass,targetClass,"No ConversionExecutor found for converting from sourceClass [" + sourceClass.getName() + "] to target class ["+ targetClass.getName()+ "]");
    }
  }
}
