{
  List typeInfo=new ArrayList(2);
  Class classToIntrospect=converter.getClass();
  while (classToIntrospect != null) {
    Type[] genericInterfaces=classToIntrospect.getGenericInterfaces();
    for (    Type genericInterface : genericInterfaces) {
      if (genericInterface instanceof ParameterizedType) {
        ParameterizedType parameterizedInterface=(ParameterizedType)genericInterface;
        if (Converter.class.equals(parameterizedInterface.getRawType()) || SuperConverter.class.isAssignableFrom((Class)parameterizedInterface.getRawType())) {
          Class s=getParameterClass(parameterizedInterface.getActualTypeArguments()[0],converter.getClass());
          Class t=getParameterClass(parameterizedInterface.getActualTypeArguments()[1],converter.getClass());
          typeInfo.add(getParameterClass(s,converter.getClass()));
          typeInfo.add(getParameterClass(t,converter.getClass()));
          break;
        }
      }
    }
    classToIntrospect=classToIntrospect.getSuperclass();
  }
  if (typeInfo.size() != 2) {
    throw new IllegalArgumentException("Unable to extract source and target class arguments from Converter [" + converter.getClass().getName() + "]; does the Converter specify the <S, T> generic types?");
  }
  return typeInfo;
}
