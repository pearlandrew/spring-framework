{
  this.persistenceUnitInfoNames.clear();
  this.persistenceUnitInfos.clear();
  List<SpringPersistenceUnitInfo> puis=readPersistenceUnitInfos();
  for (  SpringPersistenceUnitInfo pui : puis) {
    if (pui.getPersistenceUnitRootUrl() == null) {
      pui.setPersistenceUnitRootUrl(determineDefaultPersistenceUnitRootUrl());
    }
    if (pui.getJtaDataSource() == null) {
      pui.setJtaDataSource(this.defaultJtaDataSource);
    }
    if (pui.getNonJtaDataSource() == null) {
      pui.setNonJtaDataSource(this.defaultDataSource);
    }
    if (this.loadTimeWeaver != null) {
      pui.init(this.loadTimeWeaver);
    }
 else {
      pui.init(this.resourcePatternResolver.getClassLoader());
    }
    postProcessPersistenceUnitInfo(pui);
    String name=pui.getPersistenceUnitName();
    if (!this.persistenceUnitInfoNames.add(name) && !isPersistenceUnitOverrideAllowed()) {
      StringBuilder msg=new StringBuilder();
      msg.append("Conflicting persistence unit definitions for name '").append(name).append("': ");
      msg.append(pui.getPersistenceUnitRootUrl()).append(", ");
      msg.append(this.persistenceUnitInfos.get(name).getPersistenceUnitRootUrl());
      throw new IllegalStateException(msg.toString());
    }
    this.persistenceUnitInfos.put(name,pui);
  }
}
