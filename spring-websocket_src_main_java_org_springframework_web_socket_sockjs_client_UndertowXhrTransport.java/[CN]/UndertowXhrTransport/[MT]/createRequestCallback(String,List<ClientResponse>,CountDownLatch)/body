{
  return new ClientCallback<ClientExchange>(){
    @Override public void completed(    ClientExchange result){
      result.setResponseListener(new ClientCallback<ClientExchange>(){
        @Override public void completed(        final ClientExchange result){
          responses.add(result.getResponse());
          new StringReadChannelListener(result.getConnection().getBufferPool()){
            @Override protected void stringDone(            String string){
              result.getResponse().putAttachment(RESPONSE_BODY,string);
              latch.countDown();
            }
            @Override protected void error(            IOException ex){
              onFailure(latch,ex);
            }
          }
.setup(result.getResponseChannel());
        }
        @Override public void failed(        IOException ex){
          onFailure(latch,ex);
        }
      }
);
      try {
        if (body != null) {
          result.getRequestChannel().write(ByteBuffer.wrap(body.getBytes()));
        }
        result.getRequestChannel().shutdownWrites();
        if (!result.getRequestChannel().flush()) {
          result.getRequestChannel().getWriteSetter().set(ChannelListeners.<StreamSinkChannel>flushingChannelListener(null,null));
          result.getRequestChannel().resumeWrites();
        }
      }
 catch (      IOException ex) {
        onFailure(latch,ex);
      }
    }
    @Override public void failed(    IOException ex){
      onFailure(latch,ex);
    }
    private void onFailure(    CountDownLatch latch,    IOException ex){
      latch.countDown();
      throw new SockJsTransportFailureException("Failed to execute request",ex);
    }
  }
;
}
