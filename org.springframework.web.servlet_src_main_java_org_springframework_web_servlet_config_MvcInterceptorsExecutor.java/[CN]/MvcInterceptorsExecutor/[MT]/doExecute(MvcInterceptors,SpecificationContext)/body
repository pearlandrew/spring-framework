{
  ComponentRegistrar registrar=specContext.getRegistrar();
  Object source=spec.source();
  CompositeComponentDefinition compDefinition=new CompositeComponentDefinition(spec.sourceName(),source);
  for (  Object interceptor : spec.interceptorMappings().keySet()) {
    RootBeanDefinition beanDef=new RootBeanDefinition(MappedInterceptor.class);
    beanDef.setSource(source);
    beanDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
    beanDef.getConstructorArgumentValues().addIndexedArgumentValue(0,spec.interceptorMappings().get(interceptor));
    beanDef.getConstructorArgumentValues().addIndexedArgumentValue(1,interceptor);
    String beanName=registrar.registerWithGeneratedName(beanDef);
    compDefinition.addNestedComponent(new BeanComponentDefinition(beanDef,beanName));
  }
  registrar.registerComponent(compDefinition);
}
