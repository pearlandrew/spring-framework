{
  UrlPathHelper pathHelper=new UrlPathHelper();
  PathMatcher pathMatcher=new AntPathMatcher();
  MockHttpServletRequest request=new MockHttpServletRequest("GET","/foo");
  RequestMappingInfo key=new RequestMappingInfo(singleton("/foo"),null);
  RequestMappingInfo match=key.getMatchingRequestMapping(pathHelper.getLookupPathForRequest(request),request,pathMatcher);
  assertNotNull(match);
  request=new MockHttpServletRequest("GET","/foo/bar");
  key=new RequestMappingInfo(singleton("/foo/*"),null);
  match=key.getMatchingRequestMapping(pathHelper.getLookupPathForRequest(request),request,pathMatcher);
  assertNotNull("Pattern match",match);
  request=new MockHttpServletRequest("GET","/foo.html");
  key=new RequestMappingInfo(singleton("/foo"),null);
  match=key.getMatchingRequestMapping(pathHelper.getLookupPathForRequest(request),request,pathMatcher);
  assertNotNull("Implicit match by extension",match);
  assertEquals("Contains matched pattern","/foo.*",match.getPatterns().iterator().next());
  request=new MockHttpServletRequest("GET","/foo/");
  key=new RequestMappingInfo(singleton("/foo"),null);
  match=key.getMatchingRequestMapping(pathHelper.getLookupPathForRequest(request),request,pathMatcher);
  assertNotNull("Implicit match by trailing slash",match);
  assertEquals("Contains matched pattern","/foo/",match.getPatterns().iterator().next());
  request=new MockHttpServletRequest("GET","/foo.html");
  key=new RequestMappingInfo(singleton("/foo.jpg"),null);
  match=key.getMatchingRequestMapping(pathHelper.getLookupPathForRequest(request),request,pathMatcher);
  assertNull("Implicit match ignored if pattern has extension",match);
  request=new MockHttpServletRequest("GET","/foo.html");
  key=new RequestMappingInfo(singleton("/foo.jpg"),null);
  match=key.getMatchingRequestMapping(pathHelper.getLookupPathForRequest(request),request,pathMatcher);
  assertNull("Implicit match ignored on pattern with trailing slash",match);
}
