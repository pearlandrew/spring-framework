{
  try {
    String payload=textMessage.getPayload();
    Message<byte[]> message=this.stompMessageConverter.toMessage(payload,session.getId());
    if (logger.isTraceEnabled()) {
      logger.trace("Processing STOMP message: " + message);
    }
    try {
      StompHeaders stompHeaders=StompHeaders.fromMessageHeaders(message.getHeaders());
      MessageType messageType=stompHeaders.getMessageType();
      if (MessageType.CONNECT.equals(messageType)) {
        handleConnect(session,message);
      }
 else       if (MessageType.MESSAGE.equals(messageType)) {
        handlePublish(message);
      }
 else       if (MessageType.SUBSCRIBE.equals(messageType)) {
        handleSubscribe(message);
      }
 else       if (MessageType.UNSUBSCRIBE.equals(messageType)) {
        handleUnsubscribe(message);
      }
 else       if (MessageType.DISCONNECT.equals(messageType)) {
        handleDisconnect(message);
      }
      this.outputChannel.send(message);
    }
 catch (    Throwable t) {
      logger.error("Terminating STOMP session due to failure to send message: ",t);
      sendErrorMessage(session,t);
    }
  }
 catch (  Throwable error) {
    sendErrorMessage(session,error);
  }
}
