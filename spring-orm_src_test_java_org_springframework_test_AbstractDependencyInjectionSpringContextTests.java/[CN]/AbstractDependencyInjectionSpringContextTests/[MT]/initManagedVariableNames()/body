{
  List managedVarNames=new LinkedList();
  Class clazz=getClass();
  do {
    Field[] fields=clazz.getDeclaredFields();
    if (this.logger.isDebugEnabled()) {
      this.logger.debug("Found " + fields.length + " fields on "+ clazz);
    }
    for (int i=0; i < fields.length; i++) {
      Field field=fields[i];
      field.setAccessible(true);
      if (this.logger.isDebugEnabled()) {
        this.logger.debug("Candidate field: " + field);
      }
      if (isProtectedInstanceField(field)) {
        Object oldValue=field.get(this);
        if (oldValue == null) {
          managedVarNames.add(field.getName());
          if (this.logger.isDebugEnabled()) {
            this.logger.debug("Added managed variable '" + field.getName() + "'");
          }
        }
 else {
          if (this.logger.isDebugEnabled()) {
            this.logger.debug("Rejected managed variable '" + field.getName() + "'");
          }
        }
      }
    }
    clazz=clazz.getSuperclass();
  }
 while (!clazz.equals(AbstractDependencyInjectionSpringContextTests.class));
  this.managedVariableNames=(String[])managedVarNames.toArray(new String[managedVarNames.size()]);
}
