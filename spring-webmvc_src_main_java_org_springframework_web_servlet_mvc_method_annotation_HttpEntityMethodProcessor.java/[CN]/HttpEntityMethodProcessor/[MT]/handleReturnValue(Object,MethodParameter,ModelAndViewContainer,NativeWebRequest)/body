{
  mavContainer.setRequestHandled(true);
  if (returnValue == null) {
    return;
  }
  ServletServerHttpRequest inputMessage=createInputMessage(webRequest);
  ServletServerHttpResponse outputMessage=createOutputMessage(webRequest);
  Assert.isInstanceOf(HttpEntity.class,returnValue);
  HttpEntity<?> responseEntity=(HttpEntity<?>)returnValue;
  HttpHeaders outputHeaders=outputMessage.getHeaders();
  HttpHeaders entityHeaders=responseEntity.getHeaders();
  if (outputHeaders.containsKey(VARY) && entityHeaders.containsKey(VARY)) {
    List<String> values=getVaryRequestHeadersToAdd(outputHeaders,entityHeaders);
    if (!values.isEmpty()) {
      outputHeaders.setVary(values);
    }
  }
  if (!entityHeaders.isEmpty()) {
    for (    Map.Entry<String,List<String>> entry : entityHeaders.entrySet()) {
      outputHeaders.putIfAbsent(entry.getKey(),entry.getValue());
    }
  }
  Object body=responseEntity.getBody();
  if (responseEntity instanceof ResponseEntity) {
    outputMessage.setStatusCode(((ResponseEntity<?>)responseEntity).getStatusCode());
    HttpMethod method=inputMessage.getMethod();
    boolean isGetOrHead=(HttpMethod.GET == method || HttpMethod.HEAD == method);
    if (isGetOrHead && isResourceNotModified(inputMessage,outputMessage)) {
      outputMessage.setStatusCode(HttpStatus.NOT_MODIFIED);
      outputMessage.flush();
      return;
    }
  }
  writeWithMessageConverters(body,returnType,inputMessage,outputMessage);
  outputMessage.flush();
}
