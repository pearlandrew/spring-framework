{
  mavContainer.setRequestHandled(true);
  if (returnValue == null) {
    return;
  }
  ServletServerHttpRequest inputMessage=createInputMessage(webRequest);
  ServletServerHttpResponse outputMessage=createOutputMessage(webRequest);
  Assert.isInstanceOf(HttpEntity.class,returnValue);
  HttpEntity<?> responseEntity=(HttpEntity<?>)returnValue;
  HttpHeaders outputHeaders=outputMessage.getHeaders();
  HttpHeaders entityHeaders=responseEntity.getHeaders();
  if (outputHeaders.containsKey(HttpHeaders.VARY) && entityHeaders.containsKey(HttpHeaders.VARY)) {
    List<String> values=getVaryRequestHeadersToAdd(outputHeaders,entityHeaders);
    if (!values.isEmpty()) {
      outputHeaders.setVary(values);
    }
  }
  if (!entityHeaders.isEmpty()) {
    for (    Map.Entry<String,List<String>> entry : entityHeaders.entrySet()) {
      if (!outputHeaders.containsKey(entry.getKey())) {
        outputHeaders.put(entry.getKey(),entry.getValue());
      }
    }
  }
  if (responseEntity instanceof ResponseEntity) {
    int returnStatus=((ResponseEntity<?>)responseEntity).getStatusCodeValue();
    outputMessage.getServletResponse().setStatus(returnStatus);
    if (returnStatus == 200) {
      if (isResourceNotModified(inputMessage,outputMessage)) {
        outputMessage.flush();
        return;
      }
    }
  }
  writeWithMessageConverters(responseEntity.getBody(),returnType,inputMessage,outputMessage);
  outputMessage.flush();
}
