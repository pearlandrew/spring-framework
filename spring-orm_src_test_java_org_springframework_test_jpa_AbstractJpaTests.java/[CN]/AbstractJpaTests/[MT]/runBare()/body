{
  if (isDisabledInThisEnvironment(getName())) {
    super.runBare();
    return;
  }
  if (!shouldUseShadowLoader()) {
    super.runBare();
    return;
  }
  String combinationOfContextLocationsForThisTestClass=cacheKeys();
  ClassLoader classLoaderForThisTestClass=getClass().getClassLoader();
  ClassLoader initialClassLoader=Thread.currentThread().getContextClassLoader();
  if (this.shadowParent != null) {
    Thread.currentThread().setContextClassLoader(classLoaderForThisTestClass);
    super.runBare();
  }
 else {
    ShadowingClassLoader shadowingClassLoader=(ShadowingClassLoader)classLoaderCache.get(combinationOfContextLocationsForThisTestClass);
    if (shadowingClassLoader == null) {
      shadowingClassLoader=(ShadowingClassLoader)createShadowingClassLoader(classLoaderForThisTestClass);
      classLoaderCache.put(combinationOfContextLocationsForThisTestClass,shadowingClassLoader);
    }
    try {
      Thread.currentThread().setContextClassLoader(shadowingClassLoader);
      String[] configLocations=getConfigLocations();
      Object cachedContext=contextCache.get(combinationOfContextLocationsForThisTestClass);
      if (cachedContext == null) {
        Class shadowingLoadTimeWeaverClass=shadowingClassLoader.loadClass(ShadowingLoadTimeWeaver.class.getName());
        Constructor constructor=shadowingLoadTimeWeaverClass.getConstructor(ClassLoader.class);
        constructor.setAccessible(true);
        Object ltw=constructor.newInstance(shadowingClassLoader);
        Class beanFactoryClass=shadowingClassLoader.loadClass(DefaultListableBeanFactory.class.getName());
        Object beanFactory=BeanUtils.instantiateClass(beanFactoryClass);
        Class beanDefinitionReaderClass=shadowingClassLoader.loadClass(XmlBeanDefinitionReader.class.getName());
        Class beanDefinitionRegistryClass=shadowingClassLoader.loadClass(BeanDefinitionRegistry.class.getName());
        Object reader=beanDefinitionReaderClass.getConstructor(beanDefinitionRegistryClass).newInstance(beanFactory);
        Method loadBeanDefinitions=beanDefinitionReaderClass.getMethod("loadBeanDefinitions",String[].class);
        loadBeanDefinitions.invoke(reader,new Object[]{configLocations});
        Class loadTimeWeaverInjectingBeanPostProcessorClass=shadowingClassLoader.loadClass(LoadTimeWeaverInjectingBeanPostProcessor.class.getName());
        Class loadTimeWeaverClass=shadowingClassLoader.loadClass(LoadTimeWeaver.class.getName());
        Constructor bppConstructor=loadTimeWeaverInjectingBeanPostProcessorClass.getConstructor(loadTimeWeaverClass);
        bppConstructor.setAccessible(true);
        Object beanPostProcessor=bppConstructor.newInstance(ltw);
        Class beanPostProcessorClass=shadowingClassLoader.loadClass(BeanPostProcessor.class.getName());
        Method addBeanPostProcessor=beanFactoryClass.getMethod("addBeanPostProcessor",beanPostProcessorClass);
        addBeanPostProcessor.invoke(beanFactory,beanPostProcessor);
        Class genericApplicationContextClass=shadowingClassLoader.loadClass(GenericApplicationContext.class.getName());
        Class defaultListableBeanFactoryClass=shadowingClassLoader.loadClass(DefaultListableBeanFactory.class.getName());
        cachedContext=genericApplicationContextClass.getConstructor(defaultListableBeanFactoryClass).newInstance(beanFactory);
        genericApplicationContextClass.getMethod("refresh").invoke(cachedContext);
        contextCache.put(combinationOfContextLocationsForThisTestClass,cachedContext);
      }
      Class shadowedTestClass=shadowingClassLoader.loadClass(getClass().getName());
      TestCase shadowedTestCase=(TestCase)BeanUtils.instantiateClass(shadowedTestClass);
      Class thisShadowedClass=shadowingClassLoader.loadClass(AbstractJpaTests.class.getName());
      Field shadowed=thisShadowedClass.getDeclaredField("shadowParent");
      shadowed.setAccessible(true);
      shadowed.set(shadowedTestCase,this);
      Class applicationContextClass=shadowingClassLoader.loadClass(ConfigurableApplicationContext.class.getName());
      Method addContextMethod=shadowedTestClass.getMethod("addContext",Object.class,applicationContextClass);
      ReflectionUtils.makeAccessible(addContextMethod);
      addContextMethod.invoke(shadowedTestCase,configLocations,cachedContext);
      shadowedTestCase.setName(getName());
      shadowedTestCase.runBare();
    }
 catch (    InvocationTargetException ex) {
      throw ex.getTargetException();
    }
 finally {
      Thread.currentThread().setContextClassLoader(initialClassLoader);
    }
  }
}
