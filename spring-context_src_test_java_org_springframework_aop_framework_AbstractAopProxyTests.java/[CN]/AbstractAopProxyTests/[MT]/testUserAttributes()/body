{
class MapAwareMethodInterceptor implements MethodInterceptor {
    private final Map<String,String> expectedValues;
    private final Map<String,String> valuesToAdd;
    public MapAwareMethodInterceptor(    Map<String,String> expectedValues,    Map<String,String> valuesToAdd){
      this.expectedValues=expectedValues;
      this.valuesToAdd=valuesToAdd;
    }
    @Override public Object invoke(    MethodInvocation invocation) throws Throwable {
      ReflectiveMethodInvocation rmi=(ReflectiveMethodInvocation)invocation;
      for (Iterator<String> it=rmi.getUserAttributes().keySet().iterator(); it.hasNext(); ) {
        Object key=it.next();
        assertEquals(expectedValues.get(key),rmi.getUserAttributes().get(key));
      }
      rmi.getUserAttributes().putAll(valuesToAdd);
      return invocation.proceed();
    }
  }
  ;
  AdvisedSupport pc=new AdvisedSupport(ITestBean.class);
  MapAwareMethodInterceptor mami1=new MapAwareMethodInterceptor(new HashMap<String,String>(),new HashMap<String,String>());
  Map<String,String> firstValuesToAdd=new HashMap<String,String>();
  firstValuesToAdd.put("test","");
  MapAwareMethodInterceptor mami2=new MapAwareMethodInterceptor(new HashMap<String,String>(),firstValuesToAdd);
  MapAwareMethodInterceptor mami3=new MapAwareMethodInterceptor(firstValuesToAdd,new HashMap<String,String>());
  MapAwareMethodInterceptor mami4=new MapAwareMethodInterceptor(firstValuesToAdd,new HashMap<String,String>());
  Map<String,String> secondValuesToAdd=new HashMap<String,String>();
  secondValuesToAdd.put("foo","bar");
  secondValuesToAdd.put("cat","dog");
  MapAwareMethodInterceptor mami5=new MapAwareMethodInterceptor(firstValuesToAdd,secondValuesToAdd);
  Map<String,String> finalExpected=new HashMap<String,String>(firstValuesToAdd);
  finalExpected.putAll(secondValuesToAdd);
  MapAwareMethodInterceptor mami6=new MapAwareMethodInterceptor(finalExpected,secondValuesToAdd);
  pc.addAdvice(mami1);
  pc.addAdvice(mami2);
  pc.addAdvice(mami3);
  pc.addAdvice(mami4);
  pc.addAdvice(mami5);
  pc.addAdvice(mami6);
  pc.setTarget(new TestBean());
  AopProxy aop=createAopProxy(pc);
  ITestBean tb=(ITestBean)aop.getProxy();
  String newName="foo";
  tb.setName(newName);
  assertEquals(newName,tb.getName());
}
