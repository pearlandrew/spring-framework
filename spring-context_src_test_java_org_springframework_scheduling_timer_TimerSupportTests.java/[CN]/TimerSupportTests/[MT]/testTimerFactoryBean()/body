{
  final TestTimerTask timerTask0=new TestTimerTask();
  TestMethodInvokingTask task1=new TestMethodInvokingTask();
  MethodInvokingTimerTaskFactoryBean mittfb=new MethodInvokingTimerTaskFactoryBean();
  mittfb.setTargetObject(task1);
  mittfb.setTargetMethod("doSomething");
  mittfb.afterPropertiesSet();
  final TimerTask timerTask1=mittfb.getObject();
  final TestRunnable timerTask2=new TestRunnable();
  ScheduledTimerTask[] tasks=new ScheduledTimerTask[3];
  tasks[0]=new ScheduledTimerTask(timerTask0,0,10,false);
  tasks[1]=new ScheduledTimerTask(timerTask1,10,20,true);
  tasks[2]=new ScheduledTimerTask(timerTask2,20);
  final List<Boolean> success=new ArrayList<Boolean>(3);
  final Timer timer=new Timer(true){
    @Override public void schedule(    TimerTask task,    long delay,    long period){
      if (task == timerTask0 && delay == 0 && period == 10) {
        success.add(Boolean.TRUE);
      }
    }
    @Override public void scheduleAtFixedRate(    TimerTask task,    long delay,    long period){
      if (task == timerTask1 && delay == 10 && period == 20) {
        success.add(Boolean.TRUE);
      }
    }
    @Override public void schedule(    TimerTask task,    long delay){
      if (task instanceof DelegatingTimerTask && delay == 20) {
        success.add(Boolean.TRUE);
      }
    }
    @Override public void cancel(){
      success.add(Boolean.TRUE);
    }
  }
;
  TimerFactoryBean timerFactoryBean=new TimerFactoryBean(){
    @Override protected Timer createTimer(    String name,    boolean daemon){
      return timer;
    }
  }
;
  try {
    timerFactoryBean.setScheduledTimerTasks(tasks);
    timerFactoryBean.afterPropertiesSet();
    assertThat(timerFactoryBean.getObject(),instanceOf(Timer.class));
    timerTask0.run();
    timerTask1.run();
    timerTask2.run();
  }
  finally {
    timerFactoryBean.destroy();
  }
  assertTrue("Correct Timer invocations",success.size() == 4);
  assertTrue("TimerTask0 works",timerTask0.counter == 1);
  assertTrue("TimerTask1 works",task1.counter == 1);
  assertTrue("TimerTask2 works",timerTask2.counter == 1);
}
