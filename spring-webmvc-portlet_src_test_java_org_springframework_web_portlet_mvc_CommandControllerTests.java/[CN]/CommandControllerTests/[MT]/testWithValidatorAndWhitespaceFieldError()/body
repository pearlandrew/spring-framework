{
  final String errorCode="someCode";
  final String defaultMessage="validation error!";
  TestController tc=new TestController();
  tc.setValidator(new Validator(){
    @Override public boolean supports(    Class c){
      return TestBean.class.isAssignableFrom(c);
    }
    @Override public void validate(    Object o,    Errors e){
      ValidationUtils.rejectIfEmptyOrWhitespace(e,"name",errorCode,defaultMessage);
    }
  }
);
  MockRenderRequest request=new MockRenderRequest();
  int age=32;
  String whitespace="  \t  ";
  request.setParameter("age","" + age);
  request.setParameter("name",whitespace);
  MockRenderResponse response=new MockRenderResponse();
  ModelAndView mav=tc.handleRenderRequest(request,response);
  TestBean command=(TestBean)mav.getModel().get(tc.getCommandName());
  assertTrue(command.getName().equals(whitespace));
  assertEquals(age,command.getAge());
  BindException errors=(BindException)mav.getModel().get(ERRORS_KEY);
  assertEquals("There should be 1 error",1,errors.getErrorCount());
  FieldError error=errors.getFieldError("name");
  assertEquals("rejected value should contain whitespace",whitespace,error.getRejectedValue());
  assertEquals(error.getCode(),errorCode);
  assertEquals(error.getDefaultMessage(),defaultMessage);
}
