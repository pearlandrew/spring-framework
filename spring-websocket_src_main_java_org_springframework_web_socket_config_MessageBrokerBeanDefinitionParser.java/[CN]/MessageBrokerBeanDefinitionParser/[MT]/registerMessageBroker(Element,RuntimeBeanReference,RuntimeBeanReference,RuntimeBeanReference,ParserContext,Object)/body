{
  Element simpleBrokerElem=DomUtils.getChildElementByTagName(messageBrokerElement,"simple-broker");
  Element brokerRelayElem=DomUtils.getChildElementByTagName(messageBrokerElement,"stomp-broker-relay");
  ConstructorArgumentValues cavs=new ConstructorArgumentValues();
  cavs.addIndexedArgumentValue(0,inChannel);
  cavs.addIndexedArgumentValue(1,outChannel);
  cavs.addIndexedArgumentValue(2,brokerChannel);
  RootBeanDefinition brokerDef;
  if (simpleBrokerElem != null) {
    String prefix=simpleBrokerElem.getAttribute("prefix");
    cavs.addIndexedArgumentValue(3,Arrays.asList(StringUtils.tokenizeToStringArray(prefix,",")));
    brokerDef=new RootBeanDefinition(SimpleBrokerMessageHandler.class,cavs,null);
    if (messageBrokerElement.hasAttribute("path-matcher")) {
      String pathMatcherRef=messageBrokerElement.getAttribute("path-matcher");
      brokerDef.getPropertyValues().add("pathMatcher",new RuntimeBeanReference(pathMatcherRef));
    }
    if (simpleBrokerElem.hasAttribute("scheduler")) {
      String scheduler=simpleBrokerElem.getAttribute("scheduler");
      brokerDef.getPropertyValues().add("taskScheduler",new RuntimeBeanReference(scheduler));
    }
    if (simpleBrokerElem.hasAttribute("heartbeat")) {
      String heartbeatValue=simpleBrokerElem.getAttribute("heartbeat");
      brokerDef.getPropertyValues().add("heartbeatValue",heartbeatValue);
    }
  }
 else   if (brokerRelayElem != null) {
    String prefix=brokerRelayElem.getAttribute("prefix");
    cavs.addIndexedArgumentValue(3,Arrays.asList(StringUtils.tokenizeToStringArray(prefix,",")));
    MutablePropertyValues values=new MutablePropertyValues();
    if (brokerRelayElem.hasAttribute("relay-host")) {
      values.add("relayHost",brokerRelayElem.getAttribute("relay-host"));
    }
    if (brokerRelayElem.hasAttribute("relay-port")) {
      values.add("relayPort",brokerRelayElem.getAttribute("relay-port"));
    }
    if (brokerRelayElem.hasAttribute("client-login")) {
      values.add("clientLogin",brokerRelayElem.getAttribute("client-login"));
    }
    if (brokerRelayElem.hasAttribute("client-passcode")) {
      values.add("clientPasscode",brokerRelayElem.getAttribute("client-passcode"));
    }
    if (brokerRelayElem.hasAttribute("system-login")) {
      values.add("systemLogin",brokerRelayElem.getAttribute("system-login"));
    }
    if (brokerRelayElem.hasAttribute("system-passcode")) {
      values.add("systemPasscode",brokerRelayElem.getAttribute("system-passcode"));
    }
    if (brokerRelayElem.hasAttribute("heartbeat-send-interval")) {
      values.add("systemHeartbeatSendInterval",brokerRelayElem.getAttribute("heartbeat-send-interval"));
    }
    if (brokerRelayElem.hasAttribute("heartbeat-receive-interval")) {
      values.add("systemHeartbeatReceiveInterval",brokerRelayElem.getAttribute("heartbeat-receive-interval"));
    }
    if (brokerRelayElem.hasAttribute("virtual-host")) {
      values.add("virtualHost",brokerRelayElem.getAttribute("virtual-host"));
    }
    Class<?> handlerType=StompBrokerRelayMessageHandler.class;
    brokerDef=new RootBeanDefinition(handlerType,cavs,values);
  }
 else {
    throw new IllegalStateException("Neither <simple-broker> nor <stomp-broker-relay> elements found.");
  }
  registerBeanDef(brokerDef,context,source);
  return brokerDef;
}
