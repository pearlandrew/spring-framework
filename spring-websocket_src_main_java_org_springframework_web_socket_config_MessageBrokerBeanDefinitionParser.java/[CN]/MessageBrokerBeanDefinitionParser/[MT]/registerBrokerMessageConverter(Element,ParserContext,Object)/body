{
  Element convertersElement=DomUtils.getChildElementByTagName(element,"message-converters");
  ManagedList<? super Object> convertersDef=new ManagedList<Object>();
  if (convertersElement != null) {
    convertersDef.setSource(source);
    for (    Element beanElement : DomUtils.getChildElementsByTagName(convertersElement,"bean","ref")) {
      Object object=parserCxt.getDelegate().parsePropertySubElement(beanElement,null);
      convertersDef.add(object);
    }
  }
  if (convertersElement == null || Boolean.valueOf(convertersElement.getAttribute("register-defaults"))) {
    convertersDef.setSource(source);
    if (jackson2Present) {
      convertersDef.add(new RootBeanDefinition(MappingJackson2MessageConverter.class));
    }
    convertersDef.add(new RootBeanDefinition(StringMessageConverter.class));
    convertersDef.add(new RootBeanDefinition(ByteArrayMessageConverter.class));
  }
  RootBeanDefinition contentTypeResolverDef=new RootBeanDefinition(DefaultContentTypeResolver.class);
  if (jackson2Present) {
    contentTypeResolverDef.getPropertyValues().add("defaultMimeType",MimeTypeUtils.APPLICATION_JSON);
  }
  ConstructorArgumentValues cavs=new ConstructorArgumentValues();
  cavs.addIndexedArgumentValue(0,convertersDef);
  cavs.addIndexedArgumentValue(1,contentTypeResolverDef);
  RootBeanDefinition brokerMessage=new RootBeanDefinition(CompositeMessageConverter.class,cavs,null);
  return new RuntimeBeanReference(registerBeanDef(brokerMessage,parserCxt,source));
}
