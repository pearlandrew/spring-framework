{
  Object source=context.extractSource(element);
  CompositeComponentDefinition compDefinition=new CompositeComponentDefinition(element.getTagName(),source);
  context.pushContainingComponent(compDefinition);
  Element channelElem=DomUtils.getChildElementByTagName(element,"client-inbound-channel");
  RuntimeBeanReference inChannel=getMessageChannel("clientInboundChannel",channelElem,context,source);
  channelElem=DomUtils.getChildElementByTagName(element,"client-outbound-channel");
  RuntimeBeanReference outChannel=getMessageChannel("clientOutboundChannel",channelElem,context,source);
  channelElem=DomUtils.getChildElementByTagName(element,"broker-channel");
  RuntimeBeanReference brokerChannel=getMessageChannel("brokerChannel",channelElem,context,source);
  RuntimeBeanReference userRegistry=registerUserRegistry(element,context,source);
  Object userDestHandler=registerUserDestHandler(element,userRegistry,inChannel,brokerChannel,context,source);
  RuntimeBeanReference converter=registerMessageConverter(element,context,source);
  RuntimeBeanReference template=registerMessagingTemplate(element,brokerChannel,converter,context,source);
  registerAnnotationMethodMessageHandler(element,inChannel,outChannel,converter,template,context,source);
  RootBeanDefinition broker=registerMessageBroker(element,inChannel,outChannel,brokerChannel,userDestHandler,template,userRegistry,context,source);
  ManagedMap<String,Object> urlMap=registerHandlerMapping(element,context,source);
  RuntimeBeanReference stompHandler=registerStompHandler(element,inChannel,outChannel,context,source);
  for (  Element endpointElem : DomUtils.getChildElementsByTagName(element,"stomp-endpoint")) {
    RuntimeBeanReference requestHandler=registerRequestHandler(endpointElem,stompHandler,context,source);
    String pathAttribute=endpointElem.getAttribute("path");
    Assert.state(StringUtils.hasText(pathAttribute),"Invalid <stomp-endpoint> (no path mapping)");
    List<String> paths=Arrays.asList(StringUtils.tokenizeToStringArray(pathAttribute,","));
    for (    String path : paths) {
      path=path.trim();
      Assert.state(StringUtils.hasText(path),"Invalid <stomp-endpoint> path attribute: " + pathAttribute);
      if (DomUtils.getChildElementByTagName(endpointElem,"sockjs") != null) {
        path=path.endsWith("/") ? path + "**" : path + "/**";
      }
      urlMap.put(path,requestHandler);
    }
  }
  Map<String,Object> scopeMap=Collections.<String,Object>singletonMap("websocket",new SimpSessionScope());
  RootBeanDefinition scopeConfigurer=new RootBeanDefinition(CustomScopeConfigurer.class);
  scopeConfigurer.getPropertyValues().add("scopes",scopeMap);
  registerBeanDefByName("webSocketScopeConfigurer",scopeConfigurer,context,source);
  registerWebSocketMessageBrokerStats(broker,inChannel,outChannel,context,source);
  context.popAndRegisterContainingComponent();
  return null;
}
