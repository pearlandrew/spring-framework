{
  CompositeComponentDefinition compDefinition=new CompositeComponentDefinition(element.getTagName(),parserContext.extractSource(element));
  parserContext.pushContainingComponent(compDefinition);
  List<Element> interceptors=DomUtils.getChildElementsByTagName(element,new String[]{"bean","ref","interceptor"});
  for (  Element interceptor : interceptors) {
    RootBeanDefinition mappedInterceptorDef=new RootBeanDefinition(MappedInterceptor.class);
    mappedInterceptorDef.setSource(parserContext.extractSource(interceptor));
    mappedInterceptorDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
    String[] includePatterns=null;
    String[] excludePatterns=null;
    Object interceptorBean;
    if ("interceptor".equals(interceptor.getLocalName())) {
      includePatterns=getIncludePatterns(interceptor,"mapping");
      excludePatterns=getIncludePatterns(interceptor,"exclude-mapping");
      Element beanElem=DomUtils.getChildElementsByTagName(interceptor,new String[]{"bean","ref"}).get(0);
      interceptorBean=parserContext.getDelegate().parsePropertySubElement(beanElem,null);
    }
 else {
      interceptorBean=parserContext.getDelegate().parsePropertySubElement(interceptor,null);
    }
    mappedInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(0,includePatterns);
    mappedInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(1,excludePatterns);
    mappedInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(2,interceptorBean);
    String beanName=parserContext.getReaderContext().registerWithGeneratedName(mappedInterceptorDef);
    parserContext.registerComponent(new BeanComponentDefinition(mappedInterceptorDef,beanName));
  }
  parserContext.popAndRegisterContainingComponent();
  return null;
}
