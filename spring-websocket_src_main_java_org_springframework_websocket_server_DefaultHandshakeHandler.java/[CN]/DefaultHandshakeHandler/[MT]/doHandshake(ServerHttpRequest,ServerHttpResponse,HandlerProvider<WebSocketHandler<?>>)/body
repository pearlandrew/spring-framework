{
  logger.debug("Starting handshake for " + request.getURI());
  if (!HttpMethod.GET.equals(request.getMethod())) {
    response.setStatusCode(HttpStatus.METHOD_NOT_ALLOWED);
    response.getHeaders().setAllow(Collections.singleton(HttpMethod.GET));
    logger.debug("Only HTTP GET is allowed, current method is " + request.getMethod());
    return false;
  }
  if (!"WebSocket".equalsIgnoreCase(request.getHeaders().getUpgrade())) {
    handleInvalidUpgradeHeader(request,response);
    return false;
  }
  if (!request.getHeaders().getConnection().contains("Upgrade")) {
    handleInvalidConnectHeader(request,response);
    return false;
  }
  if (!isWebSocketVersionSupported(request)) {
    handleWebSocketVersionNotSupported(request,response);
    return false;
  }
  if (!isValidOrigin(request)) {
    response.setStatusCode(HttpStatus.FORBIDDEN);
    return false;
  }
  String wsKey=request.getHeaders().getSecWebSocketKey();
  if (wsKey == null) {
    logger.debug("Missing \"Sec-WebSocket-Key\" header");
    response.setStatusCode(HttpStatus.BAD_REQUEST);
    return false;
  }
  String selectedProtocol=selectProtocol(request.getHeaders().getSecWebSocketProtocol());
  logger.debug("Upgrading HTTP request");
  response.setStatusCode(HttpStatus.SWITCHING_PROTOCOLS);
  response.getHeaders().setUpgrade("WebSocket");
  response.getHeaders().setConnection("Upgrade");
  response.getHeaders().setSecWebSocketProtocol(selectedProtocol);
  response.getHeaders().setSecWebSocketAccept(getWebSocketKeyHash(wsKey));
  response.flush();
  if (logger.isTraceEnabled()) {
    logger.trace("Upgrading with " + handler);
  }
  this.requestUpgradeStrategy.upgrade(request,response,selectedProtocol,handler);
  return true;
}
