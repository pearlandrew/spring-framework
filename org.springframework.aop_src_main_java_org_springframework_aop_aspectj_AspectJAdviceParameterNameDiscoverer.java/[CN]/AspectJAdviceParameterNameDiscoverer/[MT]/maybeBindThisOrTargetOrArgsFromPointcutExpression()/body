{
  if (this.numberOfRemainingUnboundArguments > 1) {
    throw new AmbiguousBindingException("Still " + this.numberOfRemainingUnboundArguments + " unbound args at this(),target(),args() binding stage, with no way to determine between them");
  }
  List varNames=new ArrayList();
  String[] tokens=StringUtils.tokenizeToStringArray(this.pointcutExpression," ");
  for (int i=0; i < tokens.length; i++) {
    if (tokens[i].equals("this") || tokens[i].startsWith("this(") || tokens[i].equals("target")|| tokens[i].startsWith("target(")) {
      PointcutBody body=getPointcutBody(tokens,i);
      i+=body.numTokensConsumed;
      String varName=maybeExtractVariableName(body.text);
      if (varName != null) {
        varNames.add(varName);
      }
    }
 else     if (tokens[i].equals("args") || tokens[i].startsWith("args(")) {
      PointcutBody body=getPointcutBody(tokens,i);
      i+=body.numTokensConsumed;
      List candidateVarNames=new ArrayList();
      maybeExtractVariableNamesFromArgs(body.text,candidateVarNames);
      for (Iterator iter=candidateVarNames.iterator(); iter.hasNext(); ) {
        String varName=(String)iter.next();
        if (!alreadyBound(varName)) {
          varNames.add(varName);
        }
      }
    }
  }
  if (varNames.size() > 1) {
    throw new AmbiguousBindingException("Found " + varNames.size() + " candidate this(), target() or args() variables but only one unbound argument slot");
  }
 else   if (varNames.size() == 1) {
    for (int j=0; j < this.parameterNameBindings.length; j++) {
      if (isUnbound(j)) {
        bindParameterName(j,(String)varNames.get(0));
        break;
      }
    }
  }
}
