{
  String filterType=element.getAttribute(FILTER_TYPE_ATTRIBUTE);
  String expression=element.getAttribute(FILTER_EXPRESSION_ATTRIBUTE);
  try {
    if ("annotation".equals(filterType)) {
      return new AnnotationTypeFilter((Class<Annotation>)classLoader.loadClass(expression));
    }
 else     if ("assignable".equals(filterType)) {
      return new AssignableTypeFilter(classLoader.loadClass(expression));
    }
 else     if ("aspectj".equals(filterType)) {
      return new AspectJTypeFilter(expression,classLoader);
    }
 else     if ("regex".equals(filterType)) {
      return new RegexPatternTypeFilter(Pattern.compile(expression));
    }
 else     if ("custom".equals(filterType)) {
      Class<?> filterClass=classLoader.loadClass(expression);
      if (!TypeFilter.class.isAssignableFrom(filterClass)) {
        throw new IllegalArgumentException("Class is not assignable to [" + TypeFilter.class.getName() + "]: "+ expression);
      }
      return (TypeFilter)BeanUtils.instantiateClass(filterClass);
    }
 else {
      throw new IllegalArgumentException("Unsupported filter type: " + filterType);
    }
  }
 catch (  ClassNotFoundException ex) {
    throw new FatalBeanException("Type filter class not found: " + expression,ex);
  }
}
