{
  MockPortletContext portletContext=new MockPortletContext("org/springframework/web/portlet/context");
  DispatcherPortlet portlet=new DispatcherPortlet();
  portlet.init(new MockPortletConfig(portletContext,"empty"));
  PortletContextAwareBean contextBean=(PortletContextAwareBean)portlet.getPortletApplicationContext().getBean("portletContextAwareBean");
  PortletConfigAwareBean configBean=(PortletConfigAwareBean)portlet.getPortletApplicationContext().getBean("portletConfigAwareBean");
  assertSame(portletContext,contextBean.getPortletContext());
  assertSame(portlet.getPortletConfig(),configBean.getPortletConfig());
  PortletMultipartResolver multipartResolver=portlet.getMultipartResolver();
  assertNotNull(multipartResolver);
  portlet.refresh();
  PortletContextAwareBean contextBean2=(PortletContextAwareBean)portlet.getPortletApplicationContext().getBean("portletContextAwareBean");
  PortletConfigAwareBean configBean2=(PortletConfigAwareBean)portlet.getPortletApplicationContext().getBean("portletConfigAwareBean");
  assertSame(portletContext,contextBean.getPortletContext());
  assertSame(portlet.getPortletConfig(),configBean.getPortletConfig());
  assertTrue(contextBean != contextBean2);
  assertTrue(configBean != configBean2);
  PortletMultipartResolver multipartResolver2=portlet.getMultipartResolver();
  assertTrue(multipartResolver != multipartResolver2);
  portlet.destroy();
}
