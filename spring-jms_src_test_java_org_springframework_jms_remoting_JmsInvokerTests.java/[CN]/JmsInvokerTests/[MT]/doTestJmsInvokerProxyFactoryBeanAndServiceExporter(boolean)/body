{
  TestBean target=new TestBean("myname",99);
  final JmsInvokerServiceExporter exporter=new JmsInvokerServiceExporter();
  exporter.setServiceInterface(ITestBean.class);
  exporter.setService(target);
  exporter.setMessageConverter(new MockSimpleMessageConverter());
  exporter.afterPropertiesSet();
  JmsInvokerProxyFactoryBean pfb=new JmsInvokerProxyFactoryBean(){
    @Override protected Message doExecuteRequest(    Session session,    Queue queue,    Message requestMessage) throws JMSException {
      Session mockExporterSession=mock(Session.class);
      ResponseStoringProducer mockProducer=new ResponseStoringProducer();
      given(mockExporterSession.createProducer(requestMessage.getJMSReplyTo())).willReturn(mockProducer);
      exporter.onMessage(requestMessage,mockExporterSession);
      assertTrue(mockProducer.closed);
      return mockProducer.response;
    }
  }
;
  pfb.setServiceInterface(ITestBean.class);
  pfb.setConnectionFactory(this.mockConnectionFactory);
  if (dynamicQueue) {
    pfb.setQueueName("myQueue");
  }
 else {
    pfb.setQueue(this.mockQueue);
  }
  pfb.setMessageConverter(new MockSimpleMessageConverter());
  pfb.afterPropertiesSet();
  ITestBean proxy=(ITestBean)pfb.getObject();
  assertEquals("myname",proxy.getName());
  assertEquals(99,proxy.getAge());
  proxy.setAge(50);
  assertEquals(50,proxy.getAge());
  proxy.setStringArray(new String[]{"str1","str2"});
  assertTrue(Arrays.equals(new String[]{"str1","str2"},proxy.getStringArray()));
  try {
    proxy.exceptional(new IllegalStateException());
    fail("Should have thrown IllegalStateException");
  }
 catch (  IllegalStateException ex) {
  }
  try {
    proxy.exceptional(new IllegalAccessException());
    fail("Should have thrown IllegalAccessException");
  }
 catch (  IllegalAccessException ex) {
  }
}
