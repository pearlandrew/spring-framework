{
  String[] subclassResult=determineUrlsForHandlerMethods(handlerType);
  if (subclassResult != null) {
    return subclassResult;
  }
  final Set<String> urls=new LinkedHashSet<String>();
  Set<Class<?>> handlerTypes=new LinkedHashSet<Class<?>>();
  handlerTypes.add(handlerType);
  handlerTypes.addAll(Arrays.asList(handlerType.getInterfaces()));
  for (  Class<?> currentHandlerType : handlerTypes) {
    ReflectionUtils.doWithMethods(currentHandlerType,new ReflectionUtils.MethodCallback(){
      public void doWith(      Method method){
        RequestMapping mapping=AnnotationUtils.findAnnotation(method,RequestMapping.class);
        if (mapping != null) {
          String[] mappedPatterns=mapping.value();
          if (mappedPatterns.length > 0) {
            for (            String mappedPattern : mappedPatterns) {
              if (!hasTypeLevelMapping && !mappedPattern.startsWith("/")) {
                mappedPattern="/" + mappedPattern;
              }
              addUrlsForPath(urls,mappedPattern);
            }
          }
 else           if (hasTypeLevelMapping) {
            urls.add(null);
          }
        }
      }
    }
,ReflectionUtils.USER_DECLARED_METHODS);
  }
  return StringUtils.toStringArray(urls);
}
