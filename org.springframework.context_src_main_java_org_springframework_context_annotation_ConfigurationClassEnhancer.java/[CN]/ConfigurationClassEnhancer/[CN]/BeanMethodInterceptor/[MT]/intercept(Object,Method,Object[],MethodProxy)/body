{
  String beanName=BeanAnnotationHelper.determineBeanNameFor(beanMethod);
  Scope scope=AnnotationUtils.findAnnotation(beanMethod,Scope.class);
  if (scope != null && scope.proxyMode() != ScopedProxyMode.NO) {
    String scopedBeanName=ScopedProxyCreator.getTargetBeanName(beanName);
    if (this.beanFactory.isCurrentlyInCreation(scopedBeanName)) {
      beanName=scopedBeanName;
    }
  }
  if (factoryContainsBean('&' + beanName) && factoryContainsBean(beanName)) {
    Object factoryBean=this.beanFactory.getBean('&' + beanName);
    if (factoryBean instanceof ScopedProxyFactoryBean) {
    }
 else {
      return enhanceFactoryBean(factoryBean.getClass(),beanName);
    }
  }
  if (factoryContainsBean(beanName)) {
    return this.beanFactory.getBean(beanName);
  }
  return cglibMethodProxy.invokeSuper(enhancedConfigInstance,beanMethodArgs);
}
