{
  String location=ele.getAttribute(RESOURCE_ATTRIBUTE);
  if (!StringUtils.hasText(location)) {
    getReaderContext().error("Resource location must not be empty",ele);
    return;
  }
  location=SystemPropertyUtils.resolvePlaceholders(location);
  Set<Resource> actualResources=new LinkedHashSet<Resource>(4);
  boolean absoluteLocation=false;
  try {
    absoluteLocation=ResourcePatternUtils.isUrl(location) || ResourceUtils.toURI(location).isAbsolute();
  }
 catch (  URISyntaxException ex) {
  }
  if (absoluteLocation) {
    try {
      int importCount=getReaderContext().getReader().loadBeanDefinitions(location,actualResources);
      if (logger.isDebugEnabled()) {
        logger.debug("Imported " + importCount + " bean definitions from URL location ["+ location+ "]");
      }
    }
 catch (    BeanDefinitionStoreException ex) {
      getReaderContext().error("Failed to import bean definitions from URL location [" + location + "]",ele,ex);
    }
  }
 else {
    try {
      int importCount;
      Resource relativeResource=getReaderContext().getResource().createRelative(location);
      if (relativeResource.exists()) {
        importCount=getReaderContext().getReader().loadBeanDefinitions(relativeResource);
        actualResources.add(relativeResource);
      }
 else {
        String baseLocation=getReaderContext().getResource().getURL().toString();
        importCount=getReaderContext().getReader().loadBeanDefinitions(StringUtils.applyRelativePath(baseLocation,location),actualResources);
      }
      if (logger.isDebugEnabled()) {
        logger.debug("Imported " + importCount + " bean definitions from relative location ["+ location+ "]");
      }
    }
 catch (    IOException ex) {
      getReaderContext().error("Failed to resolve current resource location",ele,ex);
    }
catch (    BeanDefinitionStoreException ex) {
      getReaderContext().error("Failed to import bean definitions from relative location [" + location + "]",ele,ex);
    }
  }
  Resource[] actResArray=actualResources.toArray(new Resource[actualResources.size()]);
  getReaderContext().fireImportProcessed(location,actResArray,extractSource(ele));
}
