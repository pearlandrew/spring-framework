{
  return new ListenableFuture<Set<HttpMethod>>(){
    @Override public void addCallback(    final ListenableFutureCallback<? super Set<HttpMethod>> callback){
      addCallback(callback,callback);
    }
    @Override public void addCallback(    final SuccessCallback<? super Set<HttpMethod>> successCallback,    final FailureCallback failureCallback){
      headersFuture.addCallback(new ListenableFutureCallback<HttpHeaders>(){
        @Override public void onSuccess(        HttpHeaders result){
          successCallback.onSuccess(result.getAllow());
        }
        @Override public void onFailure(        Throwable t){
          failureCallback.onFailure(t);
        }
      }
);
    }
    @Override public boolean cancel(    boolean mayInterruptIfRunning){
      return headersFuture.cancel(mayInterruptIfRunning);
    }
    @Override public boolean isCancelled(){
      return headersFuture.isCancelled();
    }
    @Override public boolean isDone(){
      return headersFuture.isDone();
    }
    @Override public Set<HttpMethod> get() throws InterruptedException, ExecutionException {
      HttpHeaders headers=headersFuture.get();
      return headers.getAllow();
    }
    @Override public Set<HttpMethod> get(    long timeout,    TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
      HttpHeaders headers=headersFuture.get(timeout,unit);
      return headers.getAllow();
    }
  }
;
}
