{
  GenericApplicationContext ac=new GenericApplicationContext();
  GenericBeanDefinition serviceDef=new GenericBeanDefinition();
  serviceDef.setBeanClass(OrderServiceImpl.class);
  ac.registerBeanDefinition("service",serviceDef);
  GenericBeanDefinition exporterDef=new GenericBeanDefinition();
  exporterDef.setBeanClass(SimpleJaxWsServiceExporter.class);
  exporterDef.getPropertyValues().addPropertyValue("baseAddress","http://localhost:9999/");
  ac.registerBeanDefinition("exporter",exporterDef);
  GenericBeanDefinition clientDef=new GenericBeanDefinition();
  clientDef.setBeanClass(JaxWsPortProxyFactoryBean.class);
  clientDef.getPropertyValues().addPropertyValue("wsdlDocumentUrl","http://localhost:9999/OrderService?wsdl");
  clientDef.getPropertyValues().addPropertyValue("namespaceUri","http://jaxws.remoting.springframework.org/");
  clientDef.getPropertyValues().addPropertyValue("username","juergen");
  clientDef.getPropertyValues().addPropertyValue("password","hoeller");
  clientDef.getPropertyValues().addPropertyValue("serviceName","OrderService");
  clientDef.getPropertyValues().addPropertyValue("serviceInterface",OrderService.class);
  clientDef.getPropertyValues().addPropertyValue("lookupServiceOnStartup",Boolean.FALSE);
  ac.registerBeanDefinition("client",clientDef);
  GenericBeanDefinition serviceFactoryDef=new GenericBeanDefinition();
  serviceFactoryDef.setBeanClass(LocalJaxWsServiceFactoryBean.class);
  serviceFactoryDef.getPropertyValues().addPropertyValue("wsdlDocumentUrl","http://localhost:9999/OrderService?wsdl");
  serviceFactoryDef.getPropertyValues().addPropertyValue("namespaceUri","http://jaxws.remoting.springframework.org/");
  serviceFactoryDef.getPropertyValues().addPropertyValue("serviceName","OrderService");
  ac.registerBeanDefinition("orderService",serviceFactoryDef);
  ac.registerBeanDefinition("accessor",new RootBeanDefinition(ServiceAccessor.class));
  AnnotationConfigUtils.registerAnnotationConfigProcessors(ac);
  try {
    ac.refresh();
    OrderService orderService=(OrderService)ac.getBean("client",OrderService.class);
    assertTrue(orderService instanceof BindingProvider);
    ((BindingProvider)orderService).getRequestContext();
    String order=orderService.getOrder(1000);
    assertEquals("order 1000",order);
    try {
      orderService.getOrder(0);
      fail("Should have thrown OrderNotFoundException");
    }
 catch (    OrderNotFoundException ex) {
    }
    ServiceAccessor serviceAccessor=(ServiceAccessor)ac.getBean("accessor",ServiceAccessor.class);
    order=serviceAccessor.orderService.getOrder(1000);
    assertEquals("order 1000",order);
    try {
      serviceAccessor.orderService.getOrder(0);
      fail("Should have thrown OrderNotFoundException");
    }
 catch (    OrderNotFoundException ex) {
    }
  }
 catch (  BeanCreationException ex) {
    if ("exporter".equals(ex.getBeanName()) && ex.getRootCause() instanceof ClassNotFoundException) {
    }
 else {
      throw ex;
    }
  }
 finally {
    ac.close();
  }
}
